/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:24:54 GMT 2018
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.format.DateTimeFormatter;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.field.DecoratedDurationField;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.DelegatedDurationField;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.field.StrictDateTimeField;
import org.joda.time.field.ZeroIsMaxDateTimeField;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseDateTimeField_ESTest extends BaseDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-15), (-15), 23118750);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals((-15), offsetDateTimeField0.getMinimumValue());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = new Integer(23118750);
      assertEquals(23118750, long0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = offsetDateTimeField0.getMaximumTextLength(locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(7, int0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals((-15), offsetDateTimeField0.getMinimumValue());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      
      int int1 = offsetDateTimeField0.getMinimumValue((long) 1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals((-15), int1);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals((-15), offsetDateTimeField0.getMinimumValue());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      
      String string0 = buddhistChronology0.toString();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("BuddhistChronology[America/Recife]", string0);
      assertNotNull(string0);
      
      Locale locale1 = Locale.ROOT;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = offsetDateTimeField0.getAsText(401, locale1);
      assertNotSame(locale1, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("401", string1);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals((-15), offsetDateTimeField0.getMinimumValue());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotNull(string1);
      
      long long1 = offsetDateTimeField0.roundHalfCeiling(3311L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertEquals((-378680400000L), long1);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals((-15), offsetDateTimeField0.getMinimumValue());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 5);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(5, remainderDateTimeField0.getDivisor());
      assertEquals("secondOfMinute", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(4, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(remainderDateTimeField0);
      
      long long2 = remainderDateTimeField0.roundFloor(1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals((-378680400000L), long2);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(5, remainderDateTimeField0.getDivisor());
      assertEquals("secondOfMinute", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(4, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      
      DurationField durationField0 = remainderDateTimeField0.getLeapDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(5, remainderDateTimeField0.getDivisor());
      assertEquals("secondOfMinute", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(4, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNull(durationField0);
      
      MockDate mockDate0 = new MockDate(31, 1, 93, 1000, 1000);
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      assertEquals("Mon Jun 15 08:40:00 GMT 1931", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(102);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals("Mon Jun 15 08:40:00 GMT 1931", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      
      Duration duration0 = Duration.millis(23118750);
      assertEquals(6L, duration0.getStandardHours());
      assertEquals(23118750L, duration0.getMillis());
      assertEquals(385L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(23118L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      LocalDateTime localDateTime2 = localDateTime1.withDurationAdded(duration0, 90);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertEquals("Mon Jun 15 08:40:00 GMT 1931", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(6L, duration0.getStandardHours());
      assertEquals(23118750L, duration0.getMillis());
      assertEquals(385L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(23118L, duration0.getStandardSeconds());
      assertEquals(4, localDateTime2.size());
      assertNotNull(localDateTime2);
      
      LocalTime localTime0 = localDateTime2.toLocalTime();
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertEquals("Mon Jun 15 08:40:00 GMT 1931", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(6L, duration0.getStandardHours());
      assertEquals(23118750L, duration0.getMillis());
      assertEquals(385L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(23118L, duration0.getStandardSeconds());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalTime localTime1 = localTime0.minusSeconds(1000);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertEquals("Mon Jun 15 08:40:00 GMT 1931", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(6L, duration0.getStandardHours());
      assertEquals(23118750L, duration0.getMillis());
      assertEquals(385L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(23118L, duration0.getStandardSeconds());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertNotNull(localTime1);
      
      String string2 = remainderDateTimeField0.getAsText((ReadablePartial) localTime1, 1, locale0);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(locale0, locale1);
      assertNotSame(localTime1, localTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("1", string2);
      assertEquals("Mon Jun 15 08:40:00 GMT 1931", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(6L, duration0.getStandardHours());
      assertEquals(23118750L, duration0.getMillis());
      assertEquals(385L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(23118L, duration0.getStandardSeconds());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localTime0.size());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(4, localTime1.size());
      assertEquals(5, remainderDateTimeField0.getDivisor());
      assertEquals("secondOfMinute", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(4, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(string2);
      
      DurationField durationField1 = offsetDateTimeField0.getLeapDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals((-15), offsetDateTimeField0.getMinimumValue());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertNull(durationField1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertNotNull(preciseDurationField0);
      
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(preciseDurationField0, durationFieldType0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertNotNull(decoratedDurationField0);
      
      String string0 = preciseDurationField0.toString();
      assertEquals("DurationField[hours]", string0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertNotNull(string0);
      
      DurationField durationField0 = decoratedDurationField0.getWrappedField();
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals(1L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertNotNull(durationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 2562;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 2562);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals(1L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundFloor(2562);
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(2562L, long0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals(1L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(remainderDateTimeField0, 2562);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals(1L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2562, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(5123, offsetDateTimeField0.getMaximumValue());
      assertEquals(2562, offsetDateTimeField0.getOffset());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      DurationField durationField1 = offsetDateTimeField0.getDurationField();
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals(1L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2562, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(5123, offsetDateTimeField0.getMaximumValue());
      assertEquals(2562, offsetDateTimeField0.getOffset());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertNotNull(durationField1);
      
      int int1 = offsetDateTimeField0.getMaximumValue();
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals(5123, int1);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals(1L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2562, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(5123, offsetDateTimeField0.getMaximumValue());
      assertEquals(2562, offsetDateTimeField0.getOffset());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(2, yearMonth0.size());
      assertEquals(2512, yearMonth0.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      
      YearMonth yearMonth1 = yearMonth0.minusMonths(1);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(2, yearMonth0.size());
      assertEquals(2512, yearMonth0.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(11, yearMonth1.getMonthOfYear());
      assertEquals(2512, yearMonth1.getYear());
      assertEquals(2, yearMonth1.size());
      assertNotNull(yearMonth1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      boolean boolean0 = remainderDateTimeField0.isLenient();
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(boolean0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals(1L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      
      int int2 = remainderDateTimeField0.getMinimumValue((ReadablePartial) yearMonth1, intArray0);
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertEquals(3, intArray0.length);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(0, int2);
      assertArrayEquals(new int[] {1, 1, 1}, intArray0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals(1L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2, yearMonth0.size());
      assertEquals(2512, yearMonth0.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(11, yearMonth1.getMonthOfYear());
      assertEquals(2512, yearMonth1.getYear());
      assertEquals(2, yearMonth1.size());
      
      Locale locale0 = null;
      String string1 = offsetDateTimeField0.getAsShortText((-523), (Locale) null);
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-523", string1);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals(1L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2562, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(5123, offsetDateTimeField0.getMaximumValue());
      assertEquals(2562, offsetDateTimeField0.getOffset());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertNotNull(string1);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-516);
      intArray1[1] = 5123;
      intArray1[2] = 5123;
      intArray1[3] = 1;
      intArray1[4] = 0;
      intArray1[5] = 1;
      intArray1[6] = 0;
      intArray1[7] = 1;
      int int3 = offsetDateTimeField0.getMinimumValue((ReadablePartial) yearMonth0, intArray1);
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(yearMonth0, yearMonth1);
      assertEquals(8, intArray1.length);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertEquals(2562, int3);
      assertArrayEquals(new int[] {(-516), 5123, 5123, 1, 0, 1, 0, 1}, intArray1);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals(1L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2562, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(5123, offsetDateTimeField0.getMaximumValue());
      assertEquals(2562, offsetDateTimeField0.getOffset());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals(2, yearMonth0.size());
      assertEquals(2512, yearMonth0.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
      
      PreciseDateTimeField preciseDateTimeField0 = null;
      try {
        preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, durationField1, preciseDurationField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The effective range must be at least 2
         //
         verifyException("org.joda.time.field.PreciseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2272);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("dayOfMonth", remainderDateTimeField0.getName());
      assertEquals(2272, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2271, remainderDateTimeField0.getMaximumValue());
      assertNotNull(remainderDateTimeField0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertNotNull(monthDay0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1664);
      intArray0[4] = 1000;
      MonthDay monthDay1 = monthDay0.plusDays((-1664));
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay1.size());
      assertEquals(7, monthDay1.getMonthOfYear());
      assertEquals(29, monthDay1.getDayOfMonth());
      assertNotNull(monthDay1);
      
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1886;
      intArray0[8] = 1;
      int[] intArray1 = remainderDateTimeField0.addWrapField((ReadablePartial) monthDay0, 1, intArray0, 0);
      assertSame(intArray1, intArray0);
      assertNotSame(monthDay0, monthDay1);
      assertSame(intArray0, intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertArrayEquals(new int[] {1, 0, 0, (-1664), 1000, 1, 1, 1886, 1}, intArray1);
      assertArrayEquals(new int[] {1, 0, 0, (-1664), 1000, 1, 1, 1886, 1}, intArray0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("dayOfMonth", remainderDateTimeField0.getName());
      assertEquals(2272, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2271, remainderDateTimeField0.getMaximumValue());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertNotNull(intArray1);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-128640), dividedDateTimeField0.getMinimumValue());
      assertEquals(128644, dividedDateTimeField0.getMaximumValue());
      assertEquals(2272, dividedDateTimeField0.getDivisor());
      assertEquals("dayOfMonth", dividedDateTimeField0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("dayOfMonth", remainderDateTimeField0.getName());
      assertEquals(2272, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2271, remainderDateTimeField0.getMaximumValue());
      assertNotNull(dividedDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-3322));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertEquals((-292271833), offsetDateTimeField0.getMinimumValue());
      assertEquals(292276214, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-3322), offsetDateTimeField0.getOffset());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfFloor((-3322));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-259200000L), long0);
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertEquals((-292271833), offsetDateTimeField0.getMinimumValue());
      assertEquals(292276214, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-3322), offsetDateTimeField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(69);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      int int0 = offsetDateTimeField0.getMaximumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(292279537, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      
      DurationField durationField0 = offsetDateTimeField0.getLeapDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(durationField0);
      
      boolean boolean0 = offsetDateTimeField0.isSupported();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      
      int int1 = new Integer(292279537);
      assertTrue(int1 == int0);
      assertEquals(292279537, int1);
      
      int int2 = offsetDateTimeField0.getDifference(1520L, 0L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 292279537);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(292279536, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(292279537, remainderDateTimeField0.getDivisor());
      assertEquals("centuryOfEra", remainderDateTimeField0.getName());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.add(4176L, 585);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(18460828804176L, long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(292279536, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(292279537, remainderDateTimeField0.getDivisor());
      assertEquals("centuryOfEra", remainderDateTimeField0.getName());
      
      long long1 = remainderDateTimeField0.roundHalfEven(30L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertEquals((-69L), long1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(292279536, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(292279537, remainderDateTimeField0.getDivisor());
      assertEquals("centuryOfEra", remainderDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertNotNull(preciseDurationField0);
      
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(preciseDurationField0, durationFieldType0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertNotNull(decoratedDurationField0);
      
      String string0 = preciseDurationField0.toString();
      assertEquals("DurationField[hours]", string0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertNotNull(string0);
      
      DurationField durationField0 = decoratedDurationField0.getWrappedField();
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertTrue(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertEquals("hours", durationField0.getName());
      assertNotNull(durationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 2562;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 2562);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertTrue(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertEquals("hours", durationField0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundFloor(2562);
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(2562L, long0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertTrue(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertEquals("hours", durationField0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      
      boolean boolean0 = dateTimeFieldType0.isSupported(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(boolean0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(remainderDateTimeField0, 2562);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertTrue(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertEquals("hours", durationField0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2562, offsetDateTimeField0.getMinimumValue());
      assertEquals(5123, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2562, offsetDateTimeField0.getOffset());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      DurationField durationField1 = offsetDateTimeField0.getDurationField();
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertTrue(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertEquals("hours", durationField0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2562, offsetDateTimeField0.getMinimumValue());
      assertEquals(5123, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2562, offsetDateTimeField0.getOffset());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertNotNull(durationField1);
      
      int int1 = offsetDateTimeField0.getMaximumValue();
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals(5123, int1);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertTrue(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertEquals("hours", durationField0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2562, offsetDateTimeField0.getMinimumValue());
      assertEquals(5123, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2562, offsetDateTimeField0.getOffset());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(2512, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      
      YearMonth yearMonth1 = yearMonth0.minusMonths(1);
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth0, yearMonth1);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(2, yearMonth1.size());
      assertEquals(11, yearMonth1.getMonthOfYear());
      assertEquals(2512, yearMonth1.getYear());
      assertEquals(2512, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth1);
      
      Interval interval0 = yearMonth1.toInterval();
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth0, yearMonth1);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertEquals(2, yearMonth1.size());
      assertEquals(11, yearMonth1.getMonthOfYear());
      assertEquals(2512, yearMonth1.getYear());
      assertEquals((-2667600000L), interval0.getEndMillis());
      assertEquals((-5259600000L), interval0.getStartMillis());
      assertEquals(2512, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertNotNull(interval0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      int int2 = remainderDateTimeField0.getMinimumValue((ReadablePartial) yearMonth1, intArray0);
      assertNotSame(yearMonth1, yearMonth0);
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertNotSame(yearMonth0, yearMonth1);
      assertEquals(3, intArray0.length);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertEquals(0, int2);
      assertArrayEquals(new int[] {1, 1, 1}, intArray0);
      assertEquals(2, yearMonth1.size());
      assertEquals(11, yearMonth1.getMonthOfYear());
      assertEquals(2512, yearMonth1.getYear());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertTrue(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertEquals("hours", durationField0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2512, yearMonth0.getYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(12, yearMonth0.getMonthOfYear());
      
      Locale locale0 = null;
      String string1 = offsetDateTimeField0.getAsShortText((-523), (Locale) null);
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-523", string1);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertTrue(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertEquals("hours", durationField0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2562, offsetDateTimeField0.getMinimumValue());
      assertEquals(5123, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2562, offsetDateTimeField0.getOffset());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertNotNull(string1);
      
      PreciseDateTimeField preciseDateTimeField0 = null;
      try {
        preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, durationField1, preciseDurationField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The effective range must be at least 2
         //
         verifyException("org.joda.time.field.PreciseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(69);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      int int0 = offsetDateTimeField0.getMaximumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(292279537, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      
      DurationField durationField0 = offsetDateTimeField0.getLeapDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertNotNull(durationField0);
      
      boolean boolean0 = offsetDateTimeField0.isSupported();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      
      int int1 = offsetDateTimeField0.get(0L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals(2514, int1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      
      DurationField durationField1 = offsetDateTimeField0.getRangeDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertNull(durationField1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(69);
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals("year", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      int int0 = offsetDateTimeField0.getMaximumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(292279537, int0);
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals("year", offsetDateTimeField0.getName());
      
      DurationField durationField0 = offsetDateTimeField0.getLeapDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals("year", offsetDateTimeField0.getName());
      assertNotNull(durationField0);
      
      boolean boolean0 = offsetDateTimeField0.isSupported();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(boolean0);
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals("year", offsetDateTimeField0.getName());
      
      int int1 = offsetDateTimeField0.get(0L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals(2514, int1);
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals("year", offsetDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 2514);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(2513, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2514, remainderDateTimeField0.getDivisor());
      assertEquals("centuryOfEra", remainderDateTimeField0.getName());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundHalfEven(30L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-69L), long0);
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(2513, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2514, remainderDateTimeField0.getDivisor());
      assertEquals("centuryOfEra", remainderDateTimeField0.getName());
      
      long long1 = remainderDateTimeField0.getDifferenceAsLong(2514, 0L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(2513, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2514, remainderDateTimeField0.getDivisor());
      assertEquals("centuryOfEra", remainderDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = offsetDateTimeField0.getType();
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("year", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2259);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("dayOfMonth", remainderDateTimeField0.getName());
      assertEquals(2258, remainderDateTimeField0.getMaximumValue());
      assertEquals(2259, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNotNull(remainderDateTimeField0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertNotNull(monthDay0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1664);
      intArray0[4] = 1000;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1886;
      intArray0[8] = 1;
      int[] intArray1 = remainderDateTimeField0.addWrapField((ReadablePartial) monthDay0, 1, intArray0, 0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertArrayEquals(new int[] {1, 0, 0, (-1664), 1000, 1, 1, 1886, 1}, intArray1);
      assertArrayEquals(new int[] {1, 0, 0, (-1664), 1000, 1, 1, 1886, 1}, intArray0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("dayOfMonth", remainderDateTimeField0.getName());
      assertEquals(2258, remainderDateTimeField0.getMaximumValue());
      assertEquals(2259, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertNotNull(intArray1);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("dayOfMonth", dividedDateTimeField0.getName());
      assertEquals(129384, dividedDateTimeField0.getMaximumValue());
      assertEquals(2259, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals((-129380), dividedDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("dayOfMonth", remainderDateTimeField0.getName());
      assertEquals(2258, remainderDateTimeField0.getMaximumValue());
      assertEquals(2259, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNotNull(dividedDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-3322));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-292271833), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-3322), offsetDateTimeField0.getOffset());
      assertEquals(292276214, offsetDateTimeField0.getMaximumValue());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfFloor((-3322));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-259200000L), long0);
      assertEquals((-292271833), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-3322), offsetDateTimeField0.getOffset());
      assertEquals(292276214, offsetDateTimeField0.getMaximumValue());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      
      Locale locale0 = new Locale("org/joda/time/tz/data", "");
      assertEquals("org/joda/time/tz/data", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("org/joda/time/tz/data", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = dividedDateTimeField0.getAsText((ReadablePartial) monthDay0, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals("14", string0);
      assertEquals("dayOfMonth", dividedDateTimeField0.getName());
      assertEquals(129384, dividedDateTimeField0.getMaximumValue());
      assertEquals(2259, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals((-129380), dividedDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("dayOfMonth", remainderDateTimeField0.getName());
      assertEquals(2258, remainderDateTimeField0.getMaximumValue());
      assertEquals(2259, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("org/joda/time/tz/data", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("org/joda/time/tz/data", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = locale0.getScript();
      assertEquals("", string0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(string0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeField0);
      
      MonthDay monthDay0 = new MonthDay();
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      MonthDay monthDay1 = monthDay0.plusDays(1);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(15, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertNotNull(monthDay1);
      
      Hours hours0 = Hours.ONE;
      assertEquals(1, hours0.size());
      assertEquals(1, hours0.getHours());
      assertNotNull(hours0);
      
      MonthDay monthDay2 = monthDay1.plus(hours0);
      assertNotSame(monthDay0, monthDay2);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay2);
      assertNotSame(monthDay1, monthDay0);
      assertNotSame(monthDay2, monthDay0);
      assertNotSame(monthDay2, monthDay1);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertFalse(monthDay2.equals((Object)monthDay0));
      assertTrue(monthDay2.equals((Object)monthDay1));
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(15, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(1, hours0.size());
      assertEquals(1, hours0.getHours());
      assertEquals(2, monthDay2.getMonthOfYear());
      assertEquals(15, monthDay2.getDayOfMonth());
      assertEquals(2, monthDay2.size());
      assertNotNull(monthDay2);
      
      DateTimeFieldType dateTimeFieldType0 = monthDay2.getFieldType(1);
      assertNotSame(monthDay0, monthDay2);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay2);
      assertNotSame(monthDay1, monthDay0);
      assertNotSame(monthDay2, monthDay0);
      assertNotSame(monthDay2, monthDay1);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(monthDay0.equals((Object)monthDay2));
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertTrue(monthDay1.equals((Object)monthDay2));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertFalse(monthDay2.equals((Object)monthDay0));
      assertTrue(monthDay2.equals((Object)monthDay1));
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(15, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(1, hours0.size());
      assertEquals(1, hours0.getHours());
      assertEquals(2, monthDay2.getMonthOfYear());
      assertEquals(15, monthDay2.getDayOfMonth());
      assertEquals(2, monthDay2.size());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-1));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(monthDay0.equals((Object)monthDay2));
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertTrue(monthDay1.equals((Object)monthDay2));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertFalse(monthDay2.equals((Object)monthDay0));
      assertTrue(monthDay2.equals((Object)monthDay1));
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertEquals(15, monthDay1.getDayOfMonth());
      assertEquals(2, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(1, hours0.size());
      assertEquals(1, hours0.getHours());
      assertEquals(2, monthDay2.getMonthOfYear());
      assertEquals(15, monthDay2.getDayOfMonth());
      assertEquals(2, monthDay2.size());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(99, offsetDateTimeField0.getMaximumValue());
      assertEquals((-1), offsetDateTimeField0.getOffset());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((long) 1, "G@0 7j$HE:i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"G@0 7j$HE:i\" for dayOfMonth is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)90;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)25, (byte)2, (byte) (-23), (byte)10, (byte)31, (byte)1, (byte)90}, byteArray0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-15), 0, 23118750);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfCeiling(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-378680400000L), long0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = offsetDateTimeField0.getAsText(1712L, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("11", string0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(string0);
      
      int int0 = offsetDateTimeField0.getMinimumValue((long) 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, int0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      
      Locale locale1 = Locale.ROOT;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      String string1 = offsetDateTimeField0.getAsText(401, locale1);
      assertNotSame(locale1, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("401", string1);
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertNotNull(string1);
      
      long long1 = offsetDateTimeField0.roundCeiling((byte)1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertEquals(2777079600000L, long1);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals((-15), offsetDateTimeField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("millisOfDay", delegatedDateTimeField0.getName());
      assertNotNull(delegatedDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(delegatedDateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("millisOfDay", delegatedDateTimeField0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      long long0 = zeroIsMaxDateTimeField0.roundHalfEven(31795199063L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(31795199063L, long0);
      assertEquals("millisOfDay", delegatedDateTimeField0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      
      int int0 = zeroIsMaxDateTimeField0.get(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(75600001, int0);
      assertEquals("millisOfDay", delegatedDateTimeField0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      
      long long1 = zeroIsMaxDateTimeField0.add((-1303L), 1000000000L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertEquals(999998697L, long1);
      assertEquals("millisOfDay", delegatedDateTimeField0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance();
      assertSame(buddhistChronology1, buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      DurationField durationField0 = buddhistChronology1.hours();
      assertSame(buddhistChronology1, buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(durationField0);
      
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField((RemainderDateTimeField) null, durationField0, dateTimeFieldType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2272);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(2272, remainderDateTimeField0.getDivisor());
      assertEquals("dayOfMonth", remainderDateTimeField0.getName());
      assertEquals(2271, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(remainderDateTimeField0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1664);
      intArray0[3] = 1000;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1886;
      intArray0[8] = 1;
      int[] intArray1 = remainderDateTimeField0.addWrapField((ReadablePartial) monthDay0, 1, intArray0, 0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertArrayEquals(new int[] {1, 0, 0, 1000, 0, 1, 1, 1886, 1}, intArray1);
      assertArrayEquals(new int[] {1, 0, 0, 1000, 0, 1, 1, 1886, 1}, intArray0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(2272, remainderDateTimeField0.getDivisor());
      assertEquals("dayOfMonth", remainderDateTimeField0.getName());
      assertEquals(2271, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertNotNull(intArray1);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(128644, dividedDateTimeField0.getMaximumValue());
      assertEquals("dayOfMonth", dividedDateTimeField0.getName());
      assertEquals((-128640), dividedDateTimeField0.getMinimumValue());
      assertEquals(2272, dividedDateTimeField0.getDivisor());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(2272, remainderDateTimeField0.getDivisor());
      assertEquals("dayOfMonth", remainderDateTimeField0.getName());
      assertEquals(2271, remainderDateTimeField0.getMaximumValue());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(dividedDateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-3322));
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-3322), offsetDateTimeField0.getOffset());
      assertEquals((-292271833), offsetDateTimeField0.getMinimumValue());
      assertEquals(292276214, offsetDateTimeField0.getMaximumValue());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfFloor((-3322));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-259200000L), long0);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-3322), offsetDateTimeField0.getOffset());
      assertEquals((-292271833), offsetDateTimeField0.getMinimumValue());
      assertEquals(292276214, offsetDateTimeField0.getMaximumValue());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) null);
      assertFalse(list0.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.getAsShortText((ReadablePartial) monthDay0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyear' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-15), 0, 23118750);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfCeiling(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-378680400000L), long0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      
      int int0 = offsetDateTimeField0.getMinimumValue((long) 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, int0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = offsetDateTimeField0.getAsText(401, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("401", string0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string0);
      
      long long1 = offsetDateTimeField0.roundHalfCeiling(3271L);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(long1 == long0);
      assertEquals((-378680400000L), long1);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals((-15), offsetDateTimeField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(buddhistChronology0, dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertNotNull(skipDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = skipDateTimeField0.getType();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(12, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNotNull(offsetDateTimeField0);
      
      LocalDate localDate0 = new LocalDate(1, 1, 1);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Date date0 = localDate0.toDate();
      assertEquals(3, localDate0.size());
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
      assertNotNull(date0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      assertEquals(3, localDate0.size());
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusMillis(1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(3, localDate0.size());
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      
      int[] intArray0 = new int[6];
      boolean boolean0 = localDate0.isSupported(dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(boolean0);
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(3, localDate0.size());
      
      intArray0[0] = 1;
      intArray0[1] = 2803;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      int int0 = offsetDateTimeField0.getMaximumValue((ReadablePartial) localDateTime1, intArray0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(6, intArray0.length);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(12, int0);
      assertArrayEquals(new int[] {1, 2803, 1, 1, 1, 1}, intArray0);
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(12, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      int int1 = offsetDateTimeField0.getOffset();
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(12, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      
      long long0 = offsetDateTimeField0.roundFloor((-3077L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-3600000L), long0);
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(12, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      
      boolean boolean1 = dateTimeFieldType0.isSupported(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      long long1 = offsetDateTimeField0.getDifferenceAsLong(2678399999L, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertEquals(743L, long1);
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(12, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((-3600000L), "gBHW_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"gBHW_\" for hourOfHalfday is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("yearOfCentury", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfEven(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0L, long0);
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("yearOfCentury", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      
      int int0 = new Integer(1);
      assertEquals(1, int0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(buddhistChronology0, dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertNotNull(skipDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = skipDateTimeField0.getType();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(12, offsetDateTimeField0.getMaximumValue());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertNotNull(offsetDateTimeField0);
      
      LocalDate localDate0 = new LocalDate(1, 1, 1);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Date date0 = localDate0.toDate();
      assertEquals(3, localDate0.size());
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
      assertNotNull(date0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      assertEquals(3, localDate0.size());
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusMillis(1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(3, localDate0.size());
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      int int0 = localDateTime1.getWeekOfWeekyear();
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(1, int0);
      assertEquals(3, localDate0.size());
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      intArray0[1] = 2803;
      intArray0[2] = 1;
      intArray0[0] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      int int1 = offsetDateTimeField0.getMaximumValue((ReadablePartial) localDateTime1, intArray0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(6, intArray0.length);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(12, int1);
      assertArrayEquals(new int[] {1, 2803, 1, 0, 1, 1}, intArray0);
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(12, offsetDateTimeField0.getMaximumValue());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      int int2 = offsetDateTimeField0.getOffset();
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(12, offsetDateTimeField0.getMaximumValue());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      
      long long0 = offsetDateTimeField0.roundFloor((-3077L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-3600000L), long0);
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(12, offsetDateTimeField0.getMaximumValue());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      
      boolean boolean0 = dateTimeFieldType0.isSupported(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(boolean0);
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      int int3 = offsetDateTimeField0.getMinimumValue((ReadablePartial) localDate0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(12, offsetDateTimeField0.getMaximumValue());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((-3600000L), "gBHW_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"gBHW_\" for hourOfHalfday is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology1);
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(islamicChronology1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 0, 15356250);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", offsetDateTimeField0.getName());
      assertEquals(86400, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      int int0 = offsetDateTimeField0.getMaximumValue();
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(86400, int0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", offsetDateTimeField0.getName());
      assertEquals(86400, offsetDateTimeField0.getMaximumValue());
      
      long long0 = offsetDateTimeField0.add((long) 0, (-831L));
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-831000L), long0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", offsetDateTimeField0.getName());
      assertEquals(86400, offsetDateTimeField0.getMaximumValue());
      
      int int1 = offsetDateTimeField0.getMaximumValue((-902L));
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(int1 == int0);
      assertEquals(86400, int1);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", offsetDateTimeField0.getName());
      assertEquals(86400, offsetDateTimeField0.getMaximumValue());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 9;
      intArray0[3] = 1;
      intArray0[4] = 86400;
      intArray0[5] = 9;
      intArray0[6] = (-2366);
      intArray0[7] = 86400;
      int int2 = offsetDateTimeField0.getMinimumValue();
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", offsetDateTimeField0.getName());
      assertEquals(86400, offsetDateTimeField0.getMaximumValue());
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapPartial((ReadablePartial) null, 9, intArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      int int0 = zeroIsMaxDateTimeField0.getMinimumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, int0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(buddhistChronology0, dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("weekyearOfCentury", skipUndoDateTimeField0.getName());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertNotNull(skipUndoDateTimeField0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = skipUndoDateTimeField0.getAsText((long) 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("14", string0);
      assertEquals("weekyearOfCentury", skipUndoDateTimeField0.getName());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertNotNull(string0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(skipUndoDateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", skipUndoDateTimeField0.getName());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("dayOfWeek", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      long long0 = zeroIsMaxDateTimeField0.roundHalfFloor(937L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-259200000L), long0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", skipUndoDateTimeField0.getName());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("dayOfWeek", zeroIsMaxDateTimeField0.getName());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      YearMonth yearMonth0 = new YearMonth();
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      
      long long0 = (-3322L);
      long long1 = buddhistChronology0.set(yearMonth0, (-3322L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertFalse(long1 == long0);
      assertEquals((-15741043203322L), long1);
      assertEquals(2, yearMonth0.size());
      assertEquals(2014, yearMonth0.getYear());
      assertEquals(2, yearMonth0.getMonthOfYear());
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wm+>]>89[f/u");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals(13, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("clockhourOfHalfday", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      long long2 = offsetDateTimeField0.add(10800000L, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(14400000L, long2);
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals(13, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("clockhourOfHalfday", offsetDateTimeField0.getName());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      long long3 = offsetDateTimeField0.roundFloor(1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertEquals(0L, long3);
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals(13, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("clockhourOfHalfday", offsetDateTimeField0.getName());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long4 = offsetDateTimeField0.roundHalfCeiling(1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(long4 == long3);
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertEquals(0L, long4);
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals(13, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("clockhourOfHalfday", offsetDateTimeField0.getName());
      
      String string0 = offsetDateTimeField0.toString();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("DateTimeField[clockhourOfHalfday]", string0);
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals(13, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("clockhourOfHalfday", offsetDateTimeField0.getName());
      assertNotNull(string0);
      
      long long5 = offsetDateTimeField0.getDifferenceAsLong(1, 0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long5 == long1);
      assertFalse(long5 == long0);
      assertTrue(long5 == long4);
      assertFalse(long5 == long2);
      assertTrue(long5 == long3);
      assertEquals(0L, long5);
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals(13, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("clockhourOfHalfday", offsetDateTimeField0.getName());
      
      String string1 = offsetDateTimeField0.getAsText((-539), (Locale) null);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-539", string1);
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertEquals(13, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("clockhourOfHalfday", offsetDateTimeField0.getName());
      assertNotNull(string1);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        offsetDateTimeField0.add((ReadablePartial) yearMonth0, 1, intArray0, (-539));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(",nQ}nD:8g]");
      assertNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("weekyearOfCentury", offsetDateTimeField0.getName());
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = 0L;
      int int0 = offsetDateTimeField0.getDifference(0L, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, int0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("weekyearOfCentury", offsetDateTimeField0.getName());
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      
      DurationField durationField0 = offsetDateTimeField0.getLeapDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("weekyearOfCentury", offsetDateTimeField0.getName());
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNull(durationField0);
      
      String string0 = offsetDateTimeField0.getName();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("weekyearOfCentury", string0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("weekyearOfCentury", offsetDateTimeField0.getName());
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(string0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      
      LocalDateTime localDateTime2 = localDateTime1.plusYears(0);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertNotNull(localDateTime2);
      
      LocalDateTime localDateTime3 = localDateTime1.minusMinutes((-316));
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime3.size());
      assertNotNull(localDateTime3);
      
      DateTimeZone.setProvider(uTCProvider0);
      String string1 = "DNL{DJd>+yK|h";
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.convertText("hk(?<*+", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"hk(?<*+\" for weekyearOfCentury is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      MonthDay monthDay0 = new MonthDay();
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertNotNull(monthDay0);
      
      MonthDay monthDay1 = monthDay0.minusMonths((-1));
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(3, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(14, monthDay1.getDayOfMonth());
      assertNotNull(monthDay1);
      
      DateTimeFieldType dateTimeFieldType0 = monthDay1.getFieldType(0);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertFalse(monthDay0.equals((Object)monthDay1));
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(3, monthDay1.getMonthOfYear());
      assertEquals(2, monthDay1.size());
      assertEquals(14, monthDay1.getDayOfMonth());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = null;
      try {
        offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 0, 0, (-2798));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offset cannot be zero
         //
         verifyException("org.joda.time.field.OffsetDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", timeZone0.getID());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(0, timeZone0.getRawOffset());
      assertEquals(0, timeZone0.getDSTSavings());
      assertNotNull(timeZone0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeField0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(buddhistChronology0, dateTimeField0, (-1521));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("dayOfMonth", skipUndoDateTimeField0.getName());
      assertEquals(1, skipUndoDateTimeField0.getMinimumValue());
      assertNotNull(skipUndoDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = skipUndoDateTimeField0.getType();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("dayOfMonth", skipUndoDateTimeField0.getName());
      assertEquals(1, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-1521), (-530), 1021);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("dayOfMonth", skipUndoDateTimeField0.getName());
      assertEquals(1, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-1521), offsetDateTimeField0.getOffset());
      assertEquals((-1490), offsetDateTimeField0.getMaximumValue());
      assertEquals((-530), offsetDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfFloor((-885L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("dayOfMonth", skipUndoDateTimeField0.getName());
      assertEquals(1, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals((-1521), offsetDateTimeField0.getOffset());
      assertEquals((-1490), offsetDateTimeField0.getMaximumValue());
      assertEquals((-530), offsetDateTimeField0.getMinimumValue());
      assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(826);
      assertEquals("+00:00:00.826", dateTimeZone0.toString());
      assertEquals("+00:00:00.826", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("+00:00:00.826", dateTimeZone0.toString());
      assertEquals("+00:00:00.826", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("+00:00:00.826", dateTimeZone0.toString());
      assertEquals("+00:00:00.826", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 15356250);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("+00:00:00.826", dateTimeZone0.toString());
      assertEquals("+00:00:00.826", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals((-20), dividedDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", dividedDateTimeField0.getName());
      assertEquals(15356250, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertNotNull(dividedDateTimeField0);
      
      Months months0 = Months.ELEVEN;
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertNotNull(months0);
      
      Months months1 = months0.plus(15356250);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertFalse(months1.equals((Object)months0));
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(15356261, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) months1, 3274L);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, intArray0.length);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals("+00:00:00.826", dateTimeZone0.toString());
      assertEquals("+00:00:00.826", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(15356261, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(intArray0);
      
      DurationField durationField0 = buddhistChronology0.hours();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("+00:00:00.826", dateTimeZone0.toString());
      assertEquals("+00:00:00.826", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(durationField0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, durationField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("+00:00:00.826", dateTimeZone0.toString());
      assertEquals("+00:00:00.826", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals((-20), dividedDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", dividedDateTimeField0.getName());
      assertEquals(15356250, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(15356249, remainderDateTimeField0.getMaximumValue());
      assertEquals(15356250, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundHalfFloor(15356250);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-826L), long0);
      assertEquals("+00:00:00.826", dateTimeZone0.toString());
      assertEquals("+00:00:00.826", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals((-20), dividedDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", dividedDateTimeField0.getName());
      assertEquals(15356250, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(15356249, remainderDateTimeField0.getMaximumValue());
      assertEquals(15356250, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      
      String string0 = dividedDateTimeField0.getAsShortText((-2186L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("0", string0);
      assertEquals("+00:00:00.826", dateTimeZone0.toString());
      assertEquals("+00:00:00.826", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals((-20), dividedDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", dividedDateTimeField0.getName());
      assertEquals(15356250, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertNotNull(string0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = remainderDateTimeField0.getAsShortText((-867L), locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(string1.equals((Object)string0));
      assertEquals("2512", string1);
      assertEquals("+00:00:00.826", dateTimeZone0.toString());
      assertEquals("+00:00:00.826", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals((-20), dividedDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", dividedDateTimeField0.getName());
      assertEquals(15356250, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(15356249, remainderDateTimeField0.getMaximumValue());
      assertEquals(15356250, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(string1);
      
      long long1 = dividedDateTimeField0.remainder(3274L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertEquals(3274L, long1);
      assertEquals("+00:00:00.826", dateTimeZone0.toString());
      assertEquals("+00:00:00.826", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals((-20), dividedDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", dividedDateTimeField0.getName());
      assertEquals(15356250, dividedDateTimeField0.getDivisor());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(19, dividedDateTimeField0.getMaximumValue());
      
      MonthDay monthDay0 = MonthDay.now((Chronology) buddhistChronology0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals("+00:00:00.826", dateTimeZone0.toString());
      assertEquals("+00:00:00.826", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(monthDay0);
      
      // Undeclared exception!
      try { 
        dividedDateTimeField0.set((ReadablePartial) monthDay0, (-564), intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -564
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(buddhistChronology0, dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertNotNull(skipDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = skipDateTimeField0.getType();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(12, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      LocalDate localDate0 = new LocalDate(1, 1, 1);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Date date0 = localDate0.toDate();
      assertEquals(3, localDate0.size());
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
      assertNotNull(date0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      assertEquals(3, localDate0.size());
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusMillis(1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(3, localDate0.size());
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 2803;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      int int0 = offsetDateTimeField0.getMaximumValue((ReadablePartial) localDateTime1, intArray0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(6, intArray0.length);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertEquals(12, int0);
      assertArrayEquals(new int[] {1, 2803, 1, 1, 1, 1}, intArray0);
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(12, offsetDateTimeField0.getMaximumValue());
      assertEquals(3, localDate0.size());
      assertEquals("Sat Jan 01 00:00:00 GMT 1", date0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      int int1 = offsetDateTimeField0.getOffset();
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(12, offsetDateTimeField0.getMaximumValue());
      
      long long0 = offsetDateTimeField0.roundFloor((-3077L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-3600000L), long0);
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(12, offsetDateTimeField0.getMaximumValue());
      
      boolean boolean0 = dateTimeFieldType0.isSupported(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(boolean0);
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipDateTimeField0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((-3600000L), "gBHW_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"gBHW_\" for hourOfHalfday is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfEven(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-259200000L), long0);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      
      int int0 = offsetDateTimeField0.getDifference(485L, (-2234L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, int0);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals("weekyear", offsetDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfHalfday", delegatedDateTimeField0.getName());
      assertNotNull(delegatedDateTimeField0);
      
      DurationField durationField0 = delegatedDateTimeField0.getLeapDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfHalfday", delegatedDateTimeField0.getName());
      assertNull(durationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(delegatedDateTimeField0, (DurationField) null, dateTimeFieldType0, 1000);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfHalfday", delegatedDateTimeField0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(999, remainderDateTimeField0.getMaximumValue());
      assertEquals("millisOfSecond", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1000, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNotNull(remainderDateTimeField0);
      
      DateTimeField dateTimeField1 = dateTimeFieldType0.getField(buddhistChronology0);
      assertNotSame(dateTimeField1, dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertNotNull(dateTimeField1);
      
      int int0 = (-2146);
      // Undeclared exception!
      try { 
        remainderDateTimeField0.set((-1393L), (-2146));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2146 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-1396);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1396));
      assertEquals("-00:00:01.396", dateTimeZone0.getID());
      assertEquals("-00:00:01.396", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:01.396", dateTimeZone0.getID());
      assertEquals("-00:00:01.396", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:01.396", dateTimeZone0.getID());
      assertEquals("-00:00:01.396", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeField0);
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertEquals("-00:00:01.396", dateTimeZone0.getID());
      assertEquals("-00:00:01.396", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=-00:00:01.396,offset=-1396,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals("-00:00:01.396", timeZone0.getID());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals((-1396), timeZone0.getRawOffset());
      assertNotNull(timeZone0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-1396));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("-00:00:01.396", dateTimeZone0.getID());
      assertEquals("-00:00:01.396", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals((-1396), offsetDateTimeField0.getOffset());
      assertEquals("minuteOfDay", offsetDateTimeField0.getName());
      assertEquals((-1337), offsetDateTimeField0.getMaximumValue());
      assertEquals((-1396), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      int int1 = offsetDateTimeField0.getMinimumValue((long) (-1396));
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(int1 == int0);
      assertEquals((-1396), int1);
      assertEquals("-00:00:01.396", dateTimeZone0.getID());
      assertEquals("-00:00:01.396", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals((-1396), offsetDateTimeField0.getOffset());
      assertEquals("minuteOfDay", offsetDateTimeField0.getName());
      assertEquals((-1337), offsetDateTimeField0.getMaximumValue());
      assertEquals((-1396), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      
      MonthDay monthDay0 = new MonthDay();
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      long long0 = (-2611L);
      long long1 = buddhistChronology0.set(monthDay0, (-2611L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertFalse(long1 == long0);
      assertEquals((-27648002611L), long1);
      assertEquals("-00:00:01.396", dateTimeZone0.getID());
      assertEquals("-00:00:01.396", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(2, monthDay0.size());
      
      int int2 = offsetDateTimeField0.getOffset();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1396), int2);
      assertEquals("-00:00:01.396", dateTimeZone0.getID());
      assertEquals("-00:00:01.396", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals((-1396), offsetDateTimeField0.getOffset());
      assertEquals("minuteOfDay", offsetDateTimeField0.getName());
      assertEquals((-1337), offsetDateTimeField0.getMaximumValue());
      assertEquals((-1396), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(offsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("millisOfSecond", strictDateTimeField0.getName());
      assertFalse(strictDateTimeField0.isLenient());
      assertNotNull(strictDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(strictDateTimeField0, dateTimeFieldType0, (-285), (-285), (-285));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("millisOfSecond", strictDateTimeField0.getName());
      assertFalse(strictDateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals((-285), offsetDateTimeField0.getOffset());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals((-285), offsetDateTimeField0.getMaximumValue());
      assertEquals((-285), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      DurationField durationField0 = offsetDateTimeField0.getDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("millisOfSecond", strictDateTimeField0.getName());
      assertFalse(strictDateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals((-285), offsetDateTimeField0.getOffset());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals((-285), offsetDateTimeField0.getMaximumValue());
      assertEquals((-285), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(durationField0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(strictDateTimeField0, durationField0, dateTimeFieldType0, 1000);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("millisOfSecond", strictDateTimeField0.getName());
      assertFalse(strictDateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals((-285), offsetDateTimeField0.getOffset());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals((-285), offsetDateTimeField0.getMaximumValue());
      assertEquals((-285), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1000, dividedDateTimeField0.getDivisor());
      assertEquals("minuteOfHour", dividedDateTimeField0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertNotNull(dividedDateTimeField0);
      
      long long0 = dividedDateTimeField0.roundCeiling(1000);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1000L, long0);
      assertEquals("millisOfSecond", strictDateTimeField0.getName());
      assertFalse(strictDateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals((-285), offsetDateTimeField0.getOffset());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals((-285), offsetDateTimeField0.getMaximumValue());
      assertEquals((-285), offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(1000, dividedDateTimeField0.getDivisor());
      assertEquals("minuteOfHour", dividedDateTimeField0.getName());
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1182, 1182, 1182);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1182, offsetDateTimeField0.getMinimumValue());
      assertEquals(1182, offsetDateTimeField0.getMaximumValue());
      assertEquals(1182, offsetDateTimeField0.getOffset());
      assertNotNull(offsetDateTimeField0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      LocalDate localDate0 = new LocalDate((long) 1182, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.withYear(1182);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      
      LocalDate localDate2 = localDate1.minusWeeks(1);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertNotNull(localDate2);
      
      LocalDate localDate3 = localDate2.withFields(localDate0);
      assertNotSame(localDate0, localDate3);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate1, localDate3);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate3);
      assertNotSame(localDate3, localDate1);
      assertNotSame(localDate3, localDate2);
      assertNotSame(localDate3, localDate0);
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertTrue(localDate3.equals((Object)localDate0));
      assertFalse(localDate3.equals((Object)localDate1));
      assertFalse(localDate3.equals((Object)localDate2));
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals(3, localDate3.size());
      assertNotNull(localDate3);
      
      long long0 = dateTimeZone0.convertLocalToUTC(0L, false);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      LocalDate.Property localDate_Property0 = localDate1.dayOfYear();
      assertNotSame(localDate0, localDate3);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate1, localDate3);
      assertTrue(localDate0.equals((Object)localDate3));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate1.equals((Object)localDate3));
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate_Property0);
      
      int int0 = offsetDateTimeField0.getMaximumValue((ReadablePartial) localDate3);
      assertNotSame(localDate0, localDate3);
      assertNotSame(localDate0, localDate2);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate2);
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate1, localDate3);
      assertNotSame(localDate2, localDate1);
      assertNotSame(localDate2, localDate0);
      assertNotSame(localDate2, localDate3);
      assertNotSame(localDate3, localDate1);
      assertNotSame(localDate3, localDate2);
      assertNotSame(localDate3, localDate0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(localDate0.equals((Object)localDate3));
      assertFalse(localDate0.equals((Object)localDate2));
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate2));
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate1.equals((Object)localDate3));
      assertFalse(localDate2.equals((Object)localDate1));
      assertFalse(localDate2.equals((Object)localDate0));
      assertFalse(localDate2.equals((Object)localDate3));
      assertTrue(localDate3.equals((Object)localDate0));
      assertFalse(localDate3.equals((Object)localDate1));
      assertFalse(localDate3.equals((Object)localDate2));
      assertEquals(1182, int0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1182, offsetDateTimeField0.getMinimumValue());
      assertEquals(1182, offsetDateTimeField0.getMaximumValue());
      assertEquals(1182, offsetDateTimeField0.getOffset());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate2.size());
      assertEquals(3, localDate3.size());
      
      long long1 = offsetDateTimeField0.roundHalfCeiling(1182);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long1 == long0);
      assertEquals(10800000L, long1);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1182, offsetDateTimeField0.getMinimumValue());
      assertEquals(1182, offsetDateTimeField0.getMaximumValue());
      assertEquals(1182, offsetDateTimeField0.getOffset());
      
      long long2 = offsetDateTimeField0.roundHalfCeiling(1182);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(10800000L, long2);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1182, offsetDateTimeField0.getMinimumValue());
      assertEquals(1182, offsetDateTimeField0.getMaximumValue());
      assertEquals(1182, offsetDateTimeField0.getOffset());
      
      long long3 = offsetDateTimeField0.add((long) 1182, (-1L));
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertEquals((-43198818L), long3);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1182, offsetDateTimeField0.getMinimumValue());
      assertEquals(1182, offsetDateTimeField0.getMaximumValue());
      assertEquals(1182, offsetDateTimeField0.getOffset());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1182;
      intArray0[4] = 1182;
      intArray0[5] = (-1);
      intArray0[6] = 1182;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.add((ReadablePartial) localDate1, 1182, intArray0, 2405);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1182
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertNotNull(preciseDurationField0);
      
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(preciseDurationField0, durationFieldType0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("hours", decoratedDurationField0.getName());
      assertNotNull(decoratedDurationField0);
      
      String string0 = preciseDurationField0.toString();
      assertEquals("DurationField[hours]", string0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertNotNull(string0);
      
      DurationField durationField0 = decoratedDurationField0.getWrappedField();
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertNotNull(durationField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 2562;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 2562);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundFloor(2562);
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(2562L, long0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(remainderDateTimeField0, 2562);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2562, offsetDateTimeField0.getMinimumValue());
      assertEquals(5123, offsetDateTimeField0.getMaximumValue());
      assertEquals(2562, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      DurationField durationField1 = offsetDateTimeField0.getDurationField();
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2562, offsetDateTimeField0.getMinimumValue());
      assertEquals(5123, offsetDateTimeField0.getMaximumValue());
      assertEquals(2562, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertNotNull(durationField1);
      
      int int1 = offsetDateTimeField0.getMaximumValue();
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals(5123, int1);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2562, offsetDateTimeField0.getMinimumValue());
      assertEquals(5123, offsetDateTimeField0.getMaximumValue());
      assertEquals(2562, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(2512, yearMonth0.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      YearMonth yearMonth1 = yearMonth0.minusMonths(1);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(2512, yearMonth0.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(11, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2512, yearMonth1.getYear());
      assertNotNull(yearMonth1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      int int2 = remainderDateTimeField0.getMinimumValue((ReadablePartial) yearMonth1, intArray0);
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertEquals(3, intArray0.length);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(0, int2);
      assertArrayEquals(new int[] {1, 1, 1}, intArray0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2512, yearMonth0.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth0.size());
      assertEquals(11, yearMonth1.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2512, yearMonth1.getYear());
      
      Locale locale0 = null;
      String string1 = offsetDateTimeField0.getAsShortText((-523), (Locale) null);
      assertSame(preciseDurationField0, durationField0);
      assertSame(durationField0, preciseDurationField0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-523", string1);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isSupported());
      assertTrue(decoratedDurationField0.isSupported());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertEquals(1L, durationField0.getUnitMillis());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(2562, offsetDateTimeField0.getMinimumValue());
      assertEquals(5123, offsetDateTimeField0.getMaximumValue());
      assertEquals(2562, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertNotNull(string1);
      
      PreciseDateTimeField preciseDateTimeField0 = null;
      try {
        preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, durationField1, preciseDurationField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The effective range must be at least 2
         //
         verifyException("org.joda.time.field.PreciseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology1);
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(islamicChronology1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 0, 15356250);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", offsetDateTimeField0.getName());
      assertEquals(86400, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      int int0 = offsetDateTimeField0.getMaximumValue();
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(86400, int0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", offsetDateTimeField0.getName());
      assertEquals(86400, offsetDateTimeField0.getMaximumValue());
      
      long long0 = offsetDateTimeField0.add((long) 0, (-831L));
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-831000L), long0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfDay", offsetDateTimeField0.getName());
      assertEquals(86400, offsetDateTimeField0.getMaximumValue());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 9;
      intArray0[3] = 1;
      intArray0[4] = 86400;
      intArray0[5] = 9;
      intArray0[6] = (-2366);
      intArray0[7] = 86400;
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapPartial((ReadablePartial) null, 9, intArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      int int0 = 168;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 168);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(169, offsetDateTimeField0.getMinimumValue());
      assertEquals(168, offsetDateTimeField0.getOffset());
      assertEquals("weekyearOfCentury", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(268, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      int int1 = offsetDateTimeField0.getMaximumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals(268, int1);
      assertEquals(169, offsetDateTimeField0.getMinimumValue());
      assertEquals(168, offsetDateTimeField0.getOffset());
      assertEquals("weekyearOfCentury", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(268, offsetDateTimeField0.getMaximumValue());
      
      int int2 = offsetDateTimeField0.getLeapAmount(1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      assertEquals(169, offsetDateTimeField0.getMinimumValue());
      assertEquals(168, offsetDateTimeField0.getOffset());
      assertEquals("weekyearOfCentury", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(268, offsetDateTimeField0.getMaximumValue());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      Chronology chronology0 = null;
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField((Chronology) null);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeField0);
      
      int int0 = 1;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(13, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      int int1 = offsetDateTimeField0.getMinimumValue();
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(13, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      
      boolean boolean0 = offsetDateTimeField0.isLeap(1);
      assertFalse(boolean0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(13, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      
      DurationField durationField0 = null;
      long long0 = 1461L;
      // Undeclared exception!
      try { 
        DateTimeZone.forID("R.G,`x3q<?W(D(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'R.G,`x3q<?W(D(' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      assertNotNull(zeroIsMaxDateTimeField0);
      
      long long0 = zeroIsMaxDateTimeField0.addWrapField((long) 1, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(3600001L, long0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", zeroIsMaxDateTimeField0.getName());
      assertEquals(1, zeroIsMaxDateTimeField0.getMinimumValue());
      assertTrue(zeroIsMaxDateTimeField0.isSupported());
      
      int int0 = 0;
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth(0, 0, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("monthOfYear", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(13, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      DurationField durationField0 = offsetDateTimeField0.getDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("monthOfYear", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(13, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      assertNotNull(durationField0);
      
      int int0 = offsetDateTimeField0.getMinimumValue((long) 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(2, int0);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("monthOfYear", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(13, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      
      long long0 = offsetDateTimeField0.getDifferenceAsLong(1, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0L, long0);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("monthOfYear", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(13, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      
      long long1 = offsetDateTimeField0.roundHalfCeiling(1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("monthOfYear", offsetDateTimeField0.getName());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(13, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DurationField durationField1 = buddhistChronology0.halfdays();
      assertNotSame(durationField1, durationField0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(durationField1.equals((Object)durationField0));
      assertNotNull(durationField1);
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(durationField1, durationFieldType0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(durationField1.equals((Object)durationField0));
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", delegatedDurationField0.getName());
      assertNotNull(delegatedDurationField0);
      
      PreciseDateTimeField preciseDateTimeField0 = null;
      try {
        preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, durationField1, delegatedDurationField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The effective range must be at least 2
         //
         verifyException("org.joda.time.field.PreciseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 4594, 1, (-3216));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(4594, offsetDateTimeField0.getOffset());
      assertEquals((-3216), offsetDateTimeField0.getMaximumValue());
      assertEquals(4595, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      DurationField durationField0 = offsetDateTimeField0.getLeapDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(4594, offsetDateTimeField0.getOffset());
      assertEquals((-3216), offsetDateTimeField0.getMaximumValue());
      assertEquals(4595, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertNull(durationField0);
      
      String string0 = offsetDateTimeField0.toString();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("DateTimeField[millisOfSecond]", string0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(4594, offsetDateTimeField0.getOffset());
      assertEquals((-3216), offsetDateTimeField0.getMaximumValue());
      assertEquals(4595, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      assertNotNull(string0);
      
      long long0 = offsetDateTimeField0.getDifferenceAsLong(1, 309L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0L, long0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(4594, offsetDateTimeField0.getOffset());
      assertEquals((-3216), offsetDateTimeField0.getMaximumValue());
      assertEquals(4595, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("millisOfSecond", offsetDateTimeField0.getName());
      
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapField(309L, (-3216));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeField0);
      
      YearMonth yearMonth0 = new YearMonth((long) 1);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(2, yearMonth0.size());
      assertEquals(1969, yearMonth0.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      
      YearMonth yearMonth1 = yearMonth0.plusMonths(0);
      assertSame(yearMonth0, yearMonth1);
      assertSame(yearMonth1, yearMonth0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(2, yearMonth0.size());
      assertEquals(1969, yearMonth0.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(12, yearMonth1.getMonthOfYear());
      assertEquals(1969, yearMonth1.getYear());
      assertEquals(2, yearMonth1.size());
      assertNotNull(yearMonth1);
      
      Period period0 = Period.seconds(0);
      assertNotNull(period0);
      
      YearMonth yearMonth2 = yearMonth1.withPeriodAdded(period0, 1);
      assertSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth2);
      assertSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth1, yearMonth2);
      assertNotSame(yearMonth2, yearMonth1);
      assertNotSame(yearMonth2, yearMonth0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertTrue(yearMonth2.equals((Object)yearMonth0));
      assertTrue(yearMonth2.equals((Object)yearMonth1));
      assertEquals(2, yearMonth0.size());
      assertEquals(1969, yearMonth0.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(12, yearMonth1.getMonthOfYear());
      assertEquals(1969, yearMonth1.getYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(12, yearMonth2.getMonthOfYear());
      assertEquals(1969, yearMonth2.getYear());
      assertEquals(2, yearMonth2.size());
      assertNotNull(yearMonth2);
      
      DateTimeFieldType dateTimeFieldType0 = yearMonth2.getFieldType(0);
      assertSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth2);
      assertSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth1, yearMonth2);
      assertNotSame(yearMonth2, yearMonth1);
      assertNotSame(yearMonth2, yearMonth0);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertTrue(yearMonth0.equals((Object)yearMonth2));
      assertTrue(yearMonth1.equals((Object)yearMonth2));
      assertTrue(yearMonth2.equals((Object)yearMonth0));
      assertTrue(yearMonth2.equals((Object)yearMonth1));
      assertEquals(2, yearMonth0.size());
      assertEquals(1969, yearMonth0.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(12, yearMonth1.getMonthOfYear());
      assertEquals(1969, yearMonth1.getYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(12, yearMonth2.getMonthOfYear());
      assertEquals(1969, yearMonth2.getYear());
      assertEquals(2, yearMonth2.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-828), 0, 0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertTrue(yearMonth0.equals((Object)yearMonth2));
      assertTrue(yearMonth1.equals((Object)yearMonth2));
      assertTrue(yearMonth2.equals((Object)yearMonth0));
      assertTrue(yearMonth2.equals((Object)yearMonth1));
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(2, yearMonth0.size());
      assertEquals(1969, yearMonth0.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(12, yearMonth1.getMonthOfYear());
      assertEquals(1969, yearMonth1.getYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(12, yearMonth2.getMonthOfYear());
      assertEquals(1969, yearMonth2.getYear());
      assertEquals(2, yearMonth2.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals((-728), offsetDateTimeField0.getMaximumValue());
      assertEquals((-828), offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("year", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_TIME;
      assertNotNull(dateTimeFormatter0);
      
      Locale locale0 = dateTimeFormatter0.getLocale();
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = offsetDateTimeField0.getMaximumShortTextLength(locale0);
      assertSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth0, yearMonth2);
      assertSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth1, yearMonth2);
      assertNotSame(yearMonth2, yearMonth1);
      assertNotSame(yearMonth2, yearMonth0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertTrue(yearMonth0.equals((Object)yearMonth2));
      assertTrue(yearMonth1.equals((Object)yearMonth2));
      assertTrue(yearMonth2.equals((Object)yearMonth0));
      assertTrue(yearMonth2.equals((Object)yearMonth1));
      assertEquals(4, int0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(2, yearMonth0.size());
      assertEquals(1969, yearMonth0.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(12, yearMonth1.getMonthOfYear());
      assertEquals(1969, yearMonth1.getYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(12, yearMonth2.getMonthOfYear());
      assertEquals(1969, yearMonth2.getYear());
      assertEquals(2, yearMonth2.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals((-728), offsetDateTimeField0.getMaximumValue());
      assertEquals((-828), offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(1, remainderDateTimeField0.getMaximumValue());
      assertEquals(2, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("minuteOfDay", remainderDateTimeField0.getName());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = 1975L;
      Locale locale0 = Locale.GERMANY;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        remainderDateTimeField0.convertText("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for minuteOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 29);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(1, dividedDateTimeField0.getMaximumValue());
      assertEquals("yearOfEra", dividedDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      assertNotNull(dividedDateTimeField0);
      
      long long0 = (-937L);
      int int0 = dividedDateTimeField0.get((-937L));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, int0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(1, dividedDateTimeField0.getMaximumValue());
      assertEquals("yearOfEra", dividedDateTimeField0.getName());
      assertEquals(29, dividedDateTimeField0.getDivisor());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertTrue(dividedDateTimeField0.isSupported());
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayLanguage();
      assertEquals("Italian", string0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        dividedDateTimeField0.convertText("&|uB;!\"J;nFZ)^~F-", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"&|uB;!\"J;nFZ)^~F-\" for yearOfEra is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(strictDateTimeField0.isLenient());
      assertEquals("year", strictDateTimeField0.getName());
      assertNotNull(strictDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(strictDateTimeField0, dateTimeFieldType0, 1000, (-987), Integer.MIN_VALUE);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(strictDateTimeField0.isLenient());
      assertEquals("year", strictDateTimeField0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals((-987), offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(1000, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      DurationField durationField0 = offsetDateTimeField0.getLeapDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(strictDateTimeField0.isLenient());
      assertEquals("year", strictDateTimeField0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals((-987), offsetDateTimeField0.getMinimumValue());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals(1000, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(Integer.MIN_VALUE, offsetDateTimeField0.getMaximumValue());
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-15), 0, 23118750);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfCeiling(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-378680400000L), long0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = offsetDateTimeField0.getMaximumTextLength(locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(7, int0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      int int1 = offsetDateTimeField0.getMinimumValue((long) 1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      
      Locale locale1 = Locale.ROOT;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = offsetDateTimeField0.getAsText(401, locale1);
      assertNotSame(locale1, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("401", string0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotNull(string0);
      
      long long1 = offsetDateTimeField0.roundHalfCeiling(3271L);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(long1 == long0);
      assertEquals((-378680400000L), long1);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2922781, offsetDateTimeField0.getMaximumValue());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 5);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(4, remainderDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(5, remainderDateTimeField0.getDivisor());
      assertNotNull(remainderDateTimeField0);
      
      long long2 = remainderDateTimeField0.roundFloor(1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals((-378680400000L), long2);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(4, remainderDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(5, remainderDateTimeField0.getDivisor());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-15), 0, 4732);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertEquals(4732, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      long long0 = offsetDateTimeField0.roundHalfCeiling(1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-378680400000L), long0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertEquals(4732, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = offsetDateTimeField0.getMaximumTextLength(locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(4, int0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertEquals(4732, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      
      int int1 = offsetDateTimeField0.getMinimumValue((long) 1);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertEquals(4732, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      
      Locale locale1 = Locale.ROOT;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertNotNull(locale1);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = offsetDateTimeField0.getAsText(401, locale1);
      assertNotSame(locale1, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("401", string0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertEquals(4732, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertNotNull(string0);
      
      long long1 = offsetDateTimeField0.roundHalfCeiling(3271L);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(long1 == long0);
      assertEquals((-378680400000L), long1);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals((-15), offsetDateTimeField0.getOffset());
      assertEquals(4732, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("secondOfMinute", offsetDateTimeField0.getName());
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 5);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(4, remainderDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(5, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
      assertNotNull(remainderDateTimeField0);
      
      long long2 = remainderDateTimeField0.roundFloor(1);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals((-378680400000L), long2);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(4, remainderDateTimeField0.getMaximumValue());
      assertEquals("secondOfMinute", remainderDateTimeField0.getName());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals(5, remainderDateTimeField0.getDivisor());
      assertTrue(remainderDateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertNotNull(preciseDurationField0);
      
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(preciseDurationField0, durationFieldType0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("hours", decoratedDurationField0.getName());
      assertTrue(decoratedDurationField0.isSupported());
      assertNotNull(decoratedDurationField0);
      
      String string0 = preciseDurationField0.toString();
      assertEquals("DurationField[hours]", string0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertNotNull(string0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 2562;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, preciseDurationField0, dateTimeFieldType0, 2562);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundFloor(2562);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(2562L, long0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(remainderDateTimeField0, 2562);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(5123, offsetDateTimeField0.getMaximumValue());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals(2562, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2562, offsetDateTimeField0.getMinimumValue());
      assertNotNull(offsetDateTimeField0);
      
      DurationField durationField0 = offsetDateTimeField0.getDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(5123, offsetDateTimeField0.getMaximumValue());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals(2562, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2562, offsetDateTimeField0.getMinimumValue());
      assertNotNull(durationField0);
      
      int int1 = offsetDateTimeField0.getMaximumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals(5123, int1);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(5123, offsetDateTimeField0.getMaximumValue());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals(2562, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2562, offsetDateTimeField0.getMinimumValue());
      
      YearMonth yearMonth0 = new YearMonth((long) 1, (Chronology) buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(2, yearMonth0.size());
      assertEquals(2512, yearMonth0.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertNotNull(yearMonth0);
      
      YearMonth yearMonth1 = yearMonth0.minusMonths((-523));
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(2, yearMonth0.size());
      assertEquals(2512, yearMonth0.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2556, yearMonth1.getYear());
      assertEquals(7, yearMonth1.getMonthOfYear());
      assertNotNull(yearMonth1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 0;
      int int2 = remainderDateTimeField0.getMinimumValue((ReadablePartial) yearMonth1, intArray0);
      assertNotSame(yearMonth0, yearMonth1);
      assertNotSame(yearMonth1, yearMonth0);
      assertEquals(3, intArray0.length);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertEquals(1, YearMonth.MONTH_OF_YEAR);
      assertEquals(0, YearMonth.YEAR);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertEquals(0, int2);
      assertArrayEquals(new int[] {1, 1, 0}, intArray0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(2, yearMonth0.size());
      assertEquals(2512, yearMonth0.getYear());
      assertEquals(12, yearMonth0.getMonthOfYear());
      assertEquals(2, yearMonth1.size());
      assertEquals(2556, yearMonth1.getYear());
      assertEquals(7, yearMonth1.getMonthOfYear());
      
      Locale locale0 = null;
      String string1 = offsetDateTimeField0.getAsShortText((-523), (Locale) null);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-523", string1);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("hours", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(1L, preciseDurationField0.getUnitMillis());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals(2562, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2561, remainderDateTimeField0.getMaximumValue());
      assertEquals(5123, offsetDateTimeField0.getMaximumValue());
      assertEquals("minuteOfHour", offsetDateTimeField0.getName());
      assertEquals(2562, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(2562, offsetDateTimeField0.getMinimumValue());
      assertNotNull(string1);
      
      PreciseDateTimeField preciseDateTimeField0 = null;
      try {
        preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, durationField0, preciseDurationField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The effective range must be at least 2
         //
         verifyException("org.joda.time.field.PreciseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(69);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.069", dateTimeZone0.getID());
      assertEquals("+00:00:00.069", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertNotNull(offsetDateTimeField0);
      
      int int0 = offsetDateTimeField0.getMaximumValue();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(292279537, int0);
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      
      DurationField durationField0 = offsetDateTimeField0.getLeapDurationField();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertNotNull(durationField0);
      
      boolean boolean0 = offsetDateTimeField0.isSupported();
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(boolean0);
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      
      int int1 = offsetDateTimeField0.get(0L);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(int1 == int0);
      assertEquals(2514, int1);
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 2514);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2513, remainderDateTimeField0.getMaximumValue());
      assertEquals(2514, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
      assertNotNull(remainderDateTimeField0);
      
      long long0 = remainderDateTimeField0.roundHalfEven(30L);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0L, long0);
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals("year", offsetDateTimeField0.getName());
      assertEquals((-292268510), offsetDateTimeField0.getMinimumValue());
      assertEquals(292279537, offsetDateTimeField0.getMaximumValue());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", remainderDateTimeField0.getName());
      assertTrue(remainderDateTimeField0.isSupported());
      assertEquals(2513, remainderDateTimeField0.getMaximumValue());
      assertEquals(2514, remainderDateTimeField0.getDivisor());
      assertEquals(0, remainderDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      
      DurationField durationField0 = buddhistChronology0.years();
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(durationField0);
      
      PreciseDateTimeField preciseDateTimeField0 = null;
      try {
        preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, durationField0, durationField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unit duration field must be precise
         //
         verifyException("org.joda.time.field.PreciseDurationDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 2272);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1664);
      intArray0[4] = 1000;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1886;
      intArray0[8] = 1;
      remainderDateTimeField0.addWrapField((ReadablePartial) monthDay0, 1, intArray0, 0);
      assertArrayEquals(new int[] {1, 0, 0, (-1664), 1000, 1, 1, 1886, 1}, intArray0);
      
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-3322));
      long long0 = offsetDateTimeField0.roundHalfFloor((-3322));
      assertEquals((-259200000L), long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      dateTimeZone0.getOffset((long) 1);
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DurationField durationField0 = buddhistChronology0.weekyears();
      RemainderDateTimeField remainderDateTimeField0 = null;
      try {
        remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, (DateTimeFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(buddhistChronology0, dateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = skipDateTimeField0.getType();
      LocalDate localDate0 = new LocalDate(1, 1, 1);
      Date date0 = localDate0.toDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      localDateTime0.plusMillis(1);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 2803;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      dateTimeFieldType0.isSupported(buddhistChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-1L));
      DelegatedDurationField delegatedDurationField0 = new DelegatedDurationField(preciseDurationField0);
      DateTimeField dateTimeField1 = buddhistChronology0.halfdayOfDay();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField1, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfEven(0L);
      preciseDurationField0.getDifference(0L, 0L);
      DurationField durationField0 = delegatedDurationField0.getWrappedField();
      delegatedDurationField0.add((-621L), 1);
      PreciseDateTimeField preciseDateTimeField0 = null;
      try {
        preciseDateTimeField0 = new PreciseDateTimeField(dateTimeFieldType0, durationField0, preciseDurationField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The unit milliseconds must be at least 1
         //
         verifyException("org.joda.time.field.PreciseDurationDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RemainderDateTimeField remainderDateTimeField0 = null;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField((RemainderDateTimeField) null, dateTimeFieldType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-15), 0, 23118750);
      long long0 = offsetDateTimeField0.roundHalfCeiling(1);
      assertEquals((-378680400000L), long0);
      
      offsetDateTimeField0.getMinimumValue((long) 1);
      Locale locale0 = Locale.ROOT;
      String string0 = offsetDateTimeField0.getAsText(401, locale0);
      assertEquals("401", string0);
  }
}
