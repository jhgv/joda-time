/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:34:08 GMT 2018
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.chrono.GJLocaleSymbols;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GJLocaleSymbols_ESTest extends GJLocaleSymbols_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      
      int int0 = gJLocaleSymbols0.getEraMaxTextLength();
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, int0);
      
      int int1 = gJLocaleSymbols0.getMonthMaxTextLength();
      assertTrue(int1 == int0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, int1);
      
      String string0 = gJLocaleSymbols0.dayOfWeekValueToShortText(5);
      assertNotNull(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals("\u661F\u671F\u4E94", string0);
      
      int int2 = gJLocaleSymbols0.dayOfWeekTextToValue("\u661F\u671F\u4E94");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(5, int2);
      
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.halfdayTextToValue("ISO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"ISO\" for halfdayOfDay is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(locale0));
      assertEquals(0, linkedList1.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      assertNotNull(list0);
      assertFalse(linkedList1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Locale locale1 = Locale.lookup(linkedList0, list0);
      assertNull(locale1);
      assertFalse(linkedList1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale((Locale) null);
      assertNotNull(gJLocaleSymbols0);
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      
      String string0 = gJLocaleSymbols0.monthOfYearValueToShortText(7);
      assertNotNull(string0);
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals("Jul", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      String string0 = locale0.getDisplayCountry();
      assertNotNull(string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("Taiwan", string0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      
      String string1 = locale0.getDisplayVariant();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", string1);
      
      int int0 = gJLocaleSymbols0.getMonthMaxShortTextLength();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, int0);
      
      int int1 = 1863;
      String string2 = gJLocaleSymbols0.monthOfYearValueToText(3);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals("\u4E09\u6708", string2);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.eraTextToValue("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for era is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(2, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(10, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(7, gJLocaleSymbols0.getEraMaxTextLength());
      
      String string0 = gJLocaleSymbols0.eraValueToText(0);
      assertNotNull(string0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(2, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(10, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(7, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals("v. Chr.", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(11, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      
      int int0 = gJLocaleSymbols0.getDayOfWeekMaxTextLength();
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(11, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      String string0 = locale0.getDisplayCountry();
      assertNotNull(string0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", string0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(5, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(4, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(8, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      
      String string1 = locale0.getDisplayVariant();
      assertNotNull(string1);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", string1);
      
      int int0 = gJLocaleSymbols0.getMonthMaxShortTextLength();
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(5, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(4, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(8, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(5, int0);
      
      int int1 = 1863;
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.dayOfWeekValueToShortText(1863);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1863
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale((Locale) null);
      assertNotNull(gJLocaleSymbols0);
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      
      int int0 = gJLocaleSymbols0.getMonthMaxShortTextLength();
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      
      int int0 = (-1035);
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.dayOfWeekTextToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(1, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      
      int int0 = gJLocaleSymbols0.getMonthMaxTextLength();
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(1, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(11, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      
      int int0 = (-3670);
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.monthOfYearValueToShortText((-3670));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3670
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      
      String string0 = locale0.toLanguageTag();
      assertNotNull(string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", string0);
      
      String string1 = gJLocaleSymbols0.halfdayValueToText(0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals("\u4E0A\u5348", string1);
      
      String string2 = gJLocaleSymbols0.monthOfYearValueToShortText(0);
      assertNull(string2);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      
      int int0 = gJLocaleSymbols0.getEraMaxTextLength();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, int0);
      
      String string3 = locale0.getDisplayLanguage();
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("Chinese", string3);
      
      String string4 = locale0.getDisplayName();
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("Chinese", string4);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.eraTextToValue("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for era is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale((Locale) null);
      assertNotNull(gJLocaleSymbols0);
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.monthOfYearValueToShortText((-463));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -463
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      
      String string0 = locale0.getExtension('e');
      assertNull(string0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.eraValueToText(977);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 977
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(1, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      
      String string0 = gJLocaleSymbols0.dayOfWeekValueToText(0);
      assertNull(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(1, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = new Locale("America/New_York", "A;66h&H]DSOalv.EyF");
      assertNotNull(locale0);
      assertEquals("A;66H&H]DSOALV.EYF", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("america/new_york_A;66H&H]DSOALV.EYF", locale0.toString());
      assertEquals("america/new_york", locale0.getLanguage());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("A;66H&H]DSOALV.EYF", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("america/new_york_A;66H&H]DSOALV.EYF", locale0.toString());
      assertEquals("america/new_york", locale0.getLanguage());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      
      GJLocaleSymbols gJLocaleSymbols1 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols1);
      assertEquals("A;66H&H]DSOALV.EYF", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("america/new_york_A;66H&H]DSOALV.EYF", locale0.toString());
      assertEquals("america/new_york", locale0.getLanguage());
      assertEquals(2, gJLocaleSymbols1.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols1.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols1.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols1.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols1.getMonthMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols1.getMonthMaxTextLength());
      assertSame(gJLocaleSymbols1, gJLocaleSymbols0);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.monthOfYearValueToText((-945));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -945
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = linkedList1.remove((Object) integer0);
      assertEquals(0, linkedList1.size());
      assertFalse(boolean0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string0 = Locale.lookupTag(linkedList0, list0);
      assertNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      
      String string1 = "_a5>F^Wb'r~acDy(l";
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.monthOfYearTextToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = null;
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale((Locale) null);
      assertNotNull(gJLocaleSymbols0);
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.halfdayTextToValue("t7cG ?`62hp:-1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"t7cG ?`62hp:-1\" for halfdayOfDay is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.halfdayTextToValue("%J%BK5$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"%J%BK5$\" for halfdayOfDay is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.eraTextToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.dayOfWeekTextToValue("CE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"CE\" for dayOfWeek is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "";
      Locale locale0 = new Locale("");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      
      String string1 = "";
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.monthOfYearTextToValue("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(1, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      
      String string0 = locale0.getScript();
      assertNotNull(string0);
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", string0);
      
      String string1 = locale0.getDisplayName();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("Japanese", string1);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.dayOfWeekValueToText((-2320));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2320
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      
      String string0 = locale0.getDisplayLanguage();
      assertNotNull(string0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("Chinese", string0);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.eraTextToValue("Chinese");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"Chinese\" for era is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.halfdayValueToText(3388);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3388
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.eraTextToValue("/U-L<3{vY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"/U-L<3{vY\" for era is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      
      int int0 = 1;
      String string0 = gJLocaleSymbols0.halfdayValueToText(1);
      assertNotNull(string0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals("PM", string0);
      
      GJLocaleSymbols gJLocaleSymbols1 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols1);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(9, gJLocaleSymbols1.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols1.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols1.getEraMaxTextLength());
      assertEquals(9, gJLocaleSymbols1.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols1.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols1.getMonthMaxShortTextLength());
      assertSame(gJLocaleSymbols1, gJLocaleSymbols0);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      int int1 = gJLocaleSymbols0.halfdayTextToValue("PM");
      assertTrue(int1 == int0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertSame(gJLocaleSymbols0, gJLocaleSymbols1);
      assertEquals(1, int1);
      
      String string1 = locale0.getUnicodeLocaleType("PM");
      assertNull(string1);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      int int2 = gJLocaleSymbols0.getDayOfWeekMaxTextLength();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertSame(gJLocaleSymbols0, gJLocaleSymbols1);
      assertEquals(9, int2);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.monthOfYearTextToValue("PM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"PM\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(1, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getMonthMaxShortTextLength());
      
      int int0 = gJLocaleSymbols0.getMonthMaxShortTextLength();
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(1, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.eraTextToValue("Millis out of range: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"Millis out of range: \" for era is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(1, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      
      int int0 = gJLocaleSymbols0.getMonthMaxShortTextLength();
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(1, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, int0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(9, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(4, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(8, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(5, gJLocaleSymbols0.getMonthMaxShortTextLength());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stream<Locale.LanguageRange> stream0 = linkedList0.parallelStream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      assertNotNull(list0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(0, linkedList1.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(linkedList1, linkedList0);
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0);
      assertNotNull(list1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(list1.equals((Object)list0));
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(0, linkedList1.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      
      String string0 = Locale.lookupTag(linkedList0, list1);
      assertNull(string0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      
      GJLocaleSymbols gJLocaleSymbols1 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols1);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(2, gJLocaleSymbols1.getHalfdayMaxTextLength());
      assertEquals(8, gJLocaleSymbols1.getDayOfWeekMaxTextLength());
      assertEquals(9, gJLocaleSymbols1.getEraMaxTextLength());
      assertEquals(9, gJLocaleSymbols1.getMonthMaxTextLength());
      assertEquals(5, gJLocaleSymbols1.getMonthMaxShortTextLength());
      assertEquals(4, gJLocaleSymbols1.getDayOfWeekMaxShortTextLength());
      assertSame(gJLocaleSymbols1, gJLocaleSymbols0);
      
      String string1 = gJLocaleSymbols0.dayOfWeekValueToShortText(0);
      assertNull(string1);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(9, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(4, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(8, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(5, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertSame(gJLocaleSymbols0, gJLocaleSymbols1);
      
      int int0 = gJLocaleSymbols0.getDayOfWeekMaxShortTextLength();
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(9, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(4, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(8, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(5, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertSame(gJLocaleSymbols0, gJLocaleSymbols1);
      assertEquals(4, int0);
      
      String string2 = gJLocaleSymbols1.monthOfYearValueToText(0);
      assertNull(string2);
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(2, gJLocaleSymbols1.getHalfdayMaxTextLength());
      assertEquals(8, gJLocaleSymbols1.getDayOfWeekMaxTextLength());
      assertEquals(9, gJLocaleSymbols1.getEraMaxTextLength());
      assertEquals(9, gJLocaleSymbols1.getMonthMaxTextLength());
      assertEquals(5, gJLocaleSymbols1.getMonthMaxShortTextLength());
      assertEquals(4, gJLocaleSymbols1.getDayOfWeekMaxShortTextLength());
      assertSame(gJLocaleSymbols1, gJLocaleSymbols0);
      
      Locale locale1 = Locale.UK;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertNotSame(locale1, locale0);
      
      GJLocaleSymbols gJLocaleSymbols2 = GJLocaleSymbols.forLocale(locale1);
      assertNotNull(gJLocaleSymbols2);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(gJLocaleSymbols2.equals((Object)gJLocaleSymbols1));
      assertFalse(gJLocaleSymbols2.equals((Object)gJLocaleSymbols0));
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals(9, gJLocaleSymbols2.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols2.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols2.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols2.getEraMaxTextLength());
      assertEquals(9, gJLocaleSymbols2.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols2.getMonthMaxShortTextLength());
      assertNotSame(locale1, locale0);
      assertNotSame(gJLocaleSymbols2, gJLocaleSymbols1);
      assertNotSame(gJLocaleSymbols2, gJLocaleSymbols0);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols1.eraTextToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.monthOfYearValueToShortText((-2556));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2556
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = null;
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale((Locale) null);
      assertNotNull(gJLocaleSymbols0);
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      
      String string0 = "CE";
      int int0 = gJLocaleSymbols0.eraTextToValue("CE");
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(1, int0);
      
      String string1 = gJLocaleSymbols0.dayOfWeekValueToText(1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals("Monday", string1);
      
      String string2 = gJLocaleSymbols0.dayOfWeekValueToShortText(1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals("Mon", string2);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.dayOfWeekTextToValue("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for dayOfWeek is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(5, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(4, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(8, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      
      int int0 = gJLocaleSymbols0.getHalfdayMaxTextLength();
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(5, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(4, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(8, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, int0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.eraValueToText((-2347));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2347
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertNotNull(gJLocaleSymbols0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(1, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      
      int int0 = gJLocaleSymbols0.getHalfdayMaxTextLength();
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(1, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(2, int0);
      
      String string0 = "(lNCu&DJ00klpt";
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.monthOfYearTextToValue("(lNCu&DJ00klpt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"(lNCu&DJ00klpt\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      gJLocaleSymbols0.getHalfdayMaxTextLength();
      gJLocaleSymbols0.monthOfYearValueToText(2);
      gJLocaleSymbols0.getMonthMaxTextLength();
      String string0 = "org.jodatime.chronoGJLocaleSymbols";
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.halfdayValueToText((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      gJLocaleSymbols0.getEraMaxTextLength();
      GJLocaleSymbols gJLocaleSymbols1 = GJLocaleSymbols.forLocale(locale0);
      String string0 = "\"Bx4>)wE+d217j";
      // Undeclared exception!
      try { 
        gJLocaleSymbols1.halfdayTextToValue("\"Bx4>)wE+d217j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\"Bx4>)wE+d217j\" for halfdayOfDay is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = null;
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale((Locale) null);
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.halfdayTextToValue("MDT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"MDT\" for halfdayOfDay is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      gJLocaleSymbols0.getHalfdayMaxTextLength();
      Integer integer0 = new Integer(2);
      gJLocaleSymbols0.monthOfYearValueToText(2);
      locale0.getExtension('V');
      locale0.getExtensionKeys();
      gJLocaleSymbols0.getDayOfWeekMaxTextLength();
      GJLocaleSymbols.forLocale(locale0);
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.dayOfWeekTextToValue("'+<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"'+<\" for dayOfWeek is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      GJLocaleSymbols.forLocale(locale0);
      GJLocaleSymbols.forLocale(locale0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals(2, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
  }
}
