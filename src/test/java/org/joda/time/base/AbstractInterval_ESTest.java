/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:29:56 GMT 2018
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Interval;
import org.joda.time.MutableInterval;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractInterval_ESTest extends AbstractInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      Period period0 = interval0.toPeriod();
      MutableInterval mutableInterval0 = new MutableInterval(period0, (ReadableInstant) null);
      mutableInterval0.toString();
      DateTime dateTime0 = mutableInterval0.getEnd();
      mutableInterval0.toString();
      MutableInterval mutableInterval1 = new MutableInterval(dateTime0, (ReadableDuration) null);
      mutableInterval1.equals(mutableInterval0);
      mutableInterval1.containsNow();
      mutableInterval1.setStart((ReadableInstant) null);
      interval0.isAfter((-3354L));
      Interval interval1 = mutableInterval0.toInterval();
      interval1.isBefore((ReadableInstant) null);
      interval1.isAfter((ReadableInstant) dateTime0);
      mutableInterval0.setDurationBeforeEnd(1410L);
      mutableInterval0.setPeriodAfterStart(period0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) null);
      mutableInterval1.contains((ReadableInstant) null);
      interval1.withDurationBeforeEnd((ReadableDuration) null);
      mutableInterval1.toDuration();
      mutableInterval0.setInterval((-3354L), (-3208L));
      mutableInterval0.contains((ReadableInterval) interval1);
      // Undeclared exception!
      try { 
        mutableInterval0.setStart((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.withEndMillis(0L);
      interval1.toPeriod((PeriodType) null);
      DateTime dateTime0 = interval1.getStart();
      interval0.toPeriod((PeriodType) null);
      interval1.isAfter((ReadableInterval) interval1);
      interval1.contains((ReadableInterval) interval0);
      interval0.overlaps(interval1);
      Interval interval2 = interval0.toInterval();
      interval2.toDurationMillis();
      interval1.toPeriod();
      MutableInterval mutableInterval0 = interval1.toMutableInterval();
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      MutableInterval mutableInterval2 = mutableInterval1.copy();
      mutableInterval0.setEnd(dateTime0);
      mutableInterval2.contains((ReadableInterval) interval1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.withEndMillis(2489L);
      Period period0 = interval1.toPeriod((PeriodType) null);
      DateTime dateTime0 = interval1.getStart();
      Interval interval2 = new Interval(period0, dateTime0);
      interval2.toPeriod();
      Interval interval3 = new Interval(interval2);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      interval2.isAfter((ReadableInterval) interval1);
      mutableInterval0.isBefore((ReadableInstant) dateTime0);
      Duration duration0 = interval1.toDuration();
      Interval interval4 = interval0.withDurationBeforeEnd(duration0);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setStart(dateTime0);
      interval2.contains((ReadableInterval) interval0);
      mutableInterval0.isEqual(interval0);
      interval1.overlaps(interval0);
      mutableInterval0.setStartMillis(2489L);
      interval0.toInterval();
      Duration duration1 = interval2.toDuration();
      mutableInterval0.setDurationAfterStart((ReadableDuration) duration1);
      interval4.isBefore((ReadableInterval) interval2);
      // Undeclared exception!
      try { 
        MutableInterval.parse("org.joda.time.base.AbstractInterval");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: org.joda.time.base.AbstractInterval
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.withEndMillis(2489L);
      interval1.toPeriod((PeriodType) null);
      DateTime dateTime0 = interval1.getStart();
      Interval interval2 = interval1.withStartMillis(2489L);
      interval2.toPeriod();
      Interval interval3 = new Interval(interval2);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      interval2.isAfter((ReadableInterval) interval1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setStart(dateTime0);
      mutableInterval0.contains((-1322L));
      interval2.contains((ReadableInterval) interval0);
      interval1.overlaps(interval0);
      mutableInterval0.setStartMillis(2489L);
      Duration duration0 = interval1.toDuration();
      interval0.withDurationAfterStart(duration0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Interval interval0 = new Interval(31083663600000L, 31083663600000L);
      interval0.toString();
      DateTime dateTime0 = interval0.getEnd();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      mutableInterval0.isBefore((ReadableInterval) interval0);
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      Duration duration0 = interval0.toDuration();
      mutableInterval1.setStart(dateTime0);
      Interval interval1 = new Interval(duration0, dateTime0);
      interval0.contains(31083663600000L);
      interval1.getEnd();
      mutableInterval1.equals(interval1);
      Interval interval2 = interval0.withEnd(dateTime0);
      mutableInterval1.equals(dateTime0);
      Interval interval3 = interval2.withStart(dateTime0);
      mutableInterval0.setStart(dateTime0);
      interval2.isAfter((ReadableInstant) dateTime0);
      mutableInterval1.isAfter(31083663600000L);
      mutableInterval1.toDurationMillis();
      mutableInterval1.setInterval((ReadableInterval) interval1);
      Period period0 = interval2.toPeriod();
      Interval interval4 = interval0.withPeriodBeforeEnd(period0);
      interval4.isAfter(0L);
      interval4.hashCode();
      interval3.isBeforeNow();
      // Undeclared exception!
      try { 
        interval3.withEndMillis(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      Period period0 = interval0.toPeriod();
      MutableInterval mutableInterval0 = new MutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      MutableInterval mutableInterval1 = new MutableInterval(period0, (ReadableInstant) null);
      DateTime dateTime0 = mutableInterval1.getEnd();
      mutableInterval1.toString();
      MutableInterval mutableInterval2 = new MutableInterval(dateTime0, (ReadableDuration) null);
      mutableInterval2.equals(mutableInterval1);
      mutableInterval2.containsNow();
      mutableInterval2.setStart((ReadableInstant) null);
      interval0.isAfter((-3354L));
      interval0.isBefore((ReadableInterval) mutableInterval2);
      mutableInterval1.setDurationBeforeEnd(1410L);
      mutableInterval1.setPeriodAfterStart(period0);
      mutableInterval1.setDurationBeforeEnd((ReadableDuration) null);
      mutableInterval2.contains((ReadableInstant) null);
      mutableInterval1.setInterval((-3354L), (-3208L));
      // Undeclared exception!
      try { 
        mutableInterval1.setStart((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Interval interval0 = new Interval((-4819L), (-4819L));
      interval0.hashCode();
      interval0.toDuration();
      Duration duration0 = interval0.toDuration();
      interval0.withDurationBeforeEnd(duration0);
      // Undeclared exception!
      try { 
        Interval.parse("The end instant must be greater than the start instant");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      Period period0 = interval0.toPeriod();
      MutableInterval mutableInterval0 = new MutableInterval(period0, (ReadableInstant) null);
      mutableInterval0.toString();
      DateTime dateTime0 = mutableInterval0.getEnd();
      mutableInterval0.toString();
      MutableInterval mutableInterval1 = new MutableInterval(dateTime0, (ReadableDuration) null);
      mutableInterval1.equals(mutableInterval0);
      mutableInterval1.containsNow();
      mutableInterval1.setStart((ReadableInstant) null);
      interval0.isAfter((-3354L));
      Interval interval1 = mutableInterval0.toInterval();
      interval1.isBefore((ReadableInterval) null);
      long long0 = 1410L;
      mutableInterval0.setDurationBeforeEnd(1410L);
      mutableInterval0.setPeriodAfterStart(period0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) null);
      mutableInterval1.contains((ReadableInstant) null);
      Interval.parse("2014-02-14T17:21:21.320-03:00/2014-02-14T17:21:21.320-03:00");
      mutableInterval0.setInterval((-3354L), (-3208L));
      // Undeclared exception!
      try { 
        mutableInterval0.setStart((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.toInterval();
      interval1.toPeriod((PeriodType) null);
      interval1.getStart();
      interval0.toPeriod((PeriodType) null);
      Interval interval2 = new Interval(interval0);
      interval1.isAfter((ReadableInterval) interval1);
      interval1.contains((ReadableInterval) interval0);
      interval0.overlaps(interval2);
      Interval interval3 = new Interval((-1322L), 0L);
      interval3.toDurationMillis();
      interval3.toInterval();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.withEndMillis(2489L);
      Period period0 = interval1.toPeriod((PeriodType) null);
      DateTime dateTime0 = interval1.getEnd();
      Interval interval2 = new Interval(period0, dateTime0);
      interval2.toPeriod();
      interval1.withPeriodBeforeEnd(period0);
      Interval interval3 = new Interval((Object) null);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      interval2.isAfter((ReadableInterval) interval1);
      mutableInterval0.isBefore((ReadableInstant) dateTime0);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setStart(dateTime0);
      interval2.contains((ReadableInterval) interval0);
      mutableInterval0.isEqual(interval0);
      interval1.overlaps(interval0);
      mutableInterval0.setStartMillis(2489L);
      interval0.toInterval();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.withEndMillis(2489L);
      interval0.toPeriod((PeriodType) null);
      DateTime dateTime0 = interval1.getStart();
      Interval interval2 = interval0.toInterval();
      Interval interval3 = new Interval(interval2);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setStart(dateTime0);
      interval2.contains((ReadableInterval) interval0);
      mutableInterval0.isEqual(interval0);
      interval1.overlaps(interval0);
      mutableInterval0.setStartMillis(2489L);
      DateTime dateTime1 = interval1.getStart();
      interval2.isAfter((ReadableInstant) dateTime1);
      interval0.gap(interval2);
      // Undeclared exception!
      try { 
        interval3.isEqual((ReadableInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = (-1486L);
      Interval interval0 = new Interval((-1486L), (-1486L));
      DateTime dateTime0 = interval0.getEnd();
      Interval interval1 = interval0.withEnd(dateTime0);
      Interval interval2 = new Interval(interval1);
      Interval interval3 = interval1.withEnd(dateTime0);
      DateTime dateTime1 = interval2.getEnd();
      DateTime dateTime2 = interval1.getStart();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime1, dateTime2);
      Period period0 = mutableInterval0.toPeriod();
      MutableInterval mutableInterval1 = new MutableInterval(period0, dateTime1);
      Duration duration0 = interval3.toDuration();
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      interval1.isEqual(mutableInterval1);
      interval0.toMutableInterval();
      long long1 = 31083663599995L;
      mutableInterval1.setDurationAfterStart(31083663599995L);
      // Undeclared exception!
      try { 
        Interval.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: 
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.withEndMillis(2489L);
      Period period0 = interval0.toPeriod((PeriodType) null);
      DateTime dateTime0 = interval1.getStart();
      Interval interval2 = new Interval(period0, dateTime0);
      interval2.toPeriod();
      Interval interval3 = new Interval(interval2);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      interval2.isAfter((ReadableInterval) interval1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setStart(dateTime0);
      interval2.contains((ReadableInterval) interval0);
      mutableInterval0.isEqual(interval0);
      interval1.overlaps(interval0);
      mutableInterval0.setStartMillis(2489L);
      Interval interval4 = interval0.toInterval();
      DateTime dateTime1 = interval3.getEnd();
      interval1.isBefore((ReadableInstant) dateTime1);
      interval3.overlaps(interval4);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Interval interval0 = new Interval(31083663600000L, 31083663600000L);
      interval0.toString();
      DateTime dateTime0 = interval0.getEnd();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      mutableInterval0.isBefore((ReadableInterval) interval0);
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      Duration duration0 = interval0.toDuration();
      mutableInterval1.setStart(dateTime0);
      Interval interval1 = new Interval(duration0, dateTime0);
      interval0.contains(31083663600000L);
      interval1.getEnd();
      mutableInterval1.equals(interval1);
      Interval interval2 = interval0.withEnd(dateTime0);
      mutableInterval1.equals(dateTime0);
      Interval interval3 = interval2.withStart(dateTime0);
      mutableInterval0.setStart(dateTime0);
      interval3.isAfter((ReadableInstant) null);
      mutableInterval1.isAfter(31083663600000L);
      mutableInterval1.toDurationMillis();
      mutableInterval1.setInterval((ReadableInterval) interval1);
      Period period0 = interval2.toPeriod();
      interval0.withPeriodBeforeEnd(period0);
      interval2.hashCode();
      mutableInterval1.overlaps(interval0);
      // Undeclared exception!
      try { 
        interval3.withEndMillis(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.withEndMillis(2489L);
      Period period0 = interval0.toPeriod((PeriodType) null);
      DateTime dateTime0 = interval1.getStart();
      Interval interval2 = new Interval(period0, dateTime0);
      interval2.toPeriod();
      Interval interval3 = new Interval(interval2);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      interval2.isAfter((ReadableInterval) interval1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setStart(dateTime0);
      interval2.contains((ReadableInterval) interval0);
      mutableInterval0.isEqual(interval0);
      interval1.overlaps(mutableInterval0);
      interval1.overlaps(interval0);
      mutableInterval0.setStartMillis(2489L);
      interval0.toInterval();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      Duration duration0 = mutableInterval0.toDuration();
      MutableInterval mutableInterval1 = new MutableInterval((ReadableInstant) null, duration0);
      Interval interval0 = mutableInterval1.toInterval();
      mutableInterval1.toPeriod();
      Period period0 = interval0.toPeriod();
      interval0.isAfter((ReadableInstant) null);
      MutableInterval mutableInterval2 = new MutableInterval(period0, (ReadableInstant) null);
      mutableInterval2.setStart((ReadableInstant) null);
      mutableInterval2.isAfter((ReadableInterval) mutableInterval0);
      mutableInterval1.getStart();
      mutableInterval0.isEqual(mutableInterval1);
      mutableInterval0.setInterval((ReadableInstant) null, (ReadableInstant) null);
      mutableInterval1.contains((ReadableInterval) interval0);
      mutableInterval1.setStart((ReadableInstant) null);
      interval0.withEnd((ReadableInstant) null);
      interval0.toDurationMillis();
      String string0 = "0S:=g";
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("0S:=g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: 0S:=g
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Interval interval0 = new Interval(2748L, 2748L);
      interval0.getStart();
      interval0.toDuration();
      Interval interval1 = new Interval(2748L, 2748L);
      Interval interval2 = interval0.withEndMillis(2748L);
      Interval interval3 = interval1.toInterval();
      Period period0 = interval3.toPeriod();
      Interval interval4 = interval2.withPeriodAfterStart(period0);
      DateTime dateTime0 = interval3.getEnd();
      Interval interval5 = interval4.withStart(dateTime0);
      interval1.toString();
      Interval interval6 = interval5.withStartMillis(2748L);
      interval0.isEqual(interval2);
      interval6.equals(interval4);
      interval0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.withEndMillis(2489L);
      Period period0 = interval1.toPeriod((PeriodType) null);
      DateTime dateTime0 = interval1.getStart();
      Interval interval2 = new Interval(period0, dateTime0);
      interval2.toPeriod();
      Interval interval3 = new Interval(interval2);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      interval2.isAfter((ReadableInterval) interval1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setStart(dateTime0);
      interval2.contains((ReadableInterval) interval0);
      mutableInterval0.isEqual(interval0);
      interval1.overlaps(interval0);
      mutableInterval0.setStartMillis(2489L);
      interval0.toInterval();
      mutableInterval0.overlaps(interval3);
      interval2.withPeriodBeforeEnd(period0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.withEndMillis(2489L);
      DateTime dateTime0 = interval1.getStart();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      interval0.isAfter((ReadableInstant) dateTime0);
      interval1.isBefore((ReadableInterval) interval0);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.isEqual(interval0);
      interval1.overlaps(interval0);
      mutableInterval0.setStartMillis(2489L);
      interval0.toInterval();
      interval1.isAfterNow();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Interval interval0 = new Interval((-874L), 100000000000L, (Chronology) null);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      long long0 = (-946L);
      // Undeclared exception!
      try { 
        mutableInterval0.setEndMillis((-946L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.withEndMillis(2489L);
      interval1.toPeriod((PeriodType) null);
      DateTime dateTime0 = interval1.getStart();
      interval0.toPeriod();
      Interval interval2 = new Interval(interval0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      interval1.isAfter((ReadableInterval) interval1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setStart(dateTime0);
      interval1.contains((ReadableInterval) interval0);
      mutableInterval0.isEqual(interval0);
      interval1.overlaps(interval0);
      mutableInterval0.setStartMillis(2489L);
      interval0.toInterval();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Interval interval0 = new Interval(31083663600000L, 31083663600000L);
      interval0.toString();
      DateTime dateTime0 = interval0.getEnd();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      mutableInterval0.isBefore((ReadableInterval) interval0);
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      Duration duration0 = interval0.toDuration();
      mutableInterval1.setStart(dateTime0);
      Interval interval1 = new Interval(duration0, (ReadableInstant) null);
      interval0.contains(31083663600000L);
      interval1.getEnd();
      mutableInterval1.equals(interval1);
      Interval interval2 = interval0.withEnd(dateTime0);
      mutableInterval1.equals(dateTime0);
      mutableInterval0.setStart(dateTime0);
      interval2.isAfter((ReadableInstant) dateTime0);
      mutableInterval1.isAfter(31083663600000L);
      mutableInterval1.toDurationMillis();
      mutableInterval1.setInterval((ReadableInterval) interval1);
      Period period0 = interval1.toPeriod();
      interval0.withPeriodBeforeEnd(period0);
      interval2.hashCode();
      // Undeclared exception!
      try { 
        interval2.withEndMillis(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.withEndMillis(2489L);
      Duration duration0 = interval1.toDuration();
      interval0.withDurationAfterStart(duration0);
      Period period0 = interval1.toPeriod((PeriodType) null);
      DateTime dateTime0 = interval1.getStart();
      Interval interval2 = new Interval(period0, dateTime0);
      interval2.toPeriod();
      Interval interval3 = new Interval(interval2);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      interval2.isAfter((ReadableInterval) interval1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setStart(dateTime0);
      interval2.contains((ReadableInterval) interval0);
      interval1.overlaps(interval0);
      mutableInterval0.setStartMillis(2489L);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      Period period0 = interval0.toPeriod();
      MutableInterval mutableInterval0 = new MutableInterval(period0, (ReadableInstant) null);
      mutableInterval0.toString();
      DateTime dateTime0 = mutableInterval0.getEnd();
      mutableInterval0.toString();
      MutableInterval mutableInterval1 = new MutableInterval(dateTime0, (ReadableDuration) null);
      mutableInterval1.equals(mutableInterval0);
      mutableInterval1.containsNow();
      mutableInterval1.setStart((ReadableInstant) null);
      interval0.isAfter((-3354L));
      mutableInterval0.toInterval();
      interval0.isBefore((ReadableInterval) mutableInterval1);
      mutableInterval0.setDurationBeforeEnd(1410L);
      mutableInterval0.setPeriodAfterStart(period0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) null);
      mutableInterval1.contains((ReadableInstant) null);
      Interval.parse("2014-02-14T17:21:21.320-03:00/2014-02-14T17:21:21.320-03:00");
      mutableInterval0.setInterval((-3354L), (-3208L));
      // Undeclared exception!
      try { 
        mutableInterval0.setStart((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Interval interval0 = new Interval(31083663600000L, 31083663600000L);
      interval0.toString();
      DateTime dateTime0 = interval0.getEnd();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      mutableInterval0.isAfterNow();
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      mutableInterval0.isBefore((ReadableInterval) interval0);
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      Duration duration0 = interval0.toDuration();
      mutableInterval1.setStart(dateTime0);
      Interval interval1 = new Interval(duration0, dateTime0);
      interval0.contains(31083663600000L);
      interval1.getEnd();
      mutableInterval1.equals(interval1);
      Interval interval2 = interval0.withEnd(dateTime0);
      mutableInterval1.equals(dateTime0);
      Interval interval3 = interval2.withStart(dateTime0);
      mutableInterval0.setStart(dateTime0);
      interval2.isAfter((ReadableInstant) dateTime0);
      mutableInterval1.isAfter(31083663600000L);
      mutableInterval1.toDurationMillis();
      mutableInterval1.setInterval((ReadableInterval) interval1);
      Period period0 = interval2.toPeriod();
      interval0.withPeriodBeforeEnd(period0);
      interval2.hashCode();
      mutableInterval1.isBefore(31083663600000L);
      // Undeclared exception!
      try { 
        interval3.withEndMillis(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.withEndMillis(2489L);
      Period period0 = interval1.toPeriod((PeriodType) null);
      DateTime dateTime0 = interval1.getStart();
      Interval interval2 = new Interval(period0, dateTime0);
      Interval interval3 = new Interval(interval2);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      Duration duration0 = interval2.toDuration();
      interval0.withDurationAfterStart(duration0);
      interval2.isAfter((ReadableInterval) interval1);
      interval2.isBeforeNow();
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setStart(dateTime0);
      interval2.contains((ReadableInterval) interval0);
      interval1.overlaps(interval0);
      mutableInterval0.setStartMillis(2489L);
      interval2.isBefore((ReadableInterval) interval0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.withEndMillis(2489L);
      Period period0 = interval1.toPeriod((PeriodType) null);
      DateTime dateTime0 = interval1.getStart();
      Interval interval2 = new Interval(period0, dateTime0);
      interval2.toPeriod();
      Interval interval3 = new Interval(interval2);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      Duration duration0 = interval2.toDuration();
      interval0.withDurationAfterStart(duration0);
      interval2.isAfter((ReadableInterval) interval1);
      interval2.isBeforeNow();
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setStart(dateTime0);
      interval2.contains((ReadableInterval) interval0);
      interval1.overlaps(interval0);
      mutableInterval0.setStartMillis(2489L);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Interval interval0 = new Interval(2748L, 2748L);
      DateTime dateTime0 = interval0.getStart();
      Duration duration0 = interval0.toDuration();
      Interval interval1 = new Interval(dateTime0, duration0);
      Interval interval2 = interval1.withDurationBeforeEnd(duration0);
      Interval interval3 = interval1.toInterval();
      Period period0 = interval3.toPeriod();
      Interval interval4 = interval2.withPeriodAfterStart(period0);
      DateTime dateTime1 = interval3.getEnd();
      Interval interval5 = interval4.withStart(dateTime1);
      interval5.withStartMillis(2748L);
      interval0.isEqual(interval2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.withEndMillis(2489L);
      Period period0 = interval1.toPeriod((PeriodType) null);
      DateTime dateTime0 = interval1.getStart();
      Interval interval2 = new Interval(period0, dateTime0);
      interval2.toPeriod();
      Interval interval3 = new Interval(interval2);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      interval2.isEqual(interval1);
      interval2.isAfter((ReadableInterval) interval1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setStart(dateTime0);
      interval2.contains((ReadableInterval) interval0);
      interval1.overlaps(interval0);
      mutableInterval0.setStartMillis(2489L);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Interval interval0 = new Interval(2740L, 2740L);
      interval0.getStart();
      Duration duration0 = interval0.toDuration();
      Interval interval1 = new Interval((ReadableInstant) null, duration0);
      Interval interval2 = interval1.withDurationBeforeEnd(duration0);
      Interval interval3 = interval1.toInterval();
      interval3.toPeriod();
      Interval interval4 = new Interval(2740L, 2740L);
      interval3.getEnd();
      interval0.toString();
      interval3.withStartMillis(2740L);
      interval0.isEqual(interval2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Interval interval0 = new Interval(1984L, 1984L, (DateTimeZone) null);
      interval0.hashCode();
      interval0.toDurationMillis();
      Interval interval1 = interval0.toInterval();
      interval1.containsNow();
      interval1.getEnd();
      Duration duration0 = interval0.toDuration();
      interval0.withDurationBeforeEnd(duration0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.withEndMillis(2489L);
      interval1.toPeriod((PeriodType) null);
      DateTime dateTime0 = interval1.getStart();
      Interval interval2 = interval1.withStartMillis(2489L);
      interval2.toPeriod();
      Interval interval3 = new Interval(interval2);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      interval2.isAfter((ReadableInterval) interval1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setStart(dateTime0);
      interval2.contains((ReadableInterval) interval0);
      interval1.overlaps(interval0);
      mutableInterval0.setStartMillis(2489L);
      Duration duration0 = interval1.toDuration();
      interval0.withDurationAfterStart(duration0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Interval interval0 = new Interval((-648L), (-1L));
      interval0.contains((ReadableInstant) null);
      interval0.getEnd();
      interval0.getStart();
      interval0.toString();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.withEndMillis(2489L);
      Period period0 = interval1.toPeriod((PeriodType) null);
      DateTime dateTime0 = interval1.getStart();
      Interval interval2 = new Interval(period0, dateTime0);
      interval2.toPeriod();
      Interval interval3 = new Interval(interval2);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      interval2.isAfter((ReadableInterval) interval1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setStart(dateTime0);
      interval2.contains((ReadableInterval) interval0);
      interval1.overlaps(interval0);
      mutableInterval0.setStartMillis(2489L);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "D";
      MutableInterval mutableInterval0 = new MutableInterval();
      mutableInterval0.getEnd();
      Interval interval0 = null;
      try {
        interval0 = new Interval("D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: D
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      DateTime dateTime0 = mutableInterval0.getStart();
      mutableInterval0.setStart(dateTime0);
      mutableInterval0.toString();
      Period period0 = mutableInterval0.toPeriod();
      MutableInterval mutableInterval1 = new MutableInterval(period0, dateTime0);
      mutableInterval0.setInterval((ReadableInterval) mutableInterval1);
      mutableInterval0.isBeforeNow();
      mutableInterval0.clone();
      mutableInterval0.isBefore((-24L));
      long long0 = 3401L;
      mutableInterval0.setDurationBeforeEnd(3401L);
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: 
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Interval interval0 = new Interval((-825L), (-825L));
      DateTime dateTime0 = interval0.getStart();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      DateTime dateTime1 = interval0.getEnd();
      mutableInterval0.setDurationAfterStart(0L);
      mutableInterval0.setDurationAfterStart((ReadableDuration) null);
      mutableInterval0.toDurationMillis();
      mutableInterval0.contains((ReadableInterval) interval0);
      interval0.isBeforeNow();
      interval0.withChronology((Chronology) null);
      mutableInterval0.setDurationAfterStart((ReadableDuration) null);
      mutableInterval0.toInterval();
      interval0.isAfter(251L);
      interval0.isBefore((ReadableInstant) dateTime1);
      mutableInterval0.setChronology((Chronology) null);
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      mutableInterval0.setDurationAfterStart((ReadableDuration) null);
      mutableInterval1.setDurationAfterStart(601L);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      mutableInterval0.getStart();
      mutableInterval0.toString();
      mutableInterval0.clone();
      mutableInterval0.copy();
      mutableInterval0.contains((-3572L));
      // Undeclared exception!
      try { 
        mutableInterval0.setDurationAfterStart((-3572L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutableInterval mutableInterval0 = MutableInterval.parse((String) null);
      Interval interval0 = mutableInterval0.toInterval();
      // Undeclared exception!
      try { 
        interval0.withEndMillis(21859200000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Interval interval0 = new Interval(31083663600000L, 31083663600000L);
      interval0.toString();
      DateTime dateTime0 = interval0.getEnd();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      mutableInterval0.isBefore((ReadableInterval) interval0);
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      Duration duration0 = interval0.toDuration();
      mutableInterval1.setStart(dateTime0);
      Interval interval1 = new Interval(duration0, dateTime0);
      interval0.contains(31083663600000L);
      interval1.getEnd();
      mutableInterval1.equals(interval1);
      Interval interval2 = interval0.withEnd(dateTime0);
      mutableInterval1.equals(dateTime0);
      Interval interval3 = interval2.withStart(dateTime0);
      mutableInterval0.setStart(dateTime0);
      interval2.isAfter((ReadableInstant) dateTime0);
      mutableInterval1.isAfter(31083663600000L);
      mutableInterval1.toDurationMillis();
      mutableInterval1.setInterval((ReadableInterval) interval1);
      Period period0 = interval2.toPeriod();
      interval0.withPeriodBeforeEnd(period0);
      interval2.hashCode();
      // Undeclared exception!
      try { 
        interval3.withEndMillis(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      Interval interval0 = new Interval(mutableInterval1);
      Period period0 = interval0.toPeriod();
      interval0.withPeriodAfterStart(period0);
      mutableInterval1.isBefore((ReadableInstant) null);
      DateTime dateTime0 = mutableInterval0.getEnd();
      Interval interval1 = new Interval(period0, dateTime0);
      Interval interval2 = interval1.withStart(dateTime0);
      interval2.isAfterNow();
      Interval interval3 = interval2.toInterval();
      interval3.isBefore((ReadableInterval) interval1);
      // Undeclared exception!
      try { 
        mutableInterval1.setEndMillis(848L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Chronology chronology0 = null;
      Interval interval0 = new Interval(0L, 0L, (Chronology) null);
      Interval interval1 = interval0.withEndMillis(0L);
      interval0.containsNow();
      MutableInterval mutableInterval0 = new MutableInterval((-1L), (-1L));
      mutableInterval0.equals(interval0);
      interval1.contains((-1944L));
      // Undeclared exception!
      try { 
        MutableInterval.parse("0hH-$AqLD.5g{i");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: 0hH-$AqLD.5g{i
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Interval interval0 = new Interval((-39L), 1028L, (DateTimeZone) null);
      interval0.toString();
      interval0.isAfter(0L);
      MutableInterval mutableInterval0 = new MutableInterval((-39L), 1028L);
      mutableInterval0.containsNow();
      mutableInterval0.isBefore((ReadableInterval) interval0);
      mutableInterval0.contains((ReadableInterval) interval0);
      interval0.abuts(mutableInterval0);
      interval0.isEqual(mutableInterval0);
      Interval interval1 = interval0.withEndMillis(0L);
      interval1.toDurationMillis();
      Interval interval2 = interval1.toInterval();
      interval1.getEnd();
      interval1.getEnd();
      interval1.isAfter((ReadableInterval) interval2);
      mutableInterval0.contains((-39L));
      Interval interval3 = interval0.overlap(interval1);
      interval2.toString();
      interval2.withChronology((Chronology) null);
      interval3.isAfter(2197L);
      mutableInterval0.setStartMillis((-39L));
      interval0.isBefore(0L);
      interval1.toInterval();
      Interval.parse("1969-12-31T20:59:59.961-03:00/1969-12-31T21:00:01.028-03:00");
      interval2.hashCode();
      interval3.toMutableInterval();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Interval interval0 = new Interval(2044L, 2044L);
      Period period0 = interval0.toPeriod();
      Interval interval1 = interval0.withPeriodAfterStart(period0);
      Interval interval2 = interval1.toInterval();
      DateTime dateTime0 = interval0.getStart();
      Interval interval3 = new Interval((ReadableDuration) null, dateTime0);
      interval0.overlap(interval3);
      DateTime dateTime1 = interval2.getStart();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime1, dateTime1);
      mutableInterval0.setPeriodAfterStart(period0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Interval interval0 = new Interval((Object) null);
      DateTime dateTime0 = interval0.getEnd();
      Interval interval1 = new Interval(dateTime0, (ReadablePeriod) null);
      Interval interval2 = interval1.toInterval();
      interval0.getEnd();
      Interval interval3 = interval2.withStart(dateTime0);
      DateTime dateTime1 = interval3.getStart();
      Interval interval4 = new Interval((ReadablePeriod) null, dateTime1);
      interval2.isBefore((-1094L));
      Interval interval5 = interval4.withPeriodAfterStart((ReadablePeriod) null);
      interval4.containsNow();
      interval3.getStart();
      interval4.isAfter((ReadableInstant) dateTime0);
      interval5.abuts(interval1);
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: 
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Interval interval0 = new Interval(1L, 198L);
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = interval0.withEnd(dateTime0);
      MutableInterval mutableInterval0 = new MutableInterval();
      interval0.contains((ReadableInterval) mutableInterval0);
      Interval interval2 = interval0.withStartMillis(1L);
      interval0.isAfter((ReadableInterval) interval2);
      Period period0 = interval2.toPeriod();
      mutableInterval0.setPeriodBeforeEnd(period0);
      interval1.withEnd(dateTime0);
      // Undeclared exception!
      try { 
        MutableInterval.parse("cE~<C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: cE~<C
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      DateTime dateTime0 = mutableInterval0.getStart();
      mutableInterval0.setStart(dateTime0);
      mutableInterval0.toString();
      Period period0 = mutableInterval0.toPeriod();
      MutableInterval mutableInterval1 = new MutableInterval(period0, dateTime0);
      mutableInterval0.setInterval((ReadableInterval) mutableInterval1);
      mutableInterval0.isBeforeNow();
      mutableInterval0.clone();
      mutableInterval0.isBefore(0L);
      long long0 = 3401L;
      mutableInterval0.setDurationBeforeEnd(3401L);
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: 
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null, (Chronology) null);
      Duration duration0 = mutableInterval0.toDuration();
      mutableInterval0.setDurationAfterStart((ReadableDuration) duration0);
      mutableInterval0.isBeforeNow();
      mutableInterval0.contains((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Interval interval0 = new Interval(2993L, 2993L);
      Duration duration0 = interval0.toDuration();
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      Interval interval2 = interval1.withStartMillis(2993L);
      interval0.toMutableInterval();
      Interval interval3 = interval2.withChronology((Chronology) null);
      interval3.toString();
      DateTime dateTime0 = interval3.getEnd();
      Period period0 = interval0.toPeriod();
      Interval interval4 = new Interval(dateTime0, period0);
      MutableInterval mutableInterval0 = interval2.toMutableInterval();
      interval2.withPeriodAfterStart(period0);
      mutableInterval0.setStartMillis((-1303L));
      interval3.withEnd(dateTime0);
      interval2.withStartMillis(2993L);
      interval2.isAfter((ReadableInstant) dateTime0);
      // Undeclared exception!
      try { 
        Interval.parse("Years");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: Years
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      mutableInterval0.toDurationMillis();
      interval0.contains(0L);
      mutableInterval0.isAfter((-1L));
      Duration duration0 = interval0.toDuration();
      interval0.withDurationAfterStart(duration0);
      mutableInterval0.setInterval((ReadableInterval) interval0);
      mutableInterval0.isBefore(0L);
      Period period0 = interval0.toPeriod();
      interval0.withPeriodAfterStart(period0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      Interval interval0 = mutableInterval0.toInterval();
      mutableInterval0.isBefore((ReadableInterval) interval0);
      DateTime dateTime0 = mutableInterval0.getStart();
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      mutableInterval0.isBefore((ReadableInstant) dateTime0);
      interval0.toInterval();
      interval0.contains((ReadableInstant) dateTime0);
      mutableInterval0.setStartMillis(0L);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      long long0 = (-604800000L);
      Interval interval0 = new Interval((-604800000L), 0L);
      DateTime dateTime0 = interval0.getEnd();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      mutableInterval0.isBeforeNow();
      mutableInterval0.contains(0L);
      mutableInterval0.isBeforeNow();
      // Undeclared exception!
      try { 
        mutableInterval0.setDurationBeforeEnd((-604800000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      mutableInterval0.setDurationBeforeEnd(612L);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null, (Chronology) null);
      mutableInterval0.toDuration();
      mutableInterval0.isBeforeNow();
      mutableInterval0.contains((ReadableInterval) null);
      mutableInterval0.overlaps((ReadableInterval) null);
      mutableInterval0.setStartMillis((-1L));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      mutableInterval1.toDuration();
      mutableInterval1.contains((ReadableInterval) mutableInterval0);
      DateTime dateTime0 = mutableInterval0.getStart();
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Interval interval0 = null;
      try {
        interval0 = new Interval(1L, (-133L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutableInterval.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: 
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.withEndMillis(0L);
      interval1.toPeriod((PeriodType) null);
      interval0.isAfter((ReadableInstant) null);
      DateTime dateTime0 = interval1.getStart();
      interval0.toPeriod((PeriodType) null);
      Interval interval2 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      interval1.isAfter((ReadableInterval) interval1);
      interval1.contains((ReadableInterval) interval0);
      interval0.overlaps(interval2);
      Interval interval3 = interval2.withStartMillis(0L);
      interval3.isBefore(0L);
      interval3.toDurationMillis();
      interval3.toInterval();
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval((ReadableInstant) null, dateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      Period period0 = interval0.toPeriod();
      MutableInterval mutableInterval0 = new MutableInterval(period0, (ReadableInstant) null);
      mutableInterval0.toString();
      DateTime dateTime0 = mutableInterval0.getEnd();
      mutableInterval0.toString();
      MutableInterval mutableInterval1 = new MutableInterval(dateTime0, (ReadableDuration) null);
      mutableInterval1.equals(mutableInterval0);
      mutableInterval1.containsNow();
      mutableInterval1.setStart((ReadableInstant) null);
      interval0.isAfter((-3354L));
      Interval interval1 = mutableInterval0.toInterval();
      interval1.isBefore((ReadableInstant) null);
      interval1.isAfter((ReadableInstant) dateTime0);
      mutableInterval0.setDurationBeforeEnd(1410L);
      mutableInterval0.setPeriodAfterStart(period0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) null);
      mutableInterval1.contains((ReadableInstant) null);
      interval1.withDurationBeforeEnd((ReadableDuration) null);
      mutableInterval0.setInterval((-3354L), (-3208L));
      // Undeclared exception!
      try { 
        mutableInterval0.setStart((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      Period period0 = interval0.toPeriod();
      MutableInterval mutableInterval0 = new MutableInterval(period0, (ReadableInstant) null);
      mutableInterval0.toString();
      DateTime dateTime0 = mutableInterval0.getEnd();
      mutableInterval0.toString();
      MutableInterval mutableInterval1 = new MutableInterval(dateTime0, (ReadableDuration) null);
      mutableInterval1.equals(mutableInterval0);
      mutableInterval1.containsNow();
      mutableInterval1.setStart((ReadableInstant) null);
      interval0.isAfter((-3354L));
      Interval interval1 = mutableInterval0.toInterval();
      interval0.isBefore((ReadableInterval) mutableInterval1);
      mutableInterval0.setDurationBeforeEnd(1410L);
      mutableInterval0.setPeriodAfterStart(period0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) null);
      mutableInterval1.contains((ReadableInstant) null);
      interval1.withDurationBeforeEnd((ReadableDuration) null);
      mutableInterval0.setInterval((-3354L), (-3208L));
      // Undeclared exception!
      try { 
        mutableInterval0.setStart((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Interval interval0 = new Interval(2748L, 2748L);
      DateTime dateTime0 = interval0.getStart();
      Duration duration0 = interval0.toDuration();
      Interval interval1 = new Interval(dateTime0, duration0);
      Interval interval2 = interval1.toInterval();
      interval2.toPeriod();
      DateTime dateTime1 = interval2.getEnd();
      Interval interval3 = interval0.withStart(dateTime1);
      interval3.withStartMillis(2748L);
      interval0.isEqual(interval0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Interval interval0 = new Interval(31083663600000L, 31083663600000L);
      interval0.toString();
      DateTime dateTime0 = interval0.getEnd();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      mutableInterval0.isBefore((ReadableInterval) interval0);
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      Duration duration0 = interval0.toDuration();
      mutableInterval1.setStart(dateTime0);
      Interval interval1 = new Interval(duration0, dateTime0);
      interval0.contains(31083663600000L);
      interval1.getEnd();
      mutableInterval1.equals(interval1);
      Interval interval2 = interval0.withEnd(dateTime0);
      mutableInterval1.equals(dateTime0);
      Interval interval3 = interval2.withStart(dateTime0);
      mutableInterval0.setStart(dateTime0);
      mutableInterval1.copy();
      interval2.isAfter((ReadableInstant) dateTime0);
      interval0.contains((ReadableInterval) mutableInterval1);
      mutableInterval1.isAfter(31083663600000L);
      mutableInterval1.toDurationMillis();
      mutableInterval1.setInterval((ReadableInterval) interval1);
      Period period0 = interval2.toPeriod();
      Interval interval4 = interval0.withPeriodBeforeEnd(period0);
      interval4.hashCode();
      interval3.contains((ReadableInstant) dateTime0);
      // Undeclared exception!
      try { 
        interval3.withEndMillis(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Interval interval0 = new Interval((-1322L), (-1322L));
      Interval interval1 = interval0.withEndMillis(2489L);
      Period period0 = interval1.toPeriod((PeriodType) null);
      DateTime dateTime0 = interval0.getStart();
      Interval interval2 = new Interval(period0, dateTime0);
      interval2.toPeriod();
      Interval interval3 = new Interval(interval2);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime0, dateTime0);
      interval2.isAfter((ReadableInterval) interval1);
      mutableInterval0.isBefore((ReadableInstant) dateTime0);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setStart(dateTime0);
      interval2.contains((ReadableInterval) interval0);
      mutableInterval0.isEqual(interval0);
      interval1.overlaps(interval0);
      mutableInterval0.setStartMillis(2489L);
      Interval interval4 = interval0.toInterval();
      assertSame(interval4, interval0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parse("The end instant must be greater than the start instant");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }
}
