/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:41:26 GMT 2018
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalTime;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.InternalPrinter;
import org.joda.time.format.InternalPrinterDateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InternalPrinterDateTimePrinter_ESTest extends InternalPrinterDateTimePrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('A');
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_CharacterLiteral0);
      int int0 = dateTimePrinter0.estimatePrintedLength();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-971), false);
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_FixedNumber0);
      int int0 = dateTimePrinter0.estimatePrintedLength();
      assertEquals((-971), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 1287, 1287);
      StringBuilder stringBuilder0 = new StringBuilder(935);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(935);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      InternalPrinterDateTimePrinter internalPrinterDateTimePrinter0 = (InternalPrinterDateTimePrinter)InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_Fraction0);
      Locale locale0 = Locale.UK;
      internalPrinterDateTimePrinter0.printTo((Appendable) stringBuilder0, (-308L), (Chronology) buddhistChronology0, (-664), dateTimeZone0, locale0);
      assertEquals("00000725694", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      int int0 = dateTimePrinter0.estimatePrintedLength();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-971), false);
      InternalPrinterDateTimePrinter internalPrinterDateTimePrinter0 = (InternalPrinterDateTimePrinter)InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_FixedNumber0);
      boolean boolean0 = internalPrinterDateTimePrinter0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of((InternalPrinter) null);
      assertNull(dateTimePrinter0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 0, false);
      InternalPrinterDateTimePrinter internalPrinterDateTimePrinter0 = (InternalPrinterDateTimePrinter)InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      InternalPrinterDateTimePrinter internalPrinterDateTimePrinter1 = (InternalPrinterDateTimePrinter)InternalPrinterDateTimePrinter.of(internalPrinterDateTimePrinter0);
      assertEquals(0, internalPrinterDateTimePrinter1.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-2985), true);
      Locale locale0 = Locale.GERMAN;
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TwoDigitYear0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      StringBuffer stringBuffer0 = new StringBuffer("9;sm2T#Pt:o|");
      dateTimePrinter0.printTo(stringBuffer0, (-1739L), (Chronology) null, (-2985), dateTimeZone0, locale0);
      assertEquals("9;sm2T#Pt:o|08", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, (-2985), true);
      Locale locale0 = Locale.GERMAN;
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TwoDigitYear0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateTimePrinter0.printTo((Writer) null, (ReadablePartial) localTime0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.FormatUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 0);
      StringWriter stringWriter0 = new StringWriter(2567);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      Locale locale0 = Locale.CHINESE;
      dateTimePrinter0.printTo((Writer) stringWriter0, (-1270L), (Chronology) iSOChronology0, 0, dateTimeZone0, locale0);
      assertEquals("", locale0.getCountry());
  }
}
