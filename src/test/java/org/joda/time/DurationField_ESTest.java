/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:46:53 GMT 2018
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.field.DecoratedDurationField;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.UnsupportedDurationField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DurationField_ESTest extends DurationField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getValue((-875L));
      millisDurationField0.isPrecise();
      millisDurationField0.subtract(0L, (-1144));
      millisDurationField0.compareTo(millisDurationField0);
      millisDurationField0.isSupported();
      millisDurationField0.getMillis((long) Integer.MIN_VALUE, (long) Integer.MIN_VALUE);
      millisDurationField0.getMillis(Integer.MIN_VALUE);
      millisDurationField0.getName();
      millisDurationField0.add(1412L, (-1543L));
      millisDurationField0.getValue(0L);
      millisDurationField0.getMillis((-131L), (-2147483648L));
      millisDurationField0.getDifferenceAsLong(0L, 0L);
      MillisDurationField millisDurationField1 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField1.getValue(1144L, 0L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ETy1");
      millisDurationField0.getMillis((-850L), (-850L));
      // Undeclared exception!
      try { 
        millisDurationField0.add((-850L), (-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -850 + -9223372036854775808
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getMillis(0L);
      millisDurationField0.getMillis(1L);
      millisDurationField0.getDifference((-3L), 1L);
      millisDurationField0.getDifference(1L, (-4543L));
      MillisDurationField millisDurationField1 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField1.subtract(259200000L, 1L);
      millisDurationField1.INSTANCE.getValueAsLong(1L);
      millisDurationField1.getUnitMillis();
      millisDurationField1.getMillis((-4903L));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.centuries();
      // Undeclared exception!
      try { 
        durationField0.getMillis(17971875, (-898L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1797189469 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getMillis(301, (long) 301);
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      unsupportedDurationField0.isSupported();
      // Undeclared exception!
      try { 
        unsupportedDurationField0.getValue((long) 301, (long) 301);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // centuries field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getUnitMillis();
      // Undeclared exception!
      try { 
        millisDurationField0.getValue((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -9223372036854775808
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.isPrecise();
      millisDurationField0.getDifference((-1675L), 2588L);
      millisDurationField0.getMillis(0, (-621L));
      millisDurationField0.getType();
      MillisDurationField millisDurationField1 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField1.toString();
      MillisDurationField millisDurationField2 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField2.getValue(0L, 0L);
      millisDurationField1.getDifference(0L, (-1L));
      MillisDurationField millisDurationField3 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField3.isSupported();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.weeks();
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-483));
      scaledDurationField0.getValue(0L, 0L);
      long long0 = 8L;
      durationField0.getMillis(8L);
      scaledDurationField0.getMillis(0);
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      long long1 = 0L;
      // Undeclared exception!
      try { 
        unsupportedDurationField0.getDifferenceAsLong(0L, 0L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hours field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = 0L;
      long long1 = (-9223372036854775808L);
      long long2 = (-1366L);
      // Undeclared exception!
      try { 
        millisDurationField0.getDifference((-9223372036854775808L), 2592L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775808 - 2592
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.eras();
      durationField0.getUnitMillis();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.minutes();
      durationField0.getValue((-1362L), (-1362L));
      millisDurationField0.compareTo(durationField0);
      durationField0.getDifference((-2374L), 288L);
      millisDurationField0.getValueAsLong((-1L));
      millisDurationField0.getName();
      millisDurationField0.add(0L, 0L);
      millisDurationField0.toString();
      millisDurationField0.getValueAsLong(0L);
      millisDurationField0.toString();
      millisDurationField0.isPrecise();
      durationField0.isPrecise();
      durationField0.getValue((long) 1, 1L);
      MillisDurationField millisDurationField1 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField1.add(0L, (-1642L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1669L);
      preciseDurationField0.getValueAsLong((-1642L), 31083663600000L);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Chronology chronology0 = islamicChronology0.withUTC();
      DurationField durationField0 = durationFieldType0.getField(chronology0);
      durationField0.getValue((long) 1, (-1L));
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      // Undeclared exception!
      try { 
        unsupportedDurationField0.getMillis(2557L, 844L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hours field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getValue((-4903L));
      millisDurationField0.getValue(1977L);
      millisDurationField0.subtract(1977L, (-4903L));
      millisDurationField0.getDifferenceAsLong((-4901L), (-4901L));
      MillisDurationField millisDurationField1 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField1.getDifferenceAsLong(2982L, (-2417L));
      millisDurationField1.isPrecise();
      millisDurationField1.getDifferenceAsLong(1977L, (-772L));
      millisDurationField1.getDifference((-1475L), (-1475L));
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(millisDurationField0, durationFieldType0);
      decoratedDurationField0.isPrecise();
      millisDurationField0.add((long) (-4903), 0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getMillis(0L);
      millisDurationField0.getMillis(1L);
      millisDurationField0.getDifference((-3L), 1L);
      millisDurationField0.getDifference(1L, (-4543L));
      MillisDurationField millisDurationField1 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField1.subtract(259200000L, 1L);
      millisDurationField1.getUnitMillis();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getMillis(0L, 1392L);
      millisDurationField0.getDifferenceAsLong(0L, 1392L);
      millisDurationField0.isSupported();
      millisDurationField0.add((-118L), 2965);
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      millisDurationField0.add((-651L), (-1922));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2965);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = buddhistChronology0.withZone(dateTimeZone0);
      durationFieldType0.getField(chronology0);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType0, 2965);
      scaledDurationField0.getValue(2890L);
      scaledDurationField0.getUnitMillis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-118L));
      preciseDurationField0.getMillis((-1817L), 21600000L);
      millisDurationField0.getMillis((-1922));
      scaledDurationField0.getMillis(2965);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      long long0 = 322L;
      unsupportedDurationField0.toString();
      int int0 = 0;
      // Undeclared exception!
      try { 
        unsupportedDurationField0.subtract((-375L), 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.toString();
      millisDurationField0.subtract(0L, 0L);
      millisDurationField0.toString();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType0, 161);
      long long0 = 7L;
      long long1 = (-9223372036854775808L);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(161, (String) null, 161, 161, 161, 161, (-1039), 19, 19, 161, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.millis();
      durationField0.getValue(1641L);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      ScaledDurationField scaledDurationField0 = null;
      try {
        scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The scalar must not be 0 or 1
         //
         verifyException("org.joda.time.field.ScaledDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.months();
      durationField0.getValue((long) 1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.weekyears();
      durationField0.isSupported();
      long long0 = (-3113L);
      durationField0.getType();
      durationField0.getDifference((-3113L), 1724L);
      // Undeclared exception!
      try { 
        durationField0.add((-3113L), (-3358));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000-02:19:36 (BuddhistChronology[America/Recife])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      durationField0.getValueAsLong((long) 1, (long) 1);
      durationField0.isSupported();
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      durationFieldType0.isSupported(buddhistChronology0);
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      // Undeclared exception!
      try { 
        unsupportedDurationField0.getMillis(10, (long) 10);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // years field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeZone.forOffsetMillis(1);
      DateTimeZone.forOffsetMillis((-1818));
      DurationField durationField0 = buddhistChronology0.minutes();
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, (-1550));
      scaledDurationField0.getDifferenceAsLong((-3333L), (-1550));
      scaledDurationField0.getValueAsLong((-343L), (-343L));
      scaledDurationField0.add((long) 0, 0L);
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.compareTo(durationField0);
      MillisDurationField millisDurationField1 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField1.getValue((long) (-1818));
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-1L));
      preciseDurationField0.getMillis((-1L), 0L);
      preciseDurationField0.getValueAsLong((-343L), (-343L));
      MillisDurationField millisDurationField2 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField2.getValueAsLong((-2485L));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.toString();
      MillisDurationField millisDurationField1 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField1.equals("DurationField[millis]");
      PeriodType periodType0 = PeriodType.seconds();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      DurationFieldType durationFieldType0 = mutablePeriod0.getFieldType(0);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      durationFieldType0.isSupported(iSOChronology0);
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      preciseDurationField0.subtract((-299L), 2664L);
      // Undeclared exception!
      try { 
        preciseDurationField0.getValueAsLong((long) 0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.PreciseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.days();
      durationField0.add((-2677L), 1);
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      decoratedDurationField0.getUnitMillis();
      PeriodType periodType0 = PeriodType.standard();
      PeriodType periodType1 = periodType0.withYearsRemoved();
      // Undeclared exception!
      try { 
        periodType1.getFieldType(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.isSupported();
      millisDurationField0.getMillis(3417L);
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(millisDurationField0, durationFieldType0, 3038);
      scaledDurationField0.getValue(0L, 3417L);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.millis();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      decoratedDurationField0.getUnitMillis();
      durationField0.getDifferenceAsLong(1L, 3574);
      decoratedDurationField0.compareTo(durationField0);
      long long0 = new Integer(1);
      decoratedDurationField0.add(1L, 3574);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 3574);
      scaledDurationField0.subtract((-42521587200000L), 0);
      scaledDurationField0.add(3575L, 0L);
      decoratedDurationField0.getUnitMillis();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1L);
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      DurationFieldType durationFieldType1 = millisDurationField0.getType();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType1);
      // Undeclared exception!
      try { 
        unsupportedDurationField0.add(235L, 209);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millis field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getUnitMillis();
      millisDurationField0.getValueAsLong(196L, 1667L);
      millisDurationField0.isPrecise();
      DurationFieldType durationFieldType0 = null;
      millisDurationField0.isSupported();
      ScaledDurationField scaledDurationField0 = null;
      try {
        scaledDurationField0 = new ScaledDurationField(millisDurationField0, (DurationFieldType) null, 85);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      buddhistChronology0.toString();
      DurationField durationField0 = buddhistChronology0.millis();
      durationField0.getMillis(86400L, 86400L);
      durationField0.getUnitMillis();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getMillis(3L, 3L);
      millisDurationField0.getDifference(0L, 0L);
      millisDurationField0.add(0L, (-328));
      millisDurationField0.getMillis((-1), (long) (-1));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getDifferenceAsLong((-4980L), (-4980L));
      millisDurationField0.equals("");
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Chronology chronology0 = islamicChronology0.withUTC();
      DurationField durationField0 = durationFieldType0.getField(chronology0);
      durationField0.getMillis((-179), 0L);
      durationFieldType0.isSupported(islamicChronology0);
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 0L);
      preciseDurationField0.isPrecise();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      unsupportedDurationField0.compareTo(durationField0);
      preciseDurationField0.equals(islamicChronology0);
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(preciseDurationField0, durationFieldType0);
      decoratedDurationField0.getWrappedField();
      MillisDurationField millisDurationField1 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField1.getMillis((long) 1, 0L);
      // Undeclared exception!
      try { 
        decoratedDurationField0.getValueAsLong(1L, (long) 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.field.PreciseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getMillis(0L, (-1122L));
      millisDurationField0.getType();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getValueAsLong((-1985L), 185L);
      DurationFieldType durationFieldType0 = millisDurationField0.getType();
      MillisDurationField millisDurationField1 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField1.isSupported();
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(millisDurationField0, durationFieldType0);
      int int0 = 1981;
      decoratedDurationField0.subtract(2031L, 1981);
      decoratedDurationField0.getValueAsLong(2031L, 5232L);
      int int1 = 1;
      decoratedDurationField0.getMillis(1, 0L);
      decoratedDurationField0.getMillis(1, 2031L);
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      durationFieldType0.isSupported((Chronology) null);
      // Undeclared exception!
      try { 
        unsupportedDurationField0.add((-1L), 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millis field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.isSupported();
      millisDurationField0.getValue((-895L), (-895L));
      DurationFieldType durationFieldType0 = millisDurationField0.getType();
      millisDurationField0.getValue((-823L));
      millisDurationField0.getValueAsLong(2829L);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.hours();
      ScaledDurationField scaledDurationField0 = null;
      try {
        scaledDurationField0 = new ScaledDurationField(durationField0, durationFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The scalar must not be 0 or 1
         //
         verifyException("org.joda.time.field.ScaledDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getMillis(0, (long) 0);
      millisDurationField0.add(0L, 9223372036854775807L);
      millisDurationField0.getDifferenceAsLong(0L, 0L);
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      long long0 = 0L;
      Object object0 = new Object();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.months();
      durationField0.isPrecise();
      durationField0.getValueAsLong(0L);
      durationField0.add(0L, 1410L);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DurationField durationField0 = durationFieldType0.getField(julianChronology0);
      durationField0.isPrecise();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      // Undeclared exception!
      try { 
        unsupportedDurationField0.getValueAsLong(0L, 0L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getValueAsLong(360L);
      millisDurationField0.getMillis(0L);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DurationField durationField0 = buddhistChronology0.minutes();
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      DurationField durationField1 = durationFieldType0.getField(buddhistChronology0);
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology1.monthOfYear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DurationField durationField2 = delegatedDateTimeField0.getLeapDurationField();
      durationField1.compareTo(durationField2);
      durationField1.subtract((long) 1, 1);
      DecoratedDurationField decoratedDurationField0 = new DecoratedDurationField(durationField0, durationFieldType0);
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getMillis(2591L);
      durationFieldType0.getField(buddhistChronology0);
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      // Undeclared exception!
      try { 
        unsupportedDurationField0.getValue((long) 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millis field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      long long0 = 3258L;
      long long1 = 0L;
      millisDurationField0.getValue(3258L, 0L);
      long long2 = (-76L);
      millisDurationField0.getDifferenceAsLong((-76L), (-76L));
      DurationFieldType durationFieldType0 = null;
      ScaledDurationField scaledDurationField0 = null;
      try {
        scaledDurationField0 = new ScaledDurationField(millisDurationField0, (DurationFieldType) null, 3258);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Days days0 = Days.ONE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      // Undeclared exception!
      try { 
        unsupportedDurationField0.subtract((-717L), (-717L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // days field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getValue(1440L, 971L);
      MillisDurationField millisDurationField1 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField1.getName();
      millisDurationField0.getMillis(1L, 1L);
      millisDurationField0.getMillis((-1L), (-1L));
      millisDurationField0.subtract(1440L, 0L);
      millisDurationField1.toString();
      millisDurationField1.getValue(1884L, (-127L));
      millisDurationField0.getMillis(1884);
      millisDurationField0.subtract(1440L, 0);
      MillisDurationField millisDurationField2 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField2.compareTo((DurationField) millisDurationField0);
      MillisDurationField millisDurationField3 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField3.getDifference((-1034L), (-1L));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      DurationField durationField0 = offsetDateTimeField0.getDurationField();
      durationField0.toString();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      // Undeclared exception!
      try { 
        millisDurationField0.getDifference(26607895200000L, 2995L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 26607895197005
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DurationField durationField0 = buddhistChronology0.millis();
      durationField0.subtract((-3074L), 1);
      durationField0.getValueAsLong(0L);
      Minutes minutes0 = Minutes.MIN_VALUE;
      Minutes minutes1 = minutes0.dividedBy(317351877);
      DurationFieldType durationFieldType0 = minutes1.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1994L);
      preciseDurationField0.getMillis((-3074L), 0L);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.centuries();
      long long0 = 0L;
      // Undeclared exception!
      try { 
        durationField0.subtract(0L, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 214748364800
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JulianChronology.getInstance();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getValue((-875L));
      int int0 = Integer.MIN_VALUE;
      millisDurationField0.isPrecise();
      long long0 = 0L;
      millisDurationField0.subtract(0L, (-875));
      // Undeclared exception!
      try { 
        millisDurationField0.compareTo((DurationField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.MillisDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      durationFieldType0.getField(buddhistChronology0);
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 1670L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      int int0 = (-1);
      ScaledDurationField scaledDurationField0 = new ScaledDurationField(preciseDurationField0, durationFieldType0, (-1));
      scaledDurationField0.subtract(0L, 48L);
      preciseDurationField0.toString();
      scaledDurationField0.getMillis((-1), 1670L);
      long long0 = 0L;
      scaledDurationField0.getValueAsLong((long) (-1), 0L);
      scaledDurationField0.getValue((-1149L), (-1149L));
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      Integer integer0 = new Integer((-1));
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.isPrecise();
      durationFieldType0.isSupported(buddhistChronology0);
      long long1 = 2439L;
      // Undeclared exception!
      try { 
        unsupportedDurationField0.getDifferenceAsLong((-902L), (-1149L));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // years field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      UnsupportedDurationField.getInstance(durationFieldType0);
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      millisDurationField0.getValue((-245L));
      millisDurationField0.isPrecise();
      DurationFieldType.weekyears();
      millisDurationField0.getValueAsLong((-903L), 951L);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Days days0 = Days.FIVE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 2629799994L);
      preciseDurationField0.add(2629799994L, 2629799994L);
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        localDateTime1.minusYears(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
