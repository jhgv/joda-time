/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:37:58 GMT 2018
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Duration;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractDuration_ESTest extends AbstractDuration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      String string0 = duration0.toString();
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals("PT0S", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = Duration.millis((-623L));
      assertEquals((-623L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      duration0.hashCode();
      assertEquals((-623L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = Duration.millis(195L);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(195L, duration0.getMillis());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.multipliedBy(0L);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(195L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      
      boolean boolean0 = duration0.equals(duration1);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(195L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(boolean0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = new Duration(431L);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(431L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      Duration duration1 = Duration.standardMinutes(1662L);
      assertEquals(1662L, duration1.getStandardMinutes());
      assertEquals(27L, duration1.getStandardHours());
      assertEquals(99720L, duration1.getStandardSeconds());
      assertEquals(1L, duration1.getStandardDays());
      assertEquals(99720000L, duration1.getMillis());
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration1, duration0);
      
      boolean boolean0 = duration0.isLongerThan(duration1);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(431L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1662L, duration1.getStandardMinutes());
      assertEquals(27L, duration1.getStandardHours());
      assertEquals(99720L, duration1.getStandardSeconds());
      assertEquals(1L, duration1.getStandardDays());
      assertEquals(99720000L, duration1.getMillis());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(boolean0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      Duration duration1 = Duration.millis(1L);
      assertEquals(1L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration1, duration0);
      
      boolean boolean0 = duration1.isEqual(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(boolean0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = new Duration(472L);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(472L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      Period period0 = duration0.toPeriod();
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(472L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(1662L);
      assertEquals(99720L, duration0.getStandardSeconds());
      assertEquals(99720000L, duration0.getMillis());
      assertEquals(27L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardDays());
      assertEquals(1662L, duration0.getStandardMinutes());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.toDuration();
      assertEquals(99720L, duration0.getStandardSeconds());
      assertEquals(99720000L, duration0.getMillis());
      assertEquals(27L, duration0.getStandardHours());
      assertEquals(1L, duration0.getStandardDays());
      assertEquals(1662L, duration0.getStandardMinutes());
      assertEquals(99720L, duration1.getStandardSeconds());
      assertEquals(1L, duration1.getStandardDays());
      assertEquals(27L, duration1.getStandardHours());
      assertEquals(99720000L, duration1.getMillis());
      assertEquals(1662L, duration1.getStandardMinutes());
      assertNotNull(duration1);
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-429L));
      assertEquals((-429L), duration0.getStandardHours());
      assertEquals((-1544400000L), duration0.getMillis());
      assertEquals((-25740L), duration0.getStandardMinutes());
      assertEquals((-17L), duration0.getStandardDays());
      assertEquals((-1544400L), duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.toDuration();
      assertEquals((-429L), duration0.getStandardHours());
      assertEquals((-1544400000L), duration0.getMillis());
      assertEquals((-25740L), duration0.getStandardMinutes());
      assertEquals((-17L), duration0.getStandardDays());
      assertEquals((-1544400L), duration0.getStandardSeconds());
      assertEquals((-25740L), duration1.getStandardMinutes());
      assertEquals((-1544400000L), duration1.getMillis());
      assertEquals((-429L), duration1.getStandardHours());
      assertEquals((-17L), duration1.getStandardDays());
      assertEquals((-1544400L), duration1.getStandardSeconds());
      assertNotNull(duration1);
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.toDuration();
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertNotNull(duration1);
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-1L));
      assertEquals((-1L), duration0.getStandardHours());
      assertEquals((-3600000L), duration0.getMillis());
      assertEquals((-3600L), duration0.getStandardSeconds());
      assertEquals((-60L), duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      Duration duration1 = duration0.dividedBy((-1L), roundingMode0);
      assertEquals((-1L), duration0.getStandardHours());
      assertEquals((-3600000L), duration0.getMillis());
      assertEquals((-3600L), duration0.getStandardSeconds());
      assertEquals((-60L), duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(60L, duration1.getStandardMinutes());
      assertEquals(1L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(3600000L, duration1.getMillis());
      assertEquals(3600L, duration1.getStandardSeconds());
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      
      boolean boolean0 = duration0.isShorterThan(duration1);
      assertEquals((-1L), duration0.getStandardHours());
      assertEquals((-3600000L), duration0.getMillis());
      assertEquals((-3600L), duration0.getStandardSeconds());
      assertEquals((-60L), duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(60L, duration1.getStandardMinutes());
      assertEquals(1L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(3600000L, duration1.getMillis());
      assertEquals(3600L, duration1.getStandardSeconds());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertTrue(boolean0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      boolean boolean0 = duration0.isShorterThan(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.millis(60L);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(60L, duration0.getMillis());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.dividedBy(60L);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(60L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(1L, duration1.getMillis());
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      
      boolean boolean0 = duration0.isLongerThan(duration1);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(60L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(1L, duration1.getMillis());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertTrue(boolean0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-2604L));
      assertEquals((-62496L), duration0.getStandardHours());
      assertEquals((-3749760L), duration0.getStandardMinutes());
      assertEquals((-224985600L), duration0.getStandardSeconds());
      assertEquals((-224985600000L), duration0.getMillis());
      assertEquals((-2604L), duration0.getStandardDays());
      assertNotNull(duration0);
      
      boolean boolean0 = duration0.isLongerThan(duration0);
      assertEquals((-62496L), duration0.getStandardHours());
      assertEquals((-3749760L), duration0.getStandardMinutes());
      assertEquals((-224985600L), duration0.getStandardSeconds());
      assertEquals((-224985600000L), duration0.getMillis());
      assertEquals((-2604L), duration0.getStandardDays());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = new Duration((-2076L), (-2076L));
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      boolean boolean0 = duration0.equals(duration0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.minus(43200000L);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-43200L), duration1.getStandardSeconds());
      assertEquals((-12L), duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-43200000L), duration1.getMillis());
      assertEquals((-720L), duration1.getStandardMinutes());
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      
      boolean boolean0 = duration1.equals(duration0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals((-43200L), duration1.getStandardSeconds());
      assertEquals((-12L), duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-43200000L), duration1.getMillis());
      assertEquals((-720L), duration1.getStandardMinutes());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(boolean0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      // Undeclared exception!
      try { 
        duration0.compareTo((ReadableDuration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractDuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(38898367845L);
      assertEquals(38898367845000L, duration0.getMillis());
      assertEquals(38898367845L, duration0.getStandardSeconds());
      assertEquals(648306130L, duration0.getStandardMinutes());
      assertEquals(450212L, duration0.getStandardDays());
      assertEquals(10805102L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      Duration duration1 = Duration.standardSeconds(2572L);
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(2572L, duration1.getStandardSeconds());
      assertEquals(2572000L, duration1.getMillis());
      assertEquals(42L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration1, duration0);
      
      int int0 = duration0.compareTo((ReadableDuration) duration1);
      assertEquals(38898367845000L, duration0.getMillis());
      assertEquals(38898367845L, duration0.getStandardSeconds());
      assertEquals(648306130L, duration0.getStandardMinutes());
      assertEquals(450212L, duration0.getStandardDays());
      assertEquals(10805102L, duration0.getStandardHours());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(2572L, duration1.getStandardSeconds());
      assertEquals(2572000L, duration1.getMillis());
      assertEquals(42L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertEquals(1, int0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(2158L);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(35L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(2158000L, duration0.getMillis());
      assertEquals(2158L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.plus(1911L);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(35L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(2158000L, duration0.getMillis());
      assertEquals(2158L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(2159911L, duration1.getMillis());
      assertEquals(2159L, duration1.getStandardSeconds());
      assertEquals(35L, duration1.getStandardMinutes());
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      
      int int0 = duration0.compareTo((ReadableDuration) duration1);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(35L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(2158000L, duration0.getMillis());
      assertEquals(2158L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(2159911L, duration1.getMillis());
      assertEquals(2159L, duration1.getStandardSeconds());
      assertEquals(35L, duration1.getStandardMinutes());
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertEquals((-1), int0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0L);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      int int0 = duration0.compareTo((ReadableDuration) duration0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = Duration.standardDays(60L);
      assertEquals(1440L, duration0.getStandardHours());
      assertEquals(60L, duration0.getStandardDays());
      assertEquals(5184000L, duration0.getStandardSeconds());
      assertEquals(86400L, duration0.getStandardMinutes());
      assertEquals(5184000000L, duration0.getMillis());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.multipliedBy(0L);
      assertEquals(1440L, duration0.getStandardHours());
      assertEquals(60L, duration0.getStandardDays());
      assertEquals(5184000L, duration0.getStandardSeconds());
      assertEquals(86400L, duration0.getStandardMinutes());
      assertEquals(5184000000L, duration0.getMillis());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      
      Duration duration2 = new Duration(60L, 0L);
      assertEquals(0L, duration2.getStandardSeconds());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals((-60L), duration2.getMillis());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals(0L, duration2.getStandardDays());
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertNotNull(duration2);
      
      Duration duration3 = duration1.plus((ReadableDuration) duration2);
      assertEquals(1440L, duration0.getStandardHours());
      assertEquals(60L, duration0.getStandardDays());
      assertEquals(5184000L, duration0.getStandardSeconds());
      assertEquals(86400L, duration0.getStandardMinutes());
      assertEquals(5184000000L, duration0.getMillis());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration2.getStandardSeconds());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals((-60L), duration2.getMillis());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(0L, duration3.getStandardHours());
      assertEquals(0L, duration3.getStandardSeconds());
      assertEquals((-60L), duration3.getMillis());
      assertEquals(0L, duration3.getStandardMinutes());
      assertEquals(0L, duration3.getStandardDays());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertFalse(duration3.equals((Object)duration0));
      assertTrue(duration3.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration1));
      assertNotNull(duration3);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration3);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration3);
      assertNotSame(duration2, duration0);
      assertNotSame(duration3, duration2);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration1);
      
      String string0 = duration3.toString();
      assertEquals(1440L, duration0.getStandardHours());
      assertEquals(60L, duration0.getStandardDays());
      assertEquals(5184000L, duration0.getStandardSeconds());
      assertEquals(86400L, duration0.getStandardMinutes());
      assertEquals(5184000000L, duration0.getMillis());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration2.getStandardSeconds());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals((-60L), duration2.getMillis());
      assertEquals(0L, duration2.getStandardMinutes());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(0L, duration3.getStandardHours());
      assertEquals(0L, duration3.getStandardSeconds());
      assertEquals((-60L), duration3.getMillis());
      assertEquals(0L, duration3.getStandardMinutes());
      assertEquals(0L, duration3.getStandardDays());
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration0.equals((Object)duration3));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration3));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration0));
      assertTrue(duration2.equals((Object)duration3));
      assertFalse(duration3.equals((Object)duration0));
      assertTrue(duration3.equals((Object)duration2));
      assertFalse(duration3.equals((Object)duration1));
      assertEquals("PT-0.060S", string0);
      assertNotNull(string0);
      assertNotSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration0, duration3);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration3);
      assertNotSame(duration2, duration1);
      assertNotSame(duration2, duration3);
      assertNotSame(duration2, duration0);
      assertNotSame(duration3, duration2);
      assertNotSame(duration3, duration0);
      assertNotSame(duration3, duration1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-764L));
      assertEquals((-12L), duration0.getStandardMinutes());
      assertEquals((-764L), duration0.getStandardSeconds());
      assertEquals((-764000L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      String string0 = duration0.toString();
      assertEquals((-12L), duration0.getStandardMinutes());
      assertEquals((-764L), duration0.getStandardSeconds());
      assertEquals((-764000L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals("PT-764S", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = new Duration(431L);
      String string0 = duration0.toString();
      assertEquals("PT0.431S", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = new Duration(431L);
      Duration duration1 = duration0.multipliedBy(0);
      Duration duration2 = Duration.ZERO;
      boolean boolean0 = duration1.equals(duration2);
      assertTrue(boolean0);
      assertFalse(duration0.equals((Object)duration2));
      assertFalse(duration2.equals((Object)duration0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = new Duration(431L);
      boolean boolean0 = duration0.equals(" #N{*e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      boolean boolean0 = duration0.isShorterThan((ReadableDuration) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      boolean boolean0 = duration0.isLongerThan((ReadableDuration) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = new Duration(431L);
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      Duration duration1 = duration0.dividedBy(431L, roundingMode0);
      boolean boolean0 = duration1.isEqual(duration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      boolean boolean0 = duration0.isEqual((ReadableDuration) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Duration duration0 = Duration.standardDays(60L);
      Duration duration1 = new Duration(60L, 0L);
      boolean boolean0 = duration0.isShorterThan(duration1);
      assertFalse(boolean0);
  }
}
