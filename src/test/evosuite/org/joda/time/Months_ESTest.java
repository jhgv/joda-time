/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:31:06 GMT 2018
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DurationFieldType;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Months_ESTest extends Months_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Months months1 = null;
      Months months2 = Months.months((-544));
      assertFalse(months2.equals((Object)months0));
      assertNotSame(months2, months0);
      assertEquals(1, months2.size());
      assertEquals((-544), months2.getMonths());
      assertNotNull(months2);
      
      boolean boolean0 = months0.isGreaterThan((Months) null);
      assertFalse(months0.equals((Object)months2));
      assertTrue(boolean0);
      assertNotSame(months0, months2);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months3 = months2.plus((Months) null);
      assertFalse(months2.equals((Object)months0));
      assertFalse(months3.equals((Object)months0));
      assertNotSame(months2, months0);
      assertSame(months2, months3);
      assertSame(months3, months2);
      assertNotSame(months3, months0);
      assertEquals(1, months2.size());
      assertEquals((-544), months2.getMonths());
      assertEquals(1, months3.size());
      assertEquals((-544), months3.getMonths());
      assertNotNull(months3);
      
      int int0 = (-523);
      // Undeclared exception!
      try { 
        months0.FIVE.getFieldType((-523));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -523
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Months months0 = Months.FOUR;
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = months0.isGreaterThan(months0);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      
      Months months1 = months0.minus(0);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(4, months1.getMonths());
      assertNotNull(months1);
      
      int int0 = 46;
      int int1 = months1.EIGHT.compareTo((BaseSingleFieldPeriod) months0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(4, months1.getMonths());
      
      Months months2 = months1.MAX_VALUE.minus(46);
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months2);
      assertSame(months1, months0);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(4, months1.getMonths());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      Months months3 = Months.SIX;
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertEquals(6, months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
      
      int int2 = months3.ONE.getValue(0);
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertEquals(6, months3.getMonths());
      assertEquals(1, months3.size());
      
      Months months4 = months2.ONE.plus(months1);
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertNotSame(months0, months3);
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months1, months2);
      assertNotSame(months1, months4);
      assertNotSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months2, months4);
      assertNotSame(months2, months1);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(4, months1.getMonths());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals(5, months4.getMonths());
      assertNotNull(months4);
      
      Months months5 = months4.MAX_VALUE.dividedBy(11);
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months4));
      assertNotSame(months0, months3);
      assertSame(months0, months1);
      assertNotSame(months0, months5);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months1, months5);
      assertNotSame(months1, months2);
      assertNotSame(months1, months4);
      assertNotSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months2, months4);
      assertNotSame(months2, months5);
      assertNotSame(months2, months1);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months5);
      assertNotSame(months4, months3);
      assertNotSame(months5, months1);
      assertNotSame(months5, months3);
      assertNotSame(months5, months0);
      assertNotSame(months5, months2);
      assertNotSame(months5, months4);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(4, months1.getMonths());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals(5, months4.getMonths());
      assertEquals(195225786, months5.getMonths());
      assertEquals(1, months5.size());
      assertNotNull(months5);
      
      Months months6 = months0.minus(months3);
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months5));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months3));
      assertNotSame(months0, months3);
      assertSame(months0, months1);
      assertNotSame(months0, months5);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months6);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months5);
      assertNotSame(months3, months6);
      assertNotSame(months3, months4);
      assertNotSame(months6, months2);
      assertNotSame(months6, months4);
      assertNotSame(months6, months5);
      assertNotSame(months6, months0);
      assertNotSame(months6, months1);
      assertNotSame(months6, months3);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(6, months3.getMonths());
      assertEquals(1, months3.size());
      assertEquals((-2), months6.getMonths());
      assertEquals(1, months6.size());
      assertNotNull(months6);
      
      String string0 = months4.TWO.toString();
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months6));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months5));
      assertFalse(months4.equals((Object)months3));
      assertEquals("P2M", string0);
      assertNotSame(months0, months3);
      assertSame(months0, months1);
      assertNotSame(months0, months5);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months6);
      assertNotSame(months1, months6);
      assertNotSame(months1, months5);
      assertNotSame(months1, months2);
      assertNotSame(months1, months4);
      assertNotSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months2, months6);
      assertNotSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months2, months4);
      assertNotSame(months2, months5);
      assertNotSame(months2, months1);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months6);
      assertNotSame(months4, months2);
      assertNotSame(months4, months5);
      assertNotSame(months4, months3);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(4, months1.getMonths());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals(5, months4.getMonths());
      assertNotNull(string0);
      
      Months months7 = months5.ZERO.plus(795);
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months6));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months5));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months6));
      assertFalse(months7.equals((Object)months3));
      assertFalse(months7.equals((Object)months6));
      assertFalse(months7.equals((Object)months2));
      assertFalse(months7.equals((Object)months1));
      assertFalse(months7.equals((Object)months0));
      assertFalse(months7.equals((Object)months5));
      assertFalse(months7.equals((Object)months4));
      assertNotSame(months0, months3);
      assertNotSame(months0, months7);
      assertSame(months0, months1);
      assertNotSame(months0, months5);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months6);
      assertNotSame(months1, months6);
      assertNotSame(months1, months5);
      assertNotSame(months1, months2);
      assertNotSame(months1, months4);
      assertNotSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months7);
      assertNotSame(months2, months6);
      assertNotSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months2, months7);
      assertNotSame(months2, months4);
      assertNotSame(months2, months5);
      assertNotSame(months2, months1);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months6);
      assertNotSame(months4, months2);
      assertNotSame(months4, months7);
      assertNotSame(months4, months5);
      assertNotSame(months4, months3);
      assertNotSame(months5, months1);
      assertNotSame(months5, months3);
      assertNotSame(months5, months7);
      assertNotSame(months5, months0);
      assertNotSame(months5, months2);
      assertNotSame(months5, months4);
      assertNotSame(months5, months6);
      assertNotSame(months7, months3);
      assertNotSame(months7, months6);
      assertNotSame(months7, months2);
      assertNotSame(months7, months1);
      assertNotSame(months7, months0);
      assertNotSame(months7, months5);
      assertNotSame(months7, months4);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(4, months1.getMonths());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals(5, months4.getMonths());
      assertEquals(195225786, months5.getMonths());
      assertEquals(1, months5.size());
      assertEquals(795, months7.getMonths());
      assertEquals(1, months7.size());
      assertNotNull(months7);
      
      DurationFieldType durationFieldType1 = months0.getFieldType();
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months7));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months6));
      assertNotSame(months0, months3);
      assertNotSame(months0, months7);
      assertSame(months0, months1);
      assertNotSame(months0, months5);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months6);
      assertSame(durationFieldType1, durationFieldType0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals("months", durationFieldType1.getName());
      assertEquals("months", durationFieldType1.toString());
      assertNotNull(durationFieldType1);
      
      Months months8 = months2.minus(months1);
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months7));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months7));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months7));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months8.equals((Object)months7));
      assertFalse(months8.equals((Object)months3));
      assertFalse(months8.equals((Object)months4));
      assertFalse(months8.equals((Object)months6));
      assertFalse(months8.equals((Object)months0));
      assertFalse(months8.equals((Object)months2));
      assertFalse(months8.equals((Object)months5));
      assertFalse(months8.equals((Object)months1));
      assertNotSame(months0, months3);
      assertNotSame(months0, months7);
      assertSame(months0, months1);
      assertNotSame(months0, months8);
      assertNotSame(months0, months5);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months6);
      assertNotSame(months1, months6);
      assertNotSame(months1, months5);
      assertNotSame(months1, months2);
      assertNotSame(months1, months4);
      assertNotSame(months1, months8);
      assertNotSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months7);
      assertNotSame(months2, months6);
      assertNotSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months2, months7);
      assertNotSame(months2, months4);
      assertNotSame(months2, months8);
      assertNotSame(months2, months5);
      assertNotSame(months2, months1);
      assertNotSame(months8, months7);
      assertNotSame(months8, months3);
      assertNotSame(months8, months4);
      assertNotSame(months8, months6);
      assertNotSame(months8, months0);
      assertNotSame(months8, months2);
      assertNotSame(months8, months5);
      assertNotSame(months8, months1);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(4, months1.getMonths());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(2147483597, months8.getMonths());
      assertEquals(1, months8.size());
      assertNotNull(months8);
      
      Months months9 = months5.FIVE.dividedBy(795);
      assertFalse(months9.equals((Object)months7));
      assertFalse(months9.equals((Object)months4));
      assertFalse(months9.equals((Object)months6));
      assertFalse(months9.equals((Object)months0));
      assertFalse(months9.equals((Object)months1));
      assertFalse(months9.equals((Object)months8));
      assertFalse(months9.equals((Object)months5));
      assertFalse(months9.equals((Object)months2));
      assertFalse(months9.equals((Object)months3));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months7));
      assertFalse(months0.equals((Object)months8));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months8));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months7));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months7));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months8));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months6));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months7));
      assertFalse(months4.equals((Object)months8));
      assertFalse(months4.equals((Object)months5));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months5.equals((Object)months8));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months7));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months6));
      assertNotSame(months9, months7);
      assertNotSame(months9, months4);
      assertNotSame(months9, months6);
      assertNotSame(months9, months0);
      assertNotSame(months9, months1);
      assertNotSame(months9, months8);
      assertNotSame(months9, months5);
      assertNotSame(months9, months2);
      assertNotSame(months9, months3);
      assertNotSame(months0, months3);
      assertNotSame(months0, months7);
      assertSame(months0, months1);
      assertNotSame(months0, months8);
      assertNotSame(months0, months9);
      assertNotSame(months0, months5);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months6);
      assertNotSame(months1, months6);
      assertNotSame(months1, months5);
      assertNotSame(months1, months9);
      assertNotSame(months1, months2);
      assertNotSame(months1, months4);
      assertNotSame(months1, months8);
      assertNotSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months7);
      assertNotSame(months2, months6);
      assertNotSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months2, months7);
      assertNotSame(months2, months4);
      assertNotSame(months2, months8);
      assertNotSame(months2, months9);
      assertNotSame(months2, months5);
      assertNotSame(months2, months1);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months6);
      assertNotSame(months4, months2);
      assertNotSame(months4, months9);
      assertNotSame(months4, months7);
      assertNotSame(months4, months8);
      assertNotSame(months4, months5);
      assertNotSame(months4, months3);
      assertNotSame(months5, months8);
      assertNotSame(months5, months9);
      assertNotSame(months5, months1);
      assertNotSame(months5, months3);
      assertNotSame(months5, months7);
      assertNotSame(months5, months0);
      assertNotSame(months5, months2);
      assertNotSame(months5, months4);
      assertNotSame(months5, months6);
      assertEquals(0, months9.getMonths());
      assertEquals(1, months9.size());
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(4, months1.getMonths());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals(5, months4.getMonths());
      assertEquals(195225786, months5.getMonths());
      assertEquals(1, months5.size());
      assertNotNull(months9);
      
      boolean boolean1 = months0.isGreaterThan((Months) null);
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months7));
      assertFalse(months0.equals((Object)months8));
      assertFalse(months0.equals((Object)months9));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months6));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months7);
      assertSame(months0, months1);
      assertNotSame(months0, months8);
      assertNotSame(months0, months9);
      assertNotSame(months0, months5);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months6);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      
      // Undeclared exception!
      try { 
        Months.parseMonths("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Months months0 = Months.TEN;
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertNotNull(months0);
      
      Months months1 = months0.negated();
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals((-10), months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      int int0 = (-15);
      String string0 = months0.toString();
      assertFalse(months0.equals((Object)months1));
      assertEquals("P10M", string0);
      assertNotSame(months0, months1);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertNotNull(string0);
      
      Months months2 = months1.plus((-15));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals((-10), months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-25), months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      DurationFieldType durationFieldType0 = months1.getFieldType();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals((-10), months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int1 = months2.MIN_VALUE.get(durationFieldType0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(int1 == int0);
      assertEquals(Integer.MIN_VALUE, int1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals((-10), months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-25), months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      
      Months months3 = months1.minus(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals((-10), months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-20), months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
      
      int int2 = months3.TEN.compareTo((BaseSingleFieldPeriod) months1);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals((-10), months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-20), months3.getMonths());
      assertEquals(1, months3.size());
      
      Months months4 = Months.months(Integer.MIN_VALUE);
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertNotSame(months4, months0);
      assertNotSame(months4, months3);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertEquals(1, months4.size());
      assertEquals(Integer.MIN_VALUE, months4.getMonths());
      assertNotNull(months4);
      
      int int3 = (-2359);
      Months months5 = months1.negated();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months3));
      assertNotSame(months0, months2);
      assertSame(months0, months5);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months1, months3);
      assertNotSame(months1, months4);
      assertNotSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months1, months0);
      assertNotSame(months5, months1);
      assertSame(months5, months0);
      assertNotSame(months5, months2);
      assertNotSame(months5, months4);
      assertNotSame(months5, months3);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals((-10), months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months5.size());
      assertEquals(10, months5.getMonths());
      assertNotNull(months5);
      
      MutablePeriod mutablePeriod0 = months0.SEVEN.toMutablePeriod();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertNotSame(months0, months2);
      assertSame(months0, months5);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertNotNull(mutablePeriod0);
      
      Months months6 = months1.plus(int3);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months2));
      assertNotSame(months0, months6);
      assertNotSame(months0, months2);
      assertSame(months0, months5);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months1, months3);
      assertNotSame(months1, months4);
      assertNotSame(months1, months2);
      assertNotSame(months1, months6);
      assertNotSame(months1, months5);
      assertNotSame(months1, months0);
      assertNotSame(months6, months4);
      assertNotSame(months6, months3);
      assertNotSame(months6, months0);
      assertNotSame(months6, months5);
      assertNotSame(months6, months1);
      assertNotSame(months6, months2);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals((-10), months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-2369), months6.getMonths());
      assertEquals(1, months6.size());
      assertNotNull(months6);
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      String string1 = "N&[-P5hM)";
      // Undeclared exception!
      try { 
        Months.parseMonths(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"N&[-P5hM)\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Months months0 = Months.TWO;
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertNotNull(months0);
      
      Months months1 = Months.NINE;
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(9, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      boolean boolean0 = months0.isLessThan(months1);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertTrue(boolean0);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(9, months1.getMonths());
      assertEquals(1, months1.size());
      
      String string0 = months1.ONE.toString();
      assertFalse(months1.equals((Object)months0));
      assertEquals("P1M", string0);
      assertNotSame(months1, months0);
      assertEquals(9, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(string0);
      
      boolean boolean1 = months1.isGreaterThan(months0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(9, months1.getMonths());
      assertEquals(1, months1.size());
      
      String string1 = months0.toString();
      assertFalse(months0.equals((Object)months1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("P2M", string1);
      assertNotSame(months0, months1);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertNotNull(string1);
      
      PeriodType periodType0 = months0.getPeriodType();
      assertFalse(months0.equals((Object)months1));
      assertNotSame(months0, months1);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Months months2 = months0.minus(months0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      DurationFieldType durationFieldType0 = months1.getFieldType();
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertEquals(9, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      boolean boolean2 = months1.isLessThan(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(9, months1.getMonths());
      assertEquals(1, months1.size());
      
      boolean boolean3 = months1.isLessThan(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(9, months1.getMonths());
      assertEquals(1, months1.size());
      
      Months months3 = months0.plus(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(4, months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
      
      int int0 = months2.getMonths();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertEquals(0, int0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      
      String string2 = months3.toString();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("P4M", string2);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(4, months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Months months0 = Months.FOUR;
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = months0.isGreaterThan(months0);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      
      Months months1 = months0.minus(0);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      int int0 = 46;
      int int1 = months1.EIGHT.compareTo((BaseSingleFieldPeriod) months0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      
      Months months2 = months1.MAX_VALUE.minus(46);
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertNotSame(months0, months2);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals(2147483601, months2.getMonths());
      assertNotNull(months2);
      
      Months months3 = Months.SIX;
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertEquals(6, months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
      
      int int2 = months3.ONE.getValue(0);
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertEquals(6, months3.getMonths());
      assertEquals(1, months3.size());
      
      Months months4 = months2.ONE.plus(months1);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertSame(months0, months1);
      assertNotSame(months0, months4);
      assertSame(months1, months0);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months4);
      assertNotSame(months2, months3);
      assertNotSame(months2, months4);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotSame(months4, months3);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months4, months0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(5, months4.getMonths());
      assertEquals(1, months4.size());
      assertNotNull(months4);
      
      Months months5 = months4.MAX_VALUE.dividedBy((-13));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months4));
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months5);
      assertSame(months1, months0);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months1, months4);
      assertNotSame(months2, months5);
      assertNotSame(months2, months3);
      assertNotSame(months2, months4);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotSame(months4, months3);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months4, months5);
      assertNotSame(months4, months0);
      assertNotSame(months5, months3);
      assertNotSame(months5, months1);
      assertNotSame(months5, months2);
      assertNotSame(months5, months0);
      assertNotSame(months5, months4);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(5, months4.getMonths());
      assertEquals(1, months4.size());
      assertEquals((-165191049), months5.getMonths());
      assertEquals(1, months5.size());
      assertNotNull(months5);
      
      String string0 = months4.TWO.toString();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months5));
      assertFalse(months4.equals((Object)months0));
      assertEquals("P2M", string0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months5);
      assertSame(months1, months0);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months1, months4);
      assertNotSame(months2, months5);
      assertNotSame(months2, months3);
      assertNotSame(months2, months4);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotSame(months4, months3);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months4, months5);
      assertNotSame(months4, months0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(5, months4.getMonths());
      assertEquals(1, months4.size());
      assertNotNull(string0);
      
      Months months6 = months5.ZERO.plus(795);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months5));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months2));
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months5);
      assertNotSame(months0, months6);
      assertSame(months1, months0);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months1, months6);
      assertNotSame(months1, months4);
      assertNotSame(months2, months6);
      assertNotSame(months2, months5);
      assertNotSame(months2, months3);
      assertNotSame(months2, months4);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotSame(months4, months6);
      assertNotSame(months4, months3);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months4, months5);
      assertNotSame(months4, months0);
      assertNotSame(months5, months3);
      assertNotSame(months5, months1);
      assertNotSame(months5, months2);
      assertNotSame(months5, months0);
      assertNotSame(months5, months6);
      assertNotSame(months5, months4);
      assertNotSame(months6, months4);
      assertNotSame(months6, months0);
      assertNotSame(months6, months5);
      assertNotSame(months6, months3);
      assertNotSame(months6, months1);
      assertNotSame(months6, months2);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(5, months4.getMonths());
      assertEquals(1, months4.size());
      assertEquals((-165191049), months5.getMonths());
      assertEquals(1, months5.size());
      assertEquals(795, months6.getMonths());
      assertEquals(1, months6.size());
      assertNotNull(months6);
      
      DurationFieldType durationFieldType1 = months0.getFieldType();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months6));
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months5);
      assertNotSame(months0, months6);
      assertSame(durationFieldType1, durationFieldType0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals("months", durationFieldType1.toString());
      assertEquals("months", durationFieldType1.getName());
      assertNotNull(durationFieldType1);
      
      Months months7 = months2.minus(months1);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months7.equals((Object)months1));
      assertFalse(months7.equals((Object)months2));
      assertFalse(months7.equals((Object)months6));
      assertFalse(months7.equals((Object)months3));
      assertFalse(months7.equals((Object)months4));
      assertFalse(months7.equals((Object)months5));
      assertFalse(months7.equals((Object)months0));
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months7);
      assertSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months5);
      assertNotSame(months0, months6);
      assertSame(months1, months0);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months7);
      assertNotSame(months1, months5);
      assertNotSame(months1, months6);
      assertNotSame(months1, months4);
      assertNotSame(months2, months6);
      assertNotSame(months2, months5);
      assertNotSame(months2, months3);
      assertNotSame(months2, months4);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months7);
      assertNotSame(months7, months1);
      assertNotSame(months7, months2);
      assertNotSame(months7, months6);
      assertNotSame(months7, months3);
      assertNotSame(months7, months4);
      assertNotSame(months7, months5);
      assertNotSame(months7, months0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months7.size());
      assertEquals(2147483597, months7.getMonths());
      assertNotNull(months7);
      
      // Undeclared exception!
      try { 
        Months.parseMonths("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      Months months0 = Months.months(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      // Undeclared exception!
      try { 
        months0.ZERO.getValue(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Months months0 = Months.TEN;
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertNotNull(months0);
      
      Months months1 = months0.negated();
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-10), months1.getMonths());
      assertNotNull(months1);
      
      int int0 = (-15);
      String string0 = months0.toString();
      assertFalse(months0.equals((Object)months1));
      assertEquals("P10M", string0);
      assertNotSame(months0, months1);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertNotNull(string0);
      
      Months months2 = months1.plus((-15));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-10), months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-25), months2.getMonths());
      assertNotNull(months2);
      
      DurationFieldType durationFieldType0 = months1.getFieldType();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-10), months1.getMonths());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int1 = months2.MIN_VALUE.get(durationFieldType0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(int1 == int0);
      assertEquals(Integer.MIN_VALUE, int1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-10), months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-25), months2.getMonths());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      
      Months months3 = months1.minus(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertNotSame(months3, months0);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-10), months1.getMonths());
      assertEquals(1, months3.size());
      assertEquals((-20), months3.getMonths());
      assertNotNull(months3);
      
      Months months4 = Months.months(Integer.MIN_VALUE);
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertNotSame(months4, months2);
      assertNotSame(months4, months0);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertEquals(1, months4.size());
      assertEquals(Integer.MIN_VALUE, months4.getMonths());
      assertNotNull(months4);
      
      int int2 = (-2359);
      MutablePeriod mutablePeriod0 = months0.SEVEN.toMutablePeriod();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertNotNull(mutablePeriod0);
      
      Months months5 = months1.plus(int2);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months4));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months1));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months5);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months5, months3);
      assertNotSame(months5, months4);
      assertNotSame(months5, months0);
      assertNotSame(months5, months2);
      assertNotSame(months5, months1);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-10), months1.getMonths());
      assertEquals((-2369), months5.getMonths());
      assertEquals(1, months5.size());
      assertNotNull(months5);
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      String string1 = "N&[-P5hM)";
      // Undeclared exception!
      try { 
        Months.parseMonths(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"N&[-P5hM)\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = months0.SIX.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      
      Months months1 = months0.minus(0);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertNotNull(months1);
      
      int int0 = 46;
      int int1 = months1.EIGHT.compareTo((BaseSingleFieldPeriod) months0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      
      Months months2 = months1.MAX_VALUE.minus(46);
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months2);
      assertSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      Months months3 = months1.ZERO.plus(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertNotSame(months1, months2);
      assertSame(months1, months0);
      assertSame(months1, months3);
      assertNotSame(months3, months2);
      assertSame(months3, months1);
      assertSame(months3, months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(11, months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
      
      int int2 = months3.ONE.getValue(0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertNotSame(months1, months2);
      assertSame(months1, months0);
      assertSame(months1, months3);
      assertNotSame(months3, months2);
      assertSame(months3, months1);
      assertSame(months3, months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(11, months3.getMonths());
      assertEquals(1, months3.size());
      
      Months months4 = months2.ONE.plus(months1);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertNotSame(months0, months4);
      assertNotSame(months1, months2);
      assertNotSame(months1, months4);
      assertSame(months1, months0);
      assertSame(months1, months3);
      assertNotSame(months2, months4);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertNotSame(months4, months0);
      assertNotSame(months4, months2);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(12, months4.getMonths());
      assertEquals(1, months4.size());
      assertNotNull(months4);
      
      Months months5 = months4.ZERO.negated();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months2));
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertNotSame(months0, months5);
      assertNotSame(months0, months4);
      assertNotSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months1, months4);
      assertSame(months1, months0);
      assertSame(months1, months3);
      assertNotSame(months2, months4);
      assertNotSame(months2, months5);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertNotSame(months4, months5);
      assertNotSame(months4, months0);
      assertNotSame(months4, months2);
      assertNotSame(months5, months3);
      assertNotSame(months5, months1);
      assertNotSame(months5, months0);
      assertNotSame(months5, months4);
      assertNotSame(months5, months2);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(12, months4.getMonths());
      assertEquals(1, months4.size());
      assertEquals(1, months5.size());
      assertEquals(0, months5.getMonths());
      assertNotNull(months5);
      
      Months months6 = Months.ELEVEN;
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months4));
      assertNotSame(months6, months5);
      assertSame(months6, months0);
      assertNotSame(months6, months2);
      assertSame(months6, months1);
      assertNotSame(months6, months4);
      assertSame(months6, months3);
      assertEquals(1, months6.size());
      assertEquals(11, months6.getMonths());
      assertNotNull(months6);
      
      String string0 = months6.toString();
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months4));
      assertEquals("P11M", string0);
      assertNotSame(months6, months5);
      assertSame(months6, months0);
      assertNotSame(months6, months2);
      assertSame(months6, months1);
      assertNotSame(months6, months4);
      assertSame(months6, months3);
      assertEquals(1, months6.size());
      assertEquals(11, months6.getMonths());
      assertNotNull(string0);
      
      String string1 = months4.TWO.toString();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months5));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months6));
      assertFalse(months4.equals((Object)months2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("P2M", string1);
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertNotSame(months0, months5);
      assertNotSame(months0, months4);
      assertSame(months0, months6);
      assertNotSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months1, months4);
      assertSame(months1, months0);
      assertSame(months1, months3);
      assertSame(months1, months6);
      assertNotSame(months2, months4);
      assertNotSame(months2, months5);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months2, months6);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertNotSame(months4, months5);
      assertNotSame(months4, months0);
      assertNotSame(months4, months6);
      assertNotSame(months4, months2);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(12, months4.getMonths());
      assertEquals(1, months4.size());
      assertNotNull(string1);
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      Months months7 = months6.ZERO.plus(795);
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months7.equals((Object)months5));
      assertFalse(months7.equals((Object)months2));
      assertFalse(months7.equals((Object)months6));
      assertFalse(months7.equals((Object)months3));
      assertFalse(months7.equals((Object)months4));
      assertFalse(months7.equals((Object)months1));
      assertFalse(months7.equals((Object)months0));
      assertNotSame(months6, months5);
      assertSame(months6, months0);
      assertNotSame(months6, months2);
      assertNotSame(months6, months7);
      assertSame(months6, months1);
      assertNotSame(months6, months4);
      assertSame(months6, months3);
      assertNotSame(months7, months5);
      assertNotSame(months7, months2);
      assertNotSame(months7, months6);
      assertNotSame(months7, months3);
      assertNotSame(months7, months4);
      assertNotSame(months7, months1);
      assertNotSame(months7, months0);
      assertEquals(1, months6.size());
      assertEquals(11, months6.getMonths());
      assertEquals(1, months7.size());
      assertEquals(795, months7.getMonths());
      assertNotNull(months7);
      
      DurationFieldType durationFieldType1 = months3.getFieldType();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months7));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months7));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months7));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months3.equals((Object)months5));
      assertSame(durationFieldType1, durationFieldType0);
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertNotSame(months0, months7);
      assertNotSame(months0, months5);
      assertNotSame(months0, months4);
      assertSame(months0, months6);
      assertNotSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months1, months7);
      assertNotSame(months1, months4);
      assertSame(months1, months0);
      assertSame(months1, months3);
      assertSame(months1, months6);
      assertNotSame(months3, months2);
      assertSame(months3, months1);
      assertNotSame(months3, months7);
      assertNotSame(months3, months4);
      assertSame(months3, months6);
      assertSame(months3, months0);
      assertNotSame(months3, months5);
      assertEquals("months", durationFieldType1.getName());
      assertEquals("months", durationFieldType1.toString());
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(11, months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(durationFieldType1);
      
      Months months8 = months2.minus(months1);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months7));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months8.equals((Object)months1));
      assertFalse(months8.equals((Object)months3));
      assertFalse(months8.equals((Object)months4));
      assertFalse(months8.equals((Object)months6));
      assertFalse(months8.equals((Object)months7));
      assertFalse(months8.equals((Object)months2));
      assertFalse(months8.equals((Object)months5));
      assertFalse(months8.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months7));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months7));
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertNotSame(months0, months7);
      assertNotSame(months0, months5);
      assertNotSame(months0, months4);
      assertSame(months0, months6);
      assertNotSame(months0, months8);
      assertNotSame(months8, months1);
      assertNotSame(months8, months3);
      assertNotSame(months8, months4);
      assertNotSame(months8, months6);
      assertNotSame(months8, months7);
      assertNotSame(months8, months2);
      assertNotSame(months8, months5);
      assertNotSame(months8, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months1, months7);
      assertNotSame(months1, months4);
      assertSame(months1, months0);
      assertNotSame(months1, months8);
      assertSame(months1, months3);
      assertSame(months1, months6);
      assertNotSame(months2, months4);
      assertNotSame(months2, months8);
      assertNotSame(months2, months5);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months2, months6);
      assertNotSame(months2, months7);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(2147483590, months8.getMonths());
      assertEquals(1, months8.size());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months8);
      
      Months months9 = months2.FIVE.plus(months7);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months7));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months8));
      assertFalse(months9.equals((Object)months3));
      assertFalse(months9.equals((Object)months1));
      assertFalse(months9.equals((Object)months8));
      assertFalse(months9.equals((Object)months2));
      assertFalse(months9.equals((Object)months4));
      assertFalse(months9.equals((Object)months6));
      assertFalse(months9.equals((Object)months7));
      assertFalse(months9.equals((Object)months5));
      assertFalse(months9.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months7));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months8));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months8));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months7));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months8));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months7));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months7.equals((Object)months5));
      assertFalse(months7.equals((Object)months2));
      assertFalse(months7.equals((Object)months8));
      assertFalse(months7.equals((Object)months6));
      assertFalse(months7.equals((Object)months3));
      assertFalse(months7.equals((Object)months4));
      assertFalse(months7.equals((Object)months1));
      assertFalse(months7.equals((Object)months0));
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertNotSame(months0, months7);
      assertNotSame(months0, months5);
      assertNotSame(months0, months4);
      assertSame(months0, months6);
      assertNotSame(months0, months8);
      assertNotSame(months0, months9);
      assertNotSame(months9, months3);
      assertNotSame(months9, months1);
      assertNotSame(months9, months8);
      assertNotSame(months9, months2);
      assertNotSame(months9, months4);
      assertNotSame(months9, months6);
      assertNotSame(months9, months7);
      assertNotSame(months9, months5);
      assertNotSame(months9, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months1, months7);
      assertNotSame(months1, months4);
      assertSame(months1, months0);
      assertNotSame(months1, months9);
      assertNotSame(months1, months8);
      assertSame(months1, months3);
      assertSame(months1, months6);
      assertNotSame(months2, months4);
      assertNotSame(months2, months8);
      assertNotSame(months2, months5);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months2, months9);
      assertNotSame(months2, months6);
      assertNotSame(months2, months7);
      assertNotSame(months6, months5);
      assertNotSame(months6, months8);
      assertSame(months6, months0);
      assertNotSame(months6, months2);
      assertNotSame(months6, months7);
      assertSame(months6, months1);
      assertNotSame(months6, months4);
      assertNotSame(months6, months9);
      assertSame(months6, months3);
      assertNotSame(months7, months5);
      assertNotSame(months7, months2);
      assertNotSame(months7, months8);
      assertNotSame(months7, months6);
      assertNotSame(months7, months3);
      assertNotSame(months7, months4);
      assertNotSame(months7, months9);
      assertNotSame(months7, months1);
      assertNotSame(months7, months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months9.size());
      assertEquals(800, months9.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months6.size());
      assertEquals(11, months6.getMonths());
      assertEquals(1, months7.size());
      assertEquals(795, months7.getMonths());
      assertNotNull(months9);
      
      // Undeclared exception!
      try { 
        Months.parseMonths("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Months months0 = Months.FOUR;
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = months0.isGreaterThan(months0);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      
      Months months1 = months0.minus(0);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      int int0 = 46;
      int int1 = months1.EIGHT.compareTo((BaseSingleFieldPeriod) months0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      
      Months months2 = months1.MAX_VALUE.minus(46);
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months2);
      assertSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      Months months3 = Months.SIX;
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertEquals(1, months3.size());
      assertEquals(6, months3.getMonths());
      assertNotNull(months3);
      
      int int2 = months3.ONE.getValue(0);
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertEquals(1, months3.size());
      assertEquals(6, months3.getMonths());
      
      Months months4 = months2.ONE.plus(months1);
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months2);
      assertNotSame(months1, months4);
      assertNotSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months2, months4);
      assertNotSame(months4, months0);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(5, months4.getMonths());
      assertEquals(1, months4.size());
      assertNotNull(months4);
      
      Months months5 = Months.months(1);
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months2));
      assertNotSame(months5, months0);
      assertNotSame(months5, months1);
      assertNotSame(months5, months3);
      assertNotSame(months5, months4);
      assertNotSame(months5, months2);
      assertEquals(1, months5.getMonths());
      assertEquals(1, months5.size());
      assertNotNull(months5);
      
      Months months6 = months0.minus(months3);
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months5));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months0));
      assertNotSame(months0, months6);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months4);
      assertNotSame(months3, months1);
      assertNotSame(months3, months6);
      assertNotSame(months3, months5);
      assertNotSame(months6, months2);
      assertNotSame(months6, months5);
      assertNotSame(months6, months3);
      assertNotSame(months6, months1);
      assertNotSame(months6, months4);
      assertNotSame(months6, months0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(1, months3.size());
      assertEquals(6, months3.getMonths());
      assertEquals(1, months6.size());
      assertEquals((-2), months6.getMonths());
      assertNotNull(months6);
      
      String string0 = months4.TWO.toString();
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months5));
      assertFalse(months4.equals((Object)months6));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertEquals("P2M", string0);
      assertNotSame(months0, months6);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months1, months4);
      assertNotSame(months1, months6);
      assertNotSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months6);
      assertNotSame(months2, months3);
      assertNotSame(months2, months5);
      assertNotSame(months2, months0);
      assertNotSame(months2, months4);
      assertNotSame(months4, months0);
      assertNotSame(months4, months5);
      assertNotSame(months4, months6);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(5, months4.getMonths());
      assertEquals(1, months4.size());
      assertNotNull(string0);
      
      Months months7 = months5.ZERO.plus(795);
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months6));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months7.equals((Object)months5));
      assertFalse(months7.equals((Object)months0));
      assertFalse(months7.equals((Object)months3));
      assertFalse(months7.equals((Object)months2));
      assertFalse(months7.equals((Object)months6));
      assertFalse(months7.equals((Object)months4));
      assertFalse(months7.equals((Object)months1));
      assertNotSame(months5, months0);
      assertNotSame(months5, months1);
      assertNotSame(months5, months3);
      assertNotSame(months5, months7);
      assertNotSame(months5, months6);
      assertNotSame(months5, months4);
      assertNotSame(months5, months2);
      assertNotSame(months7, months5);
      assertNotSame(months7, months0);
      assertNotSame(months7, months3);
      assertNotSame(months7, months2);
      assertNotSame(months7, months6);
      assertNotSame(months7, months4);
      assertNotSame(months7, months1);
      assertEquals(1, months5.getMonths());
      assertEquals(1, months5.size());
      assertEquals(1, months7.size());
      assertEquals(795, months7.getMonths());
      assertNotNull(months7);
      
      DurationFieldType durationFieldType1 = months0.getFieldType();
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months7));
      assertNotSame(months0, months6);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months7);
      assertSame(durationFieldType1, durationFieldType0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals("months", durationFieldType1.toString());
      assertEquals("months", durationFieldType1.getName());
      assertNotNull(durationFieldType1);
      
      Months months8 = Months.ZERO;
      assertFalse(months8.equals((Object)months2));
      assertFalse(months8.equals((Object)months3));
      assertFalse(months8.equals((Object)months7));
      assertFalse(months8.equals((Object)months1));
      assertFalse(months8.equals((Object)months4));
      assertFalse(months8.equals((Object)months0));
      assertFalse(months8.equals((Object)months6));
      assertFalse(months8.equals((Object)months5));
      assertNotSame(months8, months2);
      assertNotSame(months8, months3);
      assertNotSame(months8, months7);
      assertNotSame(months8, months1);
      assertNotSame(months8, months4);
      assertNotSame(months8, months0);
      assertNotSame(months8, months6);
      assertNotSame(months8, months5);
      assertEquals(1, months8.size());
      assertEquals(0, months8.getMonths());
      assertNotNull(months8);
      
      Months months9 = months4.ELEVEN.multipliedBy(795);
      assertFalse(months9.equals((Object)months8));
      assertFalse(months9.equals((Object)months6));
      assertFalse(months9.equals((Object)months1));
      assertFalse(months9.equals((Object)months4));
      assertFalse(months9.equals((Object)months0));
      assertFalse(months9.equals((Object)months7));
      assertFalse(months9.equals((Object)months5));
      assertFalse(months9.equals((Object)months2));
      assertFalse(months9.equals((Object)months3));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months7));
      assertFalse(months0.equals((Object)months8));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months7));
      assertFalse(months1.equals((Object)months8));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months7));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months8));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months7));
      assertFalse(months4.equals((Object)months5));
      assertFalse(months4.equals((Object)months6));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months8));
      assertFalse(months4.equals((Object)months1));
      assertNotSame(months9, months8);
      assertNotSame(months9, months6);
      assertNotSame(months9, months1);
      assertNotSame(months9, months4);
      assertNotSame(months9, months0);
      assertNotSame(months9, months7);
      assertNotSame(months9, months5);
      assertNotSame(months9, months2);
      assertNotSame(months9, months3);
      assertNotSame(months0, months6);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months7);
      assertNotSame(months0, months9);
      assertNotSame(months0, months8);
      assertNotSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months1, months7);
      assertNotSame(months1, months9);
      assertNotSame(months1, months8);
      assertNotSame(months1, months4);
      assertNotSame(months1, months6);
      assertNotSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months6);
      assertNotSame(months2, months7);
      assertNotSame(months2, months3);
      assertNotSame(months2, months5);
      assertNotSame(months2, months9);
      assertNotSame(months2, months0);
      assertNotSame(months2, months8);
      assertNotSame(months2, months4);
      assertNotSame(months4, months0);
      assertNotSame(months4, months7);
      assertNotSame(months4, months5);
      assertNotSame(months4, months6);
      assertNotSame(months4, months2);
      assertNotSame(months4, months9);
      assertNotSame(months4, months3);
      assertNotSame(months4, months8);
      assertNotSame(months4, months1);
      assertEquals(1, months9.size());
      assertEquals(8745, months9.getMonths());
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(5, months4.getMonths());
      assertEquals(1, months4.size());
      assertNotNull(months9);
      
      // Undeclared exception!
      try { 
        Months.parseMonths("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Months months0 = Months.FOUR;
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = months0.isGreaterThan(months0);
      assertFalse(boolean0);
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = months0.minus(0);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(4, months1.getMonths());
      assertNotNull(months1);
      
      int int0 = 46;
      int int1 = months1.EIGHT.compareTo((BaseSingleFieldPeriod) months0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(4, months1.getMonths());
      
      Months months2 = months1.MAX_VALUE.minus(46);
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertNotSame(months0, months2);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals(2147483601, months2.getMonths());
      assertNotNull(months2);
      
      Months months3 = Months.SIX;
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertEquals(1, months3.size());
      assertEquals(6, months3.getMonths());
      assertNotNull(months3);
      
      int int2 = months3.ONE.getValue(0);
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertEquals(1, months3.size());
      assertEquals(6, months3.getMonths());
      
      Months months4 = Months.MAX_VALUE;
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertNotSame(months4, months2);
      assertNotSame(months4, months0);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertEquals(1, months4.size());
      assertEquals(Integer.MAX_VALUE, months4.getMonths());
      assertNotNull(months4);
      
      Months months5 = Months.FOUR;
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months2));
      assertNotSame(months5, months3);
      assertSame(months5, months0);
      assertNotSame(months5, months4);
      assertNotSame(months5, months2);
      assertSame(months5, months1);
      assertEquals(1, months5.size());
      assertEquals(4, months5.getMonths());
      assertNotNull(months5);
      
      String string0 = months4.toString();
      assertFalse(months4.equals((Object)months5));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertEquals("P2147483647M", string0);
      assertNotSame(months4, months5);
      assertNotSame(months4, months2);
      assertNotSame(months4, months0);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertEquals(1, months4.size());
      assertEquals(Integer.MAX_VALUE, months4.getMonths());
      assertNotNull(string0);
      
      Months months6 = months1.minus(6);
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months0));
      assertNotSame(months0, months4);
      assertNotSame(months0, months2);
      assertSame(months0, months5);
      assertSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months6);
      assertNotSame(months1, months4);
      assertSame(months1, months5);
      assertNotSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months6);
      assertNotSame(months1, months2);
      assertNotSame(months6, months1);
      assertNotSame(months6, months3);
      assertNotSame(months6, months2);
      assertNotSame(months6, months4);
      assertNotSame(months6, months5);
      assertNotSame(months6, months0);
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months6.size());
      assertEquals((-2), months6.getMonths());
      assertNotNull(months6);
      
      Months months7 = Months.months(0);
      assertFalse(months7.equals((Object)months0));
      assertFalse(months7.equals((Object)months2));
      assertFalse(months7.equals((Object)months3));
      assertFalse(months7.equals((Object)months6));
      assertFalse(months7.equals((Object)months1));
      assertFalse(months7.equals((Object)months4));
      assertFalse(months7.equals((Object)months5));
      assertNotSame(months7, months0);
      assertNotSame(months7, months2);
      assertNotSame(months7, months3);
      assertNotSame(months7, months6);
      assertNotSame(months7, months1);
      assertNotSame(months7, months4);
      assertNotSame(months7, months5);
      assertEquals(0, months7.getMonths());
      assertEquals(1, months7.size());
      assertNotNull(months7);
      
      String string1 = months4.TWO.toString();
      assertFalse(months4.equals((Object)months7));
      assertFalse(months4.equals((Object)months5));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months6));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("P2M", string1);
      assertNotSame(months4, months7);
      assertNotSame(months4, months5);
      assertNotSame(months4, months2);
      assertNotSame(months4, months0);
      assertNotSame(months4, months6);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertEquals(1, months4.size());
      assertEquals(Integer.MAX_VALUE, months4.getMonths());
      assertNotNull(string1);
      
      Months months8 = months5.ZERO.plus(795);
      assertFalse(months5.equals((Object)months6));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months7));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months8.equals((Object)months0));
      assertFalse(months8.equals((Object)months3));
      assertFalse(months8.equals((Object)months7));
      assertFalse(months8.equals((Object)months5));
      assertFalse(months8.equals((Object)months1));
      assertFalse(months8.equals((Object)months6));
      assertFalse(months8.equals((Object)months4));
      assertFalse(months8.equals((Object)months2));
      assertNotSame(months5, months3);
      assertNotSame(months5, months6);
      assertNotSame(months5, months7);
      assertSame(months5, months0);
      assertNotSame(months5, months4);
      assertNotSame(months5, months2);
      assertSame(months5, months1);
      assertNotSame(months5, months8);
      assertNotSame(months8, months0);
      assertNotSame(months8, months3);
      assertNotSame(months8, months7);
      assertNotSame(months8, months5);
      assertNotSame(months8, months1);
      assertNotSame(months8, months6);
      assertNotSame(months8, months4);
      assertNotSame(months8, months2);
      assertEquals(1, months5.size());
      assertEquals(4, months5.getMonths());
      assertEquals(795, months8.getMonths());
      assertEquals(1, months8.size());
      assertNotNull(months8);
      
      DurationFieldType durationFieldType1 = months0.getFieldType();
      assertFalse(months0.equals((Object)months8));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months7));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months6));
      assertSame(durationFieldType1, durationFieldType0);
      assertNotSame(months0, months8);
      assertNotSame(months0, months4);
      assertNotSame(months0, months2);
      assertSame(months0, months5);
      assertSame(months0, months1);
      assertNotSame(months0, months7);
      assertNotSame(months0, months3);
      assertNotSame(months0, months6);
      assertEquals("months", durationFieldType1.toString());
      assertEquals("months", durationFieldType1.getName());
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(durationFieldType1);
      
      Months months9 = months2.minus(months1);
      assertFalse(months0.equals((Object)months8));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months7));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months9.equals((Object)months1));
      assertFalse(months9.equals((Object)months7));
      assertFalse(months9.equals((Object)months3));
      assertFalse(months9.equals((Object)months4));
      assertFalse(months9.equals((Object)months2));
      assertFalse(months9.equals((Object)months6));
      assertFalse(months9.equals((Object)months5));
      assertFalse(months9.equals((Object)months8));
      assertFalse(months9.equals((Object)months0));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months7));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months8));
      assertFalse(months2.equals((Object)months7));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months8));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertNotSame(months0, months8);
      assertNotSame(months0, months4);
      assertNotSame(months0, months2);
      assertSame(months0, months5);
      assertSame(months0, months1);
      assertNotSame(months0, months7);
      assertNotSame(months0, months9);
      assertNotSame(months0, months3);
      assertNotSame(months0, months6);
      assertNotSame(months9, months1);
      assertNotSame(months9, months7);
      assertNotSame(months9, months3);
      assertNotSame(months9, months4);
      assertNotSame(months9, months2);
      assertNotSame(months9, months6);
      assertNotSame(months9, months5);
      assertNotSame(months9, months8);
      assertNotSame(months9, months0);
      assertNotSame(months1, months4);
      assertSame(months1, months5);
      assertNotSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months7);
      assertNotSame(months1, months9);
      assertNotSame(months1, months6);
      assertNotSame(months1, months2);
      assertNotSame(months1, months8);
      assertNotSame(months2, months7);
      assertNotSame(months2, months9);
      assertNotSame(months2, months5);
      assertNotSame(months2, months8);
      assertNotSame(months2, months4);
      assertNotSame(months2, months6);
      assertNotSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months9.size());
      assertEquals(2147483597, months9.getMonths());
      assertEquals(1, months1.size());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals(2147483601, months2.getMonths());
      assertNotNull(months9);
      
      // Undeclared exception!
      try { 
        Months.parseMonths("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Months months0 = Months.SIX;
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertNotNull(months0);
      
      int int0 = months0.getMonths();
      assertEquals(6, int0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      
      // Undeclared exception!
      try { 
        Months.parseMonths("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertNotNull(months0);
      
      PeriodType periodType0 = months0.ZERO.getPeriodType();
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      int int0 = months0.ZERO.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(1, int0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      
      int int1 = months0.getMonths();
      assertFalse(int1 == int0);
      assertEquals(Integer.MIN_VALUE, int1);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Months months0 = Months.TWO;
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertNotNull(months0);
      
      String string0 = months0.EIGHT.toString();
      assertEquals("P8M", string0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertNotNull(string0);
      
      Months months1 = Months.NINE;
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      assertNotNull(months1);
      
      boolean boolean0 = months0.isLessThan(months1);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertTrue(boolean0);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      
      Months months2 = months1.SIX.plus((-3086));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      assertEquals((-3080), months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      String string1 = months1.ONE.toString();
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("P1M", string1);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      assertNotNull(string1);
      
      boolean boolean1 = months1.isGreaterThan(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      
      Months months3 = months0.plus(months2);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertNotSame(months3, months0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      assertEquals((-3080), months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-3078), months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
      
      String string2 = months0.toString();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("P2M", string2);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertNotNull(string2);
      
      Months months4 = Months.FIVE;
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertEquals(1, months4.size());
      assertEquals(5, months4.getMonths());
      assertNotNull(months4);
      
      PeriodType periodType0 = months4.getPeriodType();
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertEquals(1, months4.size());
      assertEquals(5, months4.getMonths());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
      
      boolean boolean2 = months4.isLessThan(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months4.size());
      assertEquals(5, months4.getMonths());
      
      boolean boolean3 = months1.isLessThan(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months1, months4);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      
      Months months5 = months4.plus(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months4));
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months0, months5);
      assertNotSame(months0, months1);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months5);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months5, months1);
      assertNotSame(months5, months3);
      assertNotSame(months5, months0);
      assertNotSame(months5, months2);
      assertNotSame(months5, months4);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months4.size());
      assertEquals(5, months4.getMonths());
      assertEquals(7, months5.getMonths());
      assertEquals(1, months5.size());
      assertNotNull(months5);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      assertEquals(11, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Months months1 = Months.EIGHT;
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(8, months1.getMonths());
      assertNotNull(months1);
      
      boolean boolean0 = months0.isLessThan(months1);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(boolean0);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(11, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(8, months1.getMonths());
      
      Months months2 = months1.negated();
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(1, months1.size());
      assertEquals(8, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-8), months2.getMonths());
      assertNotNull(months2);
      
      Months months3 = months0.ELEVEN.negated();
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months3, months1);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertEquals(11, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months3.size());
      assertEquals((-11), months3.getMonths());
      assertNotNull(months3);
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      Months months4 = Months.months(5);
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months0);
      assertEquals(1, months4.size());
      assertEquals(5, months4.getMonths());
      assertNotNull(months4);
      
      // Undeclared exception!
      try { 
        months2.getFieldType(4125);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 4125
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Months months0 = Months.NINE;
      assertEquals(9, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Months months1 = months0.minus(15271875);
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(9, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals((-15271866), months1.getMonths());
      assertNotNull(months1);
      
      Months months2 = Months.months((-56));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(1, months2.size());
      assertEquals((-56), months2.getMonths());
      assertNotNull(months2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Months months0 = Months.TWELVE;
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = months0.SIX.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      
      Months months1 = months0.minus(0);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      int int0 = 46;
      int int1 = months1.EIGHT.compareTo((BaseSingleFieldPeriod) months0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months1.size());
      
      Months months2 = Months.FOUR;
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(4, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      Months months3 = months1.ZERO.plus(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertNotSame(months0, months2);
      assertSame(months0, months1);
      assertSame(months0, months3);
      assertSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months3, months2);
      assertSame(months3, months0);
      assertSame(months3, months1);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(12, months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
      
      int int2 = months3.ONE.getValue(0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertNotSame(months0, months2);
      assertSame(months0, months1);
      assertSame(months0, months3);
      assertSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months3, months2);
      assertSame(months3, months0);
      assertSame(months3, months1);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(12, months3.getMonths());
      assertEquals(1, months3.size());
      
      Months months4 = months2.ONE.plus(months1);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertSame(months0, months1);
      assertSame(months0, months3);
      assertSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotSame(months2, months4);
      assertNotSame(months2, months3);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(4, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals(13, months4.getMonths());
      assertNotNull(months4);
      
      Months months5 = months4.MAX_VALUE.dividedBy(1);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months0));
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months4);
      assertSame(months0, months1);
      assertSame(months0, months3);
      assertSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months2, months5);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotSame(months2, months4);
      assertNotSame(months2, months3);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months5);
      assertNotSame(months5, months3);
      assertNotSame(months5, months2);
      assertNotSame(months5, months1);
      assertNotSame(months5, months4);
      assertNotSame(months5, months0);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(4, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals(13, months4.getMonths());
      assertEquals(Integer.MAX_VALUE, months5.getMonths());
      assertEquals(1, months5.size());
      assertNotNull(months5);
      
      String string0 = months4.TWO.toString();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months5));
      assertEquals("P2M", string0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months4);
      assertSame(months0, months1);
      assertSame(months0, months3);
      assertSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months2, months5);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotSame(months2, months4);
      assertNotSame(months2, months3);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months5);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(4, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals(13, months4.getMonths());
      assertNotNull(string0);
      
      boolean boolean1 = months2.isGreaterThan(months4);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months5));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months4);
      assertSame(months0, months1);
      assertSame(months0, months3);
      assertSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months2, months5);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotSame(months2, months4);
      assertNotSame(months2, months3);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months5);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(4, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals(13, months4.getMonths());
      
      Months months6 = months0.negated();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months2));
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months4);
      assertSame(months0, months1);
      assertNotSame(months0, months6);
      assertSame(months0, months3);
      assertNotSame(months6, months4);
      assertNotSame(months6, months5);
      assertNotSame(months6, months3);
      assertNotSame(months6, months0);
      assertNotSame(months6, months1);
      assertNotSame(months6, months2);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months6.size());
      assertEquals((-12), months6.getMonths());
      assertNotNull(months6);
      
      Months months7 = months5.ZERO.plus(795);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months6));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months5));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months6));
      assertFalse(months7.equals((Object)months3));
      assertFalse(months7.equals((Object)months4));
      assertFalse(months7.equals((Object)months5));
      assertFalse(months7.equals((Object)months0));
      assertFalse(months7.equals((Object)months6));
      assertFalse(months7.equals((Object)months1));
      assertFalse(months7.equals((Object)months2));
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months4);
      assertSame(months0, months1);
      assertNotSame(months0, months7);
      assertNotSame(months0, months6);
      assertSame(months0, months3);
      assertSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months7);
      assertNotSame(months1, months2);
      assertNotSame(months1, months6);
      assertNotSame(months1, months5);
      assertNotSame(months2, months7);
      assertNotSame(months2, months6);
      assertNotSame(months2, months5);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotSame(months2, months4);
      assertNotSame(months2, months3);
      assertNotSame(months4, months3);
      assertNotSame(months4, months7);
      assertNotSame(months4, months6);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months5);
      assertNotSame(months5, months3);
      assertNotSame(months5, months2);
      assertNotSame(months5, months1);
      assertNotSame(months5, months4);
      assertNotSame(months5, months0);
      assertNotSame(months5, months6);
      assertNotSame(months5, months7);
      assertNotSame(months7, months3);
      assertNotSame(months7, months4);
      assertNotSame(months7, months5);
      assertNotSame(months7, months0);
      assertNotSame(months7, months6);
      assertNotSame(months7, months1);
      assertNotSame(months7, months2);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(4, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals(13, months4.getMonths());
      assertEquals(Integer.MAX_VALUE, months5.getMonths());
      assertEquals(1, months5.size());
      assertEquals(1, months7.size());
      assertEquals(795, months7.getMonths());
      assertNotNull(months7);
      
      Months months8 = months1.THREE.minus(months4);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months7));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months7));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months2.equals((Object)months7));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months7));
      assertFalse(months4.equals((Object)months6));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months5));
      assertFalse(months8.equals((Object)months0));
      assertFalse(months8.equals((Object)months4));
      assertFalse(months8.equals((Object)months3));
      assertFalse(months8.equals((Object)months7));
      assertFalse(months8.equals((Object)months6));
      assertFalse(months8.equals((Object)months5));
      assertFalse(months8.equals((Object)months1));
      assertFalse(months8.equals((Object)months2));
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months8);
      assertNotSame(months0, months4);
      assertSame(months0, months1);
      assertNotSame(months0, months7);
      assertNotSame(months0, months6);
      assertSame(months0, months3);
      assertSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months7);
      assertNotSame(months1, months2);
      assertNotSame(months1, months6);
      assertNotSame(months1, months5);
      assertNotSame(months1, months8);
      assertNotSame(months2, months7);
      assertNotSame(months2, months6);
      assertNotSame(months2, months5);
      assertNotSame(months2, months1);
      assertNotSame(months2, months8);
      assertNotSame(months2, months0);
      assertNotSame(months2, months4);
      assertNotSame(months2, months3);
      assertNotSame(months4, months3);
      assertNotSame(months4, months7);
      assertNotSame(months4, months6);
      assertNotSame(months4, months0);
      assertNotSame(months4, months8);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months5);
      assertNotSame(months8, months0);
      assertNotSame(months8, months4);
      assertNotSame(months8, months3);
      assertNotSame(months8, months7);
      assertNotSame(months8, months6);
      assertNotSame(months8, months5);
      assertNotSame(months8, months1);
      assertNotSame(months8, months2);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(4, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals(13, months4.getMonths());
      assertEquals(1, months8.size());
      assertEquals((-10), months8.getMonths());
      assertNotNull(months8);
      
      DurationFieldType durationFieldType1 = months0.getFieldType();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months8));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months7));
      assertFalse(months0.equals((Object)months6));
      assertSame(durationFieldType1, durationFieldType0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months8);
      assertNotSame(months0, months4);
      assertSame(months0, months1);
      assertNotSame(months0, months7);
      assertNotSame(months0, months6);
      assertSame(months0, months3);
      assertEquals("months", durationFieldType1.toString());
      assertEquals("months", durationFieldType1.getName());
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(durationFieldType1);
      
      Months months9 = months2.minus(months1);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months8));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months7));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months9.equals((Object)months5));
      assertFalse(months9.equals((Object)months8));
      assertFalse(months9.equals((Object)months2));
      assertFalse(months9.equals((Object)months1));
      assertFalse(months9.equals((Object)months6));
      assertFalse(months9.equals((Object)months7));
      assertFalse(months9.equals((Object)months3));
      assertFalse(months9.equals((Object)months4));
      assertFalse(months9.equals((Object)months0));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months7));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months8));
      assertFalse(months2.equals((Object)months7));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months8));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months3));
      assertNotSame(months0, months2);
      assertNotSame(months0, months9);
      assertNotSame(months0, months5);
      assertNotSame(months0, months8);
      assertNotSame(months0, months4);
      assertSame(months0, months1);
      assertNotSame(months0, months7);
      assertNotSame(months0, months6);
      assertSame(months0, months3);
      assertNotSame(months9, months5);
      assertNotSame(months9, months8);
      assertNotSame(months9, months2);
      assertNotSame(months9, months1);
      assertNotSame(months9, months6);
      assertNotSame(months9, months7);
      assertNotSame(months9, months3);
      assertNotSame(months9, months4);
      assertNotSame(months9, months0);
      assertNotSame(months1, months9);
      assertSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months7);
      assertNotSame(months1, months2);
      assertNotSame(months1, months6);
      assertNotSame(months1, months5);
      assertNotSame(months1, months8);
      assertNotSame(months2, months7);
      assertNotSame(months2, months6);
      assertNotSame(months2, months5);
      assertNotSame(months2, months1);
      assertNotSame(months2, months8);
      assertNotSame(months2, months0);
      assertNotSame(months2, months4);
      assertNotSame(months2, months9);
      assertNotSame(months2, months3);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals((-8), months9.getMonths());
      assertEquals(1, months9.size());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(4, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months9);
      
      // Undeclared exception!
      try { 
        Months.parseMonths("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Months months0 = Months.TWO;
      assertEquals(2, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Months months1 = Months.parseMonths((String) null);
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertFalse(months0.equals((Object)months1));
      assertNotSame(months0, months1);
      assertEquals(2, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Months months0 = Months.SIX;
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertNotNull(months0);
      
      int int0 = 209;
      Months months1 = months0.TWO.dividedBy(209);
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertNotNull(months1);
      
      Months months2 = months1.SEVEN.multipliedBy(1536);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(10752, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      PeriodType periodType0 = PeriodType.months();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Months months3 = Months.THREE;
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertEquals(3, months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
      
      boolean boolean0 = months3.isGreaterThan(months2);
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(boolean0);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(10752, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(3, months3.getMonths());
      assertEquals(1, months3.size());
      
      // Undeclared exception!
      try { 
        months0.getValue(245);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 245
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = months0.SIX.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      
      Months months1 = months0.minus(0);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertNotNull(months1);
      
      int int0 = 46;
      int int1 = months1.EIGHT.compareTo((BaseSingleFieldPeriod) months0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      
      Months months2 = Months.ELEVEN;
      assertSame(months2, months1);
      assertSame(months2, months0);
      assertEquals(11, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      Months months3 = months1.ZERO.plus(months0);
      assertSame(months0, months3);
      assertSame(months0, months2);
      assertSame(months0, months1);
      assertSame(months1, months2);
      assertSame(months1, months3);
      assertSame(months1, months0);
      assertSame(months3, months0);
      assertSame(months3, months1);
      assertSame(months3, months2);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(1, months3.size());
      assertEquals(11, months3.getMonths());
      assertNotNull(months3);
      
      int int2 = months3.ONE.getValue(0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertSame(months0, months3);
      assertSame(months0, months2);
      assertSame(months0, months1);
      assertSame(months1, months2);
      assertSame(months1, months3);
      assertSame(months1, months0);
      assertSame(months3, months0);
      assertSame(months3, months1);
      assertSame(months3, months2);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(1, months3.size());
      assertEquals(11, months3.getMonths());
      
      Months months4 = months2.ONE.plus(months1);
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertSame(months0, months3);
      assertSame(months0, months2);
      assertSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months1, months4);
      assertSame(months1, months2);
      assertSame(months1, months3);
      assertSame(months1, months0);
      assertSame(months2, months1);
      assertNotSame(months2, months4);
      assertSame(months2, months0);
      assertSame(months2, months3);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(11, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals(12, months4.getMonths());
      assertNotNull(months4);
      
      Months months5 = Months.TEN;
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months2));
      assertNotSame(months5, months3);
      assertNotSame(months5, months1);
      assertNotSame(months5, months0);
      assertNotSame(months5, months4);
      assertNotSame(months5, months2);
      assertEquals(1, months5.size());
      assertEquals(10, months5.getMonths());
      assertNotNull(months5);
      
      boolean boolean1 = months1.isLessThan(months4);
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months5));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertSame(months0, months3);
      assertSame(months0, months2);
      assertNotSame(months0, months5);
      assertSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months1, months4);
      assertNotSame(months1, months5);
      assertSame(months1, months2);
      assertSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months2, months5);
      assertSame(months2, months1);
      assertNotSame(months2, months4);
      assertSame(months2, months0);
      assertSame(months2, months3);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months5);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(11, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals(12, months4.getMonths());
      
      String string0 = months4.TWO.toString();
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months5));
      assertEquals("P2M", string0);
      assertSame(months0, months3);
      assertSame(months0, months2);
      assertNotSame(months0, months5);
      assertSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months1, months4);
      assertNotSame(months1, months5);
      assertSame(months1, months2);
      assertSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months2, months5);
      assertSame(months2, months1);
      assertNotSame(months2, months4);
      assertSame(months2, months0);
      assertSame(months2, months3);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months5);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(11, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals(12, months4.getMonths());
      assertNotNull(string0);
      
      Months months6 = months5.ZERO.plus(795);
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months1));
      assertNotSame(months5, months3);
      assertNotSame(months5, months1);
      assertNotSame(months5, months0);
      assertNotSame(months5, months4);
      assertNotSame(months5, months2);
      assertNotSame(months5, months6);
      assertNotSame(months6, months5);
      assertNotSame(months6, months0);
      assertNotSame(months6, months3);
      assertNotSame(months6, months2);
      assertNotSame(months6, months4);
      assertNotSame(months6, months1);
      assertEquals(1, months5.size());
      assertEquals(10, months5.getMonths());
      assertEquals(795, months6.getMonths());
      assertEquals(1, months6.size());
      assertNotNull(months6);
      
      Months months7 = months1.THREE.minus(months4);
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months6));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months5));
      assertFalse(months7.equals((Object)months5));
      assertFalse(months7.equals((Object)months2));
      assertFalse(months7.equals((Object)months6));
      assertFalse(months7.equals((Object)months1));
      assertFalse(months7.equals((Object)months0));
      assertFalse(months7.equals((Object)months3));
      assertFalse(months7.equals((Object)months4));
      assertSame(months0, months3);
      assertNotSame(months0, months5);
      assertSame(months0, months2);
      assertNotSame(months0, months7);
      assertNotSame(months0, months6);
      assertSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months1, months4);
      assertNotSame(months1, months6);
      assertNotSame(months1, months5);
      assertNotSame(months1, months7);
      assertSame(months1, months2);
      assertSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months2, months5);
      assertNotSame(months2, months7);
      assertSame(months2, months1);
      assertNotSame(months2, months4);
      assertNotSame(months2, months6);
      assertSame(months2, months0);
      assertSame(months2, months3);
      assertNotSame(months4, months7);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months6);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months5);
      assertNotSame(months7, months5);
      assertNotSame(months7, months2);
      assertNotSame(months7, months6);
      assertNotSame(months7, months1);
      assertNotSame(months7, months0);
      assertNotSame(months7, months3);
      assertNotSame(months7, months4);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(11, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals(12, months4.getMonths());
      assertEquals((-9), months7.getMonths());
      assertEquals(1, months7.size());
      assertNotNull(months7);
      
      DurationFieldType durationFieldType1 = months0.getFieldType();
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months7));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months4));
      assertSame(months0, months3);
      assertNotSame(months0, months5);
      assertSame(months0, months2);
      assertNotSame(months0, months7);
      assertNotSame(months0, months6);
      assertSame(months0, months1);
      assertNotSame(months0, months4);
      assertSame(durationFieldType1, durationFieldType0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals("months", durationFieldType1.getName());
      assertEquals("months", durationFieldType1.toString());
      assertNotNull(durationFieldType1);
      
      Months months8 = months2.minus(months1);
      assertFalse(months8.equals((Object)months3));
      assertFalse(months8.equals((Object)months4));
      assertFalse(months8.equals((Object)months5));
      assertFalse(months8.equals((Object)months1));
      assertFalse(months8.equals((Object)months7));
      assertFalse(months8.equals((Object)months0));
      assertFalse(months8.equals((Object)months6));
      assertFalse(months8.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months7));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months7));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months7));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months6));
      assertNotSame(months8, months3);
      assertNotSame(months8, months4);
      assertNotSame(months8, months5);
      assertNotSame(months8, months1);
      assertNotSame(months8, months7);
      assertNotSame(months8, months0);
      assertNotSame(months8, months6);
      assertNotSame(months8, months2);
      assertSame(months0, months3);
      assertNotSame(months0, months5);
      assertNotSame(months0, months8);
      assertSame(months0, months2);
      assertNotSame(months0, months7);
      assertNotSame(months0, months6);
      assertSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months1, months4);
      assertNotSame(months1, months6);
      assertNotSame(months1, months8);
      assertNotSame(months1, months5);
      assertNotSame(months1, months7);
      assertSame(months1, months2);
      assertSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months2, months5);
      assertNotSame(months2, months7);
      assertNotSame(months2, months8);
      assertSame(months2, months1);
      assertNotSame(months2, months4);
      assertNotSame(months2, months6);
      assertSame(months2, months0);
      assertSame(months2, months3);
      assertEquals(1, months8.size());
      assertEquals(0, months8.getMonths());
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(11, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months8);
      
      // Undeclared exception!
      try { 
        Months.parseMonths("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Months months0 = Months.FOUR;
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = months0.isGreaterThan(months0);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      
      Months months1 = months0.minus(0);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      int int0 = 46;
      int int1 = months1.EIGHT.compareTo((BaseSingleFieldPeriod) months0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      
      Months months2 = months1.MAX_VALUE.minus(46);
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months2);
      assertSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals(2147483601, months2.getMonths());
      assertNotNull(months2);
      
      Months months3 = Months.SIX;
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertEquals(6, months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
      
      int int2 = months3.ONE.getValue(0);
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertEquals(6, months3.getMonths());
      assertEquals(1, months3.size());
      
      Months months4 = months2.ONE.plus(months1);
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months4);
      assertNotSame(months0, months2);
      assertNotSame(months1, months2);
      assertSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months3);
      assertNotSame(months2, months3);
      assertNotSame(months2, months4);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotSame(months4, months0);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months4, months3);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(5, months4.getMonths());
      assertEquals(1, months4.size());
      assertNotNull(months4);
      
      // Undeclared exception!
      try { 
        months4.MAX_VALUE.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Months", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = months0.getFieldType(0);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = months0.THREE.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      
      Months months1 = Months.ELEVEN;
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertNotNull(months1);
      
      Months months2 = months0.minus(months1);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals(2147483636, months2.getMonths());
      assertNotNull(months2);
      
      boolean boolean1 = months2.isGreaterThan(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals(2147483636, months2.getMonths());
      
      Months months3 = months2.MAX_VALUE.minus(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months3);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals(2147483636, months2.getMonths());
      assertEquals(1, months3.size());
      assertEquals(0, months3.getMonths());
      assertNotNull(months3);
      
      Months months4 = months2.minus(months1);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months3);
      assertNotSame(months2, months3);
      assertNotSame(months2, months4);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months4, months0);
      assertNotSame(months4, months3);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals(2147483636, months2.getMonths());
      assertEquals(1, months4.size());
      assertEquals(2147483625, months4.getMonths());
      assertNotNull(months4);
      
      // Undeclared exception!
      try { 
        months4.MAX_VALUE.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Months", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Months months0 = Months.TWO;
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertNotNull(months0);
      
      String string0 = months0.EIGHT.toString();
      assertEquals("P8M", string0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertNotNull(string0);
      
      Months months1 = Months.ZERO;
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      boolean boolean0 = months0.isLessThan(months1);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(boolean0);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      
      String string1 = months1.ONE.toString();
      assertFalse(months1.equals((Object)months0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("P1M", string1);
      assertNotSame(months1, months0);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(string1);
      
      boolean boolean1 = months1.isGreaterThan(months0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      
      String string2 = months0.toString();
      assertFalse(months0.equals((Object)months1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("P2M", string2);
      assertNotSame(months0, months1);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertNotNull(string2);
      
      Months months2 = Months.parseMonths("P2M");
      assertFalse(months2.equals((Object)months1));
      assertSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(1, months2.size());
      assertEquals(2, months2.getMonths());
      assertNotNull(months2);
      
      PeriodType periodType0 = months2.getPeriodType();
      assertFalse(months2.equals((Object)months1));
      assertSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(1, months2.size());
      assertEquals(2, months2.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      boolean boolean2 = months2.isLessThan(months0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(months0, months1);
      assertSame(months0, months2);
      assertSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months2.size());
      assertEquals(2, months2.getMonths());
      
      boolean boolean3 = months1.isLessThan(months0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertNotSame(months0, months1);
      assertSame(months0, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      
      Months months3 = months2.plus(months0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertSame(months0, months2);
      assertNotSame(months2, months3);
      assertSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months2.size());
      assertEquals(2, months2.getMonths());
      assertEquals(4, months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Months months0 = Months.months(1311);
      assertEquals(1311, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Months months1 = months0.ONE.plus(months0);
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1311, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(1312, months1.getMonths());
      assertNotNull(months1);
      
      Months months2 = months0.multipliedBy((-129));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(1311, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months2.size());
      assertEquals((-169119), months2.getMonths());
      assertNotNull(months2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Months months0 = Months.TWO;
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertNotNull(months0);
      
      String string0 = months0.EIGHT.toString();
      assertEquals("P8M", string0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertNotNull(string0);
      
      Months months1 = Months.NINE;
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      assertNotNull(months1);
      
      boolean boolean0 = months0.isLessThan(months1);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertTrue(boolean0);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      
      String string1 = months1.ONE.toString();
      assertFalse(months1.equals((Object)months0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("P1M", string1);
      assertNotSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      assertNotNull(string1);
      
      boolean boolean1 = months1.isGreaterThan(months0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      
      PeriodType periodType0 = months0.FOUR.getPeriodType();
      assertFalse(months0.equals((Object)months1));
      assertNotSame(months0, months1);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      String string2 = months0.toString();
      assertFalse(months0.equals((Object)months1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("P2M", string2);
      assertNotSame(months0, months1);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertNotNull(string2);
      
      Months months2 = Months.parseMonths("P2M");
      assertFalse(months2.equals((Object)months1));
      assertSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(2, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      boolean boolean2 = months1.isGreaterThan(months2);
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      assertEquals(2, months2.getMonths());
      assertEquals(1, months2.size());
      
      PeriodType periodType1 = months2.getPeriodType();
      assertFalse(months2.equals((Object)months1));
      assertSame(months2, months0);
      assertNotSame(months2, months1);
      assertSame(periodType1, periodType0);
      assertEquals(2, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals("Months", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
      
      boolean boolean3 = months2.isLessThan(months0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertSame(months0, months2);
      assertNotSame(months0, months1);
      assertSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(2, months2.getMonths());
      assertEquals(1, months2.size());
      
      boolean boolean4 = months1.isLessThan(months0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      assertSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      
      Months months3 = months2.plus(months0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months2, months3);
      assertSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(2, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months3.size());
      assertEquals(4, months3.getMonths());
      assertNotNull(months3);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Months months0 = Months.TEN;
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = months0.SIX.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      
      Months months1 = months0.minus(0);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals(10, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      int int0 = 46;
      int int1 = months1.EIGHT.compareTo((BaseSingleFieldPeriod) months0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals(10, months1.getMonths());
      assertEquals(1, months1.size());
      
      Months months2 = months1.MAX_VALUE.minus(46);
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertNotSame(months0, months2);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals(10, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals(2147483601, months2.getMonths());
      assertNotNull(months2);
      
      Months months3 = months1.ZERO.plus(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertNotSame(months0, months2);
      assertSame(months0, months1);
      assertSame(months0, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertSame(months1, months3);
      assertSame(months3, months1);
      assertSame(months3, months0);
      assertNotSame(months3, months2);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals(10, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months3.size());
      assertEquals(10, months3.getMonths());
      assertNotNull(months3);
      
      int int2 = months3.ONE.getValue(0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertNotSame(months0, months2);
      assertSame(months0, months1);
      assertSame(months0, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertSame(months1, months3);
      assertSame(months3, months1);
      assertSame(months3, months0);
      assertNotSame(months3, months2);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals(10, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months3.size());
      assertEquals(10, months3.getMonths());
      
      Months months4 = months2.ONE.plus(months1);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertSame(months0, months1);
      assertSame(months0, months3);
      assertNotSame(months1, months4);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertSame(months1, months3);
      assertNotSame(months2, months0);
      assertNotSame(months2, months4);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months3);
      assertEquals(1, months0.size());
      assertEquals(10, months0.getMonths());
      assertEquals(10, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(11, months4.getMonths());
      assertEquals(1, months4.size());
      assertNotNull(months4);
      
      // Undeclared exception!
      try { 
        months4.MAX_VALUE.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Months", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = months0.SIX.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      
      Months months1 = months0.minus(0);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(11, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      int int0 = 46;
      int int1 = months1.EIGHT.compareTo((BaseSingleFieldPeriod) months0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(11, months1.getMonths());
      assertEquals(1, months1.size());
      
      Months months2 = months1.MAX_VALUE.minus(46);
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertNotSame(months0, months2);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(11, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      Months months3 = months1.ZERO.plus(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertSame(months1, months3);
      assertNotSame(months3, months2);
      assertSame(months3, months0);
      assertSame(months3, months1);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(11, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
      
      int int2 = months3.ONE.getValue(0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertSame(months1, months3);
      assertNotSame(months3, months2);
      assertSame(months3, months0);
      assertSame(months3, months1);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(11, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months3.getMonths());
      assertEquals(1, months3.size());
      
      Months months4 = months2.ONE.plus(months1);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertSame(months0, months1);
      assertNotSame(months0, months4);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months4);
      assertSame(months1, months3);
      assertNotSame(months2, months4);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertNotSame(months4, months0);
      assertNotSame(months4, months2);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(11, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(12, months4.getMonths());
      assertEquals(1, months4.size());
      assertNotNull(months4);
      
      Months months5 = Months.ELEVEN;
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months4));
      assertNotSame(months5, months2);
      assertNotSame(months5, months4);
      assertSame(months5, months0);
      assertSame(months5, months1);
      assertSame(months5, months3);
      assertEquals(1, months5.size());
      assertEquals(11, months5.getMonths());
      assertNotNull(months5);
      
      String string0 = months4.TWO.toString();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months5));
      assertFalse(months4.equals((Object)months2));
      assertEquals("P2M", string0);
      assertSame(months0, months5);
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertSame(months0, months1);
      assertNotSame(months0, months4);
      assertSame(months1, months5);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months4);
      assertSame(months1, months3);
      assertNotSame(months2, months5);
      assertNotSame(months2, months4);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertNotSame(months4, months0);
      assertNotSame(months4, months5);
      assertNotSame(months4, months2);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(11, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(12, months4.getMonths());
      assertEquals(1, months4.size());
      assertNotNull(string0);
      
      String string1 = months1.TEN.toString();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months4));
      assertFalse(string1.equals((Object)string0));
      assertEquals("P10M", string1);
      assertSame(months0, months5);
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertSame(months0, months1);
      assertNotSame(months0, months4);
      assertSame(months1, months5);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months4);
      assertSame(months1, months3);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(11, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(string1);
      
      Months months6 = months5.ZERO.plus(795);
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months3));
      assertNotSame(months5, months2);
      assertNotSame(months5, months6);
      assertNotSame(months5, months4);
      assertSame(months5, months0);
      assertSame(months5, months1);
      assertSame(months5, months3);
      assertNotSame(months6, months1);
      assertNotSame(months6, months2);
      assertNotSame(months6, months0);
      assertNotSame(months6, months4);
      assertNotSame(months6, months5);
      assertNotSame(months6, months3);
      assertEquals(1, months5.size());
      assertEquals(11, months5.getMonths());
      assertEquals(1, months6.size());
      assertEquals(795, months6.getMonths());
      assertNotNull(months6);
      
      DurationFieldType durationFieldType1 = months0.getFieldType();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months4));
      assertSame(months0, months5);
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertSame(months0, months1);
      assertNotSame(months0, months6);
      assertNotSame(months0, months4);
      assertSame(durationFieldType1, durationFieldType0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals("months", durationFieldType1.toString());
      assertEquals("months", durationFieldType1.getName());
      assertNotNull(durationFieldType1);
      
      Months months7 = months2.minus(months1);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months7.equals((Object)months6));
      assertFalse(months7.equals((Object)months3));
      assertFalse(months7.equals((Object)months4));
      assertFalse(months7.equals((Object)months1));
      assertFalse(months7.equals((Object)months2));
      assertFalse(months7.equals((Object)months0));
      assertFalse(months7.equals((Object)months5));
      assertSame(months0, months5);
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertNotSame(months0, months7);
      assertSame(months0, months1);
      assertNotSame(months0, months6);
      assertNotSame(months0, months4);
      assertSame(months1, months5);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months6);
      assertNotSame(months1, months4);
      assertSame(months1, months3);
      assertNotSame(months1, months7);
      assertNotSame(months2, months5);
      assertNotSame(months2, months4);
      assertNotSame(months2, months6);
      assertNotSame(months2, months7);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months7, months6);
      assertNotSame(months7, months3);
      assertNotSame(months7, months4);
      assertNotSame(months7, months1);
      assertNotSame(months7, months2);
      assertNotSame(months7, months0);
      assertNotSame(months7, months5);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(11, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months7.size());
      assertEquals(2147483590, months7.getMonths());
      assertNotNull(months7);
      
      // Undeclared exception!
      try { 
        Months.parseMonths("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Months months0 = Months.months(3);
      assertEquals(3, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      String string0 = months0.toString();
      assertEquals("P3M", string0);
      assertEquals(3, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(string0);
      
      String string1 = months0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("P3M", string1);
      assertEquals(3, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(string1);
      
      Months months1 = Months.months(3);
      assertSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(3, months1.getMonths());
      assertNotNull(months1);
      
      Months months2 = months0.dividedBy(12);
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(3, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      Period period0 = months1.TWO.toPeriod();
      assertFalse(months1.equals((Object)months2));
      assertNotSame(months1, months2);
      assertSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(3, months1.getMonths());
      assertNotNull(period0);
      
      int int0 = months2.SIX.compareTo((BaseSingleFieldPeriod) months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertEquals(1, int0);
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(3, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      
      Months months3 = Months.MIN_VALUE;
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertEquals(1, months3.size());
      assertEquals(Integer.MIN_VALUE, months3.getMonths());
      assertNotNull(months3);
      
      Months months4 = months2.plus(months3);
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months4);
      assertNotSame(months0, months2);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months4);
      assertNotSame(months2, months0);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertSame(months3, months4);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertSame(months4, months3);
      assertEquals(3, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months3.size());
      assertEquals(Integer.MIN_VALUE, months3.getMonths());
      assertEquals(1, months4.size());
      assertEquals(Integer.MIN_VALUE, months4.getMonths());
      assertNotNull(months4);
      
      int int1 = 1250;
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ReadableInterval readableInterval0 = null;
      Months months0 = Months.monthsIn((ReadableInterval) null);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      int int0 = (-205);
      Months months1 = months0.multipliedBy((-205));
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      String string0 = months1.toString();
      assertEquals("P0M", string0);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(string0);
      
      Months months2 = Months.monthsIn((ReadableInterval) null);
      assertSame(months2, months1);
      assertSame(months2, months0);
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      int int1 = months2.EIGHT.compareTo((BaseSingleFieldPeriod) months1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertSame(months0, months2);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertSame(months1, months2);
      assertSame(months2, months1);
      assertSame(months2, months0);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      
      Period period0 = months2.EIGHT.toPeriod();
      assertSame(months2, months1);
      assertSame(months2, months0);
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(period0);
      
      String string1 = "N['W>m9NCC>^L'";
      // Undeclared exception!
      try { 
        Months.parseMonths(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"N['W>m9NCC>^L'\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Months months1 = Months.TWELVE;
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(12, months1.getMonths());
      assertNotNull(months1);
      
      // Undeclared exception!
      try { 
        months0.minus(months1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -12
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Months months0 = Months.monthsIn((ReadableInterval) null);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Months months1 = months0.TWELVE.negated();
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals((-12), months1.getMonths());
      assertNotNull(months1);
      
      MutablePeriod mutablePeriod0 = months1.FIVE.toMutablePeriod();
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals((-12), months1.getMonths());
      assertNotNull(mutablePeriod0);
      
      Period period0 = months0.NINE.toPeriod();
      assertFalse(months0.equals((Object)months1));
      assertNotSame(months0, months1);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(period0);
      
      int int0 = months0.getMonths();
      assertFalse(months0.equals((Object)months1));
      assertEquals(0, int0);
      assertNotSame(months0, months1);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months2 = Months.months(int0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months1));
      assertNotSame(months0, months1);
      assertSame(months0, months2);
      assertNotSame(months2, months1);
      assertSame(months2, months0);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      Months months3 = months2.SIX.minus(months0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertNotSame(months0, months1);
      assertSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertSame(months2, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(6, months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
      
      Months months4 = months3.EIGHT.plus(int0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months4);
      assertSame(months2, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotSame(months3, months4);
      assertNotSame(months3, months0);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(6, months3.getMonths());
      assertEquals(1, months3.size());
      assertEquals(8, months4.getMonths());
      assertEquals(1, months4.size());
      assertNotNull(months4);
      
      // Undeclared exception!
      try { 
        months4.MIN_VALUE.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Months months0 = Months.SIX;
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertNotNull(months0);
      
      int int0 = 209;
      Months months1 = months0.TWO.dividedBy(209);
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      PeriodType periodType0 = PeriodType.months();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Months months2 = months0.TEN.dividedBy(1536);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months2, months0);
      assertSame(months2, months1);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      // Undeclared exception!
      try { 
        months0.getValue(265);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 265
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Months months0 = Months.THREE;
      assertEquals(1, months0.size());
      assertEquals(3, months0.getMonths());
      assertNotNull(months0);
      
      PeriodType periodType0 = months0.getPeriodType();
      assertEquals(1, months0.size());
      assertEquals(3, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      Months months1 = months0.dividedBy(1);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(3, months0.getMonths());
      assertEquals(3, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      PeriodType periodType1 = months1.TWO.getPeriodType();
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertSame(periodType1, periodType0);
      assertEquals(1, months0.size());
      assertEquals(3, months0.getMonths());
      assertEquals(3, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals("Months", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
      
      Months months2 = months1.ONE.plus(1);
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(1, months0.size());
      assertEquals(3, months0.getMonths());
      assertEquals(3, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals(2, months2.getMonths());
      assertNotNull(months2);
      
      // Undeclared exception!
      try { 
        months2.FOUR.getFieldType(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Months months0 = Months.months(2);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertNotNull(months0);
      
      Months months1 = Months.TWO;
      assertSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(2, months1.getMonths());
      assertNotNull(months1);
      
      Months months2 = months0.minus(months1);
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months2);
      assertSame(months1, months0);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(2, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals(0, months2.getMonths());
      assertNotNull(months2);
      
      DurationFieldType durationFieldType0 = months2.THREE.getFieldType(0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months2);
      assertSame(months1, months0);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(2, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals(0, months2.getMonths());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Months months3 = months1.plus(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertSame(months1, months0);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(2, months1.getMonths());
      assertEquals(1, months3.size());
      assertEquals(4, months3.getMonths());
      assertNotNull(months3);
      
      Months months4 = months3.THREE.negated();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertNotSame(months0, months4);
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months4);
      assertSame(months1, months0);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertNotSame(months3, months4);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(2, months1.getMonths());
      assertEquals(1, months3.size());
      assertEquals(4, months3.getMonths());
      assertEquals(1, months4.size());
      assertEquals((-3), months4.getMonths());
      assertNotNull(months4);
      
      Months months5 = Months.months(2);
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months4));
      assertNotSame(months5, months2);
      assertNotSame(months5, months3);
      assertNotSame(months5, months4);
      assertSame(months5, months0);
      assertSame(months5, months1);
      assertEquals(1, months5.size());
      assertEquals(2, months5.getMonths());
      assertNotNull(months5);
      
      // Undeclared exception!
      try { 
        Months.parseMonths("6RR,V[S.7 50GAq`t/a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"6RR,V[S.7 50GAq`t/a\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      Months months0 = Months.months(0);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertNotNull(months0);
      
      PeriodType periodType0 = months0.getPeriodType();
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Months months1 = Months.ONE;
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(1, months1.getMonths());
      assertNotNull(months1);
      
      Months months2 = months0.plus(months1);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertSame(months1, months2);
      assertNotSame(months2, months0);
      assertSame(months2, months1);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months1.getMonths());
      assertEquals(1, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      Months months3 = months0.plus(0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertNotSame(months0, months1);
      assertSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals(1, months3.size());
      assertEquals(0, months3.getMonths());
      assertNotNull(months3);
      
      Months months4 = months3.FOUR.plus(0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months4);
      assertNotSame(months3, months2);
      assertNotSame(months4, months0);
      assertNotSame(months4, months3);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals(1, months3.size());
      assertEquals(0, months3.getMonths());
      assertEquals(1, months4.size());
      assertEquals(4, months4.getMonths());
      assertNotNull(months4);
      
      Months months5 = months4.EIGHT.plus(months2);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months1));
      assertNotSame(months0, months5);
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months3);
      assertSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months2, months0);
      assertSame(months2, months1);
      assertNotSame(months2, months5);
      assertNotSame(months2, months4);
      assertNotSame(months2, months3);
      assertSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months4);
      assertNotSame(months3, months5);
      assertNotSame(months3, months2);
      assertNotSame(months4, months5);
      assertNotSame(months4, months0);
      assertNotSame(months4, months3);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months5, months4);
      assertNotSame(months5, months0);
      assertNotSame(months5, months3);
      assertNotSame(months5, months2);
      assertNotSame(months5, months1);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months1.getMonths());
      assertEquals(1, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months3.size());
      assertEquals(0, months3.getMonths());
      assertEquals(1, months4.size());
      assertEquals(4, months4.getMonths());
      assertEquals(1, months5.size());
      assertEquals(9, months5.getMonths());
      assertNotNull(months5);
      
      DurationFieldType durationFieldType0 = months5.getFieldType();
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months3.equals((Object)months5));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months4.equals((Object)months5));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months1));
      assertNotSame(months0, months5);
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months3);
      assertSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months2, months0);
      assertSame(months2, months1);
      assertNotSame(months2, months5);
      assertNotSame(months2, months4);
      assertNotSame(months2, months3);
      assertSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months4);
      assertNotSame(months3, months5);
      assertNotSame(months3, months2);
      assertNotSame(months4, months5);
      assertNotSame(months4, months0);
      assertNotSame(months4, months3);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months5, months4);
      assertNotSame(months5, months0);
      assertNotSame(months5, months3);
      assertNotSame(months5, months2);
      assertNotSame(months5, months1);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months1.getMonths());
      assertEquals(1, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months3.size());
      assertEquals(0, months3.getMonths());
      assertEquals(1, months4.size());
      assertEquals(4, months4.getMonths());
      assertEquals(1, months5.size());
      assertEquals(9, months5.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int1 = months5.THREE.get(durationFieldType0);
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months3.equals((Object)months5));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months4.equals((Object)months5));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months1));
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertNotSame(months0, months5);
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months3);
      assertSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months2, months0);
      assertSame(months2, months1);
      assertNotSame(months2, months5);
      assertNotSame(months2, months4);
      assertNotSame(months2, months3);
      assertSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months4);
      assertNotSame(months3, months5);
      assertNotSame(months3, months2);
      assertNotSame(months4, months5);
      assertNotSame(months4, months0);
      assertNotSame(months4, months3);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months5, months4);
      assertNotSame(months5, months0);
      assertNotSame(months5, months3);
      assertNotSame(months5, months2);
      assertNotSame(months5, months1);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months1.getMonths());
      assertEquals(1, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months3.size());
      assertEquals(0, months3.getMonths());
      assertEquals(1, months4.size());
      assertEquals(4, months4.getMonths());
      assertEquals(1, months5.size());
      assertEquals(9, months5.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      
      MutablePeriod mutablePeriod0 = months3.EIGHT.toMutablePeriod();
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months3.equals((Object)months5));
      assertFalse(months3.equals((Object)months2));
      assertNotSame(months0, months5);
      assertNotSame(months0, months2);
      assertSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months4);
      assertNotSame(months3, months5);
      assertNotSame(months3, months2);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals(1, months3.size());
      assertEquals(0, months3.getMonths());
      assertNotNull(mutablePeriod0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        Months.parseMonths(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Months months0 = Months.ZERO;
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertNotNull(months0);
      
      int int0 = 0;
      Months months1 = Months.MAX_VALUE;
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(Integer.MAX_VALUE, months1.getMonths());
      assertNotNull(months1);
      
      // Undeclared exception!
      try { 
        months0.TWO.plus(months1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      // Undeclared exception!
      try { 
        months0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Months months0 = Months.FIVE;
      assertEquals(1, months0.size());
      assertEquals(5, months0.getMonths());
      assertNotNull(months0);
      
      Months months1 = Months.ONE;
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(1, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      boolean boolean0 = months0.isGreaterThan(months1);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertTrue(boolean0);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(5, months0.getMonths());
      assertEquals(1, months1.getMonths());
      assertEquals(1, months1.size());
      
      int int0 = 989;
      Months months2 = months0.minus(989);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(1, months0.size());
      assertEquals(5, months0.getMonths());
      assertEquals((-984), months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      Months months3 = months2.multipliedBy(989);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertEquals(1, months0.size());
      assertEquals(5, months0.getMonths());
      assertEquals((-984), months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months3.size());
      assertEquals((-973176), months3.getMonths());
      assertNotNull(months3);
      
      Months months4 = months2.plus(months1);
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertNotSame(months0, months3);
      assertNotSame(months0, months4);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months4);
      assertNotSame(months1, months0);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months4);
      assertNotSame(months2, months0);
      assertNotSame(months4, months0);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months4, months3);
      assertEquals(1, months0.size());
      assertEquals(5, months0.getMonths());
      assertEquals(1, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-984), months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals((-983), months4.getMonths());
      assertNotNull(months4);
      
      MutablePeriod mutablePeriod0 = months4.ONE.toMutablePeriod();
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertNotSame(months0, months3);
      assertNotSame(months0, months4);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months4);
      assertNotSame(months1, months0);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months4);
      assertNotSame(months2, months0);
      assertNotSame(months4, months0);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months4, months3);
      assertEquals(1, months0.size());
      assertEquals(5, months0.getMonths());
      assertEquals(1, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-984), months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals((-983), months4.getMonths());
      assertNotNull(mutablePeriod0);
      
      boolean boolean1 = months1.isGreaterThan(months3);
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months4);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months4);
      assertNotSame(months1, months0);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months4);
      assertNotSame(months2, months0);
      assertNotSame(months3, months0);
      assertNotSame(months3, months4);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertEquals(1, months0.size());
      assertEquals(5, months0.getMonths());
      assertEquals(1, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-984), months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months3.size());
      assertEquals((-973176), months3.getMonths());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        Months.parseMonths(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Months months0 = Months.months(6);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertNotNull(months0);
      
      Months months1 = months0.dividedBy(3);
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(2, months1.getMonths());
      assertNotNull(months1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Months months0 = Months.months(1311);
      assertEquals(1, months0.size());
      assertEquals(1311, months0.getMonths());
      assertNotNull(months0);
      
      Months months1 = months0.plus(0);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(1311, months0.getMonths());
      assertEquals(1311, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      Months months2 = months1.ONE.plus(months0);
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(1, months0.size());
      assertEquals(1311, months0.getMonths());
      assertEquals(1311, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals(1312, months2.getMonths());
      assertNotNull(months2);
      
      Months months3 = months0.multipliedBy((-129));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertNotSame(months3, months0);
      assertEquals(1, months0.size());
      assertEquals(1311, months0.getMonths());
      assertEquals((-169119), months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Months months0 = Months.EIGHT;
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertNotNull(months0);
      
      Months months1 = Months.ELEVEN;
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertNotNull(months1);
      
      Months months2 = months0.minus(months1);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals((-3), months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      String string0 = months1.toString();
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertEquals("P11M", string0);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertNotNull(string0);
      
      Months months3 = Months.parseMonths((String) null);
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertEquals(1, months3.size());
      assertEquals(0, months3.getMonths());
      assertNotNull(months3);
      
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = months0.SIX.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      
      Months months1 = months0.minus(0);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertNotNull(months1);
      
      int int0 = 46;
      int int1 = months1.EIGHT.compareTo((BaseSingleFieldPeriod) months0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      
      Months months2 = months1.MAX_VALUE.minus(46);
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertSame(months0, months1);
      assertNotSame(months0, months2);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals(2147483601, months2.getMonths());
      assertNotNull(months2);
      
      Months months3 = months1.ZERO.plus(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertSame(months0, months1);
      assertSame(months0, months3);
      assertNotSame(months0, months2);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertSame(months1, months3);
      assertSame(months3, months1);
      assertSame(months3, months0);
      assertNotSame(months3, months2);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(11, months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
      
      int int2 = months3.ONE.getValue(0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      assertSame(months0, months1);
      assertSame(months0, months3);
      assertNotSame(months0, months2);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertSame(months1, months3);
      assertSame(months3, months1);
      assertSame(months3, months0);
      assertNotSame(months3, months2);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(11, months3.getMonths());
      assertEquals(1, months3.size());
      
      Months months4 = months2.ONE.plus(months1);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertNotSame(months0, months4);
      assertSame(months0, months1);
      assertSame(months0, months3);
      assertNotSame(months0, months2);
      assertSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months2);
      assertSame(months1, months3);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months4);
      assertNotSame(months2, months0);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months3);
      assertNotSame(months4, months2);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(12, months4.getMonths());
      assertEquals(1, months4.size());
      assertNotNull(months4);
      
      // Undeclared exception!
      try { 
        months4.MAX_VALUE.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Months", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Months months0 = Months.ZERO;
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertNotNull(months0);
      
      Months months1 = Months.months(7);
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(7, months1.getMonths());
      assertNotNull(months1);
      
      String string0 = months1.MAX_VALUE.toString();
      assertFalse(months1.equals((Object)months0));
      assertEquals("P2147483647M", string0);
      assertNotSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(7, months1.getMonths());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Months.parseMonths("\":i'h]QJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\":i'h]QJ\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Months months0 = Months.months((-157));
      assertEquals((-157), months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Months months1 = months0.plus((-157));
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals((-157), months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals((-314), months1.getMonths());
      assertNotNull(months1);
      
      String string0 = months1.toString();
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertEquals("P-314M", string0);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals((-157), months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals((-314), months1.getMonths());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      boolean boolean0 = months0.TWO.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      
      String string0 = months0.toString();
      assertEquals("P2147483647M", string0);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(string0);
      
      int int0 = 112;
      // Undeclared exception!
      try { 
        months0.plus(112);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 112
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Months months0 = Months.SEVEN;
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      Months months1 = Months.SEVEN;
      assertSame(months1, months0);
      assertEquals(7, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      boolean boolean0 = months0.isLessThan(months1);
      assertFalse(boolean0);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(7, months1.getMonths());
      assertEquals(1, months1.size());
      
      // Undeclared exception!
      try { 
        Months.parseMonths("%&&@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"%&&@\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Months months0 = Months.FOUR;
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertNotNull(months0);
      
      Months months1 = Months.months(0);
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      String string0 = months0.toString();
      assertFalse(months0.equals((Object)months1));
      assertEquals("P4M", string0);
      assertNotSame(months0, months1);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertNotNull(string0);
      
      PeriodType periodType0 = months0.getPeriodType();
      assertFalse(months0.equals((Object)months1));
      assertNotSame(months0, months1);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Months months0 = Months.SEVEN;
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      int int0 = months0.getMonths();
      assertEquals(7, int0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      
      PeriodFormatter periodFormatter1 = ISOPeriodFormat.standard();
      assertSame(periodFormatter1, periodFormatter0);
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertNotNull(periodFormatter1);
      
      int int1 = months0.getMonths();
      assertTrue(int1 == int0);
      assertEquals(7, int1);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = months0.multipliedBy(15356250);
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(107493750, months1.getMonths());
      assertNotNull(months1);
      
      // Undeclared exception!
      try { 
        months0.MIN_VALUE.minus(7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -7
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Months months0 = Months.FIVE;
      assertEquals(5, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      int int0 = months0.getMonths();
      assertEquals(5, int0);
      assertEquals(5, months0.getMonths());
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Months months0 = Months.months(4);
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Months months1 = null;
      Months months2 = months0.minus((Months) null);
      assertSame(months0, months2);
      assertSame(months2, months0);
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months2.size());
      assertEquals(4, months2.getMonths());
      assertNotNull(months2);
      
      PeriodType periodType0 = months2.TEN.getPeriodType();
      assertSame(months0, months2);
      assertSame(months2, months0);
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months2.size());
      assertEquals(4, months2.getMonths());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
      
      String string0 = months0.toString();
      assertEquals("P4M", string0);
      assertSame(months0, months2);
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(string0);
      
      Months months3 = months2.dividedBy(4);
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertSame(months0, months2);
      assertNotSame(months0, months3);
      assertSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months2.size());
      assertEquals(4, months2.getMonths());
      assertEquals(1, months3.size());
      assertEquals(1, months3.getMonths());
      assertNotNull(months3);
      
      Months months4 = months0.plus(4);
      assertFalse(months0.equals((Object)months3));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      assertNotSame(months0, months4);
      assertSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months2);
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months4.size());
      assertEquals(8, months4.getMonths());
      assertNotNull(months4);
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      // Undeclared exception!
      try { 
        months4.MAX_VALUE.getValue(19);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Months months0 = Months.TWO;
      assertEquals(2, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      String string0 = months0.EIGHT.toString();
      assertEquals("P8M", string0);
      assertEquals(2, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(string0);
      
      Months months1 = Months.NINE;
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      assertNotNull(months1);
      
      boolean boolean0 = months0.isLessThan(months1);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertTrue(boolean0);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(2, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      
      String string1 = months1.ONE.toString();
      assertFalse(months1.equals((Object)months0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("P1M", string1);
      assertNotSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      assertNotNull(string1);
      
      boolean boolean1 = months1.isGreaterThan(months0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(2, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      
      String string2 = months0.toString();
      assertFalse(months0.equals((Object)months1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("P2M", string2);
      assertNotSame(months0, months1);
      assertEquals(2, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(string2);
      
      Months months2 = Months.parseMonths("P2M");
      assertFalse(months2.equals((Object)months1));
      assertNotSame(months2, months1);
      assertSame(months2, months0);
      assertEquals(2, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      boolean boolean2 = months1.isLessThan(months0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertEquals(2, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      
      Months months3 = months2.plus(months0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertNotSame(months0, months3);
      assertSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertSame(months2, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertEquals(2, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(2, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(4, months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Months months0 = Months.FIVE;
      assertEquals(5, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      Months months1 = months0.dividedBy((-1695));
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(5, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Months months0 = Months.FOUR;
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      PeriodType periodType0 = PeriodType.months();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = months0.getPeriodType();
      assertSame(periodType1, periodType0);
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType1.size());
      assertEquals("Months", periodType1.getName());
      assertNotNull(periodType1);
      
      PeriodType periodType2 = months0.getPeriodType();
      assertSame(periodType2, periodType1);
      assertSame(periodType2, periodType0);
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("Months", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertNotNull(periodType2);
      
      Months months1 = Months.NINE;
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(9, months1.getMonths());
      assertNotNull(months1);
      
      // Undeclared exception!
      try { 
        Months.parseMonths("!T*qvl!'>{C*)sO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"!T*qvl!'>{C*)sO\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Months months0 = Months.EIGHT;
      assertEquals(8, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      String string0 = months0.ZERO.toString();
      assertEquals("P0M", string0);
      assertEquals(8, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(string0);
      
      int int0 = 4653;
      DurationFieldType durationFieldType0 = months0.NINE.getFieldType(0);
      assertEquals(8, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Months months1 = months0.ZERO.multipliedBy(4653);
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(8, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertNotNull(months1);
      
      Months months2 = months0.negated();
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(8, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months2.size());
      assertEquals((-8), months2.getMonths());
      assertNotNull(months2);
      
      PeriodType periodType0 = PeriodType.months();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Months months3 = months2.SIX.minus(4653);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertEquals(8, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months2.size());
      assertEquals((-8), months2.getMonths());
      assertEquals(1, months3.size());
      assertEquals((-4647), months3.getMonths());
      assertNotNull(months3);
      
      Months months4 = months3.NINE.plus(months1);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months2, months4);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months4);
      assertNotSame(months3, months1);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months0);
      assertNotSame(months4, months3);
      assertEquals(8, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-8), months2.getMonths());
      assertEquals(1, months3.size());
      assertEquals((-4647), months3.getMonths());
      assertEquals(1, months4.size());
      assertEquals(9, months4.getMonths());
      assertNotNull(months4);
      
      Months months5 = months4.NINE.plus(2001);
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months3));
      assertNotSame(months0, months4);
      assertNotSame(months0, months5);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months1, months5);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months2, months1);
      assertNotSame(months2, months5);
      assertNotSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months2, months4);
      assertNotSame(months3, months0);
      assertNotSame(months3, months5);
      assertNotSame(months3, months2);
      assertNotSame(months3, months4);
      assertNotSame(months3, months1);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months5);
      assertNotSame(months4, months0);
      assertNotSame(months4, months3);
      assertNotSame(months5, months4);
      assertNotSame(months5, months1);
      assertNotSame(months5, months2);
      assertNotSame(months5, months0);
      assertNotSame(months5, months3);
      assertEquals(8, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-8), months2.getMonths());
      assertEquals(1, months3.size());
      assertEquals((-4647), months3.getMonths());
      assertEquals(1, months4.size());
      assertEquals(9, months4.getMonths());
      assertEquals(1, months5.size());
      assertEquals(2010, months5.getMonths());
      assertNotNull(months5);
      
      // Undeclared exception!
      try { 
        months5.MAX_VALUE.multipliedBy(323);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483647 * 323
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Months months0 = Months.FOUR;
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      PeriodType periodType0 = months0.getPeriodType();
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        Months.parseMonths("2002-06-09T02:00:00.000+02:00");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"2002-06-09T02:00:00.000+02:00\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Months months0 = Months.parseMonths((String) null);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      int int0 = (-86399999);
      Months months1 = months0.multipliedBy((-86399999));
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertNotNull(months1);
      
      Months months2 = months1.MAX_VALUE.plus((-86399999));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertNotSame(months0, months2);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(2061083648, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      Months months3 = months1.TWELVE.plus(46);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertNotSame(months0, months2);
      assertSame(months0, months1);
      assertNotSame(months0, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months3.size());
      assertEquals(58, months3.getMonths());
      assertNotNull(months3);
      
      String string0 = months3.ONE.toString();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertEquals("P1M", string0);
      assertNotSame(months0, months2);
      assertSame(months0, months1);
      assertNotSame(months0, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months3.size());
      assertEquals(58, months3.getMonths());
      assertNotNull(string0);
      
      int int1 = months3.MIN_VALUE.compareTo((BaseSingleFieldPeriod) months2);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(months0, months2);
      assertSame(months0, months1);
      assertNotSame(months0, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(2061083648, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months3.size());
      assertEquals(58, months3.getMonths());
      
      boolean boolean0 = months1.TWO.equals("P1M");
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(boolean0);
      assertNotSame(months0, months2);
      assertSame(months0, months1);
      assertNotSame(months0, months3);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      
      PeriodType periodType0 = PeriodType.months();
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = months0.getPeriodType();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertNotSame(months0, months2);
      assertSame(months0, months1);
      assertNotSame(months0, months3);
      assertSame(periodType1, periodType0);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("Months", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      Months months4 = Months.months((-86399999));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertEquals((-86399999), months4.getMonths());
      assertEquals(1, months4.size());
      assertNotNull(months4);
      
      Months months5 = months1.plus(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months3));
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertSame(months0, months1);
      assertSame(months0, months5);
      assertNotSame(months0, months3);
      assertSame(months1, months5);
      assertNotSame(months1, months4);
      assertSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months5, months2);
      assertSame(months5, months0);
      assertNotSame(months5, months4);
      assertSame(months5, months1);
      assertNotSame(months5, months3);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(0, months5.getMonths());
      assertEquals(1, months5.size());
      assertNotNull(months5);
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      String string0 = months0.FIVE.toString();
      assertEquals("P5M", string0);
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        months0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Months months0 = Months.months(6);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertNotNull(months0);
      
      Months months1 = months0.multipliedBy(6);
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(36, months1.getMonths());
      assertNotNull(months1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Months months0 = Months.ZERO;
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertNotNull(months0);
      
      Months months1 = Months.SIX;
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(6, months1.getMonths());
      assertNotNull(months1);
      
      Months months2 = months1.THREE.plus(months0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(6, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals(3, months2.getMonths());
      assertNotNull(months2);
      
      Months months3 = months0.minus(months1);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(6, months1.getMonths());
      assertEquals((-6), months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Months months0 = Months.ZERO;
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Months months1 = months0.plus((-1759));
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals((-1759), months1.getMonths());
      assertNotNull(months1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Months months0 = Months.months(0);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertNotNull(months0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Months months0 = Months.months(8);
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = months0.SIX.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      
      // Undeclared exception!
      try { 
        months0.MAX_VALUE.plus(57);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 57
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      Months months0 = Months.months(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      // Undeclared exception!
      try { 
        Months.parseMonths("cw{*26wI@M:s#J!h6m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"cw{*26wI@M:s#J!h6m\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Months months0 = Months.TEN;
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Months months1 = months0.negated();
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals((-10), months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      int int0 = (-15);
      Months months2 = months1.plus((-15));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals((-10), months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals((-25), months2.getMonths());
      assertNotNull(months2);
      
      DurationFieldType durationFieldType0 = months1.getFieldType();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals((-10), months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int1 = months2.MIN_VALUE.get(durationFieldType0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(int1 == int0);
      assertEquals(Integer.MIN_VALUE, int1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals((-10), months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals((-25), months2.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      
      Months months3 = months1.minus(months0);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals((-10), months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-20), months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
      
      Months months4 = Months.months(Integer.MIN_VALUE);
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertEquals(Integer.MIN_VALUE, months4.getMonths());
      assertEquals(1, months4.size());
      assertNotNull(months4);
      
      int int2 = (-2359);
      MutablePeriod mutablePeriod0 = months0.SEVEN.toMutablePeriod();
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months1));
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(mutablePeriod0);
      
      Months months5 = months1.plus(int2);
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months0));
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months0, months5);
      assertNotSame(months1, months4);
      assertNotSame(months1, months0);
      assertNotSame(months1, months5);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months5, months1);
      assertNotSame(months5, months2);
      assertNotSame(months5, months3);
      assertNotSame(months5, months4);
      assertNotSame(months5, months0);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals((-10), months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months5.size());
      assertEquals((-2369), months5.getMonths());
      assertNotNull(months5);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Months months0 = Months.ONE;
      assertEquals(1, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      PeriodType periodType0 = PeriodType.months();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      int int0 = months0.getMonths();
      assertEquals(1, int0);
      assertEquals(1, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = Months.monthsIn((ReadableInterval) null);
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertNotNull(months1);
      
      Months months2 = months1.ZERO.plus(1);
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertSame(months2, months0);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months2.getMonths());
      assertNotNull(months2);
      
      Months months3 = months2.EIGHT.minus(months1);
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months2.getMonths());
      assertEquals(8, months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
      
      Months months4 = months3.TWELVE.dividedBy(1);
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months4);
      assertSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotSame(months3, months4);
      assertNotSame(months3, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months0);
      assertNotSame(months4, months3);
      assertNotSame(months4, months2);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months2.getMonths());
      assertEquals(8, months3.getMonths());
      assertEquals(1, months3.size());
      assertEquals(12, months4.getMonths());
      assertEquals(1, months4.size());
      assertNotNull(months4);
      
      boolean boolean0 = months0.isLessThan(months1);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(boolean0);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months4);
      assertSame(months0, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months2);
      assertEquals(1, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      
      boolean boolean1 = months1.isLessThan(months0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months4);
      assertSame(months0, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months2);
      assertEquals(1, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      
      // Undeclared exception!
      try { 
        Months.parseMonths("TU99jCt)6Pk!Y'mhM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"TU99jCt)6Pk!Y'mhM\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Months months0 = Months.SIX;
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      PeriodType periodType0 = PeriodType.months();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      int int0 = months0.getMonths();
      assertEquals(6, int0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = Months.monthsIn((ReadableInterval) null);
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertNotNull(months1);
      
      Months months2 = months1.ZERO.plus(6);
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months1);
      assertSame(months2, months0);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(6, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      Months months3 = months2.EIGHT.minus(months1);
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertSame(months2, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(6, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(8, months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
      
      Months months4 = months3.TWELVE.dividedBy(6);
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertNotSame(months1, months4);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months4);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertSame(months2, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotSame(months3, months4);
      assertNotSame(months3, months0);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months3);
      assertNotSame(months4, months2);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(6, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(8, months3.getMonths());
      assertEquals(1, months3.size());
      assertEquals(2, months4.getMonths());
      assertEquals(1, months4.size());
      assertNotNull(months4);
      
      boolean boolean0 = months0.isLessThan(months1);
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(boolean0);
      assertNotSame(months0, months4);
      assertSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months1, months4);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      
      boolean boolean1 = months1.isLessThan(months0);
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(months0, months4);
      assertSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months1, months4);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      
      // Undeclared exception!
      try { 
        Months.parseMonths("TU99jCt)6Pk!Y'mhM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"TU99jCt)6Pk!Y'mhM\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      assertEquals(11, months0.getMonths());
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals(11, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Months months1 = Months.EIGHT;
      assertFalse(months1.equals((Object)months0));
      assertNotSame(months1, months0);
      assertEquals(1, months1.size());
      assertEquals(8, months1.getMonths());
      assertNotNull(months1);
      
      int int0 = months1.EIGHT.compareTo((BaseSingleFieldPeriod) months0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertEquals((-1), int0);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(11, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(8, months1.getMonths());
      
      Months months2 = months1.MAX_VALUE.minus(46);
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(1, months1.size());
      assertEquals(8, months1.getMonths());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertNotNull(months2);
      
      Months months3 = months1.ZERO.plus(months0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertNotSame(months0, months1);
      assertSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months3, months2);
      assertSame(months3, months0);
      assertNotSame(months3, months1);
      assertEquals(11, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(8, months1.getMonths());
      assertEquals(11, months3.getMonths());
      assertEquals(1, months3.size());
      assertNotNull(months3);
      
      int int1 = months3.ONE.getValue(0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertNotSame(months0, months1);
      assertSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months3, months2);
      assertSame(months3, months0);
      assertNotSame(months3, months1);
      assertEquals(11, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(8, months1.getMonths());
      assertEquals(11, months3.getMonths());
      assertEquals(1, months3.size());
      
      Months months4 = months2.ONE.plus(months1);
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months4);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months2, months4);
      assertNotSame(months2, months1);
      assertNotSame(months4, months0);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months4, months3);
      assertEquals(1, months1.size());
      assertEquals(8, months1.getMonths());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals(9, months4.getMonths());
      assertNotNull(months4);
      
      MutablePeriod mutablePeriod0 = months4.toMutablePeriod();
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months4);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months2, months4);
      assertNotSame(months2, months1);
      assertNotSame(months4, months0);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months4, months3);
      assertEquals(1, months1.size());
      assertEquals(8, months1.getMonths());
      assertEquals(2147483601, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months4.size());
      assertEquals(9, months4.getMonths());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      months0.SIX.isSupported(durationFieldType0);
      Months months1 = months0.minus(0);
      months1.EIGHT.compareTo((BaseSingleFieldPeriod) months0);
      Months months2 = months1.MAX_VALUE.minus(46);
      Months months3 = months1.ZERO.plus(months0);
      months3.ONE.getValue(0);
      Months months4 = months2.ONE.plus(months1);
      Months months5 = Months.ELEVEN;
      months4.TWO.toString();
      months1.TEN.toString();
      months5.ZERO.plus(795);
      months0.getFieldType();
      months2.minus(months1);
      // Undeclared exception!
      try { 
        Months.parseMonths("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Months months0 = Months.TWO;
      Months months1 = Months.NINE;
      boolean boolean0 = months0.isLessThan(months1);
      months1.ONE.toString();
      boolean boolean1 = months1.isGreaterThan(months0);
      assertTrue(boolean1);
      
      String string0 = months0.toString();
      assertEquals("P2M", string0);
      
      months0.getPeriodType();
      Months months2 = months0.minus(months0);
      assertEquals(0, months2.getMonths());
      
      boolean boolean2 = months1.isLessThan(months0);
      assertFalse(boolean2 == boolean0);
      
      Months months3 = months0.plus(months0);
      assertNotSame(months3, months0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Months months0 = Months.FOUR;
      months0.getFieldType();
      months0.isGreaterThan(months0);
      Months months1 = months0.minus(0);
      months1.EIGHT.compareTo((BaseSingleFieldPeriod) months0);
      Months months2 = months1.MAX_VALUE.minus(46);
      months2.ONE.getValue(0);
      Months months3 = months2.ONE.plus(months1);
      Months months4 = months3.MAX_VALUE.dividedBy(11);
      months3.TWO.toString();
      months4.ZERO.plus(795);
      months0.getFieldType();
      months2.minus(months1);
      months4.FIVE.dividedBy(795);
      months0.isGreaterThan((Months) null);
      // Undeclared exception!
      try { 
        Months.parseMonths("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
}
