/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:24:16 GMT 2018
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalField;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import junit.framework.Assert;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MockPartial;
import org.joda.time.MockZone;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestBasePartial;
import org.joda.time.TestDateMidnight_Basics;
import org.joda.time.TestDateTimeZone;
import org.joda.time.TestDateTime_Basics;
import org.joda.time.TestInstant_Basics;
import org.joda.time.TestLocalDateTime_Basics;
import org.joda.time.TestLocalDate_Basics;
import org.joda.time.TestLocalTime_Basics;
import org.joda.time.TestMonthDay_Basics;
import org.joda.time.TestMutableDateTime_Basics;
import org.joda.time.TestMutableInterval_Basics;
import org.joda.time.TestMutableInterval_Constructors;
import org.joda.time.TestMutableInterval_Updates;
import org.joda.time.TestTimeOfDay_Basics;
import org.joda.time.TestYearMonthDay_Basics;
import org.joda.time.TestYearMonth_Basics;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.convert.ConverterManager;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalTime_ESTest extends LocalTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-3533L));
      MockPartial mockPartial0 = new MockPartial();
      mockPartial0.getFields();
      LocalTime localTime1 = localTime0.plusMinutes((-195));
      // Undeclared exception!
      try { 
        localTime1.MIDNIGHT.compareTo((ReadablePartial) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-970L));
      LocalTime.fromDateFields(mockDate0);
      mockDate0.toInstant();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[1] = 1568;
      intArray0[2] = 3;
      intArray0[3] = 2196;
      intArray0[4] = 71;
      intArray0[5] = (-911);
      intArray0[6] = 5633;
      intArray0[7] = (-2147483618);
      intArray0[8] = (-4519);
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.withHourOfDay(3);
      // Undeclared exception!
      try { 
        localTime1.getField(3, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(13, "V}e5k(c|O0?bP");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(13);
      dateTimeZone0.convertLocalToUTC((-1640L), true, (-1640L));
      localDate0.getMonthOfYear();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      GregorianCalendar gregorianCalendar0 = dateTime0.toGregorianCalendar();
      LocalTime localTime0 = LocalTime.fromCalendarFields(gregorianCalendar0);
      LocalTime localTime1 = localTime0.withLocalMillis(0L);
      localTime1.getMillisOfDay();
      dateTimeZone0.getName((-1L));
      DateTimeUtils.setCurrentMillisSystem();
      LocalTime localTime2 = localTime0.withLocalMillis(0);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      DateTime dateTime1 = localTime2.toDateTime(dateTime0);
      LocalTime localTime3 = localTime0.MIDNIGHT.withHourOfDay(13);
      localTime0.minusSeconds(0);
      localTime2.millisOfSecond();
      localTime3.plusSeconds(0);
      LocalTime localTime4 = LocalTime.now(dateTimeZone0);
      localTime3.getHourOfDay();
      LocalTime localTime5 = localTime2.plusHours(2);
      LocalTime localTime6 = localTime5.plusMinutes(0);
      localTime6.MIDNIGHT.getHourOfDay();
      localTime6.withLocalMillis((-1640L));
      localTime_Property0.addWrapFieldToCopy(471);
      localTime4.plusMinutes((-208));
      Days days0 = Days.daysBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime1);
      Hours hours0 = days0.toStandardHours();
      localTime2.withPeriodAdded(hours0, 7678125);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(736000L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalTime localTime1 = localTime0.MIDNIGHT.withLocalMillis(36000000L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      LocalTime localTime2 = localTime0.minusHours((-2));
      localTime2.isBefore(localTime1);
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      localTime2.MIDNIGHT.withFieldAdded(durationFieldType0, (-2));
      localTime2.equals(localTime0);
      // Undeclared exception!
      try { 
        localTime0.withSecondOfMinute((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.minusHours(3148);
      // Undeclared exception!
      try { 
        localTime1.withMillisOfDay((-2292));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2292 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime(1000L, (DateTimeZone) uTCDateTimeZone0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Date date0 = localDateTime0.toDate(timeZone0);
      LocalTime localTime0 = LocalTime.fromDateFields(date0);
      String string0 = "1)FsLU_m";
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      // Undeclared exception!
      try { 
        localTime_Property0.addNoWrapToCopy(4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The addition exceeded the boundaries of LocalTime
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestLocalTime_Basics testLocalTime_Basics0 = new TestLocalTime_Basics("O{+G)e=}~LU");
      TestLocalTime_Basics.MockInstant testLocalTime_Basics_MockInstant0 = testLocalTime_Basics0.new MockInstant();
      Chronology chronology0 = testLocalTime_Basics_MockInstant0.getChronology();
      LocalTime localTime0 = new LocalTime(chronology0);
      localTime0.getHourOfDay();
      // Undeclared exception!
      try { 
        localTime0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-3533L));
      MockPartial mockPartial0 = new MockPartial();
      mockPartial0.getFields();
      localTime0.plusMinutes(53);
      localTime0.compareTo((ReadablePartial) localTime0);
      // Undeclared exception!
      try { 
        mockPartial0.getFieldType(1093);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1093
         //
         verifyException("org.joda.time.MockPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      localTime0.withSecondOfMinute(0);
      localTime0.MIDNIGHT.isSupported((DurationFieldType) null);
      localTime0.MIDNIGHT.getFieldTypes();
      LocalTime localTime1 = localTime0.plusMinutes((-3094));
      localTime1.MIDNIGHT.minuteOfHour();
      // Undeclared exception!
      try { 
        LocalTime.parse("-?L-+7U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-?L-+7U\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "%PIL1^C_}`^`";
      TestTimeOfDay_Basics testTimeOfDay_Basics0 = new TestTimeOfDay_Basics("%PIL1^C_}`^`");
      TestTimeOfDay_Basics.MockInstant testTimeOfDay_Basics_MockInstant0 = testTimeOfDay_Basics0.new MockInstant();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(14, 14);
      dateTimeZone0.convertUTCToLocal(14);
      LocalTime localTime0 = new LocalTime(testTimeOfDay_Basics_MockInstant0, dateTimeZone0);
      LocalTime localTime1 = localTime0.minusHours(14);
      LocalTime.Property localTime_Property0 = localTime1.MIDNIGHT.secondOfMinute();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConverterManager.getInstance();
      localTime0.toString();
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      localTime1.MIDNIGHT.isEqual(testTimeOfDay_Basics_MockInstant0);
      LocalTime localTime2 = localTime1.withFieldAdded(durationFieldType0, 2931);
      localTime0.getHourOfDay();
      LocalTime localTime3 = localTime0.withSecondOfMinute(0);
      localTime2.MIDNIGHT.minusMinutes((-217));
      testTimeOfDay_Basics_MockInstant0.getFields();
      localTime0.withHourOfDay(0);
      localTime_Property0.getMillis();
      localTime2.getMillisOfSecond();
      localTime3.MIDNIGHT.minusMillis((-789));
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("\uFFFD\uFFFD:00:00.000");
      TestMutableDateTime_Basics.MockInstant testMutableDateTime_Basics_MockInstant0 = testMutableDateTime_Basics0.new MockInstant();
      Chronology chronology0 = testMutableDateTime_Basics_MockInstant0.getChronology();
      // Undeclared exception!
      try { 
        localTime3.getField(65, chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 65
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      localTime0.getLocalMillis();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      TestYearMonthDay_Basics testYearMonthDay_Basics0 = new TestYearMonthDay_Basics("-1");
      TestYearMonthDay_Basics.MockInstant testYearMonthDay_Basics_MockInstant0 = testYearMonthDay_Basics0.new MockInstant();
      LocalTime localTime0 = new LocalTime(testYearMonthDay_Basics_MockInstant0);
      LocalTime localTime1 = localTime0.plusMinutes((-3));
      // Undeclared exception!
      try { 
        localTime1.withField((DateTimeFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestTimeOfDay_Basics testTimeOfDay_Basics0 = new TestTimeOfDay_Basics("%PIL1^C_}`^`");
      TestTimeOfDay_Basics.MockInstant testTimeOfDay_Basics_MockInstant0 = testTimeOfDay_Basics0.new MockInstant();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(14, 14);
      dateTimeZone0.convertUTCToLocal(14);
      LocalTime localTime0 = new LocalTime(testTimeOfDay_Basics_MockInstant0, dateTimeZone0);
      LocalTime localTime1 = localTime0.MIDNIGHT.plusHours(14);
      LocalTime.Property localTime_Property0 = localTime1.MIDNIGHT.secondOfMinute();
      ConverterManager.getInstance();
      localTime0.toString();
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      localTime1.MIDNIGHT.isEqual(testTimeOfDay_Basics_MockInstant0);
      LocalTime localTime2 = localTime1.withFieldAdded(durationFieldType0, 2931);
      localTime0.getHourOfDay();
      LocalTime localTime3 = localTime1.withMillisOfSecond(0);
      localTime2.MIDNIGHT.minusMinutes((-217));
      testTimeOfDay_Basics_MockInstant0.getFields();
      localTime0.withHourOfDay(0);
      localTime_Property0.getMillis();
      localTime2.getMillisOfSecond();
      localTime3.MIDNIGHT.minusMillis(14);
      // Undeclared exception!
      try { 
        localTime0.toString("%PIL1^C_}`^`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      LocalTime localTime1 = localTime0.minusMinutes((-2754));
      localTime1.MIDNIGHT.withFields(localTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      localTime1.isSupported(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        localTime0.withHourOfDay((-333));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -333 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L);
      Seconds seconds0 = Seconds.ONE;
      seconds0.toStandardDays();
      ConverterManager.getInstance();
      seconds0.toStandardDuration();
      LocalTime localTime1 = localTime0.minus(seconds0);
      DateTimeUtils.setCurrentMillisSystem();
      LocalTime localTime2 = localTime1.MIDNIGHT.minusMinutes((-1539));
      localTime2.MIDNIGHT.minusHours(200);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      localTime_Property0.getField();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-1L));
      Seconds seconds0 = Seconds.ZERO;
      localTime0.MIDNIGHT.minus(seconds0);
      TimeZone timeZone0 = TimeZone.getTimeZone("b{>F2{+{6|JSvc|tR");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      localTime0.toDateTimeToday(dateTimeZone0);
      // Undeclared exception!
      try { 
        localTime0.toString("ickr]-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      LocalTime localTime1 = localTime_Property0.roundHalfEvenCopy();
      LocalTime.Property localTime_Property1 = localTime0.millisOfDay();
      LocalTime localTime2 = localTime1.plusMillis((-1322));
      localTime2.MIDNIGHT.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      localTime_Property1.roundHalfEvenCopy();
      localTime0.minusMinutes((-1322));
      long long0 = 1444L;
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics("\uFFFD\uFFFD:00:00.000");
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics((String) null);
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(testYearMonth_Basics_MockYM0, testDateTime_Basics_MockEqualsChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "%PIL1^C_}`^`";
      TestTimeOfDay_Basics testTimeOfDay_Basics0 = new TestTimeOfDay_Basics("%PIL1^C_}`^`");
      TestTimeOfDay_Basics.MockInstant testTimeOfDay_Basics_MockInstant0 = testTimeOfDay_Basics0.new MockInstant();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(14, 14);
      dateTimeZone0.convertUTCToLocal(14);
      LocalTime localTime0 = new LocalTime(testTimeOfDay_Basics_MockInstant0, dateTimeZone0);
      LocalTime localTime1 = localTime0.MIDNIGHT.plusHours(14);
      LocalTime.Property localTime_Property0 = localTime1.MIDNIGHT.secondOfMinute();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConverterManager.getInstance();
      localTime0.toString();
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      localTime1.MIDNIGHT.isEqual(testTimeOfDay_Basics_MockInstant0);
      LocalTime localTime2 = localTime1.withFieldAdded(durationFieldType0, 2931);
      localTime0.getHourOfDay();
      LocalTime localTime3 = localTime1.withMillisOfSecond(0);
      localTime2.MIDNIGHT.minusMinutes((-217));
      testTimeOfDay_Basics_MockInstant0.getFields();
      localTime0.withHourOfDay(0);
      localTime_Property0.getMillis();
      localTime2.getMillisOfSecond();
      localTime3.MIDNIGHT.minusMillis((-766));
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("\uFFFD\uFFFD:00:00.000");
      TestMutableDateTime_Basics.MockInstant testMutableDateTime_Basics_MockInstant0 = testMutableDateTime_Basics0.new MockInstant();
      Chronology chronology0 = testMutableDateTime_Basics_MockInstant0.getChronology();
      // Undeclared exception!
      try { 
        localTime3.getField(65, chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 65
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Seconds seconds0 = Seconds.ZERO;
      Days days0 = seconds0.toStandardDays();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DurationFieldType durationFieldType1 = unsupportedDurationField0.getType();
      TestLocalDateTime_Basics testLocalDateTime_Basics0 = new TestLocalDateTime_Basics("millisOfSecond");
      TestLocalDateTime_Basics.MockInstant testLocalDateTime_Basics_MockInstant0 = testLocalDateTime_Basics0.new MockInstant();
      Chronology chronology0 = testLocalDateTime_Basics_MockInstant0.getChronology();
      durationFieldType1.isSupported(chronology0);
      localTime0.isSupported(durationFieldType1);
      Seconds seconds1 = Seconds.ZERO;
      seconds0.minus(seconds1);
      LocalTime localTime1 = localTime0.minus(days0);
      localTime1.getChronology();
      // Undeclared exception!
      try { 
        localTime1.withSecondOfMinute(401);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 401 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1000L);
      LocalDate localDate0 = new LocalDate(1000L, (DateTimeZone) null);
      int int0 = (-2652);
      Weeks weeks0 = Weeks.MIN_VALUE;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DurationFieldType durationFieldType1 = unsupportedDurationField0.getType();
      localTime0.MIDNIGHT.isSupported(durationFieldType1);
      localDate0.equals(localTime0);
      // Undeclared exception!
      try { 
        localTime0.compareTo((ReadablePartial) localDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.plusSeconds(0);
      LocalTime localTime2 = localTime1.withMillisOfSecond(0);
      LocalTime.Property localTime_Property0 = localTime2.millisOfSecond();
      String string0 = "";
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("");
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      Chronology chronology0 = testDateTime_Basics_MockEqualsChronology0.withUTC();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      localTime2.MIDNIGHT.isSupported(dateTimeFieldType0);
      localTime2.getField(0, chronology0);
      localTime_Property0.roundHalfCeilingCopy();
      localTime1.minusMillis(0);
      LocalTime localTime3 = localTime_Property0.withMaximumValue();
      int int0 = 2358;
      LocalTime localTime4 = localTime3.plusSeconds(2358);
      localTime4.MIDNIGHT.minusMinutes((-2147483647));
      localTime3.plusHours(0);
      localTime2.withFields(localTime4);
      localTime_Property0.roundCeilingCopy();
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy("' is not supported");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"' is not supported\" for millisOfSecond is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestMonthDay_Basics testMonthDay_Basics0 = new TestMonthDay_Basics("Chronology must not be null");
      assertNotNull(testMonthDay_Basics0);
      
      TestMonthDay_Basics.MockMD testMonthDay_Basics_MockMD0 = testMonthDay_Basics0.new MockMD();
      assertNotNull(testMonthDay_Basics_MockMD0);
      
      LocalTime localTime0 = new LocalTime(testMonthDay_Basics_MockMD0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      
      LocalTime localTime1 = localTime0.plusMinutes((-238));
      assertNotNull(localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      
      boolean boolean0 = localTime0.MIDNIGHT.equals(localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertFalse(boolean0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Chronology must not be null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LocalTime localTime2 = localTime1.minusHours((-238));
      assertNotNull(localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      
      LocalTime.Property localTime_Property0 = localTime2.minuteOfHour();
      assertNotNull(localTime_Property0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      
      LocalTime localTime3 = localTime_Property0.withMinimumValue();
      assertNotNull(localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      
      LocalTime localTime4 = localTime_Property0.addCopy((-238));
      assertNotNull(localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime4.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime1));
      
      LocalTime localTime5 = localTime0.minusMinutes((-238));
      assertNotNull(localTime5);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime5);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime5.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime0));
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType1.toString());
      assertEquals("secondOfDay", dateTimeFieldType1.getName());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType2);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType1);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType2.toString());
      assertEquals("dayOfWeek", dateTimeFieldType2.getName());
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DurationField durationField0 = mockNullZoneChronology0.hours();
      assertNotNull(durationField0);
      assertEquals("", mockNullZoneChronology0.toString());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      assertEquals("hours", durationField0.getName());
      
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType1, durationField0);
      assertNotNull(unsupportedDateTimeField0);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType2);
      assertEquals("", mockNullZoneChronology0.toString());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      assertEquals("hours", durationField0.getName());
      assertEquals("secondOfDay", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertEquals("secondOfDay", dateTimeFieldType1.toString());
      assertEquals("secondOfDay", dateTimeFieldType1.getName());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType2));
      
      DateTimeFieldType dateTimeFieldType3 = unsupportedDateTimeField0.getType();
      assertNotNull(dateTimeFieldType3);
      assertNotSame(dateTimeFieldType3, dateTimeFieldType0);
      assertSame(dateTimeFieldType3, dateTimeFieldType1);
      assertNotSame(dateTimeFieldType3, dateTimeFieldType2);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertSame(dateTimeFieldType1, dateTimeFieldType3);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType2);
      assertEquals("", mockNullZoneChronology0.toString());
      assertFalse(durationField0.isSupported());
      assertEquals(0L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      assertEquals("hours", durationField0.getName());
      assertEquals("secondOfDay", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertEquals("secondOfDay", dateTimeFieldType3.toString());
      assertEquals("secondOfDay", dateTimeFieldType3.getName());
      assertEquals("secondOfDay", dateTimeFieldType1.toString());
      assertEquals("secondOfDay", dateTimeFieldType1.getName());
      assertFalse(dateTimeFieldType3.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType3.equals((Object)dateTimeFieldType2));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType2));
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType4);
      assertNotSame(dateTimeFieldType4, dateTimeFieldType3);
      assertNotSame(dateTimeFieldType4, dateTimeFieldType0);
      assertNotSame(dateTimeFieldType4, dateTimeFieldType1);
      assertSame(dateTimeFieldType4, dateTimeFieldType2);
      assertEquals("dayOfWeek", dateTimeFieldType4.getName());
      assertEquals("dayOfWeek", dateTimeFieldType4.toString());
      assertFalse(dateTimeFieldType4.equals((Object)dateTimeFieldType3));
      assertFalse(dateTimeFieldType4.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType4.equals((Object)dateTimeFieldType1));
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      DateTimeFieldType dateTimeFieldType5 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType5);
      assertNotSame(dateTimeFieldType5, dateTimeFieldType2);
      assertNotSame(dateTimeFieldType5, dateTimeFieldType0);
      assertNotSame(dateTimeFieldType5, dateTimeFieldType1);
      assertNotSame(dateTimeFieldType5, dateTimeFieldType3);
      assertNotSame(dateTimeFieldType5, dateTimeFieldType4);
      assertEquals("hourOfHalfday", dateTimeFieldType5.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType5.toString());
      assertFalse(dateTimeFieldType5.equals((Object)dateTimeFieldType2));
      assertFalse(dateTimeFieldType5.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType5.equals((Object)dateTimeFieldType1));
      assertFalse(dateTimeFieldType5.equals((Object)dateTimeFieldType3));
      assertFalse(dateTimeFieldType5.equals((Object)dateTimeFieldType4));
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldType5;
      DateTimeFieldType dateTimeFieldType6 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType6);
      assertNotSame(dateTimeFieldType6, dateTimeFieldType5);
      assertNotSame(dateTimeFieldType6, dateTimeFieldType2);
      assertNotSame(dateTimeFieldType6, dateTimeFieldType3);
      assertNotSame(dateTimeFieldType6, dateTimeFieldType4);
      assertNotSame(dateTimeFieldType6, dateTimeFieldType1);
      assertSame(dateTimeFieldType6, dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType6.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType6.toString());
      assertFalse(dateTimeFieldType6.equals((Object)dateTimeFieldType5));
      assertFalse(dateTimeFieldType6.equals((Object)dateTimeFieldType2));
      assertFalse(dateTimeFieldType6.equals((Object)dateTimeFieldType3));
      assertFalse(dateTimeFieldType6.equals((Object)dateTimeFieldType4));
      assertFalse(dateTimeFieldType6.equals((Object)dateTimeFieldType1));
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldType6;
      DateTimeFieldType dateTimeFieldType7 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType7);
      assertNotSame(dateTimeFieldType7, dateTimeFieldType5);
      assertNotSame(dateTimeFieldType7, dateTimeFieldType3);
      assertNotSame(dateTimeFieldType7, dateTimeFieldType4);
      assertNotSame(dateTimeFieldType7, dateTimeFieldType6);
      assertNotSame(dateTimeFieldType7, dateTimeFieldType2);
      assertNotSame(dateTimeFieldType7, dateTimeFieldType1);
      assertNotSame(dateTimeFieldType7, dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType7.toString());
      assertEquals("minuteOfHour", dateTimeFieldType7.getName());
      assertFalse(dateTimeFieldType7.equals((Object)dateTimeFieldType5));
      assertFalse(dateTimeFieldType7.equals((Object)dateTimeFieldType3));
      assertFalse(dateTimeFieldType7.equals((Object)dateTimeFieldType4));
      assertFalse(dateTimeFieldType7.equals((Object)dateTimeFieldType6));
      assertFalse(dateTimeFieldType7.equals((Object)dateTimeFieldType2));
      assertFalse(dateTimeFieldType7.equals((Object)dateTimeFieldType1));
      assertFalse(dateTimeFieldType7.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[7] = dateTimeFieldType7;
      DateTimeFieldType dateTimeFieldType8 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType8);
      assertNotSame(dateTimeFieldType8, dateTimeFieldType5);
      assertNotSame(dateTimeFieldType8, dateTimeFieldType1);
      assertNotSame(dateTimeFieldType8, dateTimeFieldType0);
      assertNotSame(dateTimeFieldType8, dateTimeFieldType2);
      assertNotSame(dateTimeFieldType8, dateTimeFieldType6);
      assertNotSame(dateTimeFieldType8, dateTimeFieldType3);
      assertNotSame(dateTimeFieldType8, dateTimeFieldType4);
      assertNotSame(dateTimeFieldType8, dateTimeFieldType7);
      assertEquals("year", dateTimeFieldType8.getName());
      assertEquals("year", dateTimeFieldType8.toString());
      assertFalse(dateTimeFieldType8.equals((Object)dateTimeFieldType5));
      assertFalse(dateTimeFieldType8.equals((Object)dateTimeFieldType1));
      assertFalse(dateTimeFieldType8.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType8.equals((Object)dateTimeFieldType2));
      assertFalse(dateTimeFieldType8.equals((Object)dateTimeFieldType6));
      assertFalse(dateTimeFieldType8.equals((Object)dateTimeFieldType3));
      assertFalse(dateTimeFieldType8.equals((Object)dateTimeFieldType4));
      assertFalse(dateTimeFieldType8.equals((Object)dateTimeFieldType7));
      
      dateTimeFieldTypeArray0[8] = dateTimeFieldType8;
      int[] intArray0 = new int[1];
      intArray0[0] = (-238);
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "3OuDqjIvE";
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("3OuDqjIvE");
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      testDateTime_Basics_MockEqualsChronology0.add((-1941L), (-1941L), 1629);
      // Undeclared exception!
      try { 
        LocalTime.now((Chronology) testDateTime_Basics_MockEqualsChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("");
      TestMutableDateTime_Basics.MockEqualsChronology testMutableDateTime_Basics_MockEqualsChronology0 = testMutableDateTime_Basics0.new MockEqualsChronology();
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      testDateTimeZone_MockDateTimeZone0.toTimeZone();
      Chronology chronology0 = testMutableDateTime_Basics_MockEqualsChronology0.withZone(testDateTimeZone_MockDateTimeZone0);
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((Object) null, chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      LocalTime localTime0 = new LocalTime((-2315L), (DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      localTime0.toString();
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      localTime_Property0.isLeap();
      Locale locale0 = Locale.PRC;
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy((String) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value null for millisOfSecond is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1511L, 473, (-4307));
      LocalTime localTime0 = new LocalTime(0L, (DateTimeZone) mockZone0);
      localTime0.MIDNIGHT.getHourOfDay();
      localTime0.equals(mockZone0);
      localTime0.toDateTimeToday();
      mockZone0.convertLocalToUTC((long) 0, true);
      LocalTime localTime1 = localTime0.plusMillis(473);
      localTime0.MIDNIGHT.minusHours(0);
      LocalTime.Property localTime_Property0 = localTime1.minuteOfHour();
      localTime_Property0.getLocalTime();
      localTime0.getMinuteOfHour();
      localTime_Property0.addCopy((long) 0);
      LocalTime localTime2 = localTime_Property0.getLocalTime();
      localTime2.plusSeconds((-4307));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      int int0 = 25734375;
      localTime0.MIDNIGHT.plusMillis(2239);
      // Undeclared exception!
      try { 
        localTime0.withMillisOfSecond(25734375);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 25734375 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.minusHours(0);
      localTime0.MIDNIGHT.isAfter(localTime1);
      LocalTime localTime2 = localTime1.withMillisOfSecond(0);
      int int0 = 0;
      localTime2.minusHours(0);
      LocalTime.Property localTime_Property0 = localTime1.hourOfDay();
      Chronology chronology0 = localTime_Property0.getChronology();
      // Undeclared exception!
      try { 
        localTime2.getField(12, chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 12
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1L), chronology0);
      int int0 = (-2538);
      // Undeclared exception!
      try { 
        localTime0.withHourOfDay((-2538));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2538 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-573), (-2511), 0, (-2511), 30, 0);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      Hours hours0 = Hours.ONE;
      Period period0 = Period.seconds((-1858));
      Period period1 = period0.plusDays((-2511));
      Hours hours1 = period1.toStandardHours();
      DateTimeUtils.setCurrentMillisSystem();
      Hours hours2 = hours0.minus(hours1);
      localTime0.plus(hours1);
      LocalTime localTime1 = localTime0.withPeriodAdded(hours2, (-1132));
      localTime1.toString();
      localTime1.MIDNIGHT.getFields();
      MockDate mockDate1 = new MockDate();
      mockDate0.before(mockDate1);
      LocalTime localTime2 = localTime0.withLocalMillis((-1L));
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      localTime_Property0.getChronology();
      localTime2.hourOfDay();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-3533L));
      MockPartial mockPartial0 = new MockPartial();
      mockPartial0.getFields();
      LocalTime localTime1 = localTime0.plusMinutes((-195));
      localTime1.MIDNIGHT.compareTo((ReadablePartial) localTime0);
      TestMutableInterval_Basics testMutableInterval_Basics0 = new TestMutableInterval_Basics("2010-06-30T12:30");
      TestMutableInterval_Basics.MockInterval testMutableInterval_Basics_MockInterval0 = testMutableInterval_Basics0.new MockInterval();
      Chronology chronology0 = testMutableInterval_Basics_MockInterval0.getChronology();
      DateTime dateTime0 = DateTime.now(chronology0);
      localTime1.toDateTime(dateTime0);
      // Undeclared exception!
      try { 
        mockPartial0.getFieldType(1093);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1093
         //
         verifyException("org.joda.time.MockPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long long0 = 0L;
      int int0 = 56;
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(56, 2339, (-220), 0, mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1102L));
      LocalTime localTime1 = localTime0.withLocalMillis((-1102L));
      TestMutableInterval_Constructors testMutableInterval_Constructors0 = new TestMutableInterval_Constructors("Ziu=XFx^;Ao+4:");
      TestMutableInterval_Constructors.MockInterval testMutableInterval_Constructors_MockInterval0 = testMutableInterval_Constructors0.new MockInterval();
      PeriodType periodType0 = PeriodType.days();
      testMutableInterval_Constructors_MockInterval0.toPeriod(periodType0);
      localTime1.withPeriodAdded((ReadablePeriod) null, (-2353));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      localTime0.MIDNIGHT.minusMinutes(0);
      LocalTime localTime1 = localTime0.withMillisOfDay(0);
      localTime1.getLocalMillis();
      localTime1.getSecondOfMinute();
      localTime0.withLocalMillis(0);
      TestInstant_Basics testInstant_Basics0 = new TestInstant_Basics("k<&(MD;4OI>KLo");
      TestInstant_Basics.MockInstant testInstant_Basics_MockInstant0 = testInstant_Basics0.new MockInstant();
      testInstant_Basics_MockInstant0.toMutableDateTime(dateTimeZone0);
      Chronology chronology0 = testInstant_Basics_MockInstant0.getChronology();
      LocalTime.now(chronology0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-3855L));
      LocalTime localTime1 = localTime0.minusMinutes(4);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localTime0, (ReadablePartial) localTime1);
      LocalTime localTime2 = localTime1.withPeriodAdded(minutes0, 60);
      LocalTime localTime3 = localTime2.minusHours(0);
      Minutes.minutes(60);
      DateTimeUtils.setCurrentMillisSystem();
      LocalTime localTime4 = localTime3.withLocalMillis((-3855L));
      LocalTime.Property localTime_Property0 = localTime4.minuteOfHour();
      localTime_Property0.getLocalTime();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      localTime0.getMinuteOfHour();
      localTime0.getSecondOfMinute();
      localTime0.minusHours(1023);
      LocalTime localTime1 = localTime0.minusMillis(21);
      localTime1.MIDNIGHT.withHourOfDay(21);
      Locale locale0 = Locale.CHINA;
      try { 
        localTime1.MIDNIGHT.toString("Zone must not be null", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "%PIL1^C_}`^`";
      TestTimeOfDay_Basics testTimeOfDay_Basics0 = new TestTimeOfDay_Basics("%PIL1^C_}`^`");
      TestTimeOfDay_Basics.MockInstant testTimeOfDay_Basics_MockInstant0 = testTimeOfDay_Basics0.new MockInstant();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(14, 14);
      dateTimeZone0.convertUTCToLocal(14);
      LocalTime localTime0 = new LocalTime(testTimeOfDay_Basics_MockInstant0, dateTimeZone0);
      LocalTime localTime1 = localTime0.MIDNIGHT.plusHours(14);
      LocalTime.Property localTime_Property0 = localTime1.MIDNIGHT.secondOfMinute();
      ConverterManager.getInstance();
      localTime0.toString();
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      localTime1.MIDNIGHT.isEqual(testTimeOfDay_Basics_MockInstant0);
      LocalTime localTime2 = localTime1.withFieldAdded(durationFieldType0, 2931);
      localTime0.getHourOfDay();
      LocalTime localTime3 = localTime1.withMillisOfSecond(0);
      localTime2.MIDNIGHT.minusMinutes((-217));
      testTimeOfDay_Basics_MockInstant0.getFields();
      localTime0.withHourOfDay(0);
      localTime_Property0.getMillis();
      localTime2.getMillisOfSecond();
      localTime3.MIDNIGHT.minusMillis((-789));
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("\uFFFD\uFFFD:00:00.000");
      TestMutableDateTime_Basics.MockInstant testMutableDateTime_Basics_MockInstant0 = testMutableDateTime_Basics0.new MockInstant();
      Chronology chronology0 = testMutableDateTime_Basics_MockInstant0.getChronology();
      // Undeclared exception!
      try { 
        localTime3.getField(65, chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 65
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-363));
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      localTime0.size();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      // Undeclared exception!
      try { 
        LocalTime.fromMillisOfDay((-291L), chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      localTime0.getFields();
      localTime0.getValue(0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      localTime_Property0.roundFloorCopy();
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) localTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse("gUs~s%xl1gN9'`meSvi", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 14;
      LocalTime localTime0 = new LocalTime(14, 0, 0, 981, (Chronology) null);
      int int1 = 1661;
      // Undeclared exception!
      try { 
        localTime0.withMillisOfSecond(1661);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1661 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded((DurationFieldType) null, (-1892));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Chronology chronology0 = null;
      // Undeclared exception!
      try { 
        LocalTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("");
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      testDateTime_Basics_MockEqualsChronology0.getZone();
      // Undeclared exception!
      try { 
        LocalTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      Period period0 = new Period();
      int int0 = (-2350);
      LocalTime localTime1 = localTime0.withPeriodAdded(period0, (-2350));
      LocalTime localTime2 = localTime1.plusMillis(0);
      LocalTime localTime3 = localTime2.minusMillis(0);
      localTime3.plus(period0);
      DurationFieldType durationFieldType0 = null;
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField((RemainderDateTimeField) null, (DateTimeFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-1867L));
      localTime0.getMillisOfDay();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L);
      Seconds seconds0 = Seconds.ONE;
      seconds0.toStandardDays();
      ConverterManager.getInstance();
      seconds0.toStandardDuration();
      LocalTime localTime1 = localTime0.minus(seconds0);
      DateTimeUtils.setCurrentMillisSystem();
      LocalTime localTime2 = localTime1.MIDNIGHT.minusMinutes((-1539));
      localTime2.MIDNIGHT.minusHours(200);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      // Undeclared exception!
      try { 
        localTime0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'centuryOfEra' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("-07:05:34.0");
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      testDateTime_Basics_MockEqualsChronology0.getZone();
      LocalTime localTime0 = new LocalTime((-404L), (DateTimeZone) null);
      LocalTime localTime1 = localTime0.minusHours((-538));
      LocalTime localTime2 = localTime0.withFields(localTime1);
      localTime2.toString("-07:05:34.0");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      localTime0.toDateTimeToday();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("P1Y2M3W4DT5H6M7.008S");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = new LocalTime(testLocalDate_Basics_MockInstant0, uTCDateTimeZone0);
      testLocalDate_Basics0.testWithField_DateTimeFieldType_int_4();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      // Undeclared exception!
      try { 
        localTime0.withField(dateTimeFieldType0, 4503);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4503 for minuteOfDay must be in the range [0,1439]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "[#tMx\"J>";
      TestYearMonthDay_Basics testYearMonthDay_Basics0 = new TestYearMonthDay_Basics("[#tMx\"J>");
      TestYearMonthDay_Basics.MockInstant testYearMonthDay_Basics_MockInstant0 = testYearMonthDay_Basics0.new MockInstant();
      testYearMonthDay_Basics_MockInstant0.toString();
      LocalTime localTime0 = new LocalTime(testYearMonthDay_Basics_MockInstant0);
      localTime0.equals(testYearMonthDay_Basics_MockInstant0);
      int int0 = (-2424);
      // Undeclared exception!
      try { 
        localTime0.withMinuteOfHour((-2424));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2424 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("must not be larger than ");
      TestMutableDateTime_Basics.MockEqualsChronology testMutableDateTime_Basics_MockEqualsChronology0 = testMutableDateTime_Basics0.new MockEqualsChronology();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(testMutableDateTime_Basics_MockEqualsChronology0, testMutableDateTime_Basics_MockEqualsChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.TestMutableDateTime_Basics$MockEqualsChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.withLocalMillis(0L);
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("GMT+2");
      TestMutableDateTime_Basics.MockEqualsChronology testMutableDateTime_Basics_MockEqualsChronology0 = testMutableDateTime_Basics0.new MockEqualsChronology();
      testMutableDateTime_Basics_MockEqualsChronology0.getZone();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(localDate1, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      // Undeclared exception!
      try { 
        localTime0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'centuryOfEra' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Object) null);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      localTime0.isSupported(durationFieldType0);
      LocalTime localTime1 = localTime0.plusHours((-202));
      localTime1.isSupported((DateTimeFieldType) null);
      LocalTime localTime2 = localTime0.withFields(localTime1);
      localTime2.getSecondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      // Undeclared exception!
      try { 
        localTime1.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'yearOfEra' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0, 0, 12);
      LocalTime localTime1 = localTime0.MIDNIGHT.withMillisOfDay(12);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      dateTimeFieldType0.getDurationType();
      localTime0.get(dateTimeFieldType0);
      LocalTime.Property localTime_Property0 = localTime1.property(dateTimeFieldType0);
      localTime_Property0.roundHalfFloorCopy();
      int int0 = 9;
      localTime_Property0.setCopy(int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.plusSeconds(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      // Undeclared exception!
      try { 
        localTime1.withField(dateTimeFieldType0, (-2629));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'yearOfCentury' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.withLocalMillis((-2071L));
      LocalTime localTime2 = localTime1.withFields(localTime0);
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      LocalTime localTime3 = localTime2.withFieldAdded(durationFieldType0, 0);
      LocalTime localTime4 = localTime3.minusMillis((-1830));
      int int0 = 2711;
      // Undeclared exception!
      try { 
        localTime4.withSecondOfMinute(2711);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2711 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestDateMidnight_Basics testDateMidnight_Basics0 = new TestDateMidnight_Basics("org.joda.time.LocalTime");
      TestDateMidnight_Basics.MockInstant testDateMidnight_Basics_MockInstant0 = testDateMidnight_Basics0.new MockInstant();
      Chronology chronology0 = testDateMidnight_Basics_MockInstant0.getChronology();
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-60000L), chronology0);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      localTime_Property0.addCopy((-60000L));
      localTime0.plusHours(220);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.toString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstant_Basics testInstant_Basics0 = new TestInstant_Basics("L!.GEW? AbKZ(2)");
      TestInstant_Basics.MockInstant testInstant_Basics_MockInstant0 = testInstant_Basics0.new MockInstant();
      Chronology chronology0 = testInstant_Basics_MockInstant0.getChronology();
      LocalTime localTime0 = LocalTime.now(chronology0);
      localTime0.millisOfDay();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(3332L, (DateTimeZone) null);
      // Undeclared exception!
      try { 
        localTime0.toString("org.joda.time.LocalTime");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse("r+%6RQ.0hs#Oeu)q>c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"r+%6RQ.0hs#Oeu)q>c\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 0;
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(2802, 2802, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2802 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestMutableInterval_Updates testMutableInterval_Updates0 = new TestMutableInterval_Updates("vidQ/");
      TestMutableInterval_Updates.MockBadInterval testMutableInterval_Updates_MockBadInterval0 = testMutableInterval_Updates0.new MockBadInterval();
      Chronology chronology0 = testMutableInterval_Updates_MockBadInterval0.getChronology();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L, chronology0);
      localTime0.secondOfMinute();
      localTime0.secondOfMinute();
      LocalTime.fromMillisOfDay(0L, chronology0);
      // Undeclared exception!
      try { 
        localTime0.withSecondOfMinute(1972);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1972 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(11, 11, 11);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestMonthDay_Basics testMonthDay_Basics0 = new TestMonthDay_Basics("t~HsfC;DR%P");
      TestMonthDay_Basics.MockMD testMonthDay_Basics_MockMD0 = testMonthDay_Basics0.new MockMD();
      Chronology chronology0 = testMonthDay_Basics_MockMD0.getChronology();
      LocalTime localTime0 = new LocalTime(960L, chronology0);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.weekyearOfCentury();
      LocalTime.Property localTime_Property0 = new LocalTime.Property(localTime0, dateTimeField0);
      // Undeclared exception!
      try { 
        localTime_Property0.addCopy(960L);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weekyears field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      LocalTime localTime0 = new LocalTime(1372L, chronology0);
      TestLocalDateTime_Basics testLocalDateTime_Basics0 = new TestLocalDateTime_Basics("-y,ea&dHO/p\"VL");
      TestLocalDateTime_Basics.MockInstant testLocalDateTime_Basics_MockInstant0 = testLocalDateTime_Basics0.new MockInstant();
      localTime0.equals(testLocalDateTime_Basics_MockInstant0);
      localTime0.minusSeconds((-1035));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      localTime0.secondOfMinute();
      // Undeclared exception!
      try { 
        localTime0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      LocalTime localTime0 = LocalTime.now(chronology0);
      // Undeclared exception!
      try { 
        localTime0.withSecondOfMinute(62);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 62 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("v MI^IZlEB1uN*H");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      Chronology chronology0 = testLocalDate_Basics_MockInstant0.getChronology();
      LocalTime localTime0 = new LocalTime(chronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      dateTimeFieldType0.isSupported(chronology0);
      // Undeclared exception!
      try { 
        localTime0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'era' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime localTime1 = localTime0.withHourOfDay(14);
      int int0 = 13;
      MockDate mockDate0 = new MockDate(14, 0, 0, 0, 13, 0);
      MockDate mockDate1 = new MockDate(380L);
      mockDate0.before(mockDate1);
      LocalTime.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        localTime1.getValue(2237);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 2237
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3041, 3041, 3041, 3041, 0);
      assertNotNull(mockGregorianCalendar0);
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localTime0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=42068134800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3303,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, localTime0.size());
      
      int int0 = (-15);
      LocalTime localTime1 = localTime0.plusMillis((-15));
      assertNotNull(localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=42068134800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3303,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      
      LocalTime localTime2 = localTime0.withHourOfDay(0);
      assertNotNull(localTime2);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=42068134800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3303,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        localTime2.MIDNIGHT.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'yearOfEra' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestLocalTime_Basics testLocalTime_Basics0 = new TestLocalTime_Basics("");
      assertNotNull(testLocalTime_Basics0);
      
      TestLocalTime_Basics.MockInstant testLocalTime_Basics_MockInstant0 = testLocalTime_Basics0.new MockInstant();
      assertNotNull(testLocalTime_Basics_MockInstant0);
      
      TestDateMidnight_Basics testDateMidnight_Basics0 = new TestDateMidnight_Basics("");
      assertNotNull(testDateMidnight_Basics0);
      
      TestDateMidnight_Basics.MockInstant testDateMidnight_Basics_MockInstant0 = testDateMidnight_Basics0.new MockInstant();
      assertNotNull(testDateMidnight_Basics_MockInstant0);
      assertEquals(1017961200000L, testDateMidnight_Basics_MockInstant0.getMillis());
      assertNull(testDateMidnight_Basics_MockInstant0.toString());
      
      Chronology chronology0 = testDateMidnight_Basics_MockInstant0.getChronology();
      assertNotNull(chronology0);
      assertEquals(1017961200000L, testDateMidnight_Basics_MockInstant0.getMillis());
      assertNull(testDateMidnight_Basics_MockInstant0.toString());
      
      LocalTime localTime0 = new LocalTime(testLocalTime_Basics_MockInstant0, chronology0);
      assertNotNull(localTime0);
      assertEquals(1017961200000L, testDateMidnight_Basics_MockInstant0.getMillis());
      assertNull(testDateMidnight_Basics_MockInstant0.toString());
      assertEquals(4, localTime0.size());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      LocalTime localTime1 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localTime1);
      assertNotSame(localTime1, localTime0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      
      // Undeclared exception!
      try { 
        localTime0.getValue(1449);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 1449
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Chronology) null);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Hours hours0 = Hours.hoursIn((ReadableInterval) null);
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      
      Hours hours1 = hours0.negated();
      assertNotNull(hours1);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      
      LocalTime localTime1 = localTime0.withPeriodAdded(hours1, 1092);
      assertNotNull(localTime1);
      assertSame(localTime0, localTime1);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertEquals(4, localTime1.size());
      
      LocalTime localTime2 = localTime0.minus(hours1);
      assertNotNull(localTime2);
      assertSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertSame(localTime2, localTime1);
      assertSame(localTime2, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertEquals(4, localTime2.size());
      
      LocalTime localTime3 = localTime2.withPeriodAdded(hours1, 249);
      assertNotNull(localTime3);
      assertSame(localTime0, localTime3);
      assertSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertSame(localTime2, localTime3);
      assertSame(localTime2, localTime1);
      assertSame(localTime2, localTime0);
      assertSame(localTime3, localTime0);
      assertSame(localTime3, localTime1);
      assertSame(localTime3, localTime2);
      assertEquals(4, localTime0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      
      LocalTime.Property localTime_Property0 = localTime3.MIDNIGHT.millisOfSecond();
      assertNotNull(localTime_Property0);
      assertSame(localTime0, localTime3);
      assertSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertSame(localTime2, localTime3);
      assertSame(localTime2, localTime1);
      assertSame(localTime2, localTime0);
      assertSame(localTime3, localTime0);
      assertSame(localTime3, localTime1);
      assertSame(localTime3, localTime2);
      assertEquals(4, localTime0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      
      String string0 = localTime3.toString();
      assertNotNull(string0);
      assertSame(localTime0, localTime3);
      assertSame(localTime0, localTime1);
      assertSame(localTime0, localTime2);
      assertSame(hours0, hours1);
      assertSame(hours1, hours0);
      assertSame(localTime2, localTime3);
      assertSame(localTime2, localTime1);
      assertSame(localTime2, localTime0);
      assertSame(localTime3, localTime0);
      assertSame(localTime3, localTime1);
      assertSame(localTime3, localTime2);
      assertEquals("17:21:21.320", string0);
      assertEquals(4, localTime0.size());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      
      DateTimeUtils.setCurrentMillisOffset(896L);
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      assertNotNull(durationFieldType0);
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      
      // Undeclared exception!
      try { 
        localTime2.withFieldAdded(durationFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weeks' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 1971;
      int int1 = 759;
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(1971, 759, 1971, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1971 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("Erx");
      assertNotNull(testDateTime_Basics0);
      
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      assertNotNull(testDateTime_Basics_MockEqualsChronology0);
      assertEquals("", testDateTime_Basics_MockEqualsChronology0.toString());
      
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(14L, (Chronology) testDateTime_Basics_MockEqualsChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 0;
      LocalTime localTime0 = new LocalTime(0, 0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int1 = localTime0.MIDNIGHT.getValue(0);
      assertEquals(0, int1);
      assertEquals(4, localTime0.size());
      assertTrue(int1 == int0);
      
      LocalTime localTime1 = localTime0.plusHours(0);
      assertNotNull(localTime1);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      Minutes minutes0 = Minutes.MIN_VALUE;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MIN_VALUE, minutes0.getMinutes());
      
      // Undeclared exception!
      try { 
        minutes0.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 60
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.withMinuteOfHour(0);
      assertNotNull(localTime1);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      
      Minutes minutes0 = Minutes.MIN_VALUE;
      assertNotNull(minutes0);
      assertEquals(Integer.MIN_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      
      LocalTime localTime2 = localTime1.MIDNIGHT.minus(minutes0);
      assertNotNull(localTime2);
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime2);
      assertSame(localTime1, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(Integer.MIN_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      
      TestYearMonthDay_Basics testYearMonthDay_Basics0 = new TestYearMonthDay_Basics("");
      assertNotNull(testYearMonthDay_Basics0);
      
      TestYearMonthDay_Basics.MockInstant testYearMonthDay_Basics_MockInstant0 = testYearMonthDay_Basics0.new MockInstant();
      assertNotNull(testYearMonthDay_Basics_MockInstant0);
      
      ConverterManager converterManager0 = ConverterManager.getInstance();
      assertNotNull(converterManager0);
      
      CopticChronology copticChronology0 = (CopticChronology)testYearMonthDay_Basics_MockInstant0.getChronology();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      DateTimeField dateTimeField0 = localTime0.getField(0, (Chronology) copticChronology0);
      assertNotNull(dateTimeField0);
      assertSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertEquals(4, localTime0.size());
      assertEquals(1, CopticChronology.AM);
      assertFalse(localTime0.equals((Object)localTime2));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-2404L));
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) null);
      assertNotNull(minutes0);
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      
      LocalTime localTime1 = localTime0.plus(minutes0);
      assertNotNull(localTime1);
      assertSame(localTime0, localTime1);
      assertSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(4, localTime1.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      assertNotNull(durationFieldType0);
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      
      int int0 = 11;
      // Undeclared exception!
      try { 
        localTime1.withFieldAdded(durationFieldType0, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'centuries' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("h/\"?ibfH3PF");
      assertNotNull(testLocalDate_Basics0);
      
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      assertNotNull(testLocalDate_Basics_MockInstant0);
      
      CopticChronology copticChronology0 = (CopticChronology)testLocalDate_Basics_MockInstant0.getChronology();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      LocalTime localTime0 = new LocalTime((Chronology) copticChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = localTime0.MIDNIGHT.getMillisOfDay();
      assertEquals(0, int0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusMinutes((-70));
      assertNotNull(localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      
      int int1 = localTime1.compareTo((ReadablePartial) localTime0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(1, int1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestLocalDateTime_Basics testLocalDateTime_Basics0 = new TestLocalDateTime_Basics("Literal must not be null");
      assertNotNull(testLocalDateTime_Basics0);
      
      TestLocalDateTime_Basics.MockInstant testLocalDateTime_Basics_MockInstant0 = testLocalDateTime_Basics0.new MockInstant();
      assertNotNull(testLocalDateTime_Basics_MockInstant0);
      
      LocalTime localTime0 = new LocalTime(testLocalDateTime_Basics_MockInstant0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusSeconds(4);
      assertNotNull(localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      
      Partial partial0 = new Partial(localTime0);
      assertNotNull(partial0);
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertFalse(localTime0.equals((Object)localTime1));
      
      Partial partial1 = new Partial(partial0, (int[]) null);
      assertNotNull(partial1);
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertEquals(4, partial1.size());
      assertFalse(localTime0.equals((Object)localTime1));
      
      DateTimeFormatter dateTimeFormatter0 = partial1.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertEquals(4, partial1.size());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertFalse(localTime0.equals((Object)localTime1));
      
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("t2");
      assertNotNull(testDateTime_Basics0);
      
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      assertNotNull(testDateTime_Basics_MockEqualsChronology0);
      assertEquals("", testDateTime_Basics_MockEqualsChronology0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(testDateTime_Basics_MockEqualsChronology0);
      assertNotNull(dateTimeFormatter1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertEquals(4, partial1.size());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("", testDateTime_Basics_MockEqualsChronology0.toString());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertEquals(4, partial1.size());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("", testDateTime_Basics_MockEqualsChronology0.toString());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      
      DateTimeField[] dateTimeFieldArray0 = testLocalDateTime_Basics_MockInstant0.getFields();
      assertNotNull(dateTimeFieldArray0);
      assertEquals(4, dateTimeFieldArray0.length);
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear(1687);
      assertNotNull(dateTimeFormatter3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertEquals(4, partial1.size());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("", testDateTime_Basics_MockEqualsChronology0.toString());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(1687, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      
      String string0 = localTime1.toString(dateTimeFormatter3);
      assertNotNull(string0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertEquals("23:59:56.000", string0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, partial0.size());
      assertEquals(4, partial1.size());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals("", testDateTime_Basics_MockEqualsChronology0.toString());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertTrue(dateTimeFormatter2.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isParser());
      assertEquals(1687, dateTimeFormatter3.getDefaultYear());
      assertNull(dateTimeFormatter3.getPivotYear());
      assertTrue(dateTimeFormatter3.isOffsetParsed());
      assertTrue(dateTimeFormatter3.isPrinter());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      
      LocalTime localTime2 = localTime0.withMillisOfSecond(4);
      assertNotNull(localTime2);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      
      LocalTime.Property localTime_Property0 = localTime2.millisOfSecond();
      assertNotNull(localTime_Property0);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      
      LocalTime localTime3 = localTime_Property0.roundHalfCeilingCopy();
      assertNotNull(localTime3);
      assertNotSame(localTime3, localTime0);
      assertSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime2, localTime1);
      assertSame(localTime2, localTime3);
      assertNotSame(localTime2, localTime0);
      assertEquals(4, localTime3.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.minusSeconds((-253));
      assertNotNull(localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      
      LocalTime localTime2 = localTime1.plus((ReadablePeriod) null);
      assertNotNull(localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertSame(localTime2, localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("' is not supported");
      assertNull(dateTimeZone0);
      
      LocalTime localTime0 = new LocalTime(0L, (DateTimeZone) null);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      String string0 = localTime0.toString();
      assertNotNull(string0);
      assertEquals("21:00:00.000", string0);
      assertEquals(4, localTime0.size());
      
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      assertNotNull(localTime_Property0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.plusMinutes(244);
      assertNotNull(localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TestMonthDay_Basics testMonthDay_Basics0 = new TestMonthDay_Basics("Chronology must not be null");
      assertNotNull(testMonthDay_Basics0);
      
      TestMonthDay_Basics.MockMD testMonthDay_Basics_MockMD0 = testMonthDay_Basics0.new MockMD();
      assertNotNull(testMonthDay_Basics_MockMD0);
      
      LocalTime localTime0 = new LocalTime(testMonthDay_Basics_MockMD0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      
      boolean boolean0 = localTime0.MIDNIGHT.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(4, localTime0.size());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      
      LocalTime localTime1 = localTime0.plusMinutes((-238));
      assertNotNull(localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      
      LocalTime localTime2 = localTime1.minusHours((-238));
      assertNotNull(localTime2);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      
      LocalTime.Property localTime_Property0 = localTime2.minuteOfHour();
      assertNotNull(localTime_Property0);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      
      LocalTime localTime3 = localTime_Property0.withMinimumValue();
      assertNotNull(localTime3);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime3.size());
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime1));
      
      LocalTime localTime4 = localTime_Property0.addCopy((-238));
      assertNotNull(localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime3);
      assertNotSame(localTime1, localTime4);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime4);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime4, localTime1);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertEquals(4, localTime4.size());
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime3));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime1));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      assertNotNull(localTime0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      localTime0.property(dateTimeFieldType0);
      long long0 = (-2355L);
      System.setCurrentTimeMillis(long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime("+JUz#Ur$JctUA|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+JUz#Ur$JctUA|\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      assertNotNull(testBasePartial_MockPartial0);
      assertEquals(1970, testBasePartial_MockPartial0.getYear());
      assertEquals(1, testBasePartial_MockPartial0.getMonthOfYear());
      assertEquals(2, testBasePartial_MockPartial0.size());
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(testBasePartial_MockPartial0, mockNullZoneChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Integer integer0 = new Integer(752);
      assertNotNull(integer0);
      assertEquals(752, (int)integer0);
      
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(0, 0, 0, (-913), (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -913 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = (-1553);
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((-1553), (-1553));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1553 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 0;
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(0, (-1016));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1016 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(736000L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.MIDNIGHT.withLocalMillis(36000000L);
      assertNotNull(localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      LocalTime localTime2 = localTime0.minusHours(11);
      assertNotNull(localTime2);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      
      boolean boolean1 = localTime2.isBefore(localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime1, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      assertFalse(boolean1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime1.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertTrue(boolean1 == boolean0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      assertNotNull(durationFieldType0);
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      
      LocalTime localTime3 = localTime2.MIDNIGHT.withFieldAdded(durationFieldType0, 11);
      assertNotNull(localTime3);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      assertNotSame(localTime3, localTime0);
      assertNotSame(localTime3, localTime2);
      assertNotSame(localTime3, localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals(4, localTime3.size());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime0));
      assertFalse(localTime3.equals((Object)localTime2));
      assertFalse(localTime3.equals((Object)localTime1));
      
      boolean boolean2 = localTime2.equals(localTime0);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime2, localTime1);
      assertNotSame(localTime2, localTime0);
      assertNotSame(localTime2, localTime3);
      assertFalse(boolean2);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime2.size());
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime2.equals((Object)localTime1));
      assertFalse(localTime2.equals((Object)localTime0));
      assertFalse(localTime2.equals((Object)localTime3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      LocalTime localTime4 = localTime0.withSecondOfMinute(11);
      assertNotNull(localTime4);
      assertNotSame(localTime0, localTime3);
      assertNotSame(localTime0, localTime4);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime0, localTime2);
      assertNotSame(localTime4, localTime2);
      assertNotSame(localTime4, localTime3);
      assertNotSame(localTime4, localTime0);
      assertNotSame(localTime4, localTime1);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime4.size());
      assertFalse(localTime0.equals((Object)localTime3));
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime0.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime2));
      assertFalse(localTime4.equals((Object)localTime3));
      assertFalse(localTime4.equals((Object)localTime0));
      assertFalse(localTime4.equals((Object)localTime1));
      
      DateTimeUtils.setCurrentMillisOffset(11);
      LocalTime localTime5 = LocalTime.now();
      assertNotNull(localTime5);
      assertNotSame(localTime5, localTime4);
      assertNotSame(localTime5, localTime3);
      assertNotSame(localTime5, localTime2);
      assertNotSame(localTime5, localTime1);
      assertNotSame(localTime5, localTime0);
      assertEquals(4, localTime5.size());
      assertFalse(localTime5.equals((Object)localTime4));
      assertFalse(localTime5.equals((Object)localTime3));
      assertFalse(localTime5.equals((Object)localTime2));
      assertFalse(localTime5.equals((Object)localTime1));
      assertFalse(localTime5.equals((Object)localTime0));
      
      // Undeclared exception!
      try { 
        localTime5.withMillisOfDay(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483647 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      
      int int0 = (-59);
      // Undeclared exception!
      try { 
        localTime0.withField(dateTimeFieldType0, (-59));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'yearOfEra' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        Days.parseDays("VFsLU_m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"VFsLU_m\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalTime localTime1 = localTime0.MIDNIGHT.minusSeconds((-729));
      assertNotNull(localTime1);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertFalse(localTime1.equals((Object)localTime0));
      
      DateTime dateTime0 = localTime1.MIDNIGHT.toDateTimeToday();
      assertNotNull(dateTime0);
      assertNotSame(localTime0, localTime1);
      assertNotSame(localTime1, localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localTime1.size());
      assertEquals(1392346800000L, dateTime0.getMillis());
      assertFalse(localTime0.equals((Object)localTime1));
      assertFalse(localTime1.equals((Object)localTime0));
      
      // Undeclared exception!
      try { 
        localTime0.withSecondOfMinute((-932));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -932 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = new LocalDateTime(1000L, (DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        Days.parseDays("VFsLU_m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"VFsLU_m\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "%PIL1^C_}`^`";
      TestTimeOfDay_Basics testTimeOfDay_Basics0 = new TestTimeOfDay_Basics("%PIL1^C_}`^`");
      TestTimeOfDay_Basics.MockInstant testTimeOfDay_Basics_MockInstant0 = testTimeOfDay_Basics0.new MockInstant();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(14, 14);
      dateTimeZone0.convertUTCToLocal(14);
      LocalTime localTime0 = new LocalTime(testTimeOfDay_Basics_MockInstant0, dateTimeZone0);
      LocalTime localTime1 = localTime0.minusHours(14);
      LocalTime.Property localTime_Property0 = localTime1.MIDNIGHT.secondOfMinute();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConverterManager.getInstance();
      localTime0.toString();
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      localTime1.MIDNIGHT.isEqual(testTimeOfDay_Basics_MockInstant0);
      LocalTime localTime2 = localTime1.withFieldAdded(durationFieldType0, 2931);
      localTime0.getHourOfDay();
      LocalTime localTime3 = localTime1.withMillisOfSecond(0);
      localTime2.MIDNIGHT.minusMinutes((-217));
      testTimeOfDay_Basics_MockInstant0.getFields();
      localTime0.withHourOfDay(0);
      localTime_Property0.getMillis();
      localTime2.getMillisOfSecond();
      localTime3.MIDNIGHT.minusMillis((-789));
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("\uFFFD\uFFFD:00:00.000");
      TestMutableDateTime_Basics.MockInstant testMutableDateTime_Basics_MockInstant0 = testMutableDateTime_Basics0.new MockInstant();
      Chronology chronology0 = testMutableDateTime_Basics_MockInstant0.getChronology();
      // Undeclared exception!
      try { 
        localTime3.getField(65, chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 65
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime localTime1 = localTime0.plusSeconds(0);
      LocalTime localTime2 = localTime1.withMillisOfSecond(0);
      LocalTime.Property localTime_Property0 = localTime2.millisOfSecond();
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("");
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      Chronology chronology0 = testDateTime_Basics_MockEqualsChronology0.withUTC();
      localTime2.getField(0, chronology0);
      localTime_Property0.roundHalfCeilingCopy();
      localTime1.minusMillis(0);
      LocalTime localTime3 = localTime_Property0.withMaximumValue();
      int int0 = 2358;
      LocalTime localTime4 = localTime3.plusSeconds(2358);
      localTime4.MIDNIGHT.minusMinutes((-2147483647));
      localTime3.plusHours(0);
      localTime2.withFields(localTime4);
      localTime_Property0.roundCeilingCopy();
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy("' is not supported");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"' is not supported\" for millisOfSecond is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(13, "V}e5k(c|O0?bP");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(13);
      dateTimeZone0.convertLocalToUTC((-1640L), true, (-1640L));
      localDate0.getMonthOfYear();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      GregorianCalendar gregorianCalendar0 = dateTime0.toGregorianCalendar();
      LocalTime localTime0 = LocalTime.fromCalendarFields(gregorianCalendar0);
      LocalTime localTime1 = localTime0.withLocalMillis(0L);
      localTime1.getMillisOfDay();
      dateTimeZone0.getName((-1L));
      DateTimeUtils.setCurrentMillisSystem();
      LocalTime localTime2 = localTime0.withLocalMillis(0);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      DateTime dateTime1 = localTime2.toDateTime(dateTime0);
      LocalTime localTime3 = localTime0.MIDNIGHT.withHourOfDay(13);
      localTime_Property0.setCopy(0);
      localTime2.millisOfSecond();
      localTime3.plusSeconds(0);
      LocalTime localTime4 = LocalTime.now(dateTimeZone0);
      localTime3.getHourOfDay();
      LocalTime localTime5 = localTime2.plusHours(2);
      LocalTime localTime6 = localTime5.plusMinutes(0);
      localTime6.MIDNIGHT.getHourOfDay();
      localTime6.withLocalMillis((-1640L));
      localTime_Property0.addWrapFieldToCopy(471);
      localTime4.plusMinutes((-208));
      Days days0 = Days.daysBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime1);
      Hours hours0 = days0.toStandardHours();
      localTime2.withPeriodAdded(hours0, 7678125);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.withLocalMillis((-2071L));
      LocalTime localTime2 = localTime1.withFields(localTime0);
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      LocalTime localTime3 = localTime2.withFieldAdded(durationFieldType0, 0);
      localTime0.getMillisOfSecond();
      LocalTime localTime4 = localTime3.minusMillis((-1830));
      int int0 = 2711;
      LocalTime.now();
      // Undeclared exception!
      try { 
        localTime4.withSecondOfMinute(2711);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2711 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.withMillisOfSecond(642);
      localTime1.plusMinutes(1996);
      Seconds seconds0 = Seconds.seconds((-692));
      LocalTime localTime2 = localTime0.minus(seconds0);
      localTime2.minusHours(31);
      String string0 = "";
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      DateTimeFieldType dateTimeFieldType4 = DateTimeFieldType.millisOfDay();
      dateTimeFieldTypeArray0[4] = dateTimeFieldType4;
      int[] intArray0 = new int[7];
      localTime2.MIDNIGHT.plusMillis(31);
      intArray0[0] = 31;
      intArray0[1] = 31;
      intArray0[2] = (-692);
      intArray0[3] = 1996;
      intArray0[4] = 2180;
      intArray0[5] = 642;
      intArray0[6] = 31;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-3533L));
      LocalTime localTime1 = localTime0.plusMinutes((-195));
      int int0 = localTime1.MIDNIGHT.compareTo((ReadablePartial) localTime0);
      assertEquals((-1), int0);
      
      TestMutableInterval_Basics testMutableInterval_Basics0 = new TestMutableInterval_Basics("2010-06-30T12:30");
      TestMutableInterval_Basics.MockInterval testMutableInterval_Basics_MockInterval0 = testMutableInterval_Basics0.new MockInterval();
      Chronology chronology0 = testMutableInterval_Basics_MockInterval0.getChronology();
      DateTime dateTime0 = DateTime.now(chronology0);
      DateTime dateTime1 = localTime1.toDateTime(dateTime0);
      assertEquals(1392421496467L, dateTime1.getMillis());
      
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      LocalTime localTime2 = localTime_Property0.roundCeilingCopy();
      LocalTime.Property localTime_Property1 = localTime2.hourOfDay();
      localTime_Property0.getChronology();
      LocalTime localTime3 = localTime_Property1.addCopy(4142L);
      MockDate mockDate0 = new MockDate(0L);
      LocalTime.fromDateFields(mockDate0);
      localTime3.secondOfMinute();
      LocalTime localTime4 = localTime1.minusMillis((-1));
      assertNotSame(localTime1, localTime4);
      
      int int1 = localTime2.size();
      assertEquals(4, int1);
  }
}
