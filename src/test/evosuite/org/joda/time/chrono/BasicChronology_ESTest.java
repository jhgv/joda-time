/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:28:05 GMT 2018
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicFixedMonthChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicChronology_ESTest extends BasicChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      int int0 = copticChronology0.getMonthOfYear(1142L);
      assertEquals(4, int0);
      assertEquals(1, CopticChronology.AM);
      
      boolean boolean0 = copticChronology0.isLeapDay(4);
      assertFalse(boolean0);
      assertEquals(1, CopticChronology.AM);
      
      boolean boolean1 = copticChronology0.isLeapDay(4);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, CopticChronology.AM);
      
      long long0 = copticChronology0.getDateTimeMillis(4, 4, 1, 4);
      assertEquals((-53081740799996L), long0);
      assertEquals(1, CopticChronology.AM);
      
      String string0 = copticChronology0.toString();
      assertEquals("CopticChronology[UTC]", string0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(string0);
      
      int int1 = copticChronology0.getDaysInMonthMax(4);
      assertFalse(int1 == int0);
      assertEquals(30, int1);
      assertEquals(1, CopticChronology.AM);
      
      long long1 = copticChronology0.getDateMidnightMillis(4, 4, 30);
      assertFalse(long1 == long0);
      assertEquals((-53079235200000L), long1);
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      int int0 = 60;
      long long0 = gregorianChronology0.add(328L, 328L, 60);
      assertEquals(20008L, long0);
      
      GregorianChronology gregorianChronology1 = GregorianChronology.getInstance();
      assertSame(gregorianChronology1, gregorianChronology0);
      assertNotNull(gregorianChronology1);
      
      boolean boolean0 = gregorianChronology0.equals(gregorianChronology1);
      assertTrue(boolean0);
      assertSame(gregorianChronology0, gregorianChronology1);
      assertSame(gregorianChronology1, gregorianChronology0);
      
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      assertSame(gregorianChronology0, gregorianChronology1);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      // Undeclared exception!
      try { 
        EthiopicChronology.getInstance(dateTimeZone0, 60);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 60
         //
         verifyException("org.joda.time.chrono.EthiopicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      int int0 = julianChronology0.getMinYear();
      assertEquals((-292269054), int0);
      
      DateTimeZone dateTimeZone0 = julianChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      JulianChronology julianChronology1 = JulianChronology.getInstance(dateTimeZone0);
      assertSame(julianChronology0, julianChronology1);
      assertSame(julianChronology1, julianChronology0);
      assertNotNull(julianChronology1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      int int1 = julianChronology0.getDaysInYear(20);
      assertFalse(int1 == int0);
      assertEquals(366, int1);
      assertSame(julianChronology0, julianChronology1);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertSame(julianChronology0, julianChronology1);
      assertNotNull(islamicChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      boolean boolean0 = islamicChronology0.isLeapYear(1);
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      assertSame(julianChronology0, julianChronology1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      int int2 = 10125000;
      long long0 = islamicChronology0.getYearMillis(10125000);
      assertEquals(309957407827200000L, long0);
      assertEquals(1, IslamicChronology.AH);
      assertSame(julianChronology0, julianChronology1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      int int3 = islamicChronology0.getDaysInYearMonth((-292269054), 2350);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(29, int3);
      assertEquals(1, IslamicChronology.AH);
      assertSame(julianChronology0, julianChronology1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      try { 
        islamicChronology0.getDateTimeMillis((long) 2350, 2062, 29, 47, (-1411));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2062 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      long long0 = copticChronology0.add(1010L, (-719164L), 1686);
      assertEquals((-1212509494L), long0);
      assertEquals(1, CopticChronology.AM);
      
      CopticChronology copticChronology1 = CopticChronology.getInstance();
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertEquals(1, CopticChronology.AM);
      assertNotSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      
      copticChronology0.assemble((AssembledChronology.Fields) null);
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertEquals(1, CopticChronology.AM);
      assertNotSame(copticChronology0, copticChronology1);
      
      int int0 = copticChronology0.getDaysInYear(4849);
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertEquals(365, int0);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(copticChronology0, copticChronology1);
      
      int int1 = copticChronology1.getDayOfYear((-2385L));
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertFalse(int1 == int0);
      assertEquals(112, int1);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(copticChronology1, copticChronology0);
      
      DateTimeZone dateTimeZone0 = copticChronology1.getZone();
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertEquals(1, CopticChronology.AM);
      assertNotSame(copticChronology1, copticChronology0);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertEquals(1, CopticChronology.AM);
      assertNotSame(copticChronology1, copticChronology0);
      assertNotNull(julianChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int2 = julianChronology0.getDayOfMonth(31536000000L);
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(19, int2);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(copticChronology1, copticChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      julianChronology0.assemble((AssembledChronology.Fields) null);
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertEquals(1, CopticChronology.AM);
      assertNotSame(copticChronology1, copticChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      int int0 = julianChronology0.getWeekOfWeekyear(1190L, 0);
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        julianChronology0.isLeapDay((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int0 = islamicChronology1.getDayOfMonth(1, 1);
      assertEquals(30, int0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      boolean boolean0 = islamicChronology1.equals(dateTimeZone0);
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int1 = 0;
      int int2 = (-707);
      long long0 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        islamicChronology0.getMonthOfYear(9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -301245869 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      CopticChronology copticChronology0 = new CopticChronology(islamicChronology0, "ehQ", 1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      int int0 = copticChronology0.getDayOfYear(2882L);
      assertEquals(113, int0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      
      int int1 = islamicChronology0.getDayOfMonth((-42521587200000L), 1, 3648);
      assertFalse(int1 == int0);
      assertEquals((-107586), int1);
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = copticChronology0.getYearDifference(800, 800);
      assertEquals(0L, long0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      
      long long1 = islamicChronology0.setYear(1, 800);
      assertFalse(long1 == long0);
      assertEquals((-18033580799999L), long1);
      assertEquals(1, IslamicChronology.AH);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      GregorianChronology gregorianChronology1 = GregorianChronology.getInstance(dateTimeZone0);
      assertSame(gregorianChronology0, gregorianChronology1);
      assertSame(gregorianChronology1, gregorianChronology0);
      assertNotNull(gregorianChronology1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      long long2 = islamicChronology0.getYearDifference((-42521587200000L), 370L);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((-1389L), long2);
      assertEquals(1, IslamicChronology.AH);
      
      int int2 = gregorianChronology1.getWeekOfWeekyear((-42521587200000L));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(29, int2);
      assertSame(gregorianChronology0, gregorianChronology1);
      assertSame(gregorianChronology1, gregorianChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      long long3 = gregorianChronology0.add((long) 1, (-18033580799999L), 113);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertEquals((-2037794630399886L), long3);
      assertSame(gregorianChronology0, gregorianChronology1);
      
      long long4 = gregorianChronology0.getAverageMillisPerYearDividedByTwo();
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertEquals(15778476000L, long4);
      assertSame(gregorianChronology0, gregorianChronology1);
      
      boolean boolean0 = copticChronology0.equals(gregorianChronology0);
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertSame(gregorianChronology0, gregorianChronology1);
      
      long long5 = copticChronology0.calculateFirstDayOfYearMillis(113);
      assertFalse(long5 == long3);
      assertFalse(long5 == long0);
      assertFalse(long5 == long2);
      assertFalse(long5 == long4);
      assertFalse(long5 == long1);
      assertEquals((-49649760000000L), long5);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      
      boolean boolean1 = islamicChronology0.equals(copticChronology0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      
      int int3 = gregorianChronology0.getWeekyear((-2037794630399886L));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-62606), int3);
      assertSame(gregorianChronology0, gregorianChronology1);
      
      int int4 = islamicChronology0.getDaysInYearMax();
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(355, int4);
      assertEquals(1, IslamicChronology.AH);
      
      EthiopicChronology ethiopicChronology0 = null;
      try {
        ethiopicChronology0 = new EthiopicChronology(gregorianChronology1, gregorianChronology1, (-673));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -673
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      int int0 = copticChronology0.getMaxYear();
      assertEquals(292272708, int0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = copticChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      
      long long0 = copticChronology0.getYearMonthMillis(2147483644, 795);
      assertEquals((-6017597608643006464L), long0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      int int1 = 2147483639;
      // Undeclared exception!
      try { 
        islamicChronology0.getWeeksInYear(2147483639);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too large: 2147483639 > 292271022
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int0 = islamicChronology1.getDayOfMonth(1, 1);
      assertEquals(30, int0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      boolean boolean0 = islamicChronology1.equals(dateTimeZone0);
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int1 = islamicChronology0.getYear(3945L);
      assertFalse(int1 == int0);
      assertEquals(1389, int1);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      
      int int2 = islamicChronology1.getMonthOfYear(9223372036854775807L, (-4135));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(21157283, int2);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int3 = islamicChronology1.getDaysInYearMonth(0, (-711));
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(30, int3);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertNotNull(gregorianChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      long long0 = gregorianChronology0.add((long) 1, (long) 0, 7335);
      assertEquals(1L, long0);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int4 = gregorianChronology0.getMonthOfYear((-4135));
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(12, int4);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int5 = gregorianChronology0.getMaxYear();
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertEquals(292278993, int5);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Chronology chronology0 = gregorianChronology0.withZone(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int6 = islamicChronology1.hashCode();
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      long long1 = islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      assertFalse(long1 == long0);
      assertEquals(21260793600000L, long1);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      
      int int7 = islamicChronology1.getMillisOfDay(21260793600000L);
      assertFalse(int7 == int5);
      assertFalse(int7 == int1);
      assertFalse(int7 == int4);
      assertFalse(int7 == int0);
      assertFalse(int7 == int2);
      assertFalse(int7 == int3);
      assertEquals(0, int7);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      long long2 = BasicFixedMonthChronology.MILLIS_PER_MONTH;
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(2592000000L, long2);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      long long0 = copticChronology0.getYearDifference(31083900120470L, 31083597720470L);
      assertEquals(0L, long0);
      assertEquals(1, CopticChronology.AM);
      
      String string0 = copticChronology0.toString();
      assertEquals("CopticChronology[UTC]", string0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(string0);
      
      int int0 = copticChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
      assertEquals(1, CopticChronology.AM);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      boolean boolean0 = gregorianChronology0.isLeapDay(9680459279L);
      assertFalse(boolean0);
      
      long long1 = gregorianChronology0.calculateFirstDayOfYearMillis(1);
      assertFalse(long1 == long0);
      assertEquals((-62135596800000L), long1);
      
      int int1 = gregorianChronology0.getDayOfWeek(31083900120470L);
      assertFalse(int1 == int0);
      assertEquals(6, int1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      long long0 = copticChronology0.getYearMonthMillis(2615625, 2615625);
      assertEquals(89269329139200000L, long0);
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = julianChronology0.getWeekOfWeekyear(1190L, 0);
      assertEquals(1, int0);
      
      boolean boolean0 = julianChronology0.isLeapDay((-9223372036854775808L));
      assertFalse(boolean0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      long long0 = julianChronology0.getFirstWeekOfYearMillis((-2163));
      assertEquals((-130426588800000L), long0);
      
      int int1 = julianChronology0.getWeekyear((-2163));
      assertFalse(int1 == int0);
      assertEquals(1969, int1);
      
      long long1 = gregorianChronology0.getAverageMillisPerYearDividedByTwo();
      assertFalse(long1 == long0);
      assertEquals(15778476000L, long1);
      
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int2 = julianChronology0.getDaysInMonthMax();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(31, int2);
      
      int int3 = julianChronology0.getMaxMonth(1615);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(12, int3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDayOfYear(1975L);
      assertEquals(288, int0);
      assertEquals(1, IslamicChronology.AH);
      
      int int1 = islamicChronology0.getDayOfMonth((-2648L), (-437), (-2332));
      assertFalse(int1 == int0);
      assertEquals(709776, int1);
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = islamicChronology0.getYearMonthDayMillis(0, (-437), 0);
      assertEquals((-43638048000000L), long0);
      assertEquals(1, IslamicChronology.AH);
      
      int int2 = islamicChronology0.getMaxYear();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(292271022, int2);
      assertEquals(1, IslamicChronology.AH);
      
      int int3 = islamicChronology0.getMonthOfYear((-437));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(10, int3);
      assertEquals(1, IslamicChronology.AH);
      
      int int4 = islamicChronology0.getDaysInMonthMax();
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(30, int4);
      assertEquals(1, IslamicChronology.AH);
      
      String string0 = islamicChronology0.toString();
      assertEquals("IslamicChronology[America/Recife]", string0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(string0);
      
      int int5 = islamicChronology0.getWeeksInYear((-2332));
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertEquals(0, int5);
      assertEquals(1, IslamicChronology.AH);
      
      boolean boolean0 = islamicChronology0.isLeapDay((-437));
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone(dateTimeZone1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(copticChronology0, copticChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      
      int int6 = islamicChronology0.getMaxMonth();
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertEquals(12, int6);
      assertEquals(1, IslamicChronology.AH);
      
      int int7 = islamicChronology0.getDayOfMonth(1, 3267, 3178);
      assertFalse(int7 == int3);
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertFalse(int7 == int5);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertEquals((-758934), int7);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int0 = (-2147479280);
      int int1 = (-2143000382);
      // Undeclared exception!
      try { 
        islamicChronology0.getWeekOfWeekyear((-2143000382), (-2143000382));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -2143000382 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int0 = islamicChronology1.getDayOfMonth(1, 1);
      assertEquals(30, int0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      boolean boolean0 = islamicChronology1.equals(dateTimeZone0);
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int1 = islamicChronology0.getWeekyear(1);
      assertFalse(int1 == int0);
      assertEquals(1389, int1);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      
      int int2 = islamicChronology0.getYear(3946L);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1389, int2);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      
      int int3 = IslamicChronology.AH;
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(1, int3);
      
      int int4 = islamicChronology1.getDaysInYearMonth(0, (-707));
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(30, int4);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertNotNull(gregorianChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int5 = gregorianChronology0.getWeekyear(0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertEquals(1970, int5);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int6 = gregorianChronology0.getMaxYear();
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertEquals(292278993, int6);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Chronology chronology0 = gregorianChronology0.withZone(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int7 = islamicChronology1.hashCode();
      assertFalse(int7 == int0);
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertFalse(int7 == int2);
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long0 = BasicFixedMonthChronology.MILLIS_PER_YEAR;
      assertEquals(31557600000L, long0);
      
      int int8 = islamicChronology1.getMillisOfDay(2147483L);
      assertFalse(int8 == int2);
      assertFalse(int8 == int5);
      assertFalse(int8 == int4);
      assertFalse(int8 == int6);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      assertFalse(int8 == int0);
      assertEquals(2147483, int8);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertNotNull(julianChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        julianChronology0.getYearMonthMillis((-2364), 1816);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1815
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = julianChronology0.getWeekOfWeekyear(1190L, (-2147481286));
      assertEquals(52, int0);
      
      boolean boolean0 = julianChronology0.isLeapDay((-9223372036854775808L));
      assertFalse(boolean0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      int int1 = (-2163);
      long long0 = julianChronology0.getFirstWeekOfYearMillis((-2163));
      assertEquals((-130426588800000L), long0);
      
      // Undeclared exception!
      try { 
        ethiopicChronology0.add((-9223372036854775808L), (-9223372036854775808L), (-6));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -6
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDayOfYear(1975L);
      assertEquals(288, int0);
      assertEquals(1, IslamicChronology.AH);
      
      int int1 = islamicChronology0.getDayOfMonth(288, (-402), (-2332));
      assertFalse(int1 == int0);
      assertEquals(699146, int1);
      assertEquals(1, IslamicChronology.AH);
      
      int int2 = islamicChronology0.getMaxYear();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(292271022, int2);
      assertEquals(1, IslamicChronology.AH);
      
      int int3 = islamicChronology0.getMonthOfYear((-402));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(10, int3);
      assertEquals(1, IslamicChronology.AH);
      
      int int4 = islamicChronology0.getDaysInMonthMax();
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals(30, int4);
      assertEquals(1, IslamicChronology.AH);
      
      String string0 = islamicChronology0.toString();
      assertEquals("IslamicChronology[America/Recife]", string0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(string0);
      
      int int5 = islamicChronology0.getWeeksInYear((-2332));
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertEquals(0, int5);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone(dateTimeZone1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(copticChronology0, copticChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      
      int int6 = islamicChronology0.getMaxMonth();
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertEquals(12, int6);
      assertEquals(1, IslamicChronology.AH);
      
      int int7 = islamicChronology0.getMonthOfYear(14655600000L, 10);
      assertFalse(int7 == int2);
      assertFalse(int7 == int3);
      assertFalse(int7 == int0);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertFalse(int7 == int5);
      assertEquals(16581, int7);
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
      try { 
        islamicChronology0.getDayOfYear(0, (-2147481286));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -2147481286 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int0 = islamicChronology1.getDayOfMonth(1, 1);
      assertEquals(30, int0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      boolean boolean0 = islamicChronology1.equals(dateTimeZone0);
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int1 = islamicChronology0.getWeekyear(1);
      assertFalse(int1 == int0);
      assertEquals(1389, int1);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      
      int int2 = islamicChronology0.getYear(3945L);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1389, int2);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      
      int int3 = islamicChronology1.getMonthOfYear(9223372036854775807L, (-4135));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(21157283, int3);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int4 = islamicChronology1.getDaysInYearMonth(0, (-707));
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals(30, int4);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertNotNull(gregorianChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int5 = gregorianChronology0.getMaxYear();
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertEquals(292278993, int5);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Chronology chronology0 = gregorianChronology0.withZone(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int6 = islamicChronology1.hashCode();
      assertFalse(int6 == int5);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long0 = islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      assertEquals(21260793600000L, long0);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      
      int int7 = islamicChronology1.getMillisOfDay(2147483L);
      assertFalse(int7 == int5);
      assertFalse(int7 == int1);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int3);
      assertEquals(2147483, int7);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      long long1 = julianChronology0.getAverageMillisPerMonth();
      assertFalse(long1 == long0);
      assertEquals(2629800000L, long1);
      
      int int8 = gregorianChronology0.getYear(21157283);
      assertFalse(int8 == int1);
      assertFalse(int8 == int0);
      assertFalse(int8 == int2);
      assertFalse(int8 == int7);
      assertFalse(int8 == int5);
      assertFalse(int8 == int3);
      assertFalse(int8 == int4);
      assertEquals(1970, int8);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(gregorianChronology0, chronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int9 = julianChronology0.getWeeksInYear((-148));
      assertFalse(int9 == int7);
      assertFalse(int9 == int3);
      assertFalse(int9 == int2);
      assertFalse(int9 == int4);
      assertFalse(int9 == int8);
      assertFalse(int9 == int5);
      assertFalse(int9 == int1);
      assertFalse(int9 == int0);
      assertEquals(52, int9);
      
      long long2 = islamicChronology0.setYear(0, 46);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((-41119056000000L), long2);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      
      long long3 = julianChronology0.getAverageMillisPerYearDividedByTwo();
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertEquals(15778800000L, long3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = (-2127961068);
      int int1 = 4310;
      // Undeclared exception!
      try { 
        islamicChronology0.getFirstWeekOfYearMillis((-2127961068));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -2127961068 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      boolean boolean0 = ethiopicChronology0.isLeapDay((-1554L));
      assertFalse(boolean0);
      assertEquals(1, EthiopicChronology.EE);
      
      EthiopicChronology ethiopicChronology1 = EthiopicChronology.getInstance();
      assertFalse(ethiopicChronology1.equals((Object)ethiopicChronology0));
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(ethiopicChronology1, ethiopicChronology0);
      assertNotNull(ethiopicChronology1);
      
      int int0 = ethiopicChronology0.getDayOfYear(365L, (-7200000));
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology1));
      assertEquals((-1664450563), int0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      boolean boolean1 = ethiopicChronology1.isLeapDay((-4294967296L));
      assertFalse(ethiopicChronology1.equals((Object)ethiopicChronology0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(ethiopicChronology1, ethiopicChronology0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDayOfMonth(9676801798L, 86399999);
      assertEquals((-39), int0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withZone(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDayOfYear(1975L);
      assertEquals(288, int0);
      assertEquals(1, IslamicChronology.AH);
      
      int int1 = islamicChronology0.getDayOfMonth((-2670L), (-437), (-2332));
      assertFalse(int1 == int0);
      assertEquals(709776, int1);
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = islamicChronology0.getYearMonthDayMillis(0, (-437), 0);
      assertEquals((-43638048000000L), long0);
      assertEquals(1, IslamicChronology.AH);
      
      int int2 = islamicChronology0.getMaxYear();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(292271022, int2);
      assertEquals(1, IslamicChronology.AH);
      
      int int3 = islamicChronology0.getMonthOfYear((-437));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(10, int3);
      assertEquals(1, IslamicChronology.AH);
      
      int int4 = islamicChronology0.getDaysInMonthMax();
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(30, int4);
      assertEquals(1, IslamicChronology.AH);
      
      String string0 = islamicChronology0.toString();
      assertEquals("IslamicChronology[America/Recife]", string0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(string0);
      
      int int5 = BasicFixedMonthChronology.MONTH_LENGTH;
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertEquals(30, int5);
      
      boolean boolean0 = islamicChronology0.isLeapDay((-437));
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone(dateTimeZone1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(copticChronology0, copticChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      
      int int6 = copticChronology0.getDayOfYear(709776, 31);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertEquals(604602, int6);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(copticChronology0, copticChronology1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotNull(julianChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDayOfYear(1975L);
      assertEquals(288, int0);
      assertEquals(1, IslamicChronology.AH);
      
      int int1 = islamicChronology0.getDayOfMonth((-2648L), (-437), (-2332));
      assertFalse(int1 == int0);
      assertEquals(709776, int1);
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = islamicChronology0.getYearMonthDayMillis(709776, (-437), 0);
      assertEquals(21687741878400000L, long0);
      assertEquals(1, IslamicChronology.AH);
      
      int int2 = islamicChronology0.getMaxYear();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(292271022, int2);
      assertEquals(1, IslamicChronology.AH);
      
      int int3 = islamicChronology0.getMonthOfYear((-437));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(10, int3);
      assertEquals(1, IslamicChronology.AH);
      
      int int4 = islamicChronology0.getDaysInMonthMax();
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(30, int4);
      assertEquals(1, IslamicChronology.AH);
      
      String string0 = islamicChronology0.toString();
      assertEquals("IslamicChronology[America/Recife]", string0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(string0);
      
      int int5 = islamicChronology0.getWeeksInYear((-2332));
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertEquals(0, int5);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone(dateTimeZone1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(copticChronology0, copticChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      
      int int6 = islamicChronology0.getMaxMonth();
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertEquals(12, int6);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getFirstWeekOfYearMillis(1963);
      assertEquals(17549222400000L, long0);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = islamicChronology0.getDayOfYear(1975L);
      assertEquals(288, int0);
      assertEquals(1, IslamicChronology.AH);
      
      int int1 = islamicChronology0.getDayOfMonth((-2648L), (-437), (-2332));
      assertFalse(int1 == int0);
      assertEquals(709776, int1);
      assertEquals(1, IslamicChronology.AH);
      
      long long1 = islamicChronology0.getYearMonthDayMillis(0, (-437), 0);
      assertFalse(long1 == long0);
      assertEquals((-43638048000000L), long1);
      assertEquals(1, IslamicChronology.AH);
      
      int int2 = islamicChronology0.getMaxYear();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(292271022, int2);
      assertEquals(1, IslamicChronology.AH);
      
      int int3 = islamicChronology0.getMonthOfYear((-437));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(10, int3);
      assertEquals(1, IslamicChronology.AH);
      
      int int4 = islamicChronology0.getDaysInMonthMax();
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(30, int4);
      assertEquals(1, IslamicChronology.AH);
      
      String string0 = islamicChronology0.toString();
      assertEquals("IslamicChronology[America/Recife]", string0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(string0);
      
      int int5 = islamicChronology0.getWeeksInYear((-2332));
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertEquals(0, int5);
      assertEquals(1, IslamicChronology.AH);
      
      boolean boolean0 = islamicChronology0.isLeapDay((-437));
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone(dateTimeZone1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(copticChronology0, copticChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology1 = EthiopicChronology.getInstance(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotNull(ethiopicChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long0 = ethiopicChronology0.getFirstWeekOfYearMillis((-528));
      assertEquals((-78587971200000L), long0);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      
      int int0 = ethiopicChronology0.getMaxMonth();
      assertEquals(13, int0);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long1 = islamicChronology0.calculateFirstDayOfYearMillis(713);
      assertFalse(long1 == long0);
      assertEquals((-20722089600000L), long1);
      assertEquals(1, IslamicChronology.AH);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, IslamicChronology.AH);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long2 = islamicChronology0.getTotalMillisByYearMonth(13, 1);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(0L, long2);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      long long3 = julianChronology0.calculateFirstDayOfYearMillis((-666));
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertEquals((-83184710400000L), long3);
      
      DateTimeZone dateTimeZone1 = julianChronology0.getZone();
      assertNotNull(dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      
      EthiopicChronology ethiopicChronology2 = EthiopicChronology.getInstance();
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology0));
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology1));
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(ethiopicChronology2, ethiopicChronology0);
      assertNotSame(ethiopicChronology2, ethiopicChronology1);
      assertNotNull(ethiopicChronology2);
      
      int int1 = ethiopicChronology2.getMinimumDaysInFirstWeek();
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology0));
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology1));
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(ethiopicChronology2, ethiopicChronology0);
      assertNotSame(ethiopicChronology2, ethiopicChronology1);
      
      long long4 = ethiopicChronology2.getApproxMillisAtEpochDividedByTwo();
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology0));
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology1));
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertFalse(long4 == long0);
      assertEquals(30962844000000L, long4);
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(ethiopicChronology2, ethiopicChronology0);
      assertNotSame(ethiopicChronology2, ethiopicChronology1);
      
      int int2 = islamicChronology0.getMaxYear();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(292271022, int2);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      
      long long5 = julianChronology0.calculateFirstDayOfYearMillis(2357);
      assertFalse(long5 == long1);
      assertFalse(long5 == long2);
      assertFalse(long5 == long4);
      assertFalse(long5 == long0);
      assertFalse(long5 == long3);
      assertEquals(12213936000000L, long5);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getYearMonthMillis(51, (-410));
      assertEquals((-42035760000000L), long0);
      assertEquals(1, IslamicChronology.AH);
      
      long long1 = (-42521587200000L);
      // Undeclared exception!
      try { 
        islamicChronology0.add((-42521587200000L), (-42521587200000L), 352831696);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -42521587200000 * 352831696
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      DateTimeZone dateTimeZone0 = julianChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int0 = islamicChronology0.getDayOfMonth((-89L));
      assertEquals(21, int0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int1 = islamicChronology0.getWeekOfWeekyear(0L, 60);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int2 = islamicChronology0.getMonthOfYear(0L, 1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(16683, int2);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int3 = julianChronology0.getMaxMonth(16683);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(12, int3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology1 = EthiopicChronology.getInstance();
      assertFalse(ethiopicChronology1.equals((Object)ethiopicChronology0));
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(ethiopicChronology1, ethiopicChronology0);
      assertNotNull(ethiopicChronology1);
      
      boolean boolean0 = islamicChronology0.equals(ethiopicChronology1);
      assertFalse(ethiopicChronology1.equals((Object)ethiopicChronology0));
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(ethiopicChronology1, ethiopicChronology0);
      
      long long0 = 27L;
      long long1 = ethiopicChronology0.add(27L, (long) 1, 1);
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology1));
      assertFalse(long1 == long0);
      assertEquals(28L, long1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology2 = (EthiopicChronology)ethiopicChronology0.withUTC();
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology1));
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology1));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology0, ethiopicChronology2);
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(ethiopicChronology2, ethiopicChronology1);
      assertSame(ethiopicChronology2, ethiopicChronology0);
      assertNotNull(ethiopicChronology2);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      boolean boolean1 = ethiopicChronology0.isLeapDay(28L);
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology0, ethiopicChronology2);
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int0 = ethiopicChronology0.getDaysInYear((-246));
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology1));
      assertEquals(365, int0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology0, ethiopicChronology2);
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        JulianChronology.getInstance(dateTimeZone0, (-246));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -246
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long0 = ethiopicChronology0.getYearMillis(91);
      assertEquals((-59053968000000L), long0);
      assertEquals(1, EthiopicChronology.EE);
      
      EthiopicChronology ethiopicChronology1 = EthiopicChronology.getInstance(dateTimeZone0, 1);
      assertFalse(ethiopicChronology1.equals((Object)ethiopicChronology0));
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(ethiopicChronology1, ethiopicChronology0);
      assertNotNull(ethiopicChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int0 = ethiopicChronology1.getMonthOfYear((-1104L));
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology1));
      assertFalse(ethiopicChronology1.equals((Object)ethiopicChronology0));
      assertEquals(4, int0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(ethiopicChronology1, ethiopicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long1 = ethiopicChronology1.getYearMonthDayMillis(2, 16, (-391));
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology1));
      assertFalse(ethiopicChronology1.equals((Object)ethiopicChronology0));
      assertFalse(long1 == long0);
      assertEquals((-61857561600000L), long1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(ethiopicChronology1, ethiopicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int1 = ethiopicChronology0.getDayOfMonth((-9223372036854775808L));
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology1));
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
      
      long long2 = ethiopicChronology0.getYearMonthDayMillis(91, 6, 1);
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals((-59041008000000L), long2);
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      long long3 = gregorianChronology0.getApproxMillisAtEpochDividedByTwo();
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertEquals(31083597720000L, long3);
      
      long long4 = gregorianChronology0.getAverageMillisPerYearDividedByTwo();
      assertFalse(long4 == long2);
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(long4 == long0);
      assertEquals(15778476000L, long4);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int2 = julianChronology0.getMinYear();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-292269054), int2);
      
      int int3 = julianChronology0.getWeekyear(4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1969, int3);
      
      int int4 = ethiopicChronology0.getMonthOfYear((-292269054));
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology1));
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals(4, int4);
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDayOfYear(1836L);
      assertEquals(288, int0);
      assertEquals(1, IslamicChronology.AH);
      
      int int1 = islamicChronology0.getDaysInMonthMax(1836L);
      assertFalse(int1 == int0);
      assertEquals(29, int1);
      assertEquals(1, IslamicChronology.AH);
      
      int int2 = islamicChronology0.getDaysInMonthMaxForSet(0L, 60000);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(29, int2);
      assertEquals(1, IslamicChronology.AH);
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      int int3 = 0;
      int int4 = copticChronology0.getDayOfMonth(0L, 0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(24, int4);
      assertEquals(1, CopticChronology.AM);
      
      boolean boolean0 = copticChronology0.isLeapDay(0L);
      assertFalse(boolean0);
      assertEquals(1, CopticChronology.AM);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int5 = islamicChronology0.getDayOfYear(1836L);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertTrue(int5 == int0);
      assertFalse(int5 == int3);
      assertEquals(288, int5);
      assertEquals(1, IslamicChronology.AH);
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone(dateTimeZone0);
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(gregorianChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int6 = gregorianChronology0.getDayOfMonth(1);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertEquals(1, int6);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int7 = islamicChronology0.getWeeksInYear(0);
      assertFalse(int7 == int2);
      assertFalse(int7 == int1);
      assertFalse(int7 == int4);
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertTrue(int7 == int3);
      assertFalse(int7 == int0);
      assertEquals(0, int7);
      assertEquals(1, IslamicChronology.AH);
      
      int int8 = gregorianChronology0.getDaysInMonthMaxForSet(288, 861);
      assertFalse(int8 == int0);
      assertFalse(int8 == int6);
      assertFalse(int8 == int3);
      assertFalse(int8 == int2);
      assertFalse(int8 == int7);
      assertFalse(int8 == int4);
      assertFalse(int8 == int5);
      assertFalse(int8 == int1);
      assertEquals(31, int8);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int9 = gregorianChronology0.getMinYear();
      assertFalse(int9 == int5);
      assertFalse(int9 == int7);
      assertFalse(int9 == int4);
      assertFalse(int9 == int8);
      assertFalse(int9 == int2);
      assertFalse(int9 == int6);
      assertFalse(int9 == int3);
      assertFalse(int9 == int1);
      assertFalse(int9 == int0);
      assertEquals((-292275054), int9);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int10 = gregorianChronology0.getDaysInYearMax();
      assertFalse(int10 == int7);
      assertFalse(int10 == int0);
      assertFalse(int10 == int8);
      assertFalse(int10 == int2);
      assertFalse(int10 == int6);
      assertFalse(int10 == int9);
      assertFalse(int10 == int3);
      assertFalse(int10 == int4);
      assertFalse(int10 == int5);
      assertFalse(int10 == int1);
      assertEquals(366, int10);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      CopticChronology copticChronology2 = CopticChronology.getInstance(dateTimeZone0);
      assertFalse(copticChronology2.equals((Object)copticChronology0));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology2, copticChronology1);
      assertNotSame(copticChronology2, copticChronology0);
      assertNotNull(copticChronology2);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int11 = islamicChronology0.getYear(366);
      assertFalse(int11 == int4);
      assertFalse(int11 == int10);
      assertFalse(int11 == int5);
      assertFalse(int11 == int7);
      assertFalse(int11 == int3);
      assertFalse(int11 == int0);
      assertFalse(int11 == int8);
      assertFalse(int11 == int9);
      assertFalse(int11 == int2);
      assertFalse(int11 == int6);
      assertFalse(int11 == int1);
      assertEquals(1389, int11);
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
      try { 
        gregorianChronology0.getTotalMillisByYearMonth(57, 220);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 219
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      int int0 = 3692;
      long long0 = copticChronology0.getYearMonthMillis(3692, 3692);
      assertEquals(72861984000000L, long0);
      assertEquals(1, CopticChronology.AM);
      
      int int1 = copticChronology0.getYear(72861984000000L);
      assertFalse(int1 == int0);
      assertEquals(3995, int1);
      assertEquals(1, CopticChronology.AM);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long1 = islamicChronology0.getYearMillis(1);
      assertFalse(long1 == long0);
      assertEquals((-42521587200000L), long1);
      assertEquals(1, IslamicChronology.AH);
      
      int int2 = islamicChronology0.getYear(72861984000000L);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3769, int2);
      assertEquals(1, IslamicChronology.AH);
      
      int int3 = (-963);
      int int4 = islamicChronology0.getMonthOfYear(3995, (-963));
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(28215, int4);
      assertEquals(1, IslamicChronology.AH);
      
      int int5 = islamicChronology0.getWeekyear((-173L));
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertEquals(1389, int5);
      assertEquals(1, IslamicChronology.AH);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = islamicChronology0.getLeapYearPatternType();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      boolean boolean0 = islamicChronology0.isLeapDay(1);
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      // Undeclared exception!
      try { 
        GregorianChronology.getInstance(dateTimeZone0, (-10));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -10
         //
         verifyException("org.joda.time.chrono.GregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      DateTimeZone dateTimeZone0 = julianChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      boolean boolean0 = islamicChronology0.equals(dateTimeZone0);
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int0 = islamicChronology0.getDayOfMonth((-89L));
      assertEquals(21, int0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int1 = islamicChronology0.getWeekOfWeekyear(0L, 60);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int2 = islamicChronology0.getMonthOfYear(0L, 1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(16683, int2);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      boolean boolean0 = ethiopicChronology0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = 1836L;
      int int0 = islamicChronology0.getDayOfYear(1836L);
      assertEquals(288, int0);
      assertEquals(1, IslamicChronology.AH);
      
      long long1 = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        islamicChronology0.getDaysInMonthMax((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -301245869 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      int int0 = 0;
      int int1 = julianChronology0.getWeeksInYear(0);
      assertFalse(int1 == int0);
      assertEquals(53, int1);
      
      int int2 = julianChronology0.getDaysInMonthMax((-1427L));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(31, int2);
      
      boolean boolean0 = julianChronology0.isLeapDay(155L);
      assertFalse(boolean0);
      
      int int3 = 1372;
      long long0 = julianChronology0.add(155L, 2667L, 1372);
      assertEquals(3659279L, long0);
      
      long long1 = julianChronology0.getAverageMillisPerYearDividedByTwo();
      assertFalse(long1 == long0);
      assertEquals(15778800000L, long1);
      
      int int4 = julianChronology0.getMaxMonth();
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(12, int4);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      assertNotNull(gregorianChronology0);
      
      long long2 = gregorianChronology0.getAverageMillisPerYear();
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(31556952000L, long2);
      
      int int5 = ethiopicChronology0.getYear(3659279L);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertEquals(1962, int5);
      assertEquals(1, EthiopicChronology.EE);
      
      int int6 = (-2340);
      try { 
        ethiopicChronology0.getDateTimeMillis(2667L, (-2340), 0, (-2340), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2340 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology1 = EthiopicChronology.getInstance(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotNull(ethiopicChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long0 = ethiopicChronology0.getFirstWeekOfYearMillis((-528));
      assertEquals((-78587971200000L), long0);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      
      int int0 = ethiopicChronology0.getMaxMonth();
      assertEquals(13, int0);
      assertEquals(1, EthiopicChronology.EE);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long1 = islamicChronology0.calculateFirstDayOfYearMillis(713);
      assertFalse(long1 == long0);
      assertEquals((-20722089600000L), long1);
      assertEquals(1, IslamicChronology.AH);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, IslamicChronology.AH);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long2 = islamicChronology0.getTotalMillisByYearMonth(13, 1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(0L, long2);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      long long3 = julianChronology0.calculateFirstDayOfYearMillis((-666));
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertEquals((-83184710400000L), long3);
      
      DateTimeZone dateTimeZone1 = julianChronology0.getZone();
      assertNotNull(dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      
      // Undeclared exception!
      try { 
        GregorianChronology.getInstance(dateTimeZone1, 60);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 60
         //
         verifyException("org.joda.time.chrono.GregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0, 1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      IslamicChronology islamicChronology1 = new IslamicChronology(ethiopicChronology0, islamicChronology0, islamicChronology0.LEAP_YEAR_INDIAN);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int0 = islamicChronology1.getDayOfYear(1, 86400000);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertEquals((-552016424), int0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int1 = islamicChronology1.getDayOfMonth(4406L);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(int1 == int0);
      assertEquals(22, int1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int2 = islamicChronology1.getDaysInYear(22);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(354, int2);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotNull(gregorianChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int3 = islamicChronology1.getWeekyear(354);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1389, int3);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int4 = gregorianChronology0.getDayOfMonth(1714L);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(1, int4);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      long long0 = gregorianChronology0.getApproxMillisAtEpochDividedByTwo();
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertEquals(31083597720000L, long0);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      GregorianChronology gregorianChronology1 = GregorianChronology.getInstance();
      assertSame(gregorianChronology1, gregorianChronology0);
      assertNotNull(gregorianChronology1);
      
      int int5 = gregorianChronology0.getMillisOfDay((-3L));
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertEquals(86399997, int5);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertSame(gregorianChronology0, gregorianChronology1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int6 = gregorianChronology0.getMillisOfDay(354);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertTrue(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertEquals(354, int6);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertSame(gregorianChronology0, gregorianChronology1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance(dateTimeZone0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology0, islamicChronology2);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology0);
      assertNotNull(islamicChronology2);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      try { 
        ethiopicChronology0.getDateTimeMillis(86400000, 0, 1, 0, Integer.MIN_VALUE, (-1721), 86399997);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483648 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      // Undeclared exception!
      try { 
        islamicChronology0.getDayOfYear((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -301245869 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = null;
      int int0 = 165;
      int int1 = 0;
      long long0 = islamicChronology0.getYearMonthDayMillis(165, 0, 0);
      assertEquals((-37500451200000L), long0);
      assertEquals(1, IslamicChronology.AH);
      
      islamicChronology0.assemble((AssembledChronology.Fields) null);
      assertEquals(1, IslamicChronology.AH);
      
      int int2 = 183;
      long long1 = islamicChronology0.setYear(2714L, 183);
      assertFalse(long1 == long0);
      assertEquals((-36924422397286L), long1);
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
      try { 
        islamicChronology0.getDaysInMonthMaxForSet((-9223372036854775808L), 183);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -301245869 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, copticChronology0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getMonthOfYear(1, 1);
      assertEquals(16683, int0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      CopticChronology copticChronology1 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      assertSame(copticChronology0, copticChronology1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotNull(gregorianChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      long long0 = gregorianChronology0.getFirstWeekOfYearMillis(1);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertEquals((-62135596800000L), long0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      assertSame(copticChronology0, copticChronology1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      boolean boolean0 = gregorianChronology0.isLeapYear(3301);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(boolean0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      assertSame(copticChronology0, copticChronology1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      long long1 = copticChronology0.calculateFirstDayOfYearMillis((-2087));
      assertFalse(long1 == long0);
      assertEquals((-119076480000000L), long1);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      
      try { 
        gregorianChronology0.getDateTimeMillis(1, 366, 1, 1, 1, (-2087), (-3456));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2087 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        gregorianChronology0.getYearMonthDayMillis(0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      CopticChronology copticChronology1 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      
      DateTimeZone dateTimeZone0 = copticChronology1.getZone();
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      CopticChronology copticChronology2 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology1, copticChronology0);
      assertSame(copticChronology1, copticChronology2);
      assertSame(copticChronology2, copticChronology0);
      assertSame(copticChronology2, copticChronology1);
      assertNotNull(copticChronology2);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      long long0 = copticChronology0.setYear(1, 1);
      assertEquals((-53174534399999L), long0);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology0, copticChronology2);
      
      int int0 = copticChronology0.getDaysInMonthMax((-604800000L));
      assertEquals(30, int0);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology0, copticChronology2);
      
      DateTimeZone dateTimeZone1 = copticChronology0.getZone();
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology0, copticChronology2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      
      int int1 = 3600;
      int int2 = copticChronology0.getDayOfMonth(3168L, 3600, 30);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-699845), int2);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology0, copticChronology2);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone1);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology0, copticChronology2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      
      int int3 = copticChronology0.getMinimumDaysInFirstWeek();
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(4, int3);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology0, copticChronology2);
      
      String string0 = copticChronology0.toString();
      assertEquals("CopticChronology[America/Recife]", string0);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology0, copticChronology2);
      assertNotNull(string0);
      
      long long1 = 604800000L;
      int int4 = copticChronology1.getDayOfYear(604800000L);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(120, int4);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology1, copticChronology0);
      assertSame(copticChronology1, copticChronology2);
      
      // Undeclared exception!
      try { 
        CopticChronology.getInstance(dateTimeZone0, (-1428));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -1428
         //
         verifyException("org.joda.time.chrono.CopticChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      CopticChronology copticChronology1 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      
      CopticChronology copticChronology2 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology2, copticChronology1);
      assertSame(copticChronology2, copticChronology0);
      assertNotNull(copticChronology2);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology2);
      assertSame(copticChronology0, copticChronology1);
      assertNotNull(julianChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      // Undeclared exception!
      try { 
        julianChronology0.getDayOfMonth(1, 1, (-1581));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1582
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(gregorianChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      int int0 = gregorianChronology0.getDayOfMonth(1, 1, 1);
      assertEquals(719163, int0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      int int1 = gregorianChronology0.getDaysInYear(198);
      assertFalse(int1 == int0);
      assertEquals(365, int1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      int int2 = gregorianChronology0.getDayOfMonth((-42521587200000L));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(19, int2);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      int int3 = gregorianChronology0.hashCode();
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      int int4 = gregorianChronology0.getDayOfWeek(1);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(4, int4);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      int int5 = ethiopicChronology0.getDayOfMonth(1, 719163, 365);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertEquals((-261968471), int5);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      long long0 = ethiopicChronology0.getApproxMillisAtEpochDividedByTwo();
      assertEquals(30962844000000L, long0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      int int6 = ethiopicChronology0.getMaxYear();
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertEquals(292272984, int6);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      long long1 = ethiopicChronology0.getYearMillis(1);
      assertFalse(long1 == long0);
      assertEquals((-61894108800000L), long1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      
      int int7 = ethiopicChronology0.getDaysInMonthMaxForSet(30962844000000L, 292272984);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(int7 == int4);
      assertFalse(int7 == int6);
      assertFalse(int7 == int2);
      assertFalse(int7 == int1);
      assertFalse(int7 == int0);
      assertFalse(int7 == int5);
      assertEquals(30, int7);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      IslamicChronology islamicChronology2 = IslamicChronology.getInstanceUTC();
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology2, islamicChronology0);
      assertSame(islamicChronology2, islamicChronology1);
      assertNotNull(islamicChronology2);
      
      // Undeclared exception!
      try { 
        islamicChronology2.getYearMonthDayMillis(292272984, 198, 19);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too large: 292272984 > 292271022
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      long long0 = gregorianChronology0.setYear(1000L, 0);
      assertEquals((-62167219199000L), long0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      int int0 = ethiopicChronology0.getWeeksInYear(60);
      assertEquals(52, int0);
      assertEquals(1, EthiopicChronology.EE);
      
      int int1 = ethiopicChronology0.getWeekOfWeekyear(630L, 0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, EthiopicChronology.EE);
      
      int int2 = gregorianChronology0.getWeekyear(1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1970, int2);
      
      // Undeclared exception!
      try { 
        gregorianChronology0.getYearMonthMillis(1, (-1906));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1907
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      int int0 = gregorianChronology0.getDayOfYear(2762L, 0);
      assertEquals(719529, int0);
      
      long long0 = gregorianChronology0.getApproxMillisAtEpochDividedByTwo();
      assertEquals(31083597720000L, long0);
      
      // Undeclared exception!
      try { 
        gregorianChronology0.getYearMonthDayMillis(2219, (-1078), 2697);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1079
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(gregorianChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int0 = gregorianChronology0.getWeeksInYear(0);
      assertEquals(53, int0);
      assertEquals(1, CopticChronology.AM);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int1 = gregorianChronology0.getWeeksInYear(1);
      assertFalse(int1 == int0);
      assertEquals(52, int1);
      assertEquals(1, CopticChronology.AM);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int2 = gregorianChronology0.getMaxYear();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(292278993, int2);
      assertEquals(1, CopticChronology.AM);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      Chronology chronology0 = julianChronology0.withZone(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      int int3 = julianChronology0.getMonthOfYear(1);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(12, int3);
      assertSame(julianChronology0, chronology0);
      
      try { 
        julianChronology0.getDateTimeMillis(1, 0, (-2463), (-2463));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2463 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDayOfYear(1662L);
      assertEquals(288, int0);
      assertEquals(1, IslamicChronology.AH);
      
      try { 
        islamicChronology0.getDateTimeMillis(626, (-991), (-991), 626);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -991 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int0 = copticChronology0.getWeekyear(21260793600000L);
      assertEquals(2360, int0);
      assertEquals(1, CopticChronology.AM);
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int1 = copticChronology0.getDaysInMonthMaxForSet(168L, (-8));
      assertFalse(int1 == int0);
      assertEquals(30, int1);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      
      int int2 = copticChronology0.getMinYear();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-292269337), int2);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      
      int int3 = copticChronology0.getDayOfMonth(1, 0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(24, int3);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertNotNull(gregorianChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      GregorianChronology gregorianChronology1 = (GregorianChronology)gregorianChronology0.withUTC();
      assertFalse(gregorianChronology1.equals((Object)gregorianChronology0));
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertNotSame(gregorianChronology0, gregorianChronology1);
      assertNotSame(gregorianChronology1, gregorianChronology0);
      assertNotNull(gregorianChronology1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int4 = gregorianChronology0.getDayOfYear(1506L);
      assertFalse(gregorianChronology0.equals((Object)gregorianChronology1));
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(1, int4);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertNotSame(gregorianChronology0, gregorianChronology1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      boolean boolean0 = copticChronology0.isLeapDay((-2276L));
      assertFalse(boolean0);
      assertEquals(1, CopticChronology.AM);
      
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType1 = islamicChronology0.getLeapYearPatternType();
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertSame(islamicChronology_LeapYearPatternType1, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology_LeapYearPatternType1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      int int0 = copticChronology0.getMaxMonth(1);
      assertEquals(13, int0);
      assertEquals(1, CopticChronology.AM);
      
      long long0 = copticChronology0.getYearMonthDayMillis(1, 0, 1);
      assertEquals((-53186803200000L), long0);
      assertEquals(1, CopticChronology.AM);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      int int1 = islamicChronology0.getDaysInYearMonth(13, 0);
      assertFalse(int1 == int0);
      assertEquals(29, int1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology_LeapYearPatternType0, islamicChronology_LeapYearPatternType1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      boolean boolean0 = islamicChronology0.isLeapDay((-1736L));
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = islamicChronology0.getWeekOfWeekyear((-1736L));
      assertEquals(42, int0);
      assertEquals(1, IslamicChronology.AH);
      
      int int1 = islamicChronology0.getDayOfMonth((-3L));
      assertFalse(int1 == int0);
      assertEquals(21, int1);
      assertEquals(1, IslamicChronology.AH);
      
      int int2 = islamicChronology0.getMaxMonth();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(12, int2);
      assertEquals(1, IslamicChronology.AH);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = JulianChronology.adjustYearForSet((-3093));
      assertEquals((-3092), int0);
      
      int int1 = julianChronology0.getMonthOfYear(1L);
      assertFalse(int1 == int0);
      assertEquals(12, int1);
      
      int int2 = julianChronology0.getWeekOfWeekyear(604800L, (-2265));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      DateTimeZone dateTimeZone0 = julianChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        GregorianChronology.getInstance(dateTimeZone0, (-3093));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -3093
         //
         verifyException("org.joda.time.chrono.GregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getWeeksInYear((-3517));
      assertEquals(0, int0);
      assertEquals(1, IslamicChronology.AH);
      
      int int1 = islamicChronology0.getYear(60000L);
      assertFalse(int1 == int0);
      assertEquals(1389, int1);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getYearDifference((-572L), (-1723L));
      assertEquals(0L, long0);
      assertEquals(1, IslamicChronology.AH);
      
      boolean boolean0 = islamicChronology0.isLeapYear(3246);
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      
      long long1 = islamicChronology0.getYearMillis(66);
      assertFalse(long1 == long0);
      assertEquals((-40531449600000L), long1);
      assertEquals(1, IslamicChronology.AH);
      
      boolean boolean1 = islamicChronology0.isLeapYear(66);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, IslamicChronology.AH);
      
      String string0 = islamicChronology0.toString();
      assertEquals("IslamicChronology[America/Recife]", string0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(string0);
      
      String string1 = islamicChronology0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("IslamicChronology[America/Recife]", string1);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(string1);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(julianChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      long long2 = islamicChronology0.setYear(31622400000L, 66);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals((-40505616000000L), long2);
      assertEquals(1, IslamicChronology.AH);
      
      long long3 = julianChronology0.getYearMillis(1);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertEquals((-62135769600000L), long3);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      long long0 = copticChronology0.getYearDifference((-9223372036854775808L), (-9223372036854775808L));
      assertEquals(0L, long0);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      
      int int0 = copticChronology0.getWeekOfWeekyear((-1291L));
      assertEquals(17, int0);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      
      CopticChronology copticChronology2 = new CopticChronology(copticChronology0, copticChronology0, 1);
      assertFalse(copticChronology2.equals((Object)copticChronology1));
      assertFalse(copticChronology2.equals((Object)copticChronology0));
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology2);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone1 = copticChronology2.getZone();
      assertFalse(copticChronology0.equals((Object)copticChronology2));
      assertFalse(copticChronology2.equals((Object)copticChronology1));
      assertFalse(copticChronology2.equals((Object)copticChronology0));
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology0, copticChronology2);
      assertNotSame(copticChronology2, copticChronology1);
      assertNotSame(copticChronology2, copticChronology0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withZone(dateTimeZone1);
      assertFalse(copticChronology0.equals((Object)copticChronology2));
      assertFalse(copticChronology2.equals((Object)copticChronology1));
      assertFalse(copticChronology2.equals((Object)copticChronology0));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology0, copticChronology2);
      assertNotSame(copticChronology2, copticChronology1);
      assertNotSame(copticChronology2, copticChronology0);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = julianChronology0.getDayOfMonth((-1543L));
      assertEquals(18, int0);
      
      DateTimeZone dateTimeZone0 = julianChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      JulianChronology julianChronology1 = JulianChronology.getInstance();
      assertFalse(julianChronology1.equals((Object)julianChronology0));
      assertNotSame(julianChronology1, julianChronology0);
      assertNotNull(julianChronology1);
      
      boolean boolean0 = islamicChronology0.isLeapYear(2740);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertTrue(boolean0);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(julianChronology0, julianChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      int int1 = islamicChronology0.getDaysInMonthMax((-1541));
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(int1 == int0);
      assertEquals(30, int1);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(julianChronology0, julianChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertNotSame(julianChronology0, julianChronology1);
      assertNotNull(gregorianChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Chronology chronology0 = gregorianChronology0.withZone(dateTimeZone0);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertNotSame(julianChronology0, julianChronology1);
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getMonthOfYear(5569L, 0);
      assertEquals(16683, int0);
      assertEquals(1, IslamicChronology.AH);
      
      int int1 = islamicChronology0.getWeekOfWeekyear(5569L);
      assertFalse(int1 == int0);
      assertEquals(42, int1);
      assertEquals(1, IslamicChronology.AH);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      int int2 = gregorianChronology0.getDaysInMonthMax(16683);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(31, int2);
      
      int int3 = copticChronology0.getYear((-3727L));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(1686, int3);
      assertEquals(1, CopticChronology.AM);
      
      CopticChronology copticChronology1 = CopticChronology.getInstance(dateTimeZone0);
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertEquals(1, CopticChronology.AM);
      assertNotSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      int int4 = copticChronology0.getMaxYear();
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(292272708, int4);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(copticChronology0, copticChronology1);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      
      long long0 = islamicChronology0.getFirstWeekOfYearMillis(23034375);
      assertEquals(705207356524800000L, long0);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      long long0 = gregorianChronology0.getFirstWeekOfYearMillis((-307));
      assertEquals((-71855337600000L), long0);
      
      int int0 = gregorianChronology0.getDayOfWeek(1209600000L);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      CopticChronology copticChronology1 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      
      CopticChronology copticChronology2 = new CopticChronology(copticChronology0, copticChronology1, 1);
      assertFalse(copticChronology2.equals((Object)copticChronology1));
      assertFalse(copticChronology2.equals((Object)copticChronology0));
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology2);
      
      long long0 = copticChronology0.getYearMillis(1);
      assertFalse(copticChronology0.equals((Object)copticChronology2));
      assertEquals((-53184211200000L), long0);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(copticChronology0, copticChronology2);
      assertSame(copticChronology0, copticChronology1);
      
      long long1 = copticChronology1.add((ReadablePeriod) null, (long) 1, 0);
      assertFalse(copticChronology1.equals((Object)copticChronology2));
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      assertEquals(1, CopticChronology.AM);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(copticChronology1, copticChronology2);
      
      boolean boolean0 = copticChronology2.isLeapDay((-797L));
      assertFalse(copticChronology0.equals((Object)copticChronology2));
      assertFalse(copticChronology1.equals((Object)copticChronology2));
      assertFalse(copticChronology2.equals((Object)copticChronology1));
      assertFalse(copticChronology2.equals((Object)copticChronology0));
      assertFalse(boolean0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(copticChronology0, copticChronology2);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotSame(copticChronology1, copticChronology2);
      assertNotSame(copticChronology2, copticChronology1);
      assertNotSame(copticChronology2, copticChronology0);
      
      // Undeclared exception!
      try { 
        copticChronology0.getDateMidnightMillis(0, 904, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 904 for monthOfYear must be in the range [1,13]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      int int0 = copticChronology0.getDayOfMonth(2178L, 100, 100);
      assertEquals(576429, int0);
      assertEquals(1, CopticChronology.AM);
      
      int int1 = copticChronology0.getDayOfYear(42474480000L);
      assertFalse(int1 == int0);
      assertEquals(239, int1);
      assertEquals(1, CopticChronology.AM);
      
      int int2 = copticChronology0.getDaysInMonthMax((-164L));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(30, int2);
      assertEquals(1, CopticChronology.AM);
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone((DateTimeZone) null);
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, 1);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(julianChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      int int0 = copticChronology0.getWeekOfWeekyear((-42521587200000L));
      assertEquals(46, int0);
      assertEquals(1, CopticChronology.AM);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(julianChronology0, gregorianChronology0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      long long0 = islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      assertEquals(21260793600000L, long0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      JulianChronology julianChronology1 = null;
      try {
        julianChronology1 = new JulianChronology(julianChronology0, julianChronology0, 61);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 61
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      JulianChronology julianChronology0 = null;
      try {
        julianChronology0 = new JulianChronology(copticChronology0, gregorianChronology0, 1445);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1445
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, 1);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(julianChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int0 = julianChronology0.getMinYear();
      assertEquals((-292269054), int0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int1 = julianChronology0.getDaysInYear((-2284));
      assertFalse(int1 == int0);
      assertEquals(366, int1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(gregorianChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int2 = 99;
      // Undeclared exception!
      try { 
        islamicChronology0.getDateMidnightMillis(4, (-3006), 99);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3006 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = julianChronology0.getWeekOfWeekyear((-230L));
      assertEquals(51, int0);
      
      try { 
        julianChronology0.getDateMidnightMillis(29, 29, 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDayOfYear(2629800000L);
      assertEquals(318, int0);
      assertEquals(1, IslamicChronology.AH);
      
      int int1 = islamicChronology0.getWeekyear(365L);
      assertFalse(int1 == int0);
      assertEquals(1389, int1);
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = islamicChronology0.getAverageMillisPerMonth();
      assertEquals(2551440384L, long0);
      assertEquals(1, IslamicChronology.AH);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      int int2 = islamicChronology0.getYear((-1059L));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1389, int2);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      long long0 = copticChronology0.getYearMonthMillis(1, 1);
      assertEquals((-53184211200000L), long0);
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      int int0 = copticChronology0.getMonthOfYear(1142L);
      assertEquals(4, int0);
      assertEquals(1, CopticChronology.AM);
      
      boolean boolean0 = copticChronology0.isLeapDay(4);
      assertFalse(boolean0);
      assertEquals(1, CopticChronology.AM);
      
      long long0 = copticChronology0.getDateTimeMillis(4, 4, 4, 4);
      assertEquals((-53081481599996L), long0);
      assertEquals(1, CopticChronology.AM);
      
      String string0 = copticChronology0.toString();
      assertEquals("CopticChronology[UTC]", string0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(string0);
      
      int int1 = copticChronology0.getDaysInMonthMax(4);
      assertFalse(int1 == int0);
      assertEquals(30, int1);
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      CopticChronology copticChronology0 = new CopticChronology(islamicChronology0, "ehQ", 1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      int int0 = copticChronology0.getDayOfYear(2882L);
      assertEquals(113, int0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      
      int int1 = islamicChronology0.getDayOfMonth((-42521587200000L), 1, 3648);
      assertFalse(int1 == int0);
      assertEquals((-107586), int1);
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = copticChronology0.getYearDifference(800, 800);
      assertEquals(0L, long0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      
      long long1 = islamicChronology0.setYear(1, 800);
      assertFalse(long1 == long0);
      assertEquals((-18033580799999L), long1);
      assertEquals(1, IslamicChronology.AH);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      GregorianChronology gregorianChronology1 = GregorianChronology.getInstance(dateTimeZone0);
      assertSame(gregorianChronology0, gregorianChronology1);
      assertSame(gregorianChronology1, gregorianChronology0);
      assertNotNull(gregorianChronology1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      long long2 = islamicChronology0.getYearDifference((-42521587200000L), 370L);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals((-1389L), long2);
      assertEquals(1, IslamicChronology.AH);
      
      int int2 = gregorianChronology1.getWeekOfWeekyear((-42521587200000L));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(29, int2);
      assertSame(gregorianChronology0, gregorianChronology1);
      assertSame(gregorianChronology1, gregorianChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      long long3 = gregorianChronology0.add((long) 1, (-18033580799999L), 113);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertEquals((-2037794630399886L), long3);
      assertSame(gregorianChronology0, gregorianChronology1);
      
      long long4 = gregorianChronology0.getAverageMillisPerYearDividedByTwo();
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertEquals(15778476000L, long4);
      assertSame(gregorianChronology0, gregorianChronology1);
      
      boolean boolean0 = copticChronology0.equals(gregorianChronology0);
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertSame(gregorianChronology0, gregorianChronology1);
      
      long long5 = copticChronology0.calculateFirstDayOfYearMillis(113);
      assertFalse(long5 == long3);
      assertFalse(long5 == long0);
      assertFalse(long5 == long1);
      assertFalse(long5 == long2);
      assertFalse(long5 == long4);
      assertEquals((-49649760000000L), long5);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      
      boolean boolean1 = islamicChronology0.equals(copticChronology0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      
      int int3 = gregorianChronology0.getWeekyear((-1351L));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(1970, int3);
      assertSame(gregorianChronology0, gregorianChronology1);
      
      int int4 = islamicChronology0.getDaysInYearMax();
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(355, int4);
      assertEquals(1, IslamicChronology.AH);
      
      EthiopicChronology ethiopicChronology0 = null;
      try {
        ethiopicChronology0 = new EthiopicChronology(gregorianChronology1, gregorianChronology1, (-673));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -673
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      int int0 = ethiopicChronology0.getDayOfMonth(2629746000L);
      assertEquals(23, int0);
      assertEquals(1, EthiopicChronology.EE);
      
      int int1 = ethiopicChronology0.getDayOfYear(0L);
      assertFalse(int1 == int0);
      assertEquals(113, int1);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      long long0 = islamicChronology0.getAverageMillisPerYearDividedByTwo();
      assertEquals(15308640144L, long0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology2, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology0);
      assertNotNull(islamicChronology2);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      long long1 = islamicChronology2.getAverageMillisPerYear();
      assertFalse(long1 == long0);
      assertEquals(30617280288L, long1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology2, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = islamicChronology0.getZone();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, IslamicChronology.AH);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      
      // Undeclared exception!
      try { 
        JulianChronology.getInstance(dateTimeZone1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -1
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int0 = islamicChronology1.getDayOfMonth(1, 1);
      assertEquals(30, int0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      boolean boolean0 = islamicChronology1.equals(dateTimeZone0);
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int1 = islamicChronology0.getWeekyear(1);
      assertFalse(int1 == int0);
      assertEquals(1389, int1);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      
      int int2 = islamicChronology0.getDaysInYearMonth((-2147483645), 2615625);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(30, int2);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      
      int int3 = islamicChronology0.getYear(3945L);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1389, int3);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      
      int int4 = islamicChronology1.getMonthOfYear(9223372036854775807L, (-4135));
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(21157283, int4);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int5 = islamicChronology1.getDaysInYearMonth(0, (-707));
      assertTrue(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertTrue(int5 == int2);
      assertEquals(30, int5);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertNotNull(gregorianChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int6 = gregorianChronology0.getWeekyear(940L);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertEquals(1970, int6);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int7 = gregorianChronology0.getMaxYear();
      assertFalse(int7 == int0);
      assertFalse(int7 == int3);
      assertFalse(int7 == int2);
      assertFalse(int7 == int4);
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertEquals(292278993, int7);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Chronology chronology0 = gregorianChronology0.withZone(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int8 = islamicChronology1.hashCode();
      assertFalse(int8 == int0);
      assertFalse(int8 == int7);
      assertFalse(int8 == int3);
      assertFalse(int8 == int5);
      assertFalse(int8 == int6);
      assertFalse(int8 == int4);
      assertFalse(int8 == int1);
      assertFalse(int8 == int2);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      long long0 = islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      assertEquals(21260793600000L, long0);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      
      int int9 = islamicChronology1.getMillisOfDay(2147483L);
      assertFalse(int9 == int0);
      assertFalse(int9 == int1);
      assertFalse(int9 == int2);
      assertFalse(int9 == int3);
      assertFalse(int9 == int5);
      assertFalse(int9 == int6);
      assertFalse(int9 == int4);
      assertFalse(int9 == int7);
      assertEquals(2147483, int9);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int10 = julianChronology0.getWeekOfWeekyear(30, 2147483);
      assertFalse(int10 == int1);
      assertFalse(int10 == int0);
      assertFalse(int10 == int7);
      assertFalse(int10 == int2);
      assertFalse(int10 == int3);
      assertFalse(int10 == int5);
      assertFalse(int10 == int6);
      assertFalse(int10 == int9);
      assertFalse(int10 == int4);
      assertEquals(53, int10);
      
      // Undeclared exception!
      try { 
        julianChronology0.getYearMonthMillis((-2364), 1816);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1815
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      julianChronology0.getWeekOfWeekyear(1190L, 0);
      julianChronology0.isLeapDay((-9223372036854775808L));
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      julianChronology0.getFirstWeekOfYearMillis((-2163));
      julianChronology0.getApproxMillisAtEpochDividedByTwo();
      julianChronology0.getWeekyear((-2163));
      ethiopicChronology0.getDaysInMonthMax();
      julianChronology0.getAverageMillisPerMonth();
      gregorianChronology0.getDaysInYear(1);
      gregorianChronology0.getAverageMillisPerYearDividedByTwo();
      gregorianChronology0.getZone();
      IslamicChronology.getInstance();
      julianChronology0.getMaxMonth(1615);
      try { 
        gregorianChronology0.getDateTimeMillis((-30), (-292269054), 1969, 2094);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -292269054 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      int int0 = 0;
      julianChronology0.getWeeksInYear(0);
      julianChronology0.getDaysInMonthMax((-1427L));
      julianChronology0.isLeapDay(155L);
      int int1 = 1372;
      julianChronology0.add(155L, 2667L, 1372);
      julianChronology0.getAverageMillisPerYearDividedByTwo();
      julianChronology0.getMaxMonth();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      gregorianChronology0.getAverageMillisPerYear();
      ethiopicChronology0.getYear(3659279L);
      int int2 = (-2340);
      try { 
        ethiopicChronology0.getDateTimeMillis(2667L, (-2340), 53, (-2340), 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2340 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getDayOfYear(1975L);
      islamicChronology0.getDayOfMonth((-2648L), (-437), (-2332));
      islamicChronology0.getYearMonthDayMillis(709776, (-437), (-10));
      islamicChronology0.getMonthOfYear((-437));
      islamicChronology0.toString();
      islamicChronology0.getWeeksInYear((-2332));
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      islamicChronology0.getMonthOfYear(709776, 0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = islamicChronology0.getZone();
      copticChronology0.withZone(dateTimeZone1);
      islamicChronology0.getMaxMonth();
      islamicChronology0.setYear((-604800000L), 1);
      copticChronology0.withZone(dateTimeZone1);
      copticChronology0.getDaysInYear((-2332));
      try { 
        copticChronology0.getDateTimeMillis((-776), (-776), 999, 709776, 16683, 100, 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 709776 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
