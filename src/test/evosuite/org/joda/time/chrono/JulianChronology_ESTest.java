/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:38:20 GMT 2018
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JulianChronology_ESTest extends JulianChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotNull(julianChronology0);
      
      Chronology chronology0 = julianChronology0.withZone((DateTimeZone) null);
      assertNotNull(chronology0);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      
      long long0 = julianChronology0.getAverageMillisPerMonth();
      assertSame(julianChronology0, chronology0);
      assertEquals(2629800000L, long0);
      
      long long1 = julianChronology0.setYear((-1L), (-1921));
      assertFalse(long1 == long0);
      assertSame(julianChronology0, chronology0);
      assertEquals((-122759107200001L), long1);
      
      int int0 = julianChronology0.getYear((-1L));
      assertSame(julianChronology0, chronology0);
      assertEquals(1969, int0);
      
      JulianChronology julianChronology1 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology1);
      assertFalse(julianChronology1.equals((Object)chronology0));
      assertFalse(julianChronology1.equals((Object)julianChronology0));
      assertNotSame(julianChronology1, chronology0);
      assertNotSame(julianChronology1, julianChronology0);
      
      int int1 = JulianChronology.adjustYearForSet((-963));
      assertFalse(int1 == int0);
      assertEquals((-962), int1);
      
      long long2 = julianChronology0.getDateMidnightMillis(2895, 2, 2);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertSame(julianChronology0, chronology0);
      assertNotSame(julianChronology0, julianChronology1);
      assertEquals(29194646400000L, long2);
      
      int int2 = julianChronology0.getMinYear();
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(julianChronology0, chronology0);
      assertNotSame(julianChronology0, julianChronology1);
      assertEquals((-292269054), int2);
      
      int int3 = JulianChronology.adjustYearForSet(3600000);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(3600000, int3);
      
      Chronology chronology1 = julianChronology0.withZone((DateTimeZone) null);
      assertNotNull(chronology1);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(chronology1.equals((Object)julianChronology1));
      assertSame(julianChronology0, chronology0);
      assertNotSame(julianChronology0, julianChronology1);
      assertSame(julianChronology0, chronology1);
      assertSame(chronology1, chronology0);
      assertNotSame(chronology1, julianChronology1);
      assertSame(chronology1, julianChronology0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      Chronology chronology0 = julianChronology0.withZone((DateTimeZone) null);
      assertNotNull(chronology0);
      assertFalse(chronology0.equals((Object)julianChronology0));
      assertNotSame(julianChronology0, chronology0);
      assertNotSame(chronology0, julianChronology0);
      
      long long0 = julianChronology0.getAverageMillisPerMonth();
      assertFalse(julianChronology0.equals((Object)chronology0));
      assertNotSame(julianChronology0, chronology0);
      assertEquals(2629800000L, long0);
      
      int int0 = (-1921);
      long long1 = julianChronology0.setYear((-1L), (-1921));
      assertFalse(julianChronology0.equals((Object)chronology0));
      assertFalse(long1 == long0);
      assertNotSame(julianChronology0, chronology0);
      assertEquals((-122759107200001L), long1);
      
      int int1 = julianChronology0.getYear((-1L));
      assertFalse(julianChronology0.equals((Object)chronology0));
      assertFalse(int1 == int0);
      assertNotSame(julianChronology0, chronology0);
      assertEquals(1969, int1);
      
      // Undeclared exception!
      try { 
        julianChronology0.getTotalMillisByYearMonth(144, 2162);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2161
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotNull(julianChronology0);
      
      Chronology chronology0 = julianChronology0.withZone((DateTimeZone) null);
      assertNotNull(chronology0);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      
      long long0 = julianChronology0.getAverageMillisPerMonth();
      assertSame(julianChronology0, chronology0);
      assertEquals(2629800000L, long0);
      
      long long1 = julianChronology0.setYear((-1L), (-1921));
      assertFalse(long1 == long0);
      assertSame(julianChronology0, chronology0);
      assertEquals((-122759107200001L), long1);
      
      int int0 = julianChronology0.getYear((-1L));
      assertSame(julianChronology0, chronology0);
      assertEquals(1969, int0);
      
      // Undeclared exception!
      try { 
        julianChronology0.getTotalMillisByYearMonth(144, 2162);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2161
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = 0;
      int int1 = julianChronology0.getDaysInYear((-1732));
      assertFalse(int1 == int0);
      assertEquals(366, int1);
      
      boolean boolean0 = julianChronology0.isLeapDay(0L);
      assertFalse(boolean0);
      
      int int2 = julianChronology0.getMaxYear();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(292272992, int2);
      
      int int3 = JulianChronology.adjustYearForSet((-1732));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1731), int3);
      
      int int4 = julianChronology0.getMonthOfYear(0);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(12, int4);
      
      boolean boolean1 = julianChronology0.isLeapYear(292272992);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int5 = julianChronology0.getDayOfYear((-2485L), 0);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertEquals(719530, int5);
      
      int int6 = julianChronology0.getDaysInMonthMaxForSet(366, (-958));
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertEquals(31, int6);
      
      boolean boolean2 = julianChronology0.isLeapYear(0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      try { 
        julianChronology0.getDateMidnightMillis(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      long long0 = julianChronology0.calculateFirstDayOfYearMillis(3);
      assertEquals((-62072697600000L), long0);
      
      long long1 = julianChronology0.calculateFirstDayOfYearMillis(454);
      assertFalse(long1 == long0);
      assertEquals((-47840198400000L), long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = null;
      // Undeclared exception!
      try { 
        julianChronology0.assemble((AssembledChronology.Fields) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = julianChronology0.getDaysInMonthMaxForSet(0L, 726);
      assertEquals(31, int0);
      
      long long0 = julianChronology0.add(0L, 0L, 726);
      assertEquals(0L, long0);
      
      int int1 = 15;
      long long1 = julianChronology0.getAverageMillisPerMonth();
      assertFalse(long1 == long0);
      assertEquals(2629800000L, long1);
      
      boolean boolean0 = julianChronology0.isLeapDay(0L);
      assertFalse(boolean0);
      
      int int2 = julianChronology0.getDayOfMonth(15, 15, 1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(714052, int2);
      
      boolean boolean1 = julianChronology0.isLeapDay((-1214));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int3 = julianChronology0.getDayOfYear((-2485L), 15);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(714051, int3);
      
      int int4 = julianChronology0.getMinYear();
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals((-292269054), int4);
      
      int int5 = julianChronology0.getDaysInMonthMaxForSet(2629800000L, (-958));
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertTrue(int5 == int0);
      assertEquals(31, int5);
      
      long long2 = julianChronology0.getAverageMillisPerYear();
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(31557600000L, long2);
      
      boolean boolean2 = julianChronology0.isLeapDay(0L);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      try { 
        julianChronology0.getDateMidnightMillis(15, 15, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 15 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotNull(julianChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = null;
      julianChronology0.assemble((AssembledChronology.Fields) null);
      JulianChronology julianChronology1 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotNull(julianChronology1);
      assertSame(julianChronology1, julianChronology0);
      
      int int0 = 1315;
      int int1 = julianChronology0.getDayOfYear(2251L, 1315);
      assertFalse(int1 == int0);
      assertSame(julianChronology0, julianChronology1);
      assertEquals(239227, int1);
      
      int int2 = julianChronology1.getDaysInYear(454);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(julianChronology1, julianChronology0);
      assertEquals(365, int2);
      
      Chronology chronology0 = julianChronology0.withUTC();
      assertNotNull(chronology0);
      assertFalse(chronology0.equals((Object)julianChronology0));
      assertFalse(chronology0.equals((Object)julianChronology1));
      assertNotSame(julianChronology0, chronology0);
      assertSame(julianChronology0, julianChronology1);
      assertNotSame(chronology0, julianChronology0);
      assertNotSame(chronology0, julianChronology1);
      
      Chronology chronology1 = julianChronology0.withUTC();
      assertNotNull(chronology1);
      assertFalse(julianChronology0.equals((Object)chronology0));
      assertFalse(chronology1.equals((Object)julianChronology0));
      assertFalse(chronology1.equals((Object)julianChronology1));
      assertNotSame(julianChronology0, chronology0);
      assertSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, chronology1);
      assertNotSame(chronology1, julianChronology0);
      assertNotSame(chronology1, julianChronology1);
      assertSame(chronology1, chronology0);
      
      long long0 = julianChronology0.getApproxMillisAtEpochDividedByTwo();
      assertFalse(julianChronology0.equals((Object)chronology0));
      assertFalse(julianChronology0.equals((Object)chronology1));
      assertNotSame(julianChronology0, chronology0);
      assertSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, chronology1);
      assertEquals(31083663600000L, long0);
      
      int int3 = julianChronology0.getMinYear();
      assertFalse(julianChronology0.equals((Object)chronology0));
      assertFalse(julianChronology0.equals((Object)chronology1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertNotSame(julianChronology0, chronology0);
      assertSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, chronology1);
      assertEquals((-292269054), int3);
      
      long long1 = julianChronology0.getApproxMillisAtEpochDividedByTwo();
      assertFalse(julianChronology0.equals((Object)chronology0));
      assertFalse(julianChronology0.equals((Object)chronology1));
      assertTrue(long1 == long0);
      assertNotSame(julianChronology0, chronology0);
      assertSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, chronology1);
      assertEquals(31083663600000L, long1);
      
      int int4 = 623158436;
      JulianChronology julianChronology2 = JulianChronology.getInstance();
      assertNotNull(julianChronology2);
      assertFalse(julianChronology2.equals((Object)chronology1));
      assertFalse(julianChronology2.equals((Object)chronology0));
      assertNotSame(julianChronology2, chronology1);
      assertSame(julianChronology2, julianChronology0);
      assertSame(julianChronology2, julianChronology1);
      assertNotSame(julianChronology2, chronology0);
      
      try { 
        julianChronology0.getDateMidnightMillis(454, 623158436, (-1828));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 623158436 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      JulianChronology julianChronology1 = JulianChronology.getInstance();
      assertNotNull(julianChronology1);
      assertSame(julianChronology1, julianChronology0);
      
      long long0 = julianChronology1.getApproxMillisAtEpochDividedByTwo();
      assertSame(julianChronology1, julianChronology0);
      assertEquals(31083663600000L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = 15;
      int int1 = julianChronology0.getDaysInYear((-1732));
      assertFalse(int1 == int0);
      assertEquals(366, int1);
      
      boolean boolean0 = julianChronology0.isLeapYear(15);
      assertFalse(boolean0);
      
      int int2 = julianChronology0.getDayOfMonth(15, 15, 1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(714052, int2);
      
      boolean boolean1 = julianChronology0.isLeapDay((-1214));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int3 = julianChronology0.getDayOfYear((-2485L), 15);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(714051, int3);
      
      int int4 = julianChronology0.getDaysInMonthMaxForSet(366, (-958));
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(31, int4);
      
      try { 
        julianChronology0.getDateMidnightMillis(15, 15, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 15 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = 15;
      int int1 = JulianChronology.adjustYearForSet((-1732));
      assertFalse(int1 == int0);
      assertEquals((-1731), int1);
      
      long long0 = julianChronology0.getAverageMillisPerMonth();
      assertEquals(2629800000L, long0);
      
      boolean boolean0 = julianChronology0.isLeapDay(0L);
      assertFalse(boolean0);
      
      int int2 = julianChronology0.getDayOfMonth(15, 15, 1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(714052, int2);
      
      boolean boolean1 = julianChronology0.isLeapDay((-1214));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int3 = julianChronology0.getDayOfYear((-2485L), 15);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(714051, int3);
      
      int int4 = julianChronology0.getDaysInMonthMaxForSet(2629800000L, (-958));
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(31, int4);
      
      boolean boolean2 = julianChronology0.isLeapDay(0L);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      try { 
        julianChronology0.getDateMidnightMillis(15, 15, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 15 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      int int0 = 1598;
      int int1 = julianChronology0.getWeekOfWeekyear(1598);
      assertFalse(int1 == int0);
      assertEquals(51, int1);
      
      Chronology chronology0 = julianChronology0.withUTC();
      assertNotNull(chronology0);
      assertFalse(chronology0.equals((Object)julianChronology0));
      assertNotSame(julianChronology0, chronology0);
      assertNotSame(chronology0, julianChronology0);
      
      int int2 = 0;
      long long0 = julianChronology0.add((long) 51, (long) (-3243), 0);
      assertFalse(julianChronology0.equals((Object)chronology0));
      assertNotSame(julianChronology0, chronology0);
      assertEquals(51L, long0);
      
      JulianChronology julianChronology1 = null;
      try {
        julianChronology1 = new JulianChronology(julianChronology0, julianChronology0, 1598);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1598
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = 0;
      int int1 = julianChronology0.getDaysInYear((-1732));
      assertFalse(int1 == int0);
      assertEquals(366, int1);
      
      boolean boolean0 = julianChronology0.isLeapDay(0L);
      assertFalse(boolean0);
      
      int int2 = julianChronology0.getMaxYear();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(292272992, int2);
      
      int int3 = julianChronology0.getDayOfMonth(0, 0, 1);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(719531, int3);
      
      int int4 = julianChronology0.getMonthOfYear(0);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(12, int4);
      
      boolean boolean1 = julianChronology0.isLeapDay((-1218));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int5 = julianChronology0.getDayOfYear((-2485L), 0);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertEquals(719530, int5);
      
      int int6 = julianChronology0.getDaysInMonthMaxForSet(366, (-958));
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertEquals(31, int6);
      
      boolean boolean2 = julianChronology0.isLeapDay(0L);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      try { 
        julianChronology0.getDateMidnightMillis(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      int int0 = julianChronology0.getMinYear();
      assertEquals((-292269054), int0);
      
      long long0 = julianChronology0.getAverageMillisPerYearDividedByTwo();
      assertEquals(15778800000L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      int int0 = julianChronology0.getDayOfYear((-1479L));
      assertEquals(352, int0);
      
      int int1 = JulianChronology.adjustYearForSet(352);
      assertTrue(int1 == int0);
      assertEquals(352, int1);
      
      long long0 = julianChronology0.getAverageMillisPerYearDividedByTwo();
      assertEquals(15778800000L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      JulianChronology julianChronology1 = new JulianChronology(julianChronology0, "|oN$MRgC)O9wQirUoi;", 3);
      assertNotNull(julianChronology1);
      assertFalse(julianChronology1.equals((Object)julianChronology0));
      
      long long0 = julianChronology1.getApproxMillisAtEpochDividedByTwo();
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology1.equals((Object)julianChronology0));
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology1, julianChronology0);
      assertEquals(31083663600000L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotNull(julianChronology0);
      
      int int0 = julianChronology0.getWeeksInYear(0);
      assertEquals(53, int0);
      
      int int1 = julianChronology0.getMonthOfYear(968L, (-3179));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Chronology chronology0 = julianChronology0.withZone((DateTimeZone) null);
      assertNotNull(chronology0);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      
      try { 
        julianChronology0.getDateMidnightMillis((-292269054), (-292269054), (-292269054));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -292269054 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      long long0 = julianChronology0.getAverageMillisPerYearDividedByTwo();
      assertEquals(15778800000L, long0);
      
      JulianChronology julianChronology1 = JulianChronology.getInstance();
      assertNotNull(julianChronology1);
      assertFalse(julianChronology1.equals((Object)julianChronology0));
      assertNotSame(julianChronology1, julianChronology0);
      
      long long1 = julianChronology1.getAverageMillisPerMonth();
      assertFalse(julianChronology1.equals((Object)julianChronology0));
      assertFalse(long1 == long0);
      assertNotSame(julianChronology1, julianChronology0);
      assertEquals(2629800000L, long1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      long long0 = julianChronology0.getAverageMillisPerMonth();
      assertEquals(2629800000L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      int int0 = 3145;
      int int1 = JulianChronology.adjustYearForSet(3145);
      assertTrue(int1 == int0);
      assertEquals(3145, int1);
      
      int int2 = julianChronology0.getDayOfMonth(3145, 990);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(357599, int2);
      
      int int3 = julianChronology0.getDayOfYear(1440L, 990);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(357933, int3);
      
      int int4 = julianChronology0.getDaysInYear(990);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(365, int4);
      
      long long0 = julianChronology0.getAverageMillisPerYear();
      assertEquals(31557600000L, long0);
      
      long long1 = julianChronology0.getYearDifference(365, 357599);
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      
      // Undeclared exception!
      try { 
        JulianChronology.adjustYearForSet(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      long long0 = 1L;
      int int0 = julianChronology0.getDaysInMonthMax(1L);
      assertEquals(31, int0);
      
      long long1 = (-71L);
      // Undeclared exception!
      try { 
        julianChronology0.getDayOfMonth((-71L), 1996, 136);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 135
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotNull(julianChronology0);
      
      julianChronology0.assemble((AssembledChronology.Fields) null);
      int int0 = JulianChronology.adjustYearForSet(421);
      assertEquals(421, int0);
      
      JulianChronology julianChronology1 = (JulianChronology)julianChronology0.withUTC();
      assertNotNull(julianChronology1);
      assertFalse(julianChronology1.equals((Object)julianChronology0));
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology1, julianChronology0);
      
      JulianChronology julianChronology2 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotNull(julianChronology2);
      assertFalse(julianChronology2.equals((Object)julianChronology1));
      assertSame(julianChronology2, julianChronology0);
      assertNotSame(julianChronology2, julianChronology1);
      
      long long0 = julianChronology0.getApproxMillisAtEpochDividedByTwo();
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertNotSame(julianChronology0, julianChronology1);
      assertSame(julianChronology0, julianChronology2);
      assertEquals(31083663600000L, long0);
      
      int int1 = julianChronology0.getMinYear();
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(int1 == int0);
      assertNotSame(julianChronology0, julianChronology1);
      assertSame(julianChronology0, julianChronology2);
      assertEquals((-292269054), int1);
      
      long long1 = julianChronology2.getAverageMillisPerYear();
      assertFalse(julianChronology2.equals((Object)julianChronology1));
      assertFalse(long1 == long0);
      assertSame(julianChronology2, julianChronology0);
      assertNotSame(julianChronology2, julianChronology1);
      assertEquals(31557600000L, long1);
      
      long long2 = julianChronology1.calculateFirstDayOfYearMillis((-292269054));
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology1.equals((Object)julianChronology2));
      assertFalse(julianChronology1.equals((Object)julianChronology0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertNotSame(julianChronology0, julianChronology1);
      assertSame(julianChronology0, julianChronology2);
      assertNotSame(julianChronology1, julianChronology2);
      assertNotSame(julianChronology1, julianChronology0);
      assertEquals(9223372007850351616L, long2);
      
      long long3 = julianChronology0.getApproxMillisAtEpochDividedByTwo();
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertTrue(long3 == long0);
      assertNotSame(julianChronology0, julianChronology1);
      assertSame(julianChronology0, julianChronology2);
      assertEquals(31083663600000L, long3);
      
      long long4 = julianChronology0.getAverageMillisPerYearDividedByTwo();
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertNotSame(julianChronology0, julianChronology1);
      assertSame(julianChronology0, julianChronology2);
      assertEquals(15778800000L, long4);
      
      JulianChronology julianChronology3 = (JulianChronology)julianChronology0.withUTC();
      assertNotNull(julianChronology3);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology3.equals((Object)julianChronology2));
      assertFalse(julianChronology3.equals((Object)julianChronology0));
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, julianChronology3);
      assertSame(julianChronology0, julianChronology2);
      assertNotSame(julianChronology3, julianChronology2);
      assertNotSame(julianChronology3, julianChronology0);
      assertSame(julianChronology3, julianChronology1);
      
      int int2 = julianChronology0.getMaxYear();
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology0.equals((Object)julianChronology3));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, julianChronology3);
      assertSame(julianChronology0, julianChronology2);
      assertEquals(292272992, int2);
      
      JulianChronology julianChronology4 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology4);
      assertFalse(julianChronology4.equals((Object)julianChronology2));
      assertFalse(julianChronology4.equals((Object)julianChronology0));
      assertNotSame(julianChronology4, julianChronology2);
      assertNotSame(julianChronology4, julianChronology0);
      assertSame(julianChronology4, julianChronology1);
      assertSame(julianChronology4, julianChronology3);
      
      int int3 = julianChronology0.getMaxYear();
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology0.equals((Object)julianChronology4));
      assertFalse(julianChronology0.equals((Object)julianChronology3));
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, julianChronology4);
      assertNotSame(julianChronology0, julianChronology3);
      assertSame(julianChronology0, julianChronology2);
      assertEquals(292272992, int3);
      
      long long5 = julianChronology0.getApproxMillisAtEpochDividedByTwo();
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology0.equals((Object)julianChronology4));
      assertFalse(julianChronology0.equals((Object)julianChronology3));
      assertTrue(long5 == long3);
      assertFalse(long5 == long1);
      assertFalse(long5 == long4);
      assertTrue(long5 == long0);
      assertFalse(long5 == long2);
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, julianChronology4);
      assertNotSame(julianChronology0, julianChronology3);
      assertSame(julianChronology0, julianChronology2);
      assertEquals(31083663600000L, long5);
      
      long long6 = julianChronology0.calculateFirstDayOfYearMillis(623158436);
      assertFalse(long6 == long5);
      assertFalse(long6 == long1);
      assertFalse(long6 == long4);
      assertFalse(long6 == long2);
      assertFalse(long6 == long3);
      assertFalse(long6 == long0);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology0.equals((Object)julianChronology4));
      assertFalse(julianChronology0.equals((Object)julianChronology3));
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, julianChronology4);
      assertNotSame(julianChronology0, julianChronology3);
      assertSame(julianChronology0, julianChronology2);
      assertEquals(1218578418812048384L, long6);
      
      long long7 = julianChronology0.getAverageMillisPerMonth();
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology0.equals((Object)julianChronology4));
      assertFalse(julianChronology0.equals((Object)julianChronology3));
      assertFalse(long7 == long0);
      assertFalse(long7 == long2);
      assertFalse(long7 == long6);
      assertFalse(long7 == long1);
      assertFalse(long7 == long4);
      assertFalse(long7 == long5);
      assertFalse(long7 == long3);
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, julianChronology4);
      assertNotSame(julianChronology0, julianChronology3);
      assertSame(julianChronology0, julianChronology2);
      assertEquals(2629800000L, long7);
      
      boolean boolean0 = julianChronology4.isLeapYear(4);
      assertFalse(julianChronology4.equals((Object)julianChronology2));
      assertFalse(julianChronology4.equals((Object)julianChronology0));
      assertNotSame(julianChronology4, julianChronology2);
      assertNotSame(julianChronology4, julianChronology0);
      assertSame(julianChronology4, julianChronology1);
      assertSame(julianChronology4, julianChronology3);
      assertTrue(boolean0);
      
      long long8 = julianChronology2.calculateFirstDayOfYearMillis(3);
      assertFalse(long8 == long6);
      assertFalse(long8 == long7);
      assertFalse(long8 == long1);
      assertFalse(long8 == long5);
      assertFalse(long8 == long4);
      assertFalse(long8 == long0);
      assertFalse(long8 == long2);
      assertFalse(long8 == long3);
      assertFalse(julianChronology2.equals((Object)julianChronology3));
      assertFalse(julianChronology2.equals((Object)julianChronology4));
      assertFalse(julianChronology2.equals((Object)julianChronology1));
      assertNotSame(julianChronology2, julianChronology3);
      assertNotSame(julianChronology2, julianChronology4);
      assertSame(julianChronology2, julianChronology0);
      assertNotSame(julianChronology2, julianChronology1);
      assertEquals((-62072697600000L), long8);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotNull(julianChronology0);
      
      long long0 = julianChronology0.getFirstWeekOfYearMillis((-3027));
      assertEquals((-157692182400000L), long0);
      
      int int0 = julianChronology0.getMonthOfYear((-2140L), 1119);
      assertEquals(12, int0);
      
      int int1 = julianChronology0.getDaysInMonthMaxForSet(0L, (-1777));
      assertFalse(int1 == int0);
      assertEquals(31, int1);
      
      // Undeclared exception!
      try { 
        JulianChronology.getInstance((DateTimeZone) null, (-1084));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -1084
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      int int0 = (-95);
      // Undeclared exception!
      try { 
        JulianChronology.getInstance((DateTimeZone) null, (-95));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -95
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotNull(julianChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = null;
      julianChronology0.assemble((AssembledChronology.Fields) null);
      JulianChronology julianChronology1 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotNull(julianChronology1);
      assertSame(julianChronology1, julianChronology0);
      
      int int0 = 1315;
      int int1 = julianChronology0.getDayOfYear(2251L, 1315);
      assertFalse(int1 == int0);
      assertSame(julianChronology0, julianChronology1);
      assertEquals(239227, int1);
      
      int int2 = julianChronology1.getDaysInYear(454);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(julianChronology1, julianChronology0);
      assertEquals(365, int2);
      
      Chronology chronology0 = julianChronology0.withUTC();
      assertNotNull(chronology0);
      assertFalse(chronology0.equals((Object)julianChronology1));
      assertFalse(chronology0.equals((Object)julianChronology0));
      assertSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, chronology0);
      assertNotSame(chronology0, julianChronology1);
      assertNotSame(chronology0, julianChronology0);
      
      Chronology chronology1 = julianChronology0.withUTC();
      assertNotNull(chronology1);
      assertFalse(julianChronology0.equals((Object)chronology0));
      assertFalse(chronology1.equals((Object)julianChronology0));
      assertFalse(chronology1.equals((Object)julianChronology1));
      assertSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, chronology1);
      assertNotSame(julianChronology0, chronology0);
      assertNotSame(chronology1, julianChronology0);
      assertNotSame(chronology1, julianChronology1);
      assertSame(chronology1, chronology0);
      
      long long0 = julianChronology0.getApproxMillisAtEpochDividedByTwo();
      assertFalse(julianChronology0.equals((Object)chronology1));
      assertFalse(julianChronology0.equals((Object)chronology0));
      assertSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, chronology1);
      assertNotSame(julianChronology0, chronology0);
      assertEquals(31083663600000L, long0);
      
      int int3 = julianChronology0.getMinYear();
      assertFalse(julianChronology0.equals((Object)chronology1));
      assertFalse(julianChronology0.equals((Object)chronology0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, chronology1);
      assertNotSame(julianChronology0, chronology0);
      assertEquals((-292269054), int3);
      
      long long1 = julianChronology0.getApproxMillisAtEpochDividedByTwo();
      assertFalse(julianChronology0.equals((Object)chronology1));
      assertFalse(julianChronology0.equals((Object)chronology0));
      assertTrue(long1 == long0);
      assertSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, chronology1);
      assertNotSame(julianChronology0, chronology0);
      assertEquals(31083663600000L, long1);
      
      int int4 = 623158436;
      JulianChronology julianChronology2 = JulianChronology.getInstance();
      assertNotNull(julianChronology2);
      assertFalse(julianChronology2.equals((Object)chronology0));
      assertFalse(julianChronology2.equals((Object)chronology1));
      assertNotSame(julianChronology2, chronology0);
      assertSame(julianChronology2, julianChronology1);
      assertNotSame(julianChronology2, chronology1);
      assertSame(julianChronology2, julianChronology0);
      
      try { 
        julianChronology0.getDateMidnightMillis(454, 623158436, (-1828));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 623158436 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      Chronology chronology0 = julianChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      
      boolean boolean0 = julianChronology0.isLeapYear(7);
      assertSame(julianChronology0, chronology0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotNull(julianChronology0);
      
      int int0 = julianChronology0.getDaysInYearMonth(4, 2);
      assertEquals(29, int0);
      
      JulianChronology julianChronology1 = JulianChronology.getInstance();
      assertNotNull(julianChronology1);
      assertSame(julianChronology1, julianChronology0);
      
      int int1 = JulianChronology.adjustYearForSet((-2001));
      assertFalse(int1 == int0);
      assertEquals((-2000), int1);
      
      int int2 = julianChronology0.getMaxYear();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(julianChronology0, julianChronology1);
      assertEquals(292272992, int2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = 4064;
      JulianChronology julianChronology1 = null;
      try {
        julianChronology1 = new JulianChronology(julianChronology0, julianChronology0, 4064);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 4064
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      long long0 = julianChronology0.getAverageMillisPerMonth();
      assertEquals(2629800000L, long0);
      
      int int0 = JulianChronology.adjustYearForSet(573);
      assertEquals(573, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      // Undeclared exception!
      try { 
        julianChronology0.getTotalMillisByYearMonth(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      try { 
        julianChronology0.getDateMidnightMillis((-292269054), (-292269054), (-292269054));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -292269054 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      long long0 = julianChronology0.getYearMillis(2702);
      assertEquals(23101286400000L, long0);
      
      long long1 = julianChronology0.calculateFirstDayOfYearMillis(393);
      assertFalse(long1 == long0);
      assertEquals((-49765190400000L), long1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      JulianChronology julianChronology1 = JulianChronology.getInstance();
      assertNotNull(julianChronology1);
      assertSame(julianChronology1, julianChronology0);
      
      // Undeclared exception!
      try { 
        JulianChronology.adjustYearForSet(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        JulianChronology.adjustYearForSet(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      JulianChronology julianChronology1 = null;
      try {
        julianChronology1 = new JulianChronology(julianChronology0, julianChronology0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotNull(julianChronology0);
      
      Chronology chronology0 = julianChronology0.withZone((DateTimeZone) null);
      assertNotNull(chronology0);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      
      long long0 = julianChronology0.getAverageMillisPerMonth();
      assertSame(julianChronology0, chronology0);
      assertEquals(2629800000L, long0);
      
      long long1 = julianChronology0.setYear((-1L), (-1921));
      assertFalse(long1 == long0);
      assertSame(julianChronology0, chronology0);
      assertEquals((-122759107200001L), long1);
      
      int int0 = julianChronology0.getYear((-1L));
      assertSame(julianChronology0, chronology0);
      assertEquals(1969, int0);
      
      JulianChronology julianChronology1 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology1);
      assertFalse(julianChronology1.equals((Object)julianChronology0));
      assertFalse(julianChronology1.equals((Object)chronology0));
      assertNotSame(julianChronology1, julianChronology0);
      assertNotSame(julianChronology1, chronology0);
      
      int int1 = JulianChronology.adjustYearForSet(2162);
      assertFalse(int1 == int0);
      assertEquals(2162, int1);
      
      long long2 = julianChronology0.getDateMidnightMillis(2895, 2, 2);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertNotSame(julianChronology0, julianChronology1);
      assertSame(julianChronology0, chronology0);
      assertEquals(29194646400000L, long2);
      
      int int2 = julianChronology0.getMinYear();
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(julianChronology0, julianChronology1);
      assertSame(julianChronology0, chronology0);
      assertEquals((-292269054), int2);
      
      int int3 = JulianChronology.adjustYearForSet(2162);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(2162, int3);
      
      Chronology chronology1 = julianChronology0.withZone((DateTimeZone) null);
      assertNotNull(chronology1);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(chronology1.equals((Object)julianChronology1));
      assertNotSame(julianChronology0, julianChronology1);
      assertSame(julianChronology0, chronology0);
      assertSame(julianChronology0, chronology1);
      assertSame(chronology1, chronology0);
      assertSame(chronology1, julianChronology0);
      assertNotSame(chronology1, julianChronology1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = julianChronology0.getMinYear();
      assertEquals((-292269054), int0);
      
      try { 
        julianChronology0.getDateMidnightMillis((-292269054), (-292269054), (-292269054));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -292269054 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotNull(julianChronology0);
      
      julianChronology0.assemble((AssembledChronology.Fields) null);
      int int0 = JulianChronology.adjustYearForSet(454);
      assertEquals(454, int0);
      
      JulianChronology julianChronology1 = (JulianChronology)julianChronology0.withUTC();
      assertNotNull(julianChronology1);
      assertFalse(julianChronology1.equals((Object)julianChronology0));
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology1, julianChronology0);
      
      JulianChronology julianChronology2 = (JulianChronology)julianChronology0.withUTC();
      assertNotNull(julianChronology2);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology2.equals((Object)julianChronology0));
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, julianChronology2);
      assertNotSame(julianChronology2, julianChronology0);
      assertSame(julianChronology2, julianChronology1);
      
      long long0 = julianChronology0.getApproxMillisAtEpochDividedByTwo();
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology0.equals((Object)julianChronology2));
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, julianChronology2);
      assertEquals(31083663600000L, long0);
      
      int int1 = julianChronology0.getMinYear();
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology0.equals((Object)julianChronology2));
      assertFalse(int1 == int0);
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, julianChronology2);
      assertEquals((-292269054), int1);
      
      long long1 = julianChronology2.getAverageMillisPerYear();
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology0.equals((Object)julianChronology2));
      assertFalse(julianChronology2.equals((Object)julianChronology0));
      assertFalse(long1 == long0);
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, julianChronology2);
      assertNotSame(julianChronology2, julianChronology0);
      assertSame(julianChronology2, julianChronology1);
      assertEquals(31557600000L, long1);
      
      int int2 = 623158436;
      JulianChronology julianChronology3 = JulianChronology.getInstance();
      assertNotNull(julianChronology3);
      assertFalse(julianChronology3.equals((Object)julianChronology1));
      assertFalse(julianChronology3.equals((Object)julianChronology2));
      assertNotSame(julianChronology3, julianChronology1);
      assertNotSame(julianChronology3, julianChronology2);
      assertSame(julianChronology3, julianChronology0);
      
      long long2 = julianChronology1.calculateFirstDayOfYearMillis((-292269054));
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology0.equals((Object)julianChronology2));
      assertFalse(julianChronology1.equals((Object)julianChronology3));
      assertFalse(julianChronology1.equals((Object)julianChronology0));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertSame(julianChronology0, julianChronology3);
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, julianChronology2);
      assertNotSame(julianChronology1, julianChronology3);
      assertSame(julianChronology1, julianChronology2);
      assertNotSame(julianChronology1, julianChronology0);
      assertEquals(9223372007850351616L, long2);
      
      long long3 = julianChronology0.getApproxMillisAtEpochDividedByTwo();
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology0.equals((Object)julianChronology2));
      assertFalse(long3 == long1);
      assertTrue(long3 == long0);
      assertFalse(long3 == long2);
      assertSame(julianChronology0, julianChronology3);
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, julianChronology2);
      assertEquals(31083663600000L, long3);
      
      long long4 = julianChronology0.getAverageMillisPerYearDividedByTwo();
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology0.equals((Object)julianChronology2));
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertSame(julianChronology0, julianChronology3);
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, julianChronology2);
      assertEquals(15778800000L, long4);
      
      julianChronology0.assemble((AssembledChronology.Fields) null);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology0.equals((Object)julianChronology2));
      assertSame(julianChronology0, julianChronology3);
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, julianChronology2);
      
      JulianChronology julianChronology4 = (JulianChronology)julianChronology0.withUTC();
      assertNotNull(julianChronology4);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology0.equals((Object)julianChronology2));
      assertFalse(julianChronology4.equals((Object)julianChronology3));
      assertFalse(julianChronology4.equals((Object)julianChronology0));
      assertSame(julianChronology0, julianChronology3);
      assertNotSame(julianChronology0, julianChronology4);
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, julianChronology2);
      assertNotSame(julianChronology4, julianChronology3);
      assertNotSame(julianChronology4, julianChronology0);
      assertSame(julianChronology4, julianChronology2);
      assertSame(julianChronology4, julianChronology1);
      
      int int3 = julianChronology0.getMaxYear();
      assertFalse(julianChronology0.equals((Object)julianChronology4));
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology0.equals((Object)julianChronology2));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertSame(julianChronology0, julianChronology3);
      assertNotSame(julianChronology0, julianChronology4);
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology0, julianChronology2);
      assertEquals(292272992, int3);
      
      // Undeclared exception!
      try { 
        JulianChronology.getInstance((DateTimeZone) null, 623158436);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 623158436
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      int int0 = 1622;
      int int1 = julianChronology0.getWeekOfWeekyear(1622);
      assertFalse(int1 == int0);
      assertEquals(51, int1);
      
      int int2 = (-3261);
      int int3 = 2531;
      // Undeclared exception!
      try { 
        julianChronology0.getTotalMillisByYearMonth((-3261), 2531);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2530
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      // Undeclared exception!
      try { 
        julianChronology0.getDayOfMonth((-25534000L), (-2233), (-2233));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2234
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 539;
      JulianChronology julianChronology0 = null;
      try {
        julianChronology0 = new JulianChronology((Chronology) null, (Object) null, 539);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 539
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      int int0 = 0;
      julianChronology0.getDaysInYear((-1731));
      julianChronology0.isLeapDay(0L);
      julianChronology0.getMaxYear();
      julianChronology0.getDayOfYear(2486L, 2353);
      julianChronology0.getDayOfMonth(0, 0, 1);
      julianChronology0.getMonthOfYear(0);
      julianChronology0.isLeapDay((-1218));
      julianChronology0.getDayOfYear((-2485L), 0);
      julianChronology0.getDaysInMonthMaxForSet(365, (-958));
      julianChronology0.isLeapDay(6L);
      try { 
        julianChronology0.getDateMidnightMillis(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }
}
