/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:47:59 GMT 2018
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MockPartial;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.field.TestBaseDateTimeField;
import org.joda.time.field.TestPreciseDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LenientDateTimeField_ESTest extends LenientDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      LenientDateTimeField.getInstance(dateTimeField0, buddhistChronology0);
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      lenientDateTimeField0.set(0L, Integer.MIN_VALUE);
      lenientDateTimeField0.isLenient();
      buddhistChronology0.add(0L, 0L, (-1));
      lenientDateTimeField0.set(0L, 0);
      LenientDateTimeField.getInstance(lenientDateTimeField0, buddhistChronology0);
      LenientDateTimeField.getInstance(dateTimeField0, buddhistChronology0);
      LenientDateTimeField.getInstance(lenientDateTimeField0, buddhistChronology0);
      lenientDateTimeField0.set((-855L), 0);
      lenientDateTimeField0.isLenient();
      MockDate mockDate0 = new MockDate((-506), 0, (-726));
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.minusDays((-1887));
      LocalDate localDate2 = localDate1.withCenturyOfEra(93);
      LocalDate localDate3 = localDate2.minusYears((-1887));
      LocalDate localDate4 = localDate3.plusYears(550);
      Locale locale0 = Locale.FRENCH;
      lenientDateTimeField0.getAsText((ReadablePartial) localDate4, 890, locale0);
      lenientDateTimeField0.isLenient();
      lenientDateTimeField0.isLenient();
      lenientDateTimeField0.set((long) 1, (-1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = buddhistChronology0.months();
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      LenientDateTimeField.getInstance(unsupportedDateTimeField0, buddhistChronology0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      MockPartial mockPartial0 = (MockPartial)MockPartial.EMPTY_INSTANCE;
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = (-1676);
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      buddhistChronology0.validate(mockPartial0, intArray0);
      Chronology chronology0 = lenientChronology0.withUTC();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(unsupportedDateTimeField0, chronology0);
      // Undeclared exception!
      try { 
        lenientDateTimeField0.set(1662L, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // weekyear field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) null, dateTimeField0, 1);
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(skipUndoDateTimeField0, (Chronology) null);
      lenientDateTimeField0.roundCeiling(1);
      lenientDateTimeField0.isLenient();
      lenientDateTimeField0.roundHalfEven((-1L));
      buddhistChronology0.toString();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Chronology chronology0 = gregorianChronology0.withUTC();
      LenientDateTimeField.getInstance(skipUndoDateTimeField0, chronology0);
      lenientDateTimeField0.isLenient();
      // Undeclared exception!
      try { 
        lenientDateTimeField0.set((-1L), (-690));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.LenientDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      lenientDateTimeField0.set((long) 1, 1657);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      DateTimeField dateTimeField1 = LenientDateTimeField.getInstance(dateTimeField0, buddhistChronology0);
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField1, buddhistChronology0);
      // Undeclared exception!
      try { 
        lenientDateTimeField0.set(2053L, (-3763));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      lenientDateTimeField0.isLenient();
      LenientDateTimeField.getInstance(lenientDateTimeField0, buddhistChronology0);
      lenientDateTimeField0.set(4664L, 1);
      LenientDateTimeField.getInstance(dateTimeField0, buddhistChronology0);
      lenientDateTimeField0.set(0L, 1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      LenientDateTimeField.getInstance(dateTimeField0, buddhistChronology0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Chronology chronology0 = copticChronology0.withUTC();
      LocalDateTime localDateTime0 = new LocalDateTime();
      copticChronology0.get((ReadablePartial) localDateTime0, (-399L));
      LenientDateTimeField lenientDateTimeField0 = null;
      try {
        lenientDateTimeField0 = new LenientDateTimeField((DateTimeField) null, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      LenientDateTimeField.getInstance(lenientDateTimeField0, buddhistChronology0);
      lenientDateTimeField0.isLenient();
      lenientDateTimeField0.set((long) 1, 1);
      Locale locale0 = Locale.ENGLISH;
      lenientDateTimeField0.isLenient();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      LenientDateTimeField.getInstance(testBaseDateTimeField_MockBaseDateTimeField0, buddhistChronology0);
      lenientDateTimeField0.isLenient();
      LenientDateTimeField.getInstance(testBaseDateTimeField_MockBaseDateTimeField0, buddhistChronology0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeFieldType.centuryOfEra();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Chronology chronology0 = iSOChronology0.withUTC();
      LenientDateTimeField.getInstance((DateTimeField) null, chronology0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      System.setCurrentTimeMillis((-1256L));
  }
}
