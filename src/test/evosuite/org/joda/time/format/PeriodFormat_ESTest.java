/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:39:27 GMT 2018
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.Writer;
import java.net.URI;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.PeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodFormat_ESTest extends PeriodFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("'5=");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      Locale.lookup(linkedList1, linkedHashSet0);
      Years years0 = Years.years(3);
      PeriodType periodType0 = years0.getPeriodType();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, (Locale) null, periodType0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      periodFormat_DynamicWordBased0.parseInto((ReadWritablePeriod) null, "'5=", (-518), (Locale) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormat_DynamicWordBased0);
      
      File file0 = MockFile.createTempFile("org.joda.time.TestAbstractPartial$MockProperty0Val", "org.joda.time.TestAbstractPartial$MockProperty0Val");
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/var/folders/_x/tfjywptd7r50k3bqzfvdz4pc0000gn/T/org.joda.time.TestAbstractPartial$MockProperty0Val0org.joda.time.TestAbstractPartial$MockProperty0Val", file0.toString());
      assertEquals("org.joda.time.TestAbstractPartial$MockProperty0Val0org.joda.time.TestAbstractPartial$MockProperty0Val", file0.getName());
      assertEquals("/var/folders/_x/tfjywptd7r50k3bqzfvdz4pc0000gn/T", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertNotNull(file0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      assertNotNull(mockPrintWriter0);
      
      Hours hours0 = Hours.ZERO;
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertNotNull(hours0);
      
      Locale locale0 = periodFormatter0.getLocale();
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNull(locale0);
      
      periodFormat_DynamicWordBased0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) hours0, (Locale) null);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isHidden());
      assertTrue(file0.exists());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/var/folders/_x/tfjywptd7r50k3bqzfvdz4pc0000gn/T/org.joda.time.TestAbstractPartial$MockProperty0Val0org.joda.time.TestAbstractPartial$MockProperty0Val", file0.toString());
      assertEquals("org.joda.time.TestAbstractPartial$MockProperty0Val0org.joda.time.TestAbstractPartial$MockProperty0Val", file0.getName());
      assertEquals("/var/folders/_x/tfjywptd7r50k3bqzfvdz4pc0000gn/T", file0.getParent());
      assertEquals(0L, file0.length());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      
      PeriodFormatter periodFormatter1 = PeriodFormat.getDefault();
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertNotSame(periodFormatter1, periodFormatter0);
      assertNotNull(periodFormatter1);
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodFormat.getDefault();
      PeriodType.years();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased();
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-690), (-1138), (-1138), (-690));
      Locale locale0 = Locale.UK;
      periodFormat_DynamicWordBased0.parseInto(mutablePeriod0, "e#k%9,m,n\"z|", (-1138), locale0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      PeriodFormat.wordBased(locale0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        PeriodFormat.wordBased((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[0];
      Days days0 = Days.MIN_VALUE;
      assertEquals(1, days0.size());
      assertEquals(Integer.MIN_VALUE, days0.getDays());
      assertNotNull(days0);
      
      PeriodFormatter periodFormatter0 = PeriodFormat.getDefault();
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.getDefault();
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      Locale locale0 = new Locale(")tli72`|k4");
      periodFormat_DynamicWordBased0.calculatePrintedLength(mutablePeriod0, locale0);
      Locale locale1 = Locale.ROOT;
      locale1.getDisplayName();
      periodFormat_DynamicWordBased0.parseInto(mutablePeriod0, (String) null, (-3859), locale1);
      PeriodFormatter periodFormatter1 = PeriodFormat.wordBased();
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      mutablePeriod1.setHours(0);
      int int0 = periodFormat_DynamicWordBased0.parseInto(mutablePeriod1, "", 0, locale1);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased1 = new PeriodFormat.DynamicWordBased(periodFormatter1);
      PeriodFormat.wordBased();
      periodFormat_DynamicWordBased1.countFieldsToPrint(mutablePeriod0, 0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ")tli72`|k4");
      StringBuffer stringBuffer1 = stringBuffer0.insert(0, (-3018));
      stringBuffer1.append(14);
      MutablePeriod mutablePeriod2 = new MutablePeriod(0, 0, 0, 0);
      periodFormat_DynamicWordBased1.printTo(stringBuffer1, (ReadablePeriod) mutablePeriod2, locale0);
      PeriodFormat periodFormat0 = new PeriodFormat();
      periodFormat_DynamicWordBased0.countFieldsToPrint(mutablePeriod0, 0, locale1);
      PeriodFormat.wordBased(locale0);
      Months months0 = Months.FIVE;
      Months months1 = months0.multipliedBy((-3018));
      int int1 = periodFormat_DynamicWordBased0.calculatePrintedLength(months1, locale0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("Jkv*5$FLt");
      Period period0 = Period.hours((-1164));
      Weeks weeks0 = Weeks.ONE;
      Period period1 = period0.minus(weeks0);
      Duration duration0 = period1.toStandardDuration();
      Days days0 = duration0.toStandardDays();
      days0.dividedBy((-1799));
      Locale locale0 = new Locale("4", "=6,9B/");
      weeks0.multipliedBy((-1953161305));
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        stringBuffer0.insert((-1799), (double) (-1164));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1799
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = new Locale("PLT", "PLT");
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased(locale0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      Period period0 = Period.minutes(0);
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      int int0 = periodFormat_DynamicWordBased0.calculatePrintedLength(period0, locale1);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_OFFSET_DATE;
      dateTimeFormatter0.getLocale();
      long long0 = 21260793600000L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      julianChronology0.withUTC();
      ZoneInfoProvider zoneInfoProvider0 = null;
      try {
        zoneInfoProvider0 = new ZoneInfoProvider((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No file directory provided
         //
         verifyException("org.joda.time.tz.ZoneInfoProvider", e);
      }
  }
}
