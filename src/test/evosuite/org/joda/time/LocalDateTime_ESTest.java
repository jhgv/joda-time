/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:21:27 GMT 2018
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import junit.framework.Assert;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MockZone;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestBasePartial;
import org.joda.time.TestDateMidnight_Basics;
import org.joda.time.TestDateTimeZone;
import org.joda.time.TestDateTime_Basics;
import org.joda.time.TestDuration_Basics;
import org.joda.time.TestInstant_Basics;
import org.joda.time.TestInterval_Constructors;
import org.joda.time.TestLocalDateTime_Basics;
import org.joda.time.TestLocalTime_Basics;
import org.joda.time.TestMonthDay_Basics;
import org.joda.time.TestMutableDateTime_Basics;
import org.joda.time.TestMutableInterval_Basics;
import org.joda.time.TestMutableInterval_Constructors;
import org.joda.time.TestMutableInterval_Updates;
import org.joda.time.TestTimeOfDay_Basics;
import org.joda.time.TestYearMonthDay_Basics;
import org.joda.time.TestYearMonth_Basics;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.convert.ConverterManager;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalDateTime_ESTest extends LocalDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-20);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=l9z{_ZI?");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.getYearOfEra();
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(0);
      localDateTime1.era();
      localDateTime0.millisOfDay();
      // Undeclared exception!
      try { 
        localDateTime0.minusYears((-2140253062));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2140255076 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestMonthDay_Basics testMonthDay_Basics0 = new TestMonthDay_Basics("");
      TestMonthDay_Basics.MockMD testMonthDay_Basics_MockMD0 = testMonthDay_Basics0.new MockMD();
      Chronology chronology0 = testMonthDay_Basics_MockMD0.getChronology();
      LocalDateTime localDateTime0 = LocalDateTime.now(chronology0);
      localDateTime0.toString();
      localDateTime0.withPeriodAdded((ReadablePeriod) null, (-2147483638));
      // Undeclared exception!
      try { 
        localDateTime0.getValue((-2147483638));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -2147483638
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Duration duration0 = new Duration(126L, 0L);
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) duration0);
      Duration duration1 = duration0.multipliedBy(1000L);
      duration0.isLongerThan(duration1);
      localDateTime0.toDate();
      int int0 = new Integer(2945);
      localDateTime1.getWeekOfWeekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      localDateTime1.isSupported(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2024), (-2024), (-2024));
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      localDateTime0.toLocalTime();
      localDateTime0.getMillisOfDay();
      localDateTime0.plusSeconds((-2024));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)76;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(103);
      localDateTime1.getMinuteOfHour();
      localDateTime1.getValue((byte)2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Duration duration0 = Duration.ZERO;
      int int0 = 37;
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(37);
      localDateTime1.withMillisOfSecond(37);
      // Undeclared exception!
      try { 
        localDateTime1.withDayOfWeek(37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 37 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2024), (-2024), (-2024));
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.era();
      localDateTime_Property0.withMaximumValue();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2024), (-2024), (-2147482090));
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      localDateTime0.getMinuteOfHour();
      localDateTime0.withYearOfEra(3703);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      int int0 = 2147483531;
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("'S_@P.n_XgsDum~&q:");
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      // Undeclared exception!
      try { 
        localDateTime0.withFieldAdded(durationFieldType0, 2147483531);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147481751 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte) (-42);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(103);
      localDateTime1.getMinuteOfHour();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockDate mockDate0 = new MockDate((-2024), (-2024), (-1977));
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      localDateTime0.getWeekyear();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(2);
      localDateTime1.getMonthOfYear();
      localDateTime0.getMillisOfSecond();
      LocalDateTime localDateTime2 = localDateTime1.withWeekOfWeekyear(2);
      localDateTime2.getEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DurationField durationField0 = durationFieldType0.getField(mockNullZoneChronology0);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, durationField0);
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      localDateTime2.get(dateTimeFieldType1);
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.weekyear();
      Duration duration0 = Duration.parse((String) null);
      Duration.standardMinutes(811L);
      duration0.minus(0L);
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.hourOfHalfday();
      localDateTime2.property(dateTimeFieldType2);
      DurationFieldType durationFieldType1 = dateTimeFieldType2.getRangeDurationType();
      localDateTime_Property0.getField();
      localDateTime1.get(dateTimeFieldType2);
      LocalDateTime localDateTime3 = localDateTime2.withCenturyOfEra(62481);
      localDateTime3.withDurationAdded(duration0, (-788));
      localDateTime0.getLocalMillis();
      localDateTime2.isSupported(durationFieldType1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(445L);
      LocalDateTime localDateTime1 = localDateTime0.withYear(1415);
      int int0 = 1;
      localDateTime0.withCenturyOfEra(1);
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      DateTimeZone.getProvider();
      testDateTimeZone_MockDateTimeZone0.convertUTCToLocal(445L);
      localDateTime1.toDateTime((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        localDateTime1.toString("|)Vp&ZUnT_Soy@?rU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeFieldType.secondOfMinute();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Partial partial0 = new Partial(localDateTime0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfEra();
      partial0.equals(localDateTime0);
      localDateTime0.compareTo((ReadablePartial) partial0);
      localDateTime_Property0.getChronology();
      // Undeclared exception!
      try { 
        localDateTime0.getField((-3015));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -3015
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      localDateTime0.get(dateTimeFieldType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      localDateTime0.secondOfMinute();
      localDateTime0.getMillisOfSecond();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();
      dateTimeFieldType1.getDurationType();
      localDateTime0.get(dateTimeFieldType1);
      LocalDateTime localDateTime1 = localDateTime0.withFields((ReadablePartial) null);
      localDateTime1.withWeekyear(2014);
      localDateTime1.withYearOfEra(320);
      localDateTime1.secondOfMinute();
      LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra(13);
      Minutes minutes0 = Minutes.ZERO;
      localDateTime2.withPeriodAdded(minutes0, 13);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      localDateTime2.millisOfDay();
      localDateTime2.toString((String) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Duration duration0 = new Duration(126L, 0L);
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) duration0);
      Duration duration1 = duration0.multipliedBy(977L);
      duration0.isLongerThan(duration1);
      localDateTime0.toDate();
      localDateTime1.getValue(1);
      LocalDateTime localDateTime2 = LocalDateTime.now();
      localDateTime2.hourOfDay();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfCentury();
      LocalDateTime localDateTime3 = localDateTime_Property0.addToCopy((-387L));
      localDateTime3.withMonthOfYear(1);
      localDateTime3.withYear(2);
      localDateTime1.dayOfYear();
      localDateTime3.weekOfWeekyear();
      LocalDateTime localDateTime4 = localDateTime1.withWeekyear(1);
      localDateTime4.getDayOfWeek();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      localDateTime4.plusMonths(1);
      // Undeclared exception!
      try { 
        localDateTime4.withTime(61234, 0, 1, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 61234 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusMonths((-964));
      LocalTime localTime0 = new LocalTime((long) (-964));
      localTime0.withLocalMillis((-964));
      String string0 = "";
      localDateTime1.equals(localDateTime0);
      // Undeclared exception!
      try { 
        Seconds.parseSeconds("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Minutes minutes0 = Minutes.THREE;
      Object object0 = new Object();
      minutes0.equals(object0);
      Minutes minutes1 = minutes0.negated();
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) minutes1);
      localDateTime0.toDateTime();
      LocalDate localDate0 = localDateTime1.toLocalDate();
      Partial partial0 = new Partial(localDate0);
      org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      dateTimeFormatter0.getPrinter();
      org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      // Undeclared exception!
      try { 
        LocalDateTime.parse("org.joda.time.TestMutablePeriod_Basics$MockMutablePeriod", dateTimeFormatter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.TestMutablePeriod_...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(3145L, (DateTimeZone) null);
      int int0 = 70;
      LocalDateTime localDateTime1 = localDateTime0.minusHours(70);
      LocalDateTime localDateTime2 = localDateTime1.plusMinutes(70);
      localDateTime2.minusWeeks(70);
      localDateTime0.yearOfCentury();
      TestMutableInterval_Constructors testMutableInterval_Constructors0 = new TestMutableInterval_Constructors("O NS\"4gRxH");
      TestMutableInterval_Constructors.MockInterval testMutableInterval_Constructors_MockInterval0 = testMutableInterval_Constructors0.new MockInterval();
      DateTime dateTime0 = testMutableInterval_Constructors_MockInterval0.getStart();
      DateTime dateTime1 = dateTime0.withZoneRetainFields((DateTimeZone) null);
      Date date0 = dateTime1.toDate();
      LocalDateTime localDateTime3 = LocalDateTime.fromDateFields(date0);
      // Undeclared exception!
      try { 
        localDateTime3.withSecondOfMinute(70);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 70 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(8, 8, 5);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      localDateTime0.centuryOfEra();
      localDateTime0.withTime(5, 8, 5, 5);
      localDateTime0.withDate(5, 8, 8);
      localDateTime0.era();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusDays((-2583));
      LocalDateTime localDateTime2 = localDateTime1.minusYears((-2583));
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      Duration duration0 = Duration.ZERO;
      TestDateMidnight_Basics testDateMidnight_Basics0 = new TestDateMidnight_Basics("");
      TestDateMidnight_Basics.MockInstant testDateMidnight_Basics_MockInstant0 = testDateMidnight_Basics0.new MockInstant();
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, testDateMidnight_Basics_MockInstant0);
      Duration duration1 = mutablePeriod0.toDurationFrom(testDateMidnight_Basics_MockInstant0);
      PeriodType periodType0 = PeriodType.standard();
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("");
      TestMutableDateTime_Basics.MockInstant testMutableDateTime_Basics_MockInstant0 = testMutableDateTime_Basics0.new MockInstant();
      Chronology chronology0 = testMutableDateTime_Basics_MockInstant0.getChronology();
      Period period0 = duration1.toPeriod(periodType0, chronology0);
      Duration duration2 = period0.toStandardDuration();
      localDateTime0.minus((ReadableDuration) duration2);
      LocalDateTime localDateTime3 = localDateTime2.withFieldAdded(durationFieldType0, (-2583));
      localDateTime1.getDayOfYear();
      ConverterManager.getInstance();
      TestLocalDateTime_Basics testLocalDateTime_Basics0 = new TestLocalDateTime_Basics("z$;\"JGuRx||r4I\"e ");
      TestLocalDateTime_Basics.MockInstant testLocalDateTime_Basics_MockInstant0 = testLocalDateTime_Basics0.new MockInstant();
      Chronology chronology1 = testLocalDateTime_Basics_MockInstant0.getChronology();
      durationFieldType0.getField(chronology1);
      localDateTime3.plusHours(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.monthOfYear();
      LocalDateTime localDateTime4 = localDateTime_Property0.addWrapFieldToCopy((-2583));
      LocalDateTime localDateTime5 = localDateTime4.minusSeconds((-2583));
      localDateTime0.withDayOfMonth(19);
      localDateTime0.getYearOfEra();
      localDateTime2.dayOfMonth();
      localDateTime_Property0.addToCopy(178958986);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      localDateTime1.plusSeconds(1794);
      localDateTime5.getLocalMillis();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusDays((-2583));
      LocalDateTime localDateTime2 = localDateTime1.minusYears((-2583));
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      LocalDateTime localDateTime3 = localDateTime2.withFieldAdded(durationFieldType0, (-2583));
      localDateTime1.getDayOfYear();
      ConverterManager.getInstance();
      TestLocalDateTime_Basics testLocalDateTime_Basics0 = new TestLocalDateTime_Basics("z$;\"JGuRx||r4I\"e ");
      TestLocalDateTime_Basics.MockInstant testLocalDateTime_Basics_MockInstant0 = testLocalDateTime_Basics0.new MockInstant();
      Chronology chronology0 = testLocalDateTime_Basics_MockInstant0.getChronology();
      durationFieldType0.getField(chronology0);
      localDateTime3.plusHours(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.monthOfYear();
      LocalDateTime localDateTime4 = localDateTime_Property0.addWrapFieldToCopy((-2583));
      localDateTime4.minusSeconds((-2583));
      localDateTime0.withDayOfMonth(19);
      localDateTime2.dayOfMonth();
      LocalDateTime localDateTime5 = localDateTime_Property0.addToCopy(178958986);
      localDateTime5.toString();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime((-936L), dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(11);
      localDateTime1.getCenturyOfEra();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics("p{4:L0'j*AI_[xdS");
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      Chronology chronology0 = testYearMonth_Basics_MockYM0.getChronology();
      // Undeclared exception!
      try { 
        localDateTime0.getField(91, chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 91
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withDurationAdded((ReadableDuration) null, (-964));
      LocalTime localTime0 = new LocalTime((long) (-964));
      localTime0.withLocalMillis((-964));
      localDateTime0.equals(localDateTime1);
      LocalDateTime localDateTime2 = localDateTime0.plusYears(2010);
      localDateTime2.getYear();
      localDateTime0.compareTo((ReadablePartial) localDateTime2);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>(0, 4024);
      Locale.lookup(linkedList0, linkedHashSet0);
      localDateTime0.minusWeeks(1668);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      int int0 = 53;
      // Undeclared exception!
      try { 
        localDateTime0.withFieldAdded(durationFieldType0, 53);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(950, 2682, 950);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(950, "T[8/");
      Date date0 = localDateTime0.toDate((TimeZone) simpleTimeZone0);
      LocalDateTime localDateTime1 = LocalDateTime.fromDateFields(date0);
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      LocalDateTime localDateTime2 = localDateTime1.withFieldAdded(durationFieldType0, 2682);
      int int0 = 1553;
      // Undeclared exception!
      try { 
        localDateTime2.withDayOfMonth(1553);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1553 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(10000000000000000L);
      int int0 = 8;
      LocalDateTime localDateTime1 = localDateTime0.minusHours(8);
      Partial partial0 = new Partial(localDateTime0);
      org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      int int1 = 66;
      Integer integer0 = new Integer(66);
      org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      DateTimePrinter dateTimePrinter0 = dateTimeFormatter1.getPrinter();
      org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withOffsetParsed();
      DateTimeParser dateTimeParser0 = dateTimeFormatter2.getParser();
      org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      Integer.remainderUnsigned(2147483617, 66);
      Locale.forLanguageTag("B6^kMA6j2Jr#UK`ai_");
      StringBuffer stringBuffer0 = new StringBuffer("Invalid index: ");
      StringBuffer stringBuffer1 = stringBuffer0.reverse();
      StringBuffer stringBuffer2 = stringBuffer1.append((Object) localDateTime1);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Invalid index: ");
      // Undeclared exception!
      try { 
        stringBuffer2.append((CharSequence) stringBuilder0, 2147483617, 2128);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 2147483617, end 2128, s.length() 15
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Locale locale0 = Locale.JAPAN;
      try { 
        localDateTime0.toString("YKI9u17BQjxCzP ", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      localDateTime0.indexOf(dateTimeFieldType0);
      TestLocalDateTime_Basics testLocalDateTime_Basics0 = new TestLocalDateTime_Basics("Zone must not be null");
      TestLocalDateTime_Basics.MockInstant testLocalDateTime_Basics_MockInstant0 = testLocalDateTime_Basics0.new MockInstant();
      localDateTime0.equals(testLocalDateTime_Basics_MockInstant0);
      LocalDateTime localDateTime1 = localDateTime0.plusMonths((-553));
      localDateTime0.minusMinutes(3);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfYear();
      localDateTime_Property0.addWrapFieldToCopy(3);
      // Undeclared exception!
      try { 
        localDateTime1.toDate((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      TestLocalTime_Basics testLocalTime_Basics0 = new TestLocalTime_Basics("Nm>U`<.<JG>Cx");
      TestLocalTime_Basics.MockInstant testLocalTime_Basics_MockInstant0 = testLocalTime_Basics0.new MockInstant();
      // Undeclared exception!
      try { 
        localDateTime0.isAfter(testLocalTime_Basics_MockInstant0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Duration duration0 = new Duration(126L, 0L);
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) duration0);
      Duration duration1 = duration0.multipliedBy(1000L);
      duration0.isLongerThan(duration1);
      localDateTime0.toDate();
      LocalDateTime localDateTime2 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.hourOfDay();
      LocalDateTime.Property localDateTime_Property1 = localDateTime0.yearOfCentury();
      LocalDateTime localDateTime3 = localDateTime_Property1.addToCopy((-387L));
      localDateTime1.dayOfYear();
      localDateTime3.weekOfWeekyear();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      mockNullZoneChronology0.getZone();
      DateTimeZone.getProvider();
      localDateTime0.equals((Object) null);
      LocalDateTime.Property localDateTime_Property2 = localDateTime0.millisOfDay();
      localDateTime_Property1.withMinimumValue();
      localDateTime0.equals(localDateTime_Property0);
      localDateTime2.getDayOfMonth();
      localDateTime_Property2.getChronology();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstant_Basics testInstant_Basics0 = new TestInstant_Basics("R,[W%jM 0\"B1ci6l`");
      assertNotNull(testInstant_Basics0);
      
      TestInstant_Basics.MockInstant testInstant_Basics_MockInstant0 = testInstant_Basics0.new MockInstant();
      assertNotNull(testInstant_Basics_MockInstant0);
      assertNull(testInstant_Basics_MockInstant0.toString());
      assertEquals(1018009440000L, testInstant_Basics_MockInstant0.getMillis());
      
      Chronology chronology0 = testInstant_Basics_MockInstant0.getChronology();
      assertNotNull(chronology0);
      assertNull(testInstant_Basics_MockInstant0.toString());
      assertEquals(1018009440000L, testInstant_Basics_MockInstant0.getMillis());
      
      LocalDateTime localDateTime0 = new LocalDateTime(3600023L, chronology0);
      assertNotNull(localDateTime0);
      assertNull(testInstant_Basics_MockInstant0.toString());
      assertEquals(1018009440000L, testInstant_Basics_MockInstant0.getMillis());
      assertEquals(4, localDateTime0.size());
      
      Date date0 = localDateTime0.toDate();
      assertNotNull(date0);
      assertNull(testInstant_Basics_MockInstant0.toString());
      assertEquals(1018009440000L, testInstant_Basics_MockInstant0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals("Thu Jan 01 01:00:00 GMT 1970", date0.toString());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      localDateTime0.withField(dateTimeFieldType0, 11);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.toLocalTime();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeFieldType.dayOfYear();
      TestInterval_Constructors testInterval_Constructors0 = new TestInterval_Constructors("weekyear");
      TestInterval_Constructors.MockInterval testInterval_Constructors_MockInterval0 = testInterval_Constructors0.new MockInterval();
      Chronology chronology0 = testInterval_Constructors_MockInterval0.getChronology();
      LocalDateTime localDateTime0 = new LocalDateTime((-351L), chronology0);
      LocalDateTime localDateTime1 = localDateTime0.plusDays((-2935));
      localDateTime1.getChronology();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeFieldType.secondOfMinute();
      Partial partial0 = new Partial(localDateTime0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfEra();
      partial0.equals(localDateTime0);
      Chronology chronology0 = localDateTime_Property0.getChronology();
      // Undeclared exception!
      try { 
        partial0.getField((-3015), chronology0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3015
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1165L));
      Seconds seconds0 = Seconds.TWO;
      Seconds seconds1 = seconds0.multipliedBy(2);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      localDateTime_Property0.getAsText();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfFloorCopy();
      LocalDateTime localDateTime2 = localDateTime_Property0.roundHalfFloorCopy();
      LocalDateTime localDateTime3 = localDateTime1.minusMinutes(70);
      LocalDateTime localDateTime4 = localDateTime_Property0.roundHalfCeilingCopy();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      localDateTime4.toDateTime((DateTimeZone) uTCDateTimeZone0);
      localDateTime3.withMillisOfDay(0);
      seconds0.toStandardDuration();
      seconds1.compareTo((BaseSingleFieldPeriod) seconds0);
      localDateTime1.monthOfYear();
      LocalDateTime localDateTime5 = localDateTime4.withEra(1);
      LocalDateTime.Property localDateTime_Property1 = localDateTime2.millisOfSecond();
      localDateTime3.monthOfYear();
      localDateTime5.minusHours(12);
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("");
      TestDateTime_Basics.MockInstant testDateTime_Basics_MockInstant0 = testDateTime_Basics0.new MockInstant();
      Chronology chronology0 = testDateTime_Basics_MockInstant0.getChronology();
      LocalDateTime.now(chronology0);
      localDateTime_Property1.addToCopy((-700));
      // Undeclared exception!
      try { 
        localDateTime5.withMonthOfYear(574);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 574 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null, (Chronology) null);
      int int0 = (-2147483612);
      int int1 = (-1143);
      int int2 = 6472;
      // Undeclared exception!
      try { 
        localDateTime0.minusYears((-2147483612));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2014 + 2147483612
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockZone mockZone0 = new MockZone(60001L, (-1784), (-1784));
      LocalDateTime localDateTime0 = new LocalDateTime(60001L, (DateTimeZone) mockZone0);
      TestLocalDateTime_Basics testLocalDateTime_Basics0 = new TestLocalDateTime_Basics("");
      TestLocalDateTime_Basics.MockInstant testLocalDateTime_Basics_MockInstant0 = testLocalDateTime_Basics0.new MockInstant();
      testLocalDateTime_Basics_MockInstant0.getChronology();
      mockZone0.toTimeZone();
      localDateTime0.millisOfDay();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(2);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      localDateTime0.indexOf(dateTimeFieldType0);
      localDateTime1.getMonthOfYear();
      localDateTime0.getMillisOfSecond();
      LocalDateTime localDateTime2 = localDateTime1.withWeekOfWeekyear(2);
      localDateTime2.getEra();
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DurationField durationField0 = durationFieldType0.getField(mockNullZoneChronology0);
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType1, durationField0);
      DateTimeFieldType dateTimeFieldType2 = unsupportedDateTimeField0.getType();
      localDateTime2.get(dateTimeFieldType2);
      localDateTime2.weekyear();
      Duration duration0 = Duration.parse((String) null);
      Duration.standardMinutes(811L);
      duration0.minus(0L);
      localDateTime0.minus((ReadableDuration) duration0);
      // Undeclared exception!
      try { 
        unsupportedDateTimeField0.addWrapField(0L, 12);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // secondOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("1");
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      LocalDateTime localDateTime0 = LocalDateTime.parse("1");
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(0);
      LocalDateTime localDateTime2 = localDateTime1.minusYears(86);
      localDateTime2.plusMinutes((-2115));
      PeriodType periodType0 = PeriodType.millis();
      MutablePeriod mutablePeriod0 = new MutablePeriod((-31L), (-31L), periodType0, testDateTime_Basics_MockEqualsChronology0);
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime((-2115), (-2115), 309, 0, 0, 1, 86);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2115 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 1;
      LocalDateTime localDateTime0 = new LocalDateTime(0, 1, 13, 0, 13);
      LocalDateTime localDateTime1 = localDateTime0.minusHours(1);
      localDateTime1.getWeekOfWeekyear();
      LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(1);
      localDateTime2.getValue(0);
      LocalDateTime localDateTime3 = localDateTime2.plusSeconds(12);
      localDateTime3.plusDays(12);
      DateTime dateTime0 = new DateTime(0L);
      // Undeclared exception!
      try { 
        dateTime0.withMillisOfSecond((-394));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -394 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics("3$6ONpvs;D _kP");
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      Chronology chronology0 = testYearMonth_Basics_MockYM0.getChronology();
      LocalDateTime localDateTime0 = new LocalDateTime((-4507L), chronology0);
      localDateTime0.getHourOfDay();
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks(0);
      localDateTime0.weekOfWeekyear();
      // Undeclared exception!
      try { 
        localDateTime1.withYearOfCentury(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfCentury must be in the range [1,100]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(0);
      LocalDateTime localDateTime2 = localDateTime0.plusMinutes(0);
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      localDateTime2.withFieldAdded(durationFieldType0, (-1875));
      int int0 = 13;
      LocalDateTime localDateTime3 = localDateTime1.withWeekyear(13);
      localDateTime1.getWeekOfWeekyear();
      LocalDateTime localDateTime4 = localDateTime0.plusSeconds(245);
      localDateTime4.minusYears(245);
      localDateTime1.getMinuteOfHour();
      localDateTime3.toLocalDate();
      LocalDateTime.Property localDateTime_Property0 = localDateTime3.yearOfCentury();
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for yearOfCentury is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "";
      TestMutableInterval_Updates testMutableInterval_Updates0 = new TestMutableInterval_Updates("");
      TestMutableInterval_Updates.MockBadInterval testMutableInterval_Updates_MockBadInterval0 = testMutableInterval_Updates0.new MockBadInterval();
      Chronology chronology0 = testMutableInterval_Updates_MockBadInterval0.getChronology();
      LocalDateTime localDateTime0 = new LocalDateTime(chronology0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfCeilingCopy();
      LocalDateTime.now(chronology0);
      int int0 = (-292269337);
      // Undeclared exception!
      try { 
        localDateTime1.withMillisOfDay((-292269337));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -292269337 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      LocalDateTime localDateTime0 = new LocalDateTime(276L, chronology0);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes((-2703));
      LocalDateTime localDateTime2 = localDateTime1.minusMonths((-2703));
      // Undeclared exception!
      try { 
        localDateTime2.withCenturyOfEra((-2703));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2703 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1998L);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(0);
      localDateTime1.getMillisOfSecond();
      // Undeclared exception!
      try { 
        localDateTime1.withDayOfMonth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestTimeOfDay_Basics testTimeOfDay_Basics0 = new TestTimeOfDay_Basics(";sbBZ):$E*QdfO{Rk6S");
      TestTimeOfDay_Basics.MockInstant testTimeOfDay_Basics_MockInstant0 = testTimeOfDay_Basics0.new MockInstant();
      Chronology chronology0 = testTimeOfDay_Basics_MockInstant0.getChronology();
      LocalDateTime localDateTime0 = new LocalDateTime(chronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      localDateTime0.getEra();
      // Undeclared exception!
      try { 
        localDateTime0.withField(dateTimeFieldType0, (-746));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -746 for dayOfMonth must be in the range [1,30]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalDateTime localDateTime0 = new LocalDateTime((-1665L), (Chronology) null);
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis(0L);
      LocalDateTime localDateTime2 = localDateTime1.minusWeeks(2321);
      LocalDateTime localDateTime3 = localDateTime2.plusYears(47);
      ConverterManager.getInstance();
      localDateTime3.plusMillis(767);
      // Undeclared exception!
      try { 
        Duration.parse("Zone must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Zone must not be null\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("halfdays");
      TestMutableDateTime_Basics.MockInstant testMutableDateTime_Basics_MockInstant0 = testMutableDateTime_Basics0.new MockInstant();
      Chronology chronology0 = testMutableDateTime_Basics_MockInstant0.getChronology();
      LocalDateTime localDateTime0 = new LocalDateTime((-1L), chronology0);
      int int0 = 9;
      LocalDateTime localDateTime1 = localDateTime0.withMinuteOfHour(9);
      LocalDateTime localDateTime2 = localDateTime1.withDayOfYear(9);
      int int1 = (-628);
      // Undeclared exception!
      try { 
        localDateTime2.withMillisOfSecond((-628));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -628 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(814L);
      LocalDateTime localDateTime1 = localDateTime0.withDayOfWeek(1);
      int int0 = 12;
      LocalDateTime localDateTime2 = localDateTime1.withYearOfCentury(12);
      // Undeclared exception!
      try { 
        localDateTime2.withDayOfMonth(91);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 91 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1165L));
      Seconds seconds0 = Seconds.TWO;
      Seconds seconds1 = seconds0.multipliedBy(2);
      Duration duration0 = seconds1.toStandardDuration();
      localDateTime0.plus((ReadableDuration) duration0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      localDateTime_Property0.getAsText();
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfFloorCopy();
      localDateTime_Property0.roundHalfFloorCopy();
      LocalDateTime localDateTime2 = localDateTime1.minusMinutes(70);
      localDateTime2.plus((ReadableDuration) duration0);
      LocalDateTime localDateTime3 = localDateTime_Property0.roundHalfCeilingCopy();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      localDateTime3.toDateTime((DateTimeZone) uTCDateTimeZone0);
      localDateTime2.withMillisOfDay(0);
      seconds0.toStandardDuration();
      int int0 = (-700);
      seconds1.compareTo((BaseSingleFieldPeriod) seconds0);
      localDateTime1.monthOfYear();
      // Undeclared exception!
      try { 
        localDateTime2.withHourOfDay((-700));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -700 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(0);
      Duration duration0 = new Duration((Object) null);
      uTCDateTimeZone0.getName((long) 0);
      LocalDateTime localDateTime2 = localDateTime1.plus((ReadableDuration) duration0);
      LocalDateTime localDateTime3 = localDateTime2.minusSeconds(5);
      int int0 = 1365;
      LocalDateTime localDateTime4 = localDateTime3.minusDays(1365);
      Seconds seconds0 = Seconds.MAX_VALUE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      LocalDateTime localDateTime5 = localDateTime4.withFieldAdded(durationFieldType0, (-887));
      // Undeclared exception!
      try { 
        localDateTime5.withDayOfWeek((-1538));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1538 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.parse("pnH^Md?%pgpRWAwRO", (org.joda.time.format.DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Duration duration0 = new Duration(126L, 0L);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-126L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) duration0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-126L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(4, localDateTime1.size());
      
      Duration duration1 = duration0.multipliedBy(1000L);
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-126L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-126L), duration1.getStandardSeconds());
      assertEquals((-2L), duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals((-126000L), duration1.getMillis());
      
      boolean boolean0 = duration0.isLongerThan(duration1);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals((-126L), duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-126L), duration1.getStandardSeconds());
      assertEquals((-2L), duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals((-126000L), duration1.getMillis());
      assertTrue(boolean0);
      
      Date date0 = localDateTime0.toDate();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertNotNull(date0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 17:21:21 GMT 2014", date0.toString());
      
      int int0 = 2945;
      // Undeclared exception!
      try { 
        localDateTime1.getValue(2945);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 2945
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.minusWeeks(0);
      localDateTime0.size();
      int int0 = 2256;
      // Undeclared exception!
      try { 
        localDateTime0.getValue(2256);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 2256
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.plusMillis((-296));
      Minutes minutes0 = Minutes.THREE;
      Object object0 = new Object();
      minutes0.equals(object0);
      Minutes minutes1 = minutes0.negated();
      Minutes minutes2 = minutes1.minus((-296));
      LocalDateTime localDateTime2 = localDateTime1.minus((ReadablePeriod) minutes2);
      LocalDateTime localDateTime3 = localDateTime2.minusHours((-296));
      LocalDateTime.Property localDateTime_Property0 = localDateTime3.centuryOfEra();
      LocalDateTime localDateTime4 = localDateTime3.plusYears((-296));
      localDateTime4.dayOfYear();
      localDateTime1.toDateTime();
      localDateTime4.getMonthOfYear();
      localDateTime_Property0.roundHalfEvenCopy();
      localDateTime2.toLocalDate();
      try { 
        DateTimeZone.forOffsetHours((-296));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -296
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      java.time.Instant instant0 = MockInstant.ofEpochMilli(0L);
      Date date0 = Date.from(instant0);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      Months months0 = Months.MIN_VALUE;
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) months0);
      int int0 = 1;
      LocalDateTime localDateTime2 = localDateTime1.withEra(1);
      LocalDateTime localDateTime3 = localDateTime2.withYear(1);
      LocalDateTime localDateTime4 = localDateTime1.minusMinutes((-980));
      localDateTime4.getMillisOfDay();
      int int1 = (-2982);
      // Undeclared exception!
      try { 
        localDateTime3.withDate((-2982), (-2982), (-2982));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2982 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(uTCDateTimeZone0, uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.UTCDateTimeZone
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = (-4116L);
      TestYearMonthDay_Basics testYearMonthDay_Basics0 = new TestYearMonthDay_Basics("Field '");
      TestYearMonthDay_Basics.MockInstant testYearMonthDay_Basics_MockInstant0 = testYearMonthDay_Basics0.new MockInstant();
      Chronology chronology0 = testYearMonthDay_Basics_MockInstant0.getChronology();
      LocalDateTime localDateTime0 = new LocalDateTime((-4116L), chronology0);
      int int0 = (-3292);
      // Undeclared exception!
      try { 
        localDateTime0.withEra((-3292));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3292 for era must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Weeks weeks0 = Weeks.TWO;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      int int0 = 670;
      weeks0.minus(670);
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, 670);
      // Undeclared exception!
      try { 
        localDateTime1.withField((DateTimeFieldType) null, 670);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        LocalDateTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null, uTCDateTimeZone0);
      int int0 = (-53);
      // Undeclared exception!
      try { 
        localDateTime0.withWeekOfWeekyear((-53));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -53 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPANESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(3850);
      // Undeclared exception!
      try { 
        localDateTime1.withWeekOfWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      LocalDateTime localDateTime0 = new LocalDateTime(chronology0);
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadablePartial) testBasePartial_MockPartial0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(607L, (Chronology) null);
      int int0 = (-642);
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks((-642));
      Instant instant0 = Instant.now();
      Period period0 = new Period(instant0, instant0, (PeriodType) null);
      LocalDateTime localDateTime2 = localDateTime1.minus((ReadablePeriod) period0);
      // Undeclared exception!
      try { 
        localDateTime2.withDayOfMonth((-642));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -642 for dayOfMonth must be in the range [1,30]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      localDateTime0.equals((Object) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      localDateTime0.get(dateTimeFieldType0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
      localDateTime_Property0.getField();
      localDateTime0.plusDays(0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for hourOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics("");
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("");
      TestMutableDateTime_Basics.MockEqualsChronology testMutableDateTime_Basics_MockEqualsChronology0 = testMutableDateTime_Basics0.new MockEqualsChronology();
      Chronology chronology0 = testMutableDateTime_Basics_MockEqualsChronology0.withZone((DateTimeZone) null);
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(testYearMonth_Basics_MockYM0, chronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(957L, dateTimeZone0);
      int int0 = (-633);
      LocalDateTime localDateTime1 = localDateTime0.plusMillis((-633));
      // Undeclared exception!
      try { 
        localDateTime1.withSecondOfMinute((-633));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -633 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      int int0 = 941;
      // Undeclared exception!
      try { 
        localDateTime0.withMonthOfYear(941);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 941 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("@miZbI$~XU~T Sv");
      TestMutableDateTime_Basics.MockEqualsChronology testMutableDateTime_Basics_MockEqualsChronology0 = testMutableDateTime_Basics0.new MockEqualsChronology();
      testMutableDateTime_Basics0.toString();
      testMutableDateTime_Basics_MockEqualsChronology0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null, (DateTimeZone) null);
      localDateTime0.dayOfWeek();
      Duration duration0 = Duration.ZERO;
      localDateTime0.getMillisOfDay();
      MockDate mockDate0 = new MockDate((-925), 0, (-925), 3600000, 3600000);
      mockDate0.setTime((-925));
      mockDate0.toInstant();
      LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadableDuration) duration0);
      localDateTime1.withYearOfEra(2810);
      localDateTime0.plusWeeks((-2081));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      UTCDateTimeZone uTCDateTimeZone1 = (UTCDateTimeZone)DateTimeZone.UTC;
      uTCDateTimeZone0.getMillisKeepLocal(uTCDateTimeZone1, 0L);
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null, uTCDateTimeZone0);
      DateTimeZone.getNameProvider();
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfMonth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis(0L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      int int0 = 1970;
      dateTimeFieldType0.getDurationType();
      // Undeclared exception!
      try { 
        localDateTime1.withField(dateTimeFieldType0, 1970);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1970 for clockhourOfHalfday must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null, (Chronology) null);
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear((-1044));
      LocalDateTime localDateTime2 = localDateTime1.minusDays((-1044));
      LocalDateTime localDateTime3 = localDateTime2.plusMinutes((-1044));
      localDateTime3.getWeekOfWeekyear();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(260, 260, 260, 3698, 260, 41);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(260);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFieldType0.getRangeDurationType();
      localDateTime0.withField(dateTimeFieldType0, 0);
      localDateTime0.toLocalDate();
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.secondOfMinute();
      localDateTime_Property0.getMillis();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics((String) null);
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(testDateTime_Basics_MockEqualsChronology0, testDateTime_Basics_MockEqualsChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.TestDateTime_Basics$MockEqualsChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockZone mockZone0 = new MockZone(0L, 1958, 1142);
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) mockZone0);
      DateTimeUtils.setCurrentMillisFixed((-2071L));
      mockZone0.transition = (long) 1142;
      localDateTime0.plusSeconds(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
      localDateTime_Property0.roundCeilingCopy();
      // Undeclared exception!
      try { 
        localDateTime0.withSecondOfMinute(1958);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1958 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      MockDate.UTC(0, 0, 0, 3682, 0, (-27));
      LocalDateTime localDateTime1 = localDateTime0.minusHours(3466);
      LocalDateTime localDateTime2 = localDateTime1.withLocalMillis((-1729L));
      LocalDateTime localDateTime3 = localDateTime2.withDayOfMonth(13);
      localDateTime3.isAfter(localDateTime1);
      DateTime dateTime0 = localDateTime3.toDateTime();
      dateTime0.withMinuteOfHour(11);
      Chronology chronology0 = dateTime0.getChronology();
      LocalDateTime localDateTime4 = LocalDateTime.now(chronology0);
      localDateTime3.toLocalDate();
      localDateTime4.minuteOfHour();
      LocalDateTime localDateTime5 = localDateTime3.minusDays(1);
      localDateTime5.minusMinutes(0);
      // Undeclared exception!
      try { 
        localDateTime5.getFieldType((-27));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -27
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(21859200000L);
      Chronology chronology0 = monthDay0.getChronology();
      LocalDateTime localDateTime0 = LocalDateTime.now(chronology0);
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("*bM/24TE`UH ");
      localDateTime0.toDateTime((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      Weeks weeks0 = Weeks.TWO;
      Seconds seconds0 = weeks0.toStandardSeconds();
      monthDay0.plus(seconds0);
      Years years0 = Years.ONE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, (-2185));
      localDateTime1.plusMinutes(0);
      localDateTime1.getYearOfEra();
      localDateTime1.toDateTime();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(1238L, dateTimeZone0);
      localDateTime0.plusSeconds((-1678));
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfYear((-1678));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1678 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      LocalDateTime localDateTime1 = localDateTime0.minusYears(0);
      LocalDateTime localDateTime2 = localDateTime1.plusHours(2650);
      LocalDateTime localDateTime3 = localDateTime2.plusWeeks(323);
      localDateTime3.getYear();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestLocalTime_Basics testLocalTime_Basics0 = new TestLocalTime_Basics("");
      TestLocalTime_Basics.MockInstant testLocalTime_Basics_MockInstant0 = testLocalTime_Basics0.new MockInstant();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(testLocalTime_Basics_MockInstant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-2000L), (Chronology) null);
      LocalDateTime localDateTime1 = localDateTime0.minusHours(0);
      Duration duration0 = Duration.standardMinutes(640L);
      Duration duration1 = Duration.ZERO;
      Duration duration2 = duration0.withDurationAdded((ReadableDuration) duration1, 0);
      Duration duration3 = duration2.withMillis(0);
      Duration duration4 = duration3.plus((ReadableDuration) duration1);
      LocalDateTime localDateTime2 = localDateTime1.withDurationAdded(duration4, 13421772);
      localDateTime2.dayOfYear();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-3768L));
      LocalDateTime localDateTime1 = localDateTime0.minusMillis((-987));
      int int0 = (-1);
      DateTimeUtils.setCurrentMillisSystem();
      // Undeclared exception!
      try { 
        localDateTime1.withDate((-1), (-918), (-987));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -918 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestYearMonthDay_Basics testYearMonthDay_Basics0 = new TestYearMonthDay_Basics("}c*Z[hyp?^");
      TestYearMonthDay_Basics.MockInstant testYearMonthDay_Basics_MockInstant0 = testYearMonthDay_Basics0.new MockInstant();
      TestMutableInterval_Basics testMutableInterval_Basics0 = new TestMutableInterval_Basics("}c*Z[hyp?^");
      TestMutableInterval_Basics.MockInterval testMutableInterval_Basics_MockInterval0 = testMutableInterval_Basics0.new MockInterval();
      Chronology chronology0 = testMutableInterval_Basics_MockInterval0.getChronology();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(testYearMonthDay_Basics_MockInstant0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TestMonthDay_Basics testMonthDay_Basics0 = new TestMonthDay_Basics("");
      TestMonthDay_Basics.MockMD testMonthDay_Basics_MockMD0 = testMonthDay_Basics0.new MockMD();
      testMonthDay_Basics_MockMD0.equals("");
      int int0 = 25734375;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(25734375);
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(testMonthDay_Basics_MockMD0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      String string0 = "";
      // Undeclared exception!
      try { 
        localDateTime0.withTime(545, 2697, (-1516), (-1312));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 545 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1403L, (DateTimeZone) null);
      int int0 = (-2162);
      // Undeclared exception!
      try { 
        localDateTime0.toString("org.joda.time.TestDuration_Basics$MockDuration");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(8, 8, 5);
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localDateTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61893504000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=8,WEEK_OF_YEAR=36,WEEK_OF_MONTH=2,DAY_OF_MONTH=5,DAY_OF_YEAR=249,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      assertNotNull(localDateTime_Property0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61893504000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=8,WEEK_OF_YEAR=36,WEEK_OF_MONTH=2,DAY_OF_MONTH=5,DAY_OF_YEAR=249,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withTime(5, 8, 5, 5);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61893504000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=8,WEEK_OF_YEAR=36,WEEK_OF_MONTH=2,DAY_OF_MONTH=5,DAY_OF_YEAR=249,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withDate(5, 8, 35);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 35 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = new LocalDateTime(2542L, dateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusYears(0);
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      Hours hours0 = Hours.EIGHT;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      assertEquals(8, hours0.getHours());
      
      Duration duration0 = hours0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(1, hours0.size());
      assertEquals(8, hours0.getHours());
      assertEquals(8L, duration0.getStandardHours());
      assertEquals(480L, duration0.getStandardMinutes());
      assertEquals(28800L, duration0.getStandardSeconds());
      assertEquals(28800000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      
      Duration duration1 = duration0.withDurationAdded((-662L), 84);
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertEquals(1, hours0.size());
      assertEquals(8, hours0.getHours());
      assertEquals(8L, duration0.getStandardHours());
      assertEquals(480L, duration0.getStandardMinutes());
      assertEquals(28800L, duration0.getStandardSeconds());
      assertEquals(28800000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(28744L, duration1.getStandardSeconds());
      assertEquals(7L, duration1.getStandardHours());
      assertEquals(28744392L, duration1.getMillis());
      assertEquals(479L, duration1.getStandardMinutes());
      
      LocalDateTime localDateTime2 = localDateTime1.plus((ReadableDuration) duration1);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime2);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(1, hours0.size());
      assertEquals(8, hours0.getHours());
      assertEquals(8L, duration0.getStandardHours());
      assertEquals(480L, duration0.getStandardMinutes());
      assertEquals(28800L, duration0.getStandardSeconds());
      assertEquals(28800000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(28744L, duration1.getStandardSeconds());
      assertEquals(7L, duration1.getStandardHours());
      assertEquals(28744392L, duration1.getMillis());
      assertEquals(479L, duration1.getStandardMinutes());
      assertEquals(4, localDateTime2.size());
      
      LocalDateTime localDateTime3 = localDateTime2.withWeekyear(1900);
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertNotNull(localDateTime3);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime3);
      assertSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(1, hours0.size());
      assertEquals(8, hours0.getHours());
      assertEquals(8L, duration0.getStandardHours());
      assertEquals(480L, duration0.getStandardMinutes());
      assertEquals(28800L, duration0.getStandardSeconds());
      assertEquals(28800000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(28744L, duration1.getStandardSeconds());
      assertEquals(7L, duration1.getStandardHours());
      assertEquals(28744392L, duration1.getMillis());
      assertEquals(479L, duration1.getStandardMinutes());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      
      LocalDateTime localDateTime4 = localDateTime3.plusMillis(0);
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertNotNull(localDateTime4);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime3);
      assertSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime0);
      assertSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime4, localDateTime1);
      assertSame(localDateTime4, localDateTime3);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(1, hours0.size());
      assertEquals(8, hours0.getHours());
      assertEquals(8L, duration0.getStandardHours());
      assertEquals(480L, duration0.getStandardMinutes());
      assertEquals(28800L, duration0.getStandardSeconds());
      assertEquals(28800000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(28744L, duration1.getStandardSeconds());
      assertEquals(7L, duration1.getStandardHours());
      assertEquals(28744392L, duration1.getMillis());
      assertEquals(479L, duration1.getStandardMinutes());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime4.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = new LocalDateTime(5964L, dateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getDayOfWeek();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(3, int0);
      
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis(5964L);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfDay(0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime1.minusMillis(0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime0);
      assertSame(localDateTime2, localDateTime1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      
      TestMutableInterval_Updates testMutableInterval_Updates0 = new TestMutableInterval_Updates((String) null);
      assertNotNull(testMutableInterval_Updates0);
      
      TestMutableInterval_Updates.MockBadInterval testMutableInterval_Updates_MockBadInterval0 = testMutableInterval_Updates0.new MockBadInterval();
      assertNotNull(testMutableInterval_Updates_MockBadInterval0);
      assertEquals(1018009439999L, testMutableInterval_Updates_MockBadInterval0.getStartMillis());
      assertEquals(1018009439998L, testMutableInterval_Updates_MockBadInterval0.getEndMillis());
      
      Chronology chronology0 = testMutableInterval_Updates_MockBadInterval0.getChronology();
      assertNotNull(chronology0);
      assertEquals(1018009439999L, testMutableInterval_Updates_MockBadInterval0.getStartMillis());
      assertEquals(1018009439998L, testMutableInterval_Updates_MockBadInterval0.getEndMillis());
      
      boolean boolean0 = durationFieldType0.isSupported(chronology0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(1018009439999L, testMutableInterval_Updates_MockBadInterval0.getStartMillis());
      assertEquals(1018009439998L, testMutableInterval_Updates_MockBadInterval0.getEndMillis());
      assertTrue(boolean0);
      
      LocalDateTime localDateTime3 = localDateTime2.withFieldAdded(durationFieldType0, 0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertNotNull(localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime3);
      assertSame(localDateTime1, localDateTime2);
      assertSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime0);
      assertSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime3, localDateTime0);
      assertSame(localDateTime3, localDateTime1);
      assertSame(localDateTime3, localDateTime2);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(4, localDateTime3.size());
      
      int int0 = localDateTime2.getSecondOfMinute();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime3);
      assertSame(localDateTime1, localDateTime2);
      assertSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime0);
      assertSame(localDateTime2, localDateTime1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        localDateTime2.withDayOfWeek(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(1263);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      ConverterManager converterManager0 = ConverterManager.getInstance();
      assertNotNull(converterManager0);
      
      // Undeclared exception!
      try { 
        localDateTime1.withDayOfWeek(1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1000 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-2260L));
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withCenturyOfEra((-2258));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2258 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((-1665L), (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "org.joda.time.LocalDateTime";
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("org.joda.time.LocalDateTime");
      assertNotNull(testMutableDateTime_Basics0);
      
      TestMutableDateTime_Basics.MockEqualsChronology testMutableDateTime_Basics_MockEqualsChronology0 = testMutableDateTime_Basics0.new MockEqualsChronology();
      assertNotNull(testMutableDateTime_Basics_MockEqualsChronology0);
      assertEquals("", testMutableDateTime_Basics_MockEqualsChronology0.toString());
      
      Chronology chronology0 = testMutableDateTime_Basics_MockEqualsChronology0.withUTC();
      assertNotNull(chronology0);
      assertSame(testMutableDateTime_Basics_MockEqualsChronology0, chronology0);
      assertSame(chronology0, testMutableDateTime_Basics_MockEqualsChronology0);
      assertEquals("", testMutableDateTime_Basics_MockEqualsChronology0.toString());
      assertEquals("", chronology0.toString());
      
      // Undeclared exception!
      try { 
        LocalDateTime.now(chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-724L));
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Seconds seconds0 = Seconds.TWO;
      assertNotNull(seconds0);
      assertEquals(2, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      
      int int0 = (-1163);
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(seconds0, (-1163));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(2, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime1.minusMinutes((-1163));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(2, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      // Undeclared exception!
      try { 
        localDateTime2.withHourOfDay((-1163));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1163 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestDateMidnight_Basics testDateMidnight_Basics0 = new TestDateMidnight_Basics("");
      assertNotNull(testDateMidnight_Basics0);
      
      TestDateMidnight_Basics.MockInstant testDateMidnight_Basics_MockInstant0 = testDateMidnight_Basics0.new MockInstant();
      assertNotNull(testDateMidnight_Basics_MockInstant0);
      assertEquals(1017961200000L, testDateMidnight_Basics_MockInstant0.getMillis());
      assertNull(testDateMidnight_Basics_MockInstant0.toString());
      
      DateTimeZone dateTimeZone0 = testDateMidnight_Basics_MockInstant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(1017961200000L, testDateMidnight_Basics_MockInstant0.getMillis());
      assertNull(testDateMidnight_Basics_MockInstant0.toString());
      assertEquals("Europe/London", dateTimeZone0.toString());
      assertEquals("Europe/London", dateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals(1017961200000L, testDateMidnight_Basics_MockInstant0.getMillis());
      assertNull(testDateMidnight_Basics_MockInstant0.toString());
      assertEquals("Europe/London", dateTimeZone0.toString());
      assertEquals("Europe/London", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusYears((-1320));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(1017961200000L, testDateMidnight_Basics_MockInstant0.getMillis());
      assertNull(testDateMidnight_Basics_MockInstant0.toString());
      assertEquals("Europe/London", dateTimeZone0.toString());
      assertEquals("Europe/London", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics(")`;ZDLa6b.8iW?Vm#:G");
      assertNotNull(testDateTime_Basics0);
      
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      assertNotNull(testDateTime_Basics_MockEqualsChronology0);
      assertEquals("", testDateTime_Basics_MockEqualsChronology0.toString());
      
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) testDateTime_Basics_MockEqualsChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localDateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusYears((-1445));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) (-1445), periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      Duration duration0 = mutablePeriod0.toDurationFrom(mutableDateTime0);
      assertNotNull(duration0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      LocalDateTime localDateTime2 = localDateTime0.withPeriodAdded(mutablePeriod0, 0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertNotNull(localDateTime2);
      assertSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(4, localDateTime2.size());
      
      Duration duration1 = duration0.multipliedBy(0L);
      assertTrue(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      LocalDateTime localDateTime3 = localDateTime1.plus((ReadableDuration) duration1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertTrue(duration0.equals((Object)duration1));
      assertTrue(duration1.equals((Object)duration0));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertNotNull(localDateTime3);
      assertSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertSame(localDateTime1, localDateTime3);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime2);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(4, localDateTime3.size());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      int int0 = localDateTime3.getWeekyear();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertTrue(duration0.equals((Object)duration1));
      assertTrue(duration1.equals((Object)duration0));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertSame(localDateTime1, localDateTime3);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime2);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(4, localDateTime3.size());
      assertEquals(3459, int0);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      
      YearMonth yearMonth0 = null;
      try {
        yearMonth0 = new YearMonth((-955), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1000, 2892, 1000, (-1508), 0, (-1508));
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      assertNotNull(localDateTime0);
      assertEquals("Mon Jul 26 03:34:52 GMT 3143", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks((-1508));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("Mon Jul 26 03:34:52 GMT 3143", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      Period period0 = new Period();
      assertNotNull(period0);
      
      LocalDateTime localDateTime2 = localDateTime1.plus((ReadablePeriod) period0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertSame(localDateTime1, localDateTime2);
      assertSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals("Mon Jul 26 03:34:52 GMT 3143", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      LocalDateTime localDateTime3 = localDateTime2.minusMinutes(37);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertNotNull(localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime3);
      assertSame(localDateTime1, localDateTime2);
      assertSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime2);
      assertEquals("Mon Jul 26 03:34:52 GMT 3143", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      
      LocalDateTime localDateTime4 = localDateTime3.minusYears(1000);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertNotNull(localDateTime4);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime3);
      assertSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime4);
      assertSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime3);
      assertEquals("Mon Jul 26 03:34:52 GMT 3143", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime4.size());
      
      // Undeclared exception!
      try { 
        localDateTime4.withYearOfEra((-1508));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1508 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) null);
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        localDateTime1.withDayOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withMinuteOfHour(1060);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1060 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = 1900;
      // Undeclared exception!
      try { 
        localDateTime0.withMillisOfSecond(1900);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1900 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TestLocalDateTime_Basics testLocalDateTime_Basics0 = new TestLocalDateTime_Basics("org.joda.time.chrono.BasicChronology");
      assertNotNull(testLocalDateTime_Basics0);
      
      TestLocalDateTime_Basics.MockInstant testLocalDateTime_Basics_MockInstant0 = testLocalDateTime_Basics0.new MockInstant();
      assertNotNull(testLocalDateTime_Basics_MockInstant0);
      
      CopticChronology copticChronology0 = (CopticChronology)testLocalDateTime_Basics_MockInstant0.getChronology();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      LocalDateTime localDateTime0 = new LocalDateTime(0L, (Chronology) copticChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(1, CopticChronology.AM);
      
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(0);
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusHours((-1981));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime1.plusDays(2885);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      LocalDateTime localDateTime3 = localDateTime2.withMinuteOfHour(0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertNotNull(localDateTime3);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime2);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      assertNotNull(durationFieldType0);
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      
      LocalDateTime localDateTime4 = localDateTime3.withFieldAdded(durationFieldType0, 87);
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertNotNull(localDateTime4);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime3);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals(4, localDateTime4.size());
      
      LocalDateTime localDateTime5 = localDateTime4.withLocalMillis(0L);
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime4));
      assertFalse(localDateTime2.equals((Object)localDateTime4));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime4));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime5.equals((Object)localDateTime3));
      assertFalse(localDateTime5.equals((Object)localDateTime4));
      assertFalse(localDateTime5.equals((Object)localDateTime2));
      assertFalse(localDateTime5.equals((Object)localDateTime1));
      assertFalse(localDateTime5.equals((Object)localDateTime0));
      assertNotNull(localDateTime5);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime5);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime5);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime5);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime5);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime5);
      assertNotSame(localDateTime5, localDateTime3);
      assertNotSame(localDateTime5, localDateTime4);
      assertNotSame(localDateTime5, localDateTime2);
      assertNotSame(localDateTime5, localDateTime1);
      assertNotSame(localDateTime5, localDateTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals(4, localDateTime4.size());
      assertEquals(4, localDateTime5.size());
      
      // Undeclared exception!
      try { 
        localDateTime5.withMillisOfDay((-574));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -574 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "}7\\\\>;(\"DB{k \\5";
      // Undeclared exception!
      try { 
        LocalDateTime.parse("}7\\>;(\"DB{k \u0005");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"}7\\>;(\"DB{k \u0005\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      int int0 = 2539;
      DateTime dateTime1 = dateTime0.withWeekyear(2539);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(17959695681320L, dateTime1.getMillis());
      
      DateTime dateTime2 = dateTime1.plusYears(2539);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertNotNull(dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(17959695681320L, dateTime1.getMillis());
      assertEquals(98082822081320L, dateTime2.getMillis());
      
      LocalDateTime localDateTime0 = dateTime2.toLocalDateTime();
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertNotNull(localDateTime0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(17959695681320L, dateTime1.getMillis());
      assertEquals(98082822081320L, dateTime2.getMillis());
      assertEquals(4, localDateTime0.size());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        localDateTime0.withYearOfEra(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("0");
      assertNotNull(testDateTime_Basics0);
      
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      assertNotNull(testDateTime_Basics_MockEqualsChronology0);
      assertEquals("", testDateTime_Basics_MockEqualsChronology0.toString());
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((Chronology) testDateTime_Basics_MockEqualsChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfDay(1687);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.dayOfWeek();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime_Property0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime_Property0.roundFloorCopy();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TestDateMidnight_Basics testDateMidnight_Basics0 = new TestDateMidnight_Basics("");
      assertNotNull(testDateMidnight_Basics0);
      
      TestDateMidnight_Basics.MockInstant testDateMidnight_Basics_MockInstant0 = testDateMidnight_Basics0.new MockInstant();
      assertNotNull(testDateMidnight_Basics_MockInstant0);
      assertEquals(1017961200000L, testDateMidnight_Basics_MockInstant0.getMillis());
      assertNull(testDateMidnight_Basics_MockInstant0.toString());
      
      DateTimeZone dateTimeZone0 = testDateMidnight_Basics_MockInstant0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(1017961200000L, testDateMidnight_Basics_MockInstant0.getMillis());
      assertNull(testDateMidnight_Basics_MockInstant0.toString());
      assertEquals("Europe/London", dateTimeZone0.getID());
      assertEquals("Europe/London", dateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals(1017961200000L, testDateMidnight_Basics_MockInstant0.getMillis());
      assertNull(testDateMidnight_Basics_MockInstant0.toString());
      assertEquals("Europe/London", dateTimeZone0.getID());
      assertEquals("Europe/London", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withMinuteOfHour(0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(1017961200000L, testDateMidnight_Basics_MockInstant0.getMillis());
      assertNull(testDateMidnight_Basics_MockInstant0.toString());
      assertEquals("Europe/London", dateTimeZone0.getID());
      assertEquals("Europe/London", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime1.plusYears(0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime0);
      assertSame(localDateTime2, localDateTime1);
      assertEquals(1017961200000L, testDateMidnight_Basics_MockInstant0.getMillis());
      assertNull(testDateMidnight_Basics_MockInstant0.toString());
      assertEquals("Europe/London", dateTimeZone0.getID());
      assertEquals("Europe/London", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = 1;
      LocalDateTime localDateTime1 = localDateTime0.minusHours(1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      boolean boolean0 = localDateTime0.isEqual(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertFalse(boolean0);
      
      int int1 = (-2187);
      LocalDateTime localDateTime2 = localDateTime0.plusDays(1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime2.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withDate(1, (-2187), (-1785));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2187 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(2355L);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      assertNotNull(durationFieldType0);
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, 86399999);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime0.withWeekyear(1765);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime2.size());
      
      // Undeclared exception!
      try { 
        localDateTime2.withDate((-2025), (-2025), 2311);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2025 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.parse("The DateTimeFieldType must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"The DateTimeFieldType must not b...\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("%FGY'IeK)%M`Vx");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertNotNull(calendar0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      assertNotNull(localDateTime0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withEra(0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      Locale locale1 = Locale.JAPANESE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", string0);
      
      LocalDateTime localDateTime2 = localDateTime1.withSecondOfMinute(0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime2);
      assertNotSame(locale0, locale1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      // Undeclared exception!
      try { 
        LocalDate.parse("%FGY'IeK)%M`Vx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"%FGY'IeK)%M`Vx\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = 0L;
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      assertNotNull(localTime0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withFields(localTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime1.withEra(0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      TestDuration_Basics.MockMutableDuration testDuration_Basics_MockMutableDuration0 = new TestDuration_Basics.MockMutableDuration(0L);
      assertNotNull(testDuration_Basics_MockMutableDuration0);
      assertEquals(0L, testDuration_Basics_MockMutableDuration0.getMillis());
      
      LocalDateTime localDateTime3 = localDateTime2.minus((ReadableDuration) testDuration_Basics_MockMutableDuration0);
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertNotNull(localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime2, localDateTime1);
      assertSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime0);
      assertSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(0L, testDuration_Basics_MockMutableDuration0.getMillis());
      assertEquals(4, localDateTime3.size());
      
      LocalDateTime localDateTime4 = localDateTime3.minusYears(0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertNotNull(localDateTime4);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime2, localDateTime1);
      assertSame(localDateTime2, localDateTime3);
      assertSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime0);
      assertSame(localDateTime3, localDateTime4);
      assertSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime4, localDateTime1);
      assertSame(localDateTime4, localDateTime3);
      assertSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(0L, testDuration_Basics_MockMutableDuration0.getMillis());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime4.size());
      
      int int0 = localDateTime2.getDayOfYear();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime2, localDateTime1);
      assertSame(localDateTime2, localDateTime3);
      assertSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(4, localTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(365, int0);
      
      DateTimeUtils.setCurrentMillisSystem();
      Years years0 = Years.MAX_VALUE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      assertEquals(Integer.MAX_VALUE, years0.getYears());
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(uTCDateTimeZone0, uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.UTCDateTimeZone
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getMonthOfYear();
      assertEquals(4, localDateTime0.size());
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        localDateTime0.isAfter((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Partial cannot be null
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = 0;
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(28181250, 0, 0, 0, 0, 0, 0, mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 2061;
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(0, 2061, 2061, 2061, 2061, 2061);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2061 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(0, 0, 0, 1117, 1117, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1117 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "{(W";
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("{(W");
      assertNotNull(testDateTime_Basics0);
      
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      assertNotNull(testDateTime_Basics_MockEqualsChronology0);
      assertEquals("", testDateTime_Basics_MockEqualsChronology0.toString());
      
      DateTimeZone dateTimeZone0 = testDateTime_Basics_MockEqualsChronology0.getZone();
      assertNull(dateTimeZone0);
      assertEquals("", testDateTime_Basics_MockEqualsChronology0.toString());
      
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1028L, 0, 41);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null, mockZone0);
      assertNotNull(localDateTime0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusHours(3318);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime1.withYear((-4857));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      // Undeclared exception!
      try { 
        localDateTime2.withSecondOfMinute((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 5);
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localDateTime0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167046400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=5,DAY_OF_YEAR=5,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      assertNotNull(localDateTime_Property0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167046400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=5,DAY_OF_YEAR=5,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime_Property0.setCopy(0);
      assertNotNull(localDateTime1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167046400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=5,DAY_OF_YEAR=5,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      // Undeclared exception!
      try { 
        localDateTime1.withEra(13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 13 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      Partial partial0 = new Partial(localDateTime0);
      assertNotNull(partial0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      
      Chronology chronology0 = partial0.getChronology();
      assertNotNull(chronology0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      
      boolean boolean0 = dateTimeFieldType0.isSupported(chronology0);
      assertEquals(4, localDateTime0.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(4, partial0.size());
      assertTrue(boolean0);
      
      int int0 = localDateTime0.get(dateTimeFieldType0);
      assertEquals(4, localDateTime0.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(21, int0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property1 = localDateTime0.weekyear();
      assertFalse(localDateTime_Property1.equals((Object)localDateTime_Property0));
      assertNotNull(localDateTime_Property1);
      assertNotSame(localDateTime_Property1, localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
      
      String string0 = "";
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(2184, (-1816), 0, 0, (-1816), 2800, 0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1816 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = (-2467);
      int int1 = 0;
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((-226), (-2467), (-226), 70, 0, 70, 70);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 70 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = (-648);
      int int1 = (-744);
      int int2 = (-21);
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(5, 5, (-648), (-744), (-21));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -744 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      TestMutableInterval_Basics testMutableInterval_Basics0 = new TestMutableInterval_Basics("");
      assertNotNull(testMutableInterval_Basics0);
      
      TestMutableInterval_Basics.MockInterval testMutableInterval_Basics_MockInterval0 = testMutableInterval_Basics0.new MockInterval();
      assertNotNull(testMutableInterval_Basics_MockInterval0);
      assertEquals(1052231280000L, testMutableInterval_Basics_MockInterval0.getEndMillis());
      assertEquals(1018009440000L, testMutableInterval_Basics_MockInterval0.getStartMillis());
      
      Seconds seconds0 = Seconds.secondsIn(testMutableInterval_Basics_MockInterval0);
      assertNotNull(seconds0);
      assertEquals(1052231280000L, testMutableInterval_Basics_MockInterval0.getEndMillis());
      assertEquals(1018009440000L, testMutableInterval_Basics_MockInterval0.getStartMillis());
      assertEquals(1, seconds0.size());
      assertEquals(34221840, seconds0.getSeconds());
      
      Minutes minutes0 = seconds0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(1052231280000L, testMutableInterval_Basics_MockInterval0.getEndMillis());
      assertEquals(1018009440000L, testMutableInterval_Basics_MockInterval0.getStartMillis());
      assertEquals(1, seconds0.size());
      assertEquals(34221840, seconds0.getSeconds());
      assertEquals(1, minutes0.size());
      assertEquals(570364, minutes0.getMinutes());
      
      Duration duration0 = minutes0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(1052231280000L, testMutableInterval_Basics_MockInterval0.getEndMillis());
      assertEquals(1018009440000L, testMutableInterval_Basics_MockInterval0.getStartMillis());
      assertEquals(1, seconds0.size());
      assertEquals(34221840, seconds0.getSeconds());
      assertEquals(1, minutes0.size());
      assertEquals(570364, minutes0.getMinutes());
      assertEquals(34221840L, duration0.getStandardSeconds());
      assertEquals(396L, duration0.getStandardDays());
      assertEquals(9506L, duration0.getStandardHours());
      assertEquals(570364L, duration0.getStandardMinutes());
      assertEquals(34221840000L, duration0.getMillis());
      
      Duration duration1 = Duration.standardHours(0L);
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration1, duration0);
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      
      Duration duration2 = duration0.minus((ReadableDuration) duration1);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertNotNull(duration2);
      assertNotSame(duration0, duration1);
      assertSame(duration0, duration2);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration2, duration1);
      assertSame(duration2, duration0);
      assertEquals(1052231280000L, testMutableInterval_Basics_MockInterval0.getEndMillis());
      assertEquals(1018009440000L, testMutableInterval_Basics_MockInterval0.getStartMillis());
      assertEquals(1, seconds0.size());
      assertEquals(34221840, seconds0.getSeconds());
      assertEquals(1, minutes0.size());
      assertEquals(570364, minutes0.getMinutes());
      assertEquals(34221840L, duration0.getStandardSeconds());
      assertEquals(396L, duration0.getStandardDays());
      assertEquals(9506L, duration0.getStandardHours());
      assertEquals(570364L, duration0.getStandardMinutes());
      assertEquals(34221840000L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(34221840L, duration2.getStandardSeconds());
      assertEquals(570364L, duration2.getStandardMinutes());
      assertEquals(34221840000L, duration2.getMillis());
      assertEquals(396L, duration2.getStandardDays());
      assertEquals(9506L, duration2.getStandardHours());
      
      Duration duration3 = duration0.withDurationAdded((ReadableDuration) duration2, 0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration1));
      assertNotNull(duration3);
      assertNotSame(duration0, duration1);
      assertSame(duration0, duration2);
      assertSame(duration0, duration3);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration3);
      assertNotSame(duration2, duration1);
      assertSame(duration2, duration0);
      assertSame(duration2, duration3);
      assertSame(duration3, duration0);
      assertNotSame(duration3, duration1);
      assertSame(duration3, duration2);
      assertEquals(1052231280000L, testMutableInterval_Basics_MockInterval0.getEndMillis());
      assertEquals(1018009440000L, testMutableInterval_Basics_MockInterval0.getStartMillis());
      assertEquals(1, seconds0.size());
      assertEquals(34221840, seconds0.getSeconds());
      assertEquals(1, minutes0.size());
      assertEquals(570364, minutes0.getMinutes());
      assertEquals(34221840L, duration0.getStandardSeconds());
      assertEquals(396L, duration0.getStandardDays());
      assertEquals(9506L, duration0.getStandardHours());
      assertEquals(570364L, duration0.getStandardMinutes());
      assertEquals(34221840000L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(34221840L, duration2.getStandardSeconds());
      assertEquals(570364L, duration2.getStandardMinutes());
      assertEquals(34221840000L, duration2.getMillis());
      assertEquals(396L, duration2.getStandardDays());
      assertEquals(9506L, duration2.getStandardHours());
      assertEquals(34221840L, duration3.getStandardSeconds());
      assertEquals(34221840000L, duration3.getMillis());
      assertEquals(570364L, duration3.getStandardMinutes());
      assertEquals(396L, duration3.getStandardDays());
      assertEquals(9506L, duration3.getStandardHours());
      
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadableDuration) duration3);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration3));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(duration0, duration1);
      assertSame(duration0, duration2);
      assertSame(duration0, duration3);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration3);
      assertNotSame(duration2, duration1);
      assertSame(duration2, duration0);
      assertSame(duration2, duration3);
      assertSame(duration3, duration0);
      assertNotSame(duration3, duration1);
      assertSame(duration3, duration2);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(1052231280000L, testMutableInterval_Basics_MockInterval0.getEndMillis());
      assertEquals(1018009440000L, testMutableInterval_Basics_MockInterval0.getStartMillis());
      assertEquals(1, seconds0.size());
      assertEquals(34221840, seconds0.getSeconds());
      assertEquals(1, minutes0.size());
      assertEquals(570364, minutes0.getMinutes());
      assertEquals(34221840L, duration0.getStandardSeconds());
      assertEquals(396L, duration0.getStandardDays());
      assertEquals(9506L, duration0.getStandardHours());
      assertEquals(570364L, duration0.getStandardMinutes());
      assertEquals(34221840000L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(34221840L, duration2.getStandardSeconds());
      assertEquals(570364L, duration2.getStandardMinutes());
      assertEquals(34221840000L, duration2.getMillis());
      assertEquals(396L, duration2.getStandardDays());
      assertEquals(9506L, duration2.getStandardHours());
      assertEquals(34221840L, duration3.getStandardSeconds());
      assertEquals(34221840000L, duration3.getMillis());
      assertEquals(570364L, duration3.getStandardMinutes());
      assertEquals(396L, duration3.getStandardDays());
      assertEquals(9506L, duration3.getStandardHours());
      assertEquals(4, localDateTime1.size());
      
      int int0 = localDateTime1.getDayOfYear();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration2));
      assertFalse(duration1.equals((Object)duration0));
      assertFalse(duration1.equals((Object)duration3));
      assertFalse(duration2.equals((Object)duration1));
      assertFalse(duration3.equals((Object)duration1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(duration0, duration1);
      assertSame(duration0, duration2);
      assertSame(duration0, duration3);
      assertNotSame(duration1, duration2);
      assertNotSame(duration1, duration0);
      assertNotSame(duration1, duration3);
      assertNotSame(duration2, duration1);
      assertSame(duration2, duration0);
      assertSame(duration2, duration3);
      assertSame(duration3, duration0);
      assertNotSame(duration3, duration1);
      assertSame(duration3, duration2);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(1052231280000L, testMutableInterval_Basics_MockInterval0.getEndMillis());
      assertEquals(1018009440000L, testMutableInterval_Basics_MockInterval0.getStartMillis());
      assertEquals(1, seconds0.size());
      assertEquals(34221840, seconds0.getSeconds());
      assertEquals(1, minutes0.size());
      assertEquals(570364, minutes0.getMinutes());
      assertEquals(34221840L, duration0.getStandardSeconds());
      assertEquals(396L, duration0.getStandardDays());
      assertEquals(9506L, duration0.getStandardHours());
      assertEquals(570364L, duration0.getStandardMinutes());
      assertEquals(34221840000L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(34221840L, duration2.getStandardSeconds());
      assertEquals(570364L, duration2.getStandardMinutes());
      assertEquals(34221840000L, duration2.getMillis());
      assertEquals(396L, duration2.getStandardDays());
      assertEquals(9506L, duration2.getStandardHours());
      assertEquals(34221840L, duration3.getStandardSeconds());
      assertEquals(34221840000L, duration3.getMillis());
      assertEquals(570364L, duration3.getStandardMinutes());
      assertEquals(396L, duration3.getStandardDays());
      assertEquals(9506L, duration3.getStandardHours());
      assertEquals(4, localDateTime1.size());
      assertEquals(76, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1732), 352831696, (-1732));
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      assertNotNull(localDateTime0);
      assertEquals("Mon Aug 02 00:00:00 GMT 29402804", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      
      TestInterval_Constructors testInterval_Constructors0 = new TestInterval_Constructors("hR%dF\"i7 ");
      assertNotNull(testInterval_Constructors0);
      
      TestInterval_Constructors.MockInterval testInterval_Constructors_MockInterval0 = testInterval_Constructors0.new MockInterval();
      assertNotNull(testInterval_Constructors_MockInterval0);
      assertEquals(1234L, testInterval_Constructors_MockInterval0.getStartMillis());
      assertEquals(5678L, testInterval_Constructors_MockInterval0.getEndMillis());
      assertFalse(testInterval_Constructors_MockInterval0.containsNow());
      assertEquals(4444L, testInterval_Constructors_MockInterval0.toDurationMillis());
      
      Duration duration0 = testInterval_Constructors_MockInterval0.toDuration();
      assertNotNull(duration0);
      assertEquals(1234L, testInterval_Constructors_MockInterval0.getStartMillis());
      assertEquals(5678L, testInterval_Constructors_MockInterval0.getEndMillis());
      assertFalse(testInterval_Constructors_MockInterval0.containsNow());
      assertEquals(4444L, testInterval_Constructors_MockInterval0.toDurationMillis());
      assertEquals(4L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(4444L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadableDuration) duration0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("Mon Aug 02 00:00:00 GMT 29402804", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(1234L, testInterval_Constructors_MockInterval0.getStartMillis());
      assertEquals(5678L, testInterval_Constructors_MockInterval0.getEndMillis());
      assertFalse(testInterval_Constructors_MockInterval0.containsNow());
      assertEquals(4444L, testInterval_Constructors_MockInterval0.toDurationMillis());
      assertEquals(4L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(4444L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime1.withLocalMillis(52L);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals("Mon Aug 02 00:00:00 GMT 29402804", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(1234L, testInterval_Constructors_MockInterval0.getStartMillis());
      assertEquals(5678L, testInterval_Constructors_MockInterval0.getEndMillis());
      assertFalse(testInterval_Constructors_MockInterval0.containsNow());
      assertEquals(4444L, testInterval_Constructors_MockInterval0.toDurationMillis());
      assertEquals(4L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(4444L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      LocalDateTime localDateTime3 = localDateTime2.minusDays(992);
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertNotNull(localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime0);
      assertEquals("Mon Aug 02 00:00:00 GMT 29402804", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(1234L, testInterval_Constructors_MockInterval0.getStartMillis());
      assertEquals(5678L, testInterval_Constructors_MockInterval0.getEndMillis());
      assertFalse(testInterval_Constructors_MockInterval0.containsNow());
      assertEquals(4444L, testInterval_Constructors_MockInterval0.toDurationMillis());
      assertEquals(4L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(4444L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime0.withYearOfCentury((-2428));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2428 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.era();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("5_oA>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"5_oA>\" for era is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(123L);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis(123L);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime1.withCenturyOfEra(1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.era();
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime_Property0);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for era is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TestTimeOfDay_Basics testTimeOfDay_Basics0 = new TestTimeOfDay_Basics("ljMl^]<|*]p4");
      assertNotNull(testTimeOfDay_Basics0);
      
      TestTimeOfDay_Basics.MockInstant testTimeOfDay_Basics_MockInstant0 = testTimeOfDay_Basics0.new MockInstant();
      assertNotNull(testTimeOfDay_Basics_MockInstant0);
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(testTimeOfDay_Basics_MockInstant0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) uTCDateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      
      int int0 = 12;
      int int1 = localDateTime0.getYearOfCentury();
      assertFalse(int1 == int0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(14, int1);
      
      LocalDateTime localDateTime1 = localDateTime0.withHourOfDay(12);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime0.plusHours(12);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime2.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.minuteOfHour();
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime_Property0);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      int int2 = localDateTime0.getWeekOfWeekyear();
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(7, int2);
      
      LocalDateTime localDateTime3 = localDateTime0.withYearOfEra(7);
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertNotNull(localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime1);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime3.size());
      
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2024), (-2024), (-1977));
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      assertNotNull(localDateTime0);
      assertEquals("Sat Nov 30 00:00:00 GMT 300", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      
      int int0 = localDateTime0.getCenturyOfEra();
      assertEquals("Sat Nov 30 00:00:00 GMT 300", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(2, int0);
      
      MockDate mockDate1 = new MockDate();
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotNull(mockDate1);
      
      boolean boolean0 = mockDate0.after(mockDate1);
      assertFalse(mockDate0.equals((Object)mockDate1));
      assertFalse(mockDate1.equals((Object)mockDate0));
      assertNotSame(mockDate0, mockDate1);
      assertNotSame(mockDate1, mockDate0);
      assertEquals("Sat Nov 30 00:00:00 GMT 300", mockDate0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate1.toString());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        localDateTime0.withMillisOfDay((-277));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -277 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("");
      assertNotNull(testMutableDateTime_Basics0);
      
      TestMutableDateTime_Basics.MockInstant testMutableDateTime_Basics_MockInstant0 = testMutableDateTime_Basics0.new MockInstant();
      assertNotNull(testMutableDateTime_Basics_MockInstant0);
      assertNull(testMutableDateTime_Basics_MockInstant0.toString());
      assertEquals(1018009440000L, testMutableDateTime_Basics_MockInstant0.getMillis());
      
      Chronology chronology0 = testMutableDateTime_Basics_MockInstant0.getChronology();
      assertNotNull(chronology0);
      assertNull(testMutableDateTime_Basics_MockInstant0.toString());
      assertEquals(1018009440000L, testMutableDateTime_Basics_MockInstant0.getMillis());
      
      LocalDateTime localDateTime0 = LocalDateTime.now(chronology0);
      assertNotNull(localDateTime0);
      assertNull(testMutableDateTime_Basics_MockInstant0.toString());
      assertEquals(1018009440000L, testMutableDateTime_Basics_MockInstant0.getMillis());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(2014);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNull(testMutableDateTime_Basics_MockInstant0.toString());
      assertEquals(1018009440000L, testMutableDateTime_Basics_MockInstant0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.centuryOfEra();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime_Property0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNull(testMutableDateTime_Basics_MockInstant0.toString());
      assertEquals(1018009440000L, testMutableDateTime_Basics_MockInstant0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime1.plusMinutes((-1316));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNull(testMutableDateTime_Basics_MockInstant0.toString());
      assertEquals(1018009440000L, testMutableDateTime_Basics_MockInstant0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 2879;
      MockDate mockDate0 = new MockDate(2879, 2879, (-1251));
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      assertNotNull(localDateTime0);
      assertEquals("Wed Jun 28 00:00:00 GMT 5015", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusDays((-1251));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("Wed Jun 28 00:00:00 GMT 5015", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      // Undeclared exception!
      try { 
        localDateTime1.withMillisOfDay((-2339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2339 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 1463;
      int int1 = (-2147483572);
      int int2 = 1900;
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      assertNotNull(testAbstractPartial_MockPartial0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      
      BuddhistChronology buddhistChronology0 = (BuddhistChronology)testAbstractPartial_MockPartial0.getChronology();
      assertNotNull(buddhistChronology0);
      assertEquals(2, testAbstractPartial_MockPartial0.size());
      assertEquals(1, BuddhistChronology.BE);
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(1463, 8, 1463, 5, (-2147483572), 5, 1900, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1463 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(3145L, (DateTimeZone) null);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = 70;
      LocalDateTime localDateTime1 = localDateTime0.minusHours(70);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra(70);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime2.size());
      
      LocalDateTime localDateTime3 = localDateTime2.minusWeeks(70);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertNotNull(localDateTime3);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfCentury();
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertNotNull(localDateTime_Property0);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertEquals(4, localDateTime0.size());
      
      TestMutableInterval_Constructors testMutableInterval_Constructors0 = new TestMutableInterval_Constructors("O NS\"4gRxH");
      assertNotNull(testMutableInterval_Constructors0);
      
      TestMutableInterval_Constructors.MockInterval testMutableInterval_Constructors_MockInterval0 = testMutableInterval_Constructors0.new MockInterval();
      assertNotNull(testMutableInterval_Constructors_MockInterval0);
      assertEquals(1234L, testMutableInterval_Constructors_MockInterval0.getStartMillis());
      assertFalse(testMutableInterval_Constructors_MockInterval0.containsNow());
      assertEquals(5678L, testMutableInterval_Constructors_MockInterval0.getEndMillis());
      assertEquals(4444L, testMutableInterval_Constructors_MockInterval0.toDurationMillis());
      
      DateTime dateTime0 = testMutableInterval_Constructors_MockInterval0.getStart();
      assertNotNull(dateTime0);
      assertEquals(1234L, testMutableInterval_Constructors_MockInterval0.getStartMillis());
      assertFalse(testMutableInterval_Constructors_MockInterval0.containsNow());
      assertEquals(5678L, testMutableInterval_Constructors_MockInterval0.getEndMillis());
      assertEquals(4444L, testMutableInterval_Constructors_MockInterval0.toDurationMillis());
      assertEquals(1234L, dateTime0.getMillis());
      
      DateTime dateTime1 = testMutableInterval_Constructors_MockInterval0.getStart();
      assertTrue(dateTime1.equals((Object)dateTime0));
      assertNotNull(dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1234L, testMutableInterval_Constructors_MockInterval0.getStartMillis());
      assertFalse(testMutableInterval_Constructors_MockInterval0.containsNow());
      assertEquals(5678L, testMutableInterval_Constructors_MockInterval0.getEndMillis());
      assertEquals(4444L, testMutableInterval_Constructors_MockInterval0.toDurationMillis());
      assertEquals(1234L, dateTime1.getMillis());
      
      Date date0 = dateTime1.toDate();
      assertTrue(dateTime1.equals((Object)dateTime0));
      assertNotNull(date0);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1234L, testMutableInterval_Constructors_MockInterval0.getStartMillis());
      assertFalse(testMutableInterval_Constructors_MockInterval0.containsNow());
      assertEquals(5678L, testMutableInterval_Constructors_MockInterval0.getEndMillis());
      assertEquals(4444L, testMutableInterval_Constructors_MockInterval0.toDurationMillis());
      assertEquals(1234L, dateTime1.getMillis());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", date0.toString());
      
      LocalDateTime localDateTime4 = LocalDateTime.fromDateFields(date0);
      assertTrue(dateTime1.equals((Object)dateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertNotNull(localDateTime4);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime0);
      assertEquals(1234L, testMutableInterval_Constructors_MockInterval0.getStartMillis());
      assertFalse(testMutableInterval_Constructors_MockInterval0.containsNow());
      assertEquals(5678L, testMutableInterval_Constructors_MockInterval0.getEndMillis());
      assertEquals(4444L, testMutableInterval_Constructors_MockInterval0.toDurationMillis());
      assertEquals(1234L, dateTime1.getMillis());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", date0.toString());
      assertEquals(4, localDateTime4.size());
      
      // Undeclared exception!
      try { 
        localDateTime4.withSecondOfMinute(70);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 70 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Duration duration0 = new Duration(126L, 0L);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals((-126L), duration0.getMillis());
      
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) duration0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals((-126L), duration0.getMillis());
      assertEquals(4, localDateTime1.size());
      
      Duration duration1 = duration0.multipliedBy(977L);
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals((-126L), duration0.getMillis());
      assertEquals((-123102L), duration1.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals((-2L), duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-123L), duration1.getStandardSeconds());
      
      boolean boolean0 = duration0.isLongerThan(duration1);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals((-126L), duration0.getMillis());
      assertEquals((-123102L), duration1.getMillis());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals((-2L), duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-123L), duration1.getStandardSeconds());
      assertTrue(boolean0);
      
      Date date0 = localDateTime0.toDate();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertNotNull(date0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 17:21:21 GMT 2014", date0.toString());
      
      int int0 = localDateTime1.getValue(1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(duration0, duration1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals((-126L), duration0.getMillis());
      assertEquals(4, localDateTime1.size());
      assertEquals(2, int0);
      
      LocalDateTime localDateTime2 = LocalDateTime.now();
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertTrue(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals(4, localDateTime2.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.hourOfDay();
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertTrue(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime_Property0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals(4, localDateTime2.size());
      
      LocalDateTime.Property localDateTime_Property1 = localDateTime0.yearOfCentury();
      assertTrue(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime_Property1.equals((Object)localDateTime_Property0));
      assertNotNull(localDateTime_Property1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime_Property1, localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime3 = localDateTime_Property1.addToCopy((-387L));
      assertTrue(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime_Property1.equals((Object)localDateTime_Property0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertNotNull(localDateTime3);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime_Property1, localDateTime_Property0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime3.size());
      
      LocalDateTime localDateTime4 = localDateTime3.withMonthOfYear(1);
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertTrue(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime_Property1.equals((Object)localDateTime_Property0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertNotNull(localDateTime4);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime_Property1, localDateTime_Property0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime3);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime4.size());
      
      LocalDateTime localDateTime5 = localDateTime3.withYear(1);
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertTrue(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime_Property1.equals((Object)localDateTime_Property0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime4));
      assertFalse(localDateTime5.equals((Object)localDateTime1));
      assertFalse(localDateTime5.equals((Object)localDateTime3));
      assertFalse(localDateTime5.equals((Object)localDateTime4));
      assertFalse(localDateTime5.equals((Object)localDateTime0));
      assertFalse(localDateTime5.equals((Object)localDateTime2));
      assertNotNull(localDateTime5);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime5);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime_Property1, localDateTime_Property0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime5);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime5, localDateTime1);
      assertNotSame(localDateTime5, localDateTime3);
      assertNotSame(localDateTime5, localDateTime4);
      assertNotSame(localDateTime5, localDateTime0);
      assertNotSame(localDateTime5, localDateTime2);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime5.size());
      
      LocalDateTime.Property localDateTime_Property2 = localDateTime1.dayOfYear();
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime5));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertTrue(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime5));
      assertFalse(localDateTime1.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime_Property2.equals((Object)localDateTime_Property0));
      assertFalse(localDateTime_Property2.equals((Object)localDateTime_Property1));
      assertNotNull(localDateTime_Property2);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime5);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(duration0, duration1);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime5);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime_Property2, localDateTime_Property0);
      assertNotSame(localDateTime_Property2, localDateTime_Property1);
      assertEquals(4, localDateTime0.size());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals((-126L), duration0.getMillis());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime.Property localDateTime_Property3 = localDateTime3.weekOfWeekyear();
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime5));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertTrue(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime_Property1.equals((Object)localDateTime_Property2));
      assertFalse(localDateTime_Property1.equals((Object)localDateTime_Property0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime5));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime4));
      assertFalse(localDateTime_Property3.equals((Object)localDateTime_Property2));
      assertFalse(localDateTime_Property3.equals((Object)localDateTime_Property1));
      assertFalse(localDateTime_Property3.equals((Object)localDateTime_Property0));
      assertNotNull(localDateTime_Property3);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime5);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime_Property1, localDateTime_Property2);
      assertNotSame(localDateTime_Property1, localDateTime_Property0);
      assertNotSame(localDateTime_Property1, localDateTime_Property3);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime5);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime_Property3, localDateTime_Property2);
      assertNotSame(localDateTime_Property3, localDateTime_Property1);
      assertNotSame(localDateTime_Property3, localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime3.size());
      
      LocalDateTime localDateTime6 = localDateTime1.withWeekyear(1);
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime5));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertTrue(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime5));
      assertFalse(localDateTime1.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime6.equals((Object)localDateTime3));
      assertFalse(localDateTime6.equals((Object)localDateTime1));
      assertFalse(localDateTime6.equals((Object)localDateTime0));
      assertFalse(localDateTime6.equals((Object)localDateTime4));
      assertFalse(localDateTime6.equals((Object)localDateTime5));
      assertFalse(localDateTime6.equals((Object)localDateTime2));
      assertNotNull(localDateTime6);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime5);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime6);
      assertNotSame(duration0, duration1);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime5);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime6);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime6, localDateTime3);
      assertNotSame(localDateTime6, localDateTime1);
      assertNotSame(localDateTime6, localDateTime0);
      assertNotSame(localDateTime6, localDateTime4);
      assertNotSame(localDateTime6, localDateTime5);
      assertNotSame(localDateTime6, localDateTime2);
      assertEquals(4, localDateTime0.size());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals((-126L), duration0.getMillis());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime6.size());
      
      int int1 = localDateTime6.getDayOfWeek();
      assertFalse(int1 == int0);
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime5));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertTrue(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime6));
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime5));
      assertFalse(localDateTime1.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime6));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime6.equals((Object)localDateTime3));
      assertFalse(localDateTime6.equals((Object)localDateTime1));
      assertFalse(localDateTime6.equals((Object)localDateTime0));
      assertFalse(localDateTime6.equals((Object)localDateTime4));
      assertFalse(localDateTime6.equals((Object)localDateTime5));
      assertFalse(localDateTime6.equals((Object)localDateTime2));
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime5);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime6);
      assertNotSame(duration0, duration1);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime5);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime6);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime6, localDateTime3);
      assertNotSame(localDateTime6, localDateTime1);
      assertNotSame(localDateTime6, localDateTime0);
      assertNotSame(localDateTime6, localDateTime4);
      assertNotSame(localDateTime6, localDateTime5);
      assertNotSame(localDateTime6, localDateTime2);
      assertEquals(4, localDateTime0.size());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals((-126L), duration0.getMillis());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime6.size());
      assertEquals(5, int1);
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      // Undeclared exception!
      try { 
        localDateTime6.withTime(61234, 0, 1, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 61234 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      LocalDateTime localDateTime0 = new LocalDateTime(62481320L);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusDays((-1445));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      LocalDateTime localDateTime2 = localDateTime1.minusMinutes((byte)103);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)117;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)103, (byte) (-53), (byte)68, (byte) (-102), (byte)90, (byte) (-59), (byte) (-1), (byte)13, (byte)117}, byteArray0);
      
      int int0 = 0;
      int int1 = 1405;
      LocalDateTime localDateTime3 = null;
      try {
        localDateTime3 = new LocalDateTime(0, 2828, 1405, 1405, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1405 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Partial partial0 = new Partial(localDateTime0);
      assertNotNull(partial0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      assertTrue(boolean0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfEra();
      assertNotNull(localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
      
      Chronology chronology0 = localDateTime_Property0.getChronology();
      assertNotNull(chronology0);
      assertEquals(4, localDateTime0.size());
      
      Chronology chronology1 = partial0.getChronology();
      assertNotNull(chronology1);
      assertSame(chronology1, chronology0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      
      TimeZone timeZone0 = uTCDateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals("UTC", timeZone0.getID());
      assertEquals(0, timeZone0.getRawOffset());
      assertFalse(timeZone0.useDaylightTime());
      
      Date date0 = localDateTime0.toDate(timeZone0);
      assertNotNull(date0);
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals("UTC", timeZone0.getID());
      assertEquals(0, timeZone0.getRawOffset());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      LocalDateTime.Property localDateTime_Property1 = localDateTime0.year();
      assertFalse(localDateTime_Property1.equals((Object)localDateTime_Property0));
      assertNotNull(localDateTime_Property1);
      assertNotSame(localDateTime_Property1, localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime.Property localDateTime_Property2 = localDateTime0.weekyear();
      assertFalse(localDateTime_Property2.equals((Object)localDateTime_Property1));
      assertFalse(localDateTime_Property2.equals((Object)localDateTime_Property0));
      assertNotNull(localDateTime_Property2);
      assertNotSame(localDateTime_Property2, localDateTime_Property1);
      assertNotSame(localDateTime_Property2, localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
      
      String string0 = "";
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(string0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusMillis((-296));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      Minutes minutes0 = Minutes.THREE;
      assertNotNull(minutes0);
      assertEquals(3, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = minutes0.equals(object0);
      assertEquals(3, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertFalse(boolean0);
      
      Minutes minutes1 = minutes0.negated();
      assertFalse(minutes1.equals((Object)minutes0));
      assertNotNull(minutes1);
      assertNotSame(minutes0, minutes1);
      assertNotSame(minutes1, minutes0);
      assertEquals(3, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, minutes1.size());
      assertEquals((-3), minutes1.getMinutes());
      
      LocalDateTime localDateTime2 = localDateTime1.minus((ReadablePeriod) minutes1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(minutes0.equals((Object)minutes1));
      assertFalse(minutes1.equals((Object)minutes0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(minutes0, minutes1);
      assertNotSame(minutes1, minutes0);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(3, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, minutes1.size());
      assertEquals((-3), minutes1.getMinutes());
      assertEquals(4, localDateTime2.size());
      
      LocalDateTime localDateTime3 = localDateTime2.minusHours((-296));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(minutes0.equals((Object)minutes1));
      assertFalse(minutes1.equals((Object)minutes0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertNotNull(localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(minutes0, minutes1);
      assertNotSame(minutes1, minutes0);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime2);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(3, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, minutes1.size());
      assertEquals((-3), minutes1.getMinutes());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime3.centuryOfEra();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(minutes0.equals((Object)minutes1));
      assertFalse(minutes1.equals((Object)minutes0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertNotNull(localDateTime_Property0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(minutes0, minutes1);
      assertNotSame(minutes1, minutes0);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime2);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(3, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, minutes1.size());
      assertEquals((-3), minutes1.getMinutes());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      
      LocalDateTime localDateTime4 = localDateTime3.plusYears((-296));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(minutes0.equals((Object)minutes1));
      assertFalse(minutes1.equals((Object)minutes0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertNotNull(localDateTime4);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(minutes0, minutes1);
      assertNotSame(minutes1, minutes0);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(3, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, minutes1.size());
      assertEquals((-3), minutes1.getMinutes());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime4.size());
      
      LocalDateTime.Property localDateTime_Property1 = localDateTime4.dayOfYear();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(minutes0.equals((Object)minutes1));
      assertFalse(minutes1.equals((Object)minutes0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime4));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime4));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime_Property1.equals((Object)localDateTime_Property0));
      assertNotNull(localDateTime_Property1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(minutes0, minutes1);
      assertNotSame(minutes1, minutes0);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime_Property1, localDateTime_Property0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(3, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, minutes1.size());
      assertEquals((-3), minutes1.getMinutes());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime4.size());
      
      DateTime dateTime0 = localDateTime1.toDateTime();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertNotNull(dateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime2);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(1392409281024L, dateTime0.getMillis());
      
      int int0 = localDateTime4.getMonthOfYear();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(minutes0.equals((Object)minutes1));
      assertFalse(minutes1.equals((Object)minutes0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime4));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime4));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(minutes0, minutes1);
      assertNotSame(minutes1, minutes0);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(3, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, minutes1.size());
      assertEquals((-3), minutes1.getMinutes());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime4.size());
      assertEquals(2, int0);
      
      LocalDateTime localDateTime5 = localDateTime_Property0.roundHalfEvenCopy();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(minutes0.equals((Object)minutes1));
      assertFalse(minutes1.equals((Object)minutes0));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime4));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime4));
      assertFalse(localDateTime_Property0.equals((Object)localDateTime_Property1));
      assertFalse(localDateTime5.equals((Object)localDateTime1));
      assertFalse(localDateTime5.equals((Object)localDateTime3));
      assertFalse(localDateTime5.equals((Object)localDateTime2));
      assertFalse(localDateTime5.equals((Object)localDateTime4));
      assertFalse(localDateTime5.equals((Object)localDateTime0));
      assertNotNull(localDateTime5);
      assertNotSame(localDateTime0, localDateTime5);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime1, localDateTime5);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(minutes0, minutes1);
      assertNotSame(minutes1, minutes0);
      assertNotSame(localDateTime2, localDateTime5);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime5);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime_Property0, localDateTime_Property1);
      assertNotSame(localDateTime5, localDateTime1);
      assertNotSame(localDateTime5, localDateTime3);
      assertNotSame(localDateTime5, localDateTime2);
      assertNotSame(localDateTime5, localDateTime4);
      assertNotSame(localDateTime5, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(3, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, minutes1.size());
      assertEquals((-3), minutes1.getMinutes());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime5.size());
      
      LocalDateTime localDateTime6 = localDateTime4.plusMonths((-296));
      assertFalse(localDateTime0.equals((Object)localDateTime5));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime5));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(minutes0.equals((Object)minutes1));
      assertFalse(minutes1.equals((Object)minutes0));
      assertFalse(localDateTime2.equals((Object)localDateTime5));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime4));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime5));
      assertFalse(localDateTime3.equals((Object)localDateTime4));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime5));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime6.equals((Object)localDateTime3));
      assertFalse(localDateTime6.equals((Object)localDateTime2));
      assertFalse(localDateTime6.equals((Object)localDateTime1));
      assertFalse(localDateTime6.equals((Object)localDateTime0));
      assertFalse(localDateTime6.equals((Object)localDateTime5));
      assertFalse(localDateTime6.equals((Object)localDateTime4));
      assertNotNull(localDateTime6);
      assertNotSame(localDateTime0, localDateTime5);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime6);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime1, localDateTime5);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime6);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(minutes0, minutes1);
      assertNotSame(minutes1, minutes0);
      assertNotSame(localDateTime2, localDateTime5);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime6);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime2);
      assertNotSame(localDateTime3, localDateTime6);
      assertNotSame(localDateTime3, localDateTime5);
      assertNotSame(localDateTime3, localDateTime4);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime5);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime4, localDateTime6);
      assertNotSame(localDateTime6, localDateTime3);
      assertNotSame(localDateTime6, localDateTime2);
      assertNotSame(localDateTime6, localDateTime1);
      assertNotSame(localDateTime6, localDateTime0);
      assertNotSame(localDateTime6, localDateTime5);
      assertNotSame(localDateTime6, localDateTime4);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(3, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, minutes1.size());
      assertEquals((-3), minutes1.getMinutes());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertEquals(4, localDateTime4.size());
      assertEquals(4, localDateTime6.size());
      
      LocalDate localDate0 = localDateTime2.toLocalDate();
      assertFalse(localDateTime0.equals((Object)localDateTime5));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime6));
      assertFalse(localDateTime0.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime5));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime6));
      assertFalse(localDateTime1.equals((Object)localDateTime4));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(minutes0.equals((Object)minutes1));
      assertFalse(minutes1.equals((Object)minutes0));
      assertFalse(localDateTime2.equals((Object)localDateTime5));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime4));
      assertFalse(localDateTime2.equals((Object)localDateTime6));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertNotNull(localDate0);
      assertNotSame(localDateTime0, localDateTime5);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime6);
      assertNotSame(localDateTime0, localDateTime4);
      assertNotSame(localDateTime1, localDateTime5);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime6);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(minutes0, minutes1);
      assertNotSame(minutes1, minutes0);
      assertNotSame(localDateTime2, localDateTime5);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime6);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime3);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(3, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertEquals(1, minutes1.size());
      assertEquals((-3), minutes1.getMinutes());
      assertEquals(4, localDateTime2.size());
      assertEquals(3, localDate0.size());
      
      try { 
        DateTimeZone.forOffsetHours((-296));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -296
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(2);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotNull(localDateTime1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      int int0 = localDateTime0.indexOf(dateTimeFieldType0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-1), int0);
      
      int int1 = localDateTime1.getMonthOfYear();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(int1 == int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(2, int1);
      
      int int2 = localDateTime0.getMillisOfSecond();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(320, int2);
      
      LocalDateTime localDateTime2 = localDateTime1.withWeekOfWeekyear(2);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime2);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      int int3 = localDateTime2.getEra();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(1, int3);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfDay();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType1.toString());
      assertEquals("secondOfDay", dateTimeFieldType1.getName());
      
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      assertNotNull(mockNullZoneChronology0);
      assertEquals("", mockNullZoneChronology0.toString());
      
      DurationField durationField0 = durationFieldType0.getField(mockNullZoneChronology0);
      assertNotNull(durationField0);
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("halfdays", durationField0.getName());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType1, durationField0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotNull(unsupportedDateTimeField0);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType1.toString());
      assertEquals("secondOfDay", dateTimeFieldType1.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("halfdays", durationField0.getName());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals("secondOfDay", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isSupported());
      
      DateTimeFieldType dateTimeFieldType2 = unsupportedDateTimeField0.getType();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType0));
      assertNotNull(dateTimeFieldType2);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertSame(dateTimeFieldType1, dateTimeFieldType2);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType0);
      assertSame(dateTimeFieldType2, dateTimeFieldType1);
      assertEquals("secondOfDay", dateTimeFieldType1.toString());
      assertEquals("secondOfDay", dateTimeFieldType1.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("halfdays", durationField0.getName());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals("secondOfDay", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("secondOfDay", dateTimeFieldType2.toString());
      assertEquals("secondOfDay", dateTimeFieldType2.getName());
      
      int int4 = localDateTime2.get(dateTimeFieldType2);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType0));
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertSame(dateTimeFieldType1, dateTimeFieldType2);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType0);
      assertSame(dateTimeFieldType2, dateTimeFieldType1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals("secondOfDay", dateTimeFieldType1.toString());
      assertEquals("secondOfDay", dateTimeFieldType1.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("", mockNullZoneChronology0.toString());
      assertEquals("halfdays", durationField0.getName());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals("secondOfDay", unsupportedDateTimeField0.getName());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("secondOfDay", dateTimeFieldType2.toString());
      assertEquals("secondOfDay", dateTimeFieldType2.getName());
      assertEquals(62481, int4);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.weekyear();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime_Property0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      
      Duration duration0 = Duration.parse((String) null);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      
      Duration duration1 = Duration.standardMinutes(811L);
      assertFalse(duration1.equals((Object)duration0));
      assertNotNull(duration1);
      assertNotSame(duration1, duration0);
      assertEquals(48660L, duration1.getStandardSeconds());
      assertEquals(13L, duration1.getStandardHours());
      assertEquals(48660000L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(811L, duration1.getStandardMinutes());
      
      Duration duration2 = duration0.minus(0L);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration2.equals((Object)duration1));
      assertNotNull(duration2);
      assertSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertNotSame(duration2, duration1);
      assertSame(duration2, duration0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration2.getStandardHours());
      assertEquals(0L, duration2.getStandardSeconds());
      assertEquals(0L, duration2.getMillis());
      assertEquals(0L, duration2.getStandardDays());
      assertEquals(0L, duration2.getStandardMinutes());
      
      LocalDateTime localDateTime3 = localDateTime0.minus((ReadableDuration) duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      assertNotNull(localDateTime3);
      assertSame(duration0, duration2);
      assertNotSame(duration0, duration1);
      assertSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime3, localDateTime1);
      assertSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime2);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime3.size());
      
      LocalDateTime localDateTime4 = localDateTime_Property0.roundHalfFloorCopy();
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime0));
      assertFalse(localDateTime4.equals((Object)localDateTime2));
      assertFalse(localDateTime4.equals((Object)localDateTime1));
      assertFalse(localDateTime4.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime3));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertNotNull(localDateTime4);
      assertNotSame(localDateTime0, localDateTime4);
      assertSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime1, localDateTime4);
      assertNotSame(localDateTime4, localDateTime0);
      assertNotSame(localDateTime4, localDateTime2);
      assertNotSame(localDateTime4, localDateTime1);
      assertNotSame(localDateTime4, localDateTime3);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime4);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime4.size());
      assertEquals(4, localDateTime2.size());
      
      // Undeclared exception!
      try { 
        unsupportedDateTimeField0.addWrapField(0L, 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // secondOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusMonths((-964));
      LocalDateTime localDateTime2 = localDateTime1.withDurationAdded((ReadableDuration) null, (-964));
      LocalTime localTime0 = new LocalTime((long) (-964));
      localTime0.withLocalMillis((-964));
      String string0 = "";
      localDateTime1.equals(localDateTime2);
      // Undeclared exception!
      try { 
        Seconds.parseSeconds("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusDays((-2583));
      LocalDateTime localDateTime2 = localDateTime1.minusYears((-2583));
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      Duration duration0 = Duration.ZERO;
      TestDateMidnight_Basics testDateMidnight_Basics0 = new TestDateMidnight_Basics("");
      TestDateMidnight_Basics.MockInstant testDateMidnight_Basics_MockInstant0 = testDateMidnight_Basics0.new MockInstant();
      MutablePeriod mutablePeriod0 = new MutablePeriod(duration0, testDateMidnight_Basics_MockInstant0);
      Duration duration1 = mutablePeriod0.toDurationFrom(testDateMidnight_Basics_MockInstant0);
      PeriodType periodType0 = PeriodType.standard();
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("");
      TestMutableDateTime_Basics.MockInstant testMutableDateTime_Basics_MockInstant0 = testMutableDateTime_Basics0.new MockInstant();
      Chronology chronology0 = testMutableDateTime_Basics_MockInstant0.getChronology();
      Period period0 = duration1.toPeriod(periodType0, chronology0);
      Duration duration2 = period0.toStandardDuration();
      localDateTime0.minus((ReadableDuration) duration2);
      LocalDateTime localDateTime3 = localDateTime2.withFieldAdded(durationFieldType0, (-2583));
      localDateTime1.getDayOfYear();
      ConverterManager.getInstance();
      TestLocalDateTime_Basics testLocalDateTime_Basics0 = new TestLocalDateTime_Basics("z$;\"JGuRx||r4I\"e ");
      TestLocalDateTime_Basics.MockInstant testLocalDateTime_Basics_MockInstant0 = testLocalDateTime_Basics0.new MockInstant();
      Chronology chronology1 = testLocalDateTime_Basics_MockInstant0.getChronology();
      durationFieldType0.getField(chronology1);
      localDateTime3.plusHours(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.monthOfYear();
      LocalDateTime localDateTime4 = localDateTime_Property0.addWrapFieldToCopy((-2583));
      localDateTime4.minusSeconds((-2583));
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfMonth(363);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 363 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
