/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:21:35 GMT 2018
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAmount;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import junit.framework.Assert;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MockPartial;
import org.joda.time.MockZone;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TestAbstractPartial;
import org.joda.time.TestBasePartial;
import org.joda.time.TestBaseSingleFieldPeriod;
import org.joda.time.TestDateTimeZone;
import org.joda.time.TestDateTime_Basics;
import org.joda.time.TestInstant_Basics;
import org.joda.time.TestInterval_Basics;
import org.joda.time.TestLocalDate_Basics;
import org.joda.time.TestLocalTime_Basics;
import org.joda.time.TestMonthDay_Basics;
import org.joda.time.TestMutableDateTime_Basics;
import org.joda.time.TestMutableInterval_Constructors;
import org.joda.time.TestMutableInterval_Updates;
import org.joda.time.TestTimeOfDay_Basics;
import org.joda.time.TestYearMonthDay_Basics;
import org.joda.time.TestYearMonth_Basics;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.convert.ConverterManager;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalDate_ESTest extends LocalDate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalDate localDate1 = localDate0.minusMonths(830);
      localDate1.withWeekyear((-4156));
      localDate0.plusDays(1914);
      dateTimeZone0.convertUTCToLocal(2147483645);
      // Undeclared exception!
      try { 
        localDate1.withWeekyear(2147483645);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483645 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = null;
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics((String) null);
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      testLocalDate_Basics_MockInstant0.getFields();
      Chronology chronology0 = testLocalDate_Basics_MockInstant0.getChronology();
      LocalDate localDate0 = LocalDate.now(chronology0);
      localDate0.toDate();
      localDate0.getField(0, chronology0);
      LocalDate localDate1 = localDate0.plusWeeks(0);
      localDate1.withMonthOfYear(1);
      LocalTime localTime0 = new LocalTime((long) 0, (DateTimeZone) null);
      // Undeclared exception!
      try { 
        localDate0.toDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      LocalDateTime localDateTime0 = new LocalDateTime(604800L, dateTimeZone0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Converter[");
      dateTimeZone0.getNameKey(0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "aGevpex\"G$", 0, 0, 0, 0, 0, 0, 0, 0);
      MockDate mockDate0 = new MockDate(0);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      Chronology chronology0 = localDateTime0.getChronology();
      durationFieldType0.getField(chronology0);
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 0);
      localDate0.toDateTimeAtStartOfDay();
      LocalDate localDate2 = localDate1.plusMonths(0);
      LocalDate localDate3 = localDate0.plusDays((-1));
      localDate3.withFields(localDate0);
      localDate2.toDateTimeAtStartOfDay(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("' is not supported");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      localDate0.yearOfEra();
      LocalDate localDate1 = localDate0.withWeekyear(2162);
      LocalDate.Property localDate_Property0 = localDate1.monthOfYear();
      localDate_Property0.roundHalfFloorCopy();
      localDate_Property0.getAsText();
      localDate_Property0.roundHalfCeilingCopy();
      localDate_Property0.toInterval();
      LocalDate localDate2 = localDate0.plusDays((-2972));
      localDate0.getMonthOfYear();
      localDate1.era();
      LocalDate localDate3 = localDate2.plusWeeks(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFieldType0.getRangeDurationType();
      localDate3.isSupported(dateTimeFieldType0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      TestMutableInterval_Constructors testMutableInterval_Constructors0 = new TestMutableInterval_Constructors("' is not supported");
      TestMutableInterval_Constructors.MockInterval testMutableInterval_Constructors_MockInterval0 = testMutableInterval_Constructors0.new MockInterval();
      testMutableInterval_Constructors_MockInterval0.getStart();
      testMutableInterval_Constructors_MockInterval0.toString();
      Chronology chronology0 = testMutableInterval_Constructors_MockInterval0.getChronology();
      YearMonth.now();
      localDate3.isSupported((DurationFieldType) null);
      localDate2.toDateTimeAtCurrentTime(dateTimeZone0);
      dateTimeFieldType1.getField(chronology0);
      LocalTime localTime0 = new LocalTime((-1L));
      localDate0.toLocalDateTime(localTime0);
      // Undeclared exception!
      try { 
        localDate1.property(dateTimeFieldType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfHour' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(4936L);
      LocalDate localDate0 = localDateTime0.toLocalDate();
      localDate0.withYear(64);
      LocalDate localDate1 = localDate0.withCenturyOfEra(1900);
      localDate1.getEra();
      LocalDate localDate2 = localDate0.plusMonths(64);
      LocalDate localDate3 = localDate2.plusWeeks((-325));
      LocalDate.Property localDate_Property0 = localDate3.centuryOfEra();
      localDate3.isBefore(localDate0);
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      LocalDate localDate4 = LocalDate.now(chronology0);
      localDate1.dayOfMonth();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      localDate1.toDateTimeAtStartOfDay((DateTimeZone) uTCDateTimeZone0);
      int int0 = new Integer(64);
      localDate_Property0.toString();
      localDate4.withYearOfEra(1);
      localDate4.getValue(0);
      LocalDate localDate5 = localDate4.plusDays((-5342));
      localDate5.toDateTimeAtMidnight();
      // Undeclared exception!
      try { 
        localDate2.getField(64, chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 64
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Weeks weeks0 = Weeks.MIN_VALUE;
      int int0 = 3;
      // Undeclared exception!
      try { 
        localDate0.withPeriodAdded(weeks0, 3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 3
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestAbstractPartial.MockPartial testAbstractPartial_MockPartial0 = new TestAbstractPartial.MockPartial();
      Chronology chronology0 = testAbstractPartial_MockPartial0.getChronology();
      LocalDate localDate0 = new LocalDate(chronology0);
      int int0 = 2;
      LocalTime localTime0 = new LocalTime(2, 2);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
      localDate0.getDayOfYear();
      // Undeclared exception!
      try { 
        localDate0.toDateTime(localTime0, (DateTimeZone) uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("' is not supported");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      localDate0.yearOfEra();
      LocalDate localDate1 = localDate0.withWeekyear(2162);
      LocalDate.Property localDate_Property0 = localDate1.monthOfYear();
      localDate_Property0.toInterval();
      localDate0.getYearOfCentury();
      LocalDate localDate2 = localDate_Property0.addWrapFieldToCopy((-2969));
      localDate2.getDayOfMonth();
      localDate1.era();
      LocalDate localDate3 = localDate2.plusWeeks(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      localDate3.isSupported(dateTimeFieldType0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      localDate3.dayOfWeek();
      TestMutableInterval_Constructors testMutableInterval_Constructors0 = new TestMutableInterval_Constructors("' is not supported");
      // Undeclared exception!
      try { 
        localDate1.property(dateTimeFieldType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfHour' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MockZone mockZone0 = new MockZone(12053L, 0, 2652);
      mockZone0.writeReplace();
      LocalDate localDate0 = LocalDate.now((DateTimeZone) mockZone0);
      mockZone0.getShortName(0L);
      LocalDate localDate1 = localDate0.minusWeeks(2652);
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      localDate_Property0.getAsText();
      localDate1.toDateTimeAtCurrentTime((DateTimeZone) mockZone0);
      localDate_Property0.addToCopy(2652);
      localDate1.toString();
      // Undeclared exception!
      try { 
        localDate0.withDayOfWeek((-3033));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3033 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDate localDate0 = LocalDate.now((DateTimeZone) uTCDateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      localDate0.plusMonths(8);
      LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, 8);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      dateTimeFieldType0.getRangeDurationType();
      LocalDate.Property localDate_Property0 = localDate1.dayOfYear();
      TestInstant_Basics testInstant_Basics0 = new TestInstant_Basics("g aE$xqp_Yl/");
      TestInstant_Basics.MockInstant testInstant_Basics_MockInstant0 = testInstant_Basics0.new MockInstant();
      testInstant_Basics_MockInstant0.getZone();
      localDate_Property0.getDifference(testInstant_Basics_MockInstant0);
      localDate_Property0.getField();
      localDate0.withCenturyOfEra(735);
      localDate1.withFieldAdded(durationFieldType0, 889);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.toDateTimeAtMidnight();
      localDate0.dayOfYear();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(0);
      localDateTime1.era();
      LocalDateTime localDateTime2 = localDateTime1.plusMinutes(0);
      localDate0.toDate();
      LocalDateTime localDateTime3 = localDateTime2.minusMonths(0);
      Date date0 = localDateTime3.toDate();
      localDate0.plusYears(0);
      LocalDate localDate1 = LocalDate.fromDateFields(date0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(502, "MESZ", 0, 0, 0, 0, 0, 0, 0, 0, 502);
      Locale locale0 = Locale.CANADA_FRENCH;
      Period period0 = new Period(0, (-2147483622), 2904, (-965), 0, 0, 0, 0);
      localDateTime0.minus((ReadablePeriod) period0);
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      LocalDate.fromCalendarFields(calendar0);
      localDateTime0.yearOfCentury();
      localDateTime2.toLocalTime();
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      localDate0.indexOf(dateTimeFieldType0);
      LocalDate.Property localDate_Property1 = localDate0.yearOfCentury();
      localDate1.minusYears(0);
      localDate_Property0.withMaximumValue();
      localDate0.getMonthOfYear();
      localDate1.withCenturyOfEra(0);
      localDate_Property1.addToCopy((-858));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(643L);
      Period period0 = Period.days((-902));
      period0.withSeconds((-902));
      LocalDate localDate1 = localDate0.minus(period0);
      Period period1 = period0.withMillis(3241);
      LocalDate localDate2 = localDate1.minusDays(3241);
      Partial partial0 = new Partial();
      Partial partial1 = partial0.minus(period1);
      LocalTime localTime0 = new LocalTime(1000L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      localDate2.toDateTime(localTime0, dateTimeZone0);
      // Undeclared exception!
      try { 
        partial1.getField(2410);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2410
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = null;
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics((String) null);
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      testLocalDate_Basics_MockInstant0.getFields();
      Chronology chronology0 = testLocalDate_Basics_MockInstant0.getChronology();
      LocalDate localDate0 = LocalDate.now(chronology0);
      localDate0.toDate();
      testLocalDate_Basics_MockInstant0.getFields();
      localDate0.getField(0, chronology0);
      LocalDate localDate1 = localDate0.plusWeeks(0);
      LocalTime localTime0 = new LocalTime((long) 0, (DateTimeZone) null);
      localDate1.getChronology();
      localTime0.getField(0, chronology0);
      // Undeclared exception!
      try { 
        localDate0.toDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(693L);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      int int0 = (-2147483644);
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded(durationFieldType0, (-2147483644));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147481674 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      LocalDateTime localDateTime0 = new LocalDateTime(604800L, dateTimeZone0);
      dateTimeZone0.getNameKey(0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "aGevpex\"G$", 0, 0, 0, 0, 0, 0, 0, 1900);
      Date date0 = localDateTime0.toDate((TimeZone) simpleTimeZone0);
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      Chronology chronology0 = localDateTime0.getChronology();
      durationFieldType0.getField(chronology0);
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 0);
      localDate0.toDateTimeAtStartOfDay();
      localDate1.plusMonths(0);
      localDate0.toString((String) null);
      LocalDate.fromDateFields(date0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withWeekyear((-1871));
      MonthDay monthDay0 = new MonthDay();
      localDate1.dayOfYear();
      localDate1.withEra(0);
      localDate0.plusMonths(19);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      LocalDateTime localDateTime0 = new LocalDateTime(604800L, dateTimeZone0);
      dateTimeZone0.getNameKey(0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "aGevpex\"G$", 0, 0, 0, 0, 0, 0, 0, 1900);
      Date date0 = localDateTime0.toDate((TimeZone) simpleTimeZone0);
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      Chronology chronology0 = localDateTime0.getChronology();
      durationFieldType0.getField(chronology0);
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 0);
      localDate0.toDateTimeAtStartOfDay();
      LocalDate localDate2 = localDate1.plusMonths(0);
      // Undeclared exception!
      try { 
        localDate2.compareTo((ReadablePartial) localDateTime0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.minusWeeks(2169);
      localDate1.getFieldTypes();
      LocalDate localDate2 = localDate1.plusMonths((-920));
      localDate2.minusDays((-920));
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      // Undeclared exception!
      try { 
        LocalTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("' is not supported");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      localDate0.yearOfEra();
      LocalDate localDate1 = localDate0.withWeekyear(2162);
      LocalDate.Property localDate_Property0 = localDate1.monthOfYear();
      localDate_Property0.getAsText();
      LocalDate localDate2 = localDate_Property0.roundHalfCeilingCopy();
      localDate_Property0.toInterval();
      localDate1.isBefore(localDate2);
      LocalDate localDate3 = localDate_Property0.addWrapFieldToCopy((-2972));
      localDate_Property0.roundCeilingCopy();
      localDate3.getDayOfMonth();
      localDate0.getMonthOfYear();
      localDate1.era();
      LocalDate localDate4 = localDate3.plusWeeks(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      localDate4.isSupported(dateTimeFieldType0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      TestMutableInterval_Constructors testMutableInterval_Constructors0 = new TestMutableInterval_Constructors("' is not supported");
      TestMutableInterval_Constructors.MockInterval testMutableInterval_Constructors_MockInterval0 = testMutableInterval_Constructors0.new MockInterval();
      testMutableInterval_Constructors_MockInterval0.getStart();
      testMutableInterval_Constructors_MockInterval0.toString();
      Chronology chronology0 = testMutableInterval_Constructors_MockInterval0.getChronology();
      dateTimeFieldType1.getField(chronology0);
      // Undeclared exception!
      try { 
        localDate1.property(dateTimeFieldType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfHour' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestMutableInterval_Updates testMutableInterval_Updates0 = new TestMutableInterval_Updates((String) null);
      TestMutableInterval_Updates.MockBadInterval testMutableInterval_Updates_MockBadInterval0 = testMutableInterval_Updates0.new MockBadInterval();
      Chronology chronology0 = testMutableInterval_Updates_MockBadInterval0.getChronology();
      testMutableInterval_Updates0.testSetDurationBeforeEnd_RI3();
      LocalDate localDate0 = new LocalDate(chronology0);
      localDate0.getLocalMillis();
      localDate0.getCenturyOfEra();
      LocalDate localDate1 = localDate0.plusDays((-1029));
      Days days0 = Days.ONE;
      LocalDate localDate2 = localDate0.withPeriodAdded(days0, 20);
      localDate2.getWeekOfWeekyear();
      localDate2.centuryOfEra();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(20, 20);
      localDate1.toDateTimeAtStartOfDay(dateTimeZone0);
      localDate2.minusMonths((-1029));
      localDate0.withPeriodAdded(days0, 772);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockPartial mockPartial0 = new MockPartial();
      LocalDate localDate0 = new LocalDate();
      localDate0.dayOfWeek();
      localDate0.toString((String) null, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDate localDate0 = new LocalDate((DateTimeZone) uTCDateTimeZone0);
      int int0 = (-7200000);
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, (-7200000));
      localDate1.withYear(0);
      localDate0.equals(localDate1);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      uTCDateTimeZone0.getMillisKeepLocal((DateTimeZone) null, 500L);
      int int1 = 267;
      localDate0.toInterval();
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      Chronology chronology0 = testLocalDate_Basics_MockInstant0.getChronology();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(0, 0, 267, (-7200000), 0, 0, 94, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -7200000 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MockZone mockZone0 = new MockZone(12053L, 0, 2652);
      mockZone0.writeReplace();
      LocalDate localDate0 = LocalDate.now((DateTimeZone) mockZone0);
      mockZone0.getShortName(0L);
      LocalDate localDate1 = localDate0.minusWeeks(2652);
      LocalDate localDate2 = localDate1.plusWeeks((-2147483647));
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      localDate_Property0.getAsText();
      localDate_Property0.addToCopy(2652);
      localDate1.toString();
      localDate2.getWeekOfWeekyear();
      // Undeclared exception!
      try { 
        localDate0.withDayOfWeek((-3033));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3033 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("' is not supported");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      localDate0.yearOfEra();
      LocalDate localDate1 = localDate0.withWeekyear(2162);
      LocalDate.Property localDate_Property0 = localDate1.monthOfYear();
      localDate_Property0.roundHalfFloorCopy();
      localDate_Property0.getAsText();
      localDate_Property0.roundHalfCeilingCopy();
      localDate_Property0.toInterval();
      LocalDate localDate2 = localDate_Property0.addWrapFieldToCopy((-2972));
      localDate2.getDayOfMonth();
      localDate0.getMonthOfYear();
      localDate1.era();
      LocalDate localDate3 = localDate2.plusWeeks(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      localDate3.isSupported(dateTimeFieldType0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      TestMutableInterval_Constructors testMutableInterval_Constructors0 = new TestMutableInterval_Constructors("' is not supported");
      TestMutableInterval_Constructors.MockInterval testMutableInterval_Constructors_MockInterval0 = testMutableInterval_Constructors0.new MockInterval();
      testMutableInterval_Constructors_MockInterval0.getStart();
      testMutableInterval_Constructors_MockInterval0.toString();
      Chronology chronology0 = testMutableInterval_Constructors_MockInterval0.getChronology();
      localDate2.toDateTimeAtCurrentTime(dateTimeZone0);
      dateTimeFieldType1.getField(chronology0);
      // Undeclared exception!
      try { 
        localDate1.property(dateTimeFieldType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfHour' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.toDateTimeAtMidnight();
      localDate0.era();
      int int0 = 0;
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(0);
      localDateTime1.era();
      LocalDateTime localDateTime2 = localDateTime1.plusMinutes(0);
      localDate0.toDate();
      int int1 = 0;
      // Undeclared exception!
      try { 
        localDateTime2.withDayOfMonth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("' is not supported");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      localDate0.yearOfEra();
      LocalDate localDate1 = localDate0.withWeekyear(2162);
      LocalDate.Property localDate_Property0 = localDate1.monthOfYear();
      localDate_Property0.getAsText();
      localDate_Property0.roundHalfCeilingCopy();
      localDate_Property0.toInterval();
      LocalDate localDate2 = localDate_Property0.addWrapFieldToCopy((-2972));
      localDate2.getDayOfMonth();
      localDate0.getMonthOfYear();
      localDate1.era();
      LocalDate localDate3 = localDate2.plusWeeks(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      localDate3.isSupported(dateTimeFieldType0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      TestMutableInterval_Constructors testMutableInterval_Constructors0 = new TestMutableInterval_Constructors("' is not supported");
      TestMutableInterval_Constructors.MockInterval testMutableInterval_Constructors_MockInterval0 = testMutableInterval_Constructors0.new MockInterval();
      testMutableInterval_Constructors_MockInterval0.getStart();
      testMutableInterval_Constructors_MockInterval0.toString();
      Chronology chronology0 = testMutableInterval_Constructors_MockInterval0.getChronology();
      dateTimeFieldType1.getField(chronology0);
      localDate1.toInterval(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      localDate3.isSupported(durationFieldType0);
      // Undeclared exception!
      try { 
        localDate0.get(dateTimeFieldType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfHour' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) uTCDateTimeZone0);
      Seconds seconds0 = Seconds.TWO;
      Interval interval0 = new Interval(mutableDateTime0, seconds0);
      DateTime dateTime0 = interval0.getStart();
      DateTime dateTime1 = dateTime0.withSecondOfMinute(3);
      dateTime1.compareTo(mutableDateTime0);
      Duration duration0 = Duration.millis(2);
      duration0.toStandardMinutes();
      dateTime1.plus((ReadableDuration) duration0);
      Chronology chronology0 = dateTime1.getChronology();
      LocalDate localDate0 = new LocalDate(chronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      dateTimeFieldType0.getRangeDurationType();
      localDate0.get(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dateTime1.withField(dateTimeFieldType0, 2186);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2186 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      mockNullZoneChronology0.era();
      java.time.Instant instant0 = MockInstant.ofEpochSecond((long) 0);
      ChronoUnit chronoUnit0 = ChronoUnit.MINUTES;
      java.time.Duration duration0 = java.time.Duration.of(0, chronoUnit0);
      java.time.Instant instant1 = MockInstant.plus(instant0, (TemporalAmount) duration0);
      Date date0 = Date.from(instant1);
      DateTimeUtils.setCurrentMillisSystem();
      LocalDate.fromDateFields(date0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 1458;
      int int1 = (-76);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalDate localDate0 = new LocalDate();
      localDate0.getDayOfYear();
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      // Undeclared exception!
      try { 
        localDate_Property0.setCopy((-76));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -76 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate.Property localDate_Property0 = localDate0.year();
      MockPartial mockPartial0 = new MockPartial();
      mockPartial0.equals(localDate0);
      localDate_Property0.equals(mockPartial0);
      localDate0.year();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      DateTime dateTime1 = dateTime0.withMillisOfDay(2);
      DateTimeZone dateTimeZone0 = dateTime1.getZone();
      localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      localDate_Property0.getMaximumShortTextLength((Locale) null);
      localDate_Property0.getMillis();
      localDate0.getDayOfMonth();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(86400L, (Chronology) null);
      DateTimeFieldType.clockhourOfHalfday();
      Years years0 = Years.years(603);
      LocalDate localDate1 = localDate0.withPeriodAdded(years0, (-2460));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, " 2|'oCZ[ed!!!.O*/2");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      localDate1.toLocalDateTime(localTime0);
      localDate1.toDateTimeAtStartOfDay();
      localDate1.compareTo((ReadablePartial) localDate0);
      localDate0.compareTo((ReadablePartial) localDate1);
      localDate1.size();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestMonthDay_Basics testMonthDay_Basics0 = new TestMonthDay_Basics("Zone must not be null");
      TestMonthDay_Basics.MockMD testMonthDay_Basics_MockMD0 = testMonthDay_Basics0.new MockMD();
      Chronology chronology0 = testMonthDay_Basics_MockMD0.getChronology();
      Assert.assertEquals(0.0F, 0.0F, 0.0F);
      DateTime dateTime0 = new DateTime((Object) null, chronology0);
      LocalDate localDate0 = dateTime0.toLocalDate();
      localDate0.dayOfMonth();
      Minutes minutes0 = Minutes.ONE;
      Hours hours0 = minutes0.toStandardHours();
      Hours hours1 = hours0.minus((Hours) null);
      DurationFieldType durationFieldType0 = hours1.getFieldType();
      localDate0.isSupported(durationFieldType0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      localDate_Property0.withMinimumValue();
      localDate0.withFieldAdded(durationFieldType0, 87);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 2);
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("IY_CQ#{C%Q^0VNkt=J*");
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      // Undeclared exception!
      try { 
        partial0.withChronologyRetainFields(testDateTime_Basics_MockEqualsChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // secondOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(1751L);
      DateTimeFieldType dateTimeFieldType0 = null;
      localDate0.toString();
      DateTimeUtils.setCurrentMillisFixed(1L);
      LocalDateTime localDateTime0 = new LocalDateTime();
      Date date0 = localDateTime0.toDate();
      LocalDate.fromDateFields(date0);
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      // Undeclared exception!
      try { 
        UnsupportedDateTimeField.getInstance((DateTimeFieldType) null, millisDurationField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      localDate0.getMonthOfYear();
      localDate0.getDayOfYear();
      int int0 = 0;
      DateTimeUtils.setCurrentMillisSystem();
      // Undeclared exception!
      try { 
        localDate0.withDayOfWeek(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("' is not supported");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      localDate0.yearOfEra();
      LocalDate localDate1 = localDate0.withWeekyear(2162);
      LocalDate.Property localDate_Property0 = localDate1.monthOfYear();
      localDate_Property0.getAsText();
      localDate_Property0.roundHalfCeilingCopy();
      localDate_Property0.toInterval();
      LocalDate localDate2 = localDate_Property0.addWrapFieldToCopy((-2972));
      localDate2.getDayOfMonth();
      localDate0.getMonthOfYear();
      localDate1.era();
      LocalDate localDate3 = localDate2.plusWeeks(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      localDate3.isSupported(dateTimeFieldType0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      TestMutableInterval_Constructors testMutableInterval_Constructors0 = new TestMutableInterval_Constructors("' is not supported");
      TestMutableInterval_Constructors.MockInterval testMutableInterval_Constructors_MockInterval0 = testMutableInterval_Constructors0.new MockInterval();
      testMutableInterval_Constructors_MockInterval0.getStart();
      testMutableInterval_Constructors_MockInterval0.toString();
      Chronology chronology0 = testMutableInterval_Constructors_MockInterval0.getChronology();
      dateTimeFieldType1.getField(chronology0);
      // Undeclared exception!
      try { 
        localDate1.property(dateTimeFieldType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfHour' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDate localDate0 = LocalDate.now((DateTimeZone) uTCDateTimeZone0);
      LocalDate localDate1 = localDate0.minusWeeks(3);
      localDate0.minusMonths(604800);
      LocalDate localDate2 = localDate1.withDayOfMonth(3);
      int int0 = 3;
      DateTime dateTime0 = new DateTime(3, 3, 3, 3, 3, 0);
      DateTime dateTime1 = dateTime0.withMinuteOfHour(3);
      DateTime dateTime2 = dateTime1.plusYears(3);
      LocalTime localTime0 = dateTime2.toLocalTime();
      dateTime2.getCenturyOfEra();
      localTime0.getValues();
      LocalTime localTime1 = localTime0.withLocalMillis(3);
      Months months0 = Months.FIVE;
      Months months1 = months0.multipliedBy(0);
      localTime1.plus(months1);
      localDate0.toDateTime(localTime1);
      localDate2.compareTo((ReadablePartial) localDate1);
      localDate2.withYearOfCentury(0);
      localDate0.getWeekOfWeekyear();
      LocalDate.Property localDate_Property0 = localDate2.dayOfMonth();
      Locale locale0 = Locale.ITALY;
      locale0.getScript();
      // Undeclared exception!
      try { 
        localDate_Property0.setCopy("org.joda.time.chrono.GJMonthOfYearDateTimeField", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org.joda.time.chrono.GJMonthOfYearDateTimeField\" for dayOfMonth is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      int int0 = 3;
      LocalDate localDate1 = localDate0.plusYears(3);
      LocalDate localDate2 = localDate1.minusWeeks(3);
      LocalDate.Property localDate_Property0 = localDate2.weekOfWeekyear();
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        localDate_Property0.setCopy("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for weekOfWeekyear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L, (Chronology) null);
      Minutes minutes0 = Minutes.TWO;
      DateTimeFieldType dateTimeFieldType0 = null;
      localDate0.isSupported((DateTimeFieldType) null);
      Minutes minutes1 = minutes0.plus((Minutes) null);
      LocalDate localDate1 = localDate0.minus(minutes1);
      minutes1.toStandardWeeks();
      localDate0.getYearOfEra();
      minutes1.compareTo((BaseSingleFieldPeriod) minutes0);
      minutes0.dividedBy(2563);
      minutes0.toStandardSeconds();
      localDate1.getEra();
      minutes1.minus(876);
      // Undeclared exception!
      try { 
        localDate1.getValue((-2590));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -2590
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = (-1108);
      int int1 = 1482;
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate((-1108), 1482, 329, mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "";
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("");
      TestMutableDateTime_Basics.MockEqualsChronology testMutableDateTime_Basics_MockEqualsChronology0 = testMutableDateTime_Basics0.new MockEqualsChronology();
      testMutableDateTime_Basics0.testClone();
      Chronology chronology0 = testMutableDateTime_Basics_MockEqualsChronology0.withUTC();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(object0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-4440L), 0, 0);
      LocalDate localDate0 = new LocalDate((-4440L), (DateTimeZone) mockZone0);
      LocalDate localDate1 = localDate0.withCenturyOfEra(660);
      LocalDate localDate2 = localDate1.withPeriodAdded((ReadablePeriod) null, 0);
      LocalDate localDate3 = localDate2.minusWeeks(660);
      localDate3.minusDays(0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(35L);
      Minutes minutes0 = Minutes.TWO;
      LocalDate localDate1 = localDate0.plus(minutes0);
      int int0 = 4007;
      // Undeclared exception!
      try { 
        localDate1.withYearOfCentury(4007);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4007 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestLocalTime_Basics testLocalTime_Basics0 = new TestLocalTime_Basics((String) null);
      TestLocalTime_Basics.MockInstant testLocalTime_Basics_MockInstant0 = testLocalTime_Basics0.new MockInstant();
      Chronology chronology0 = testLocalTime_Basics_MockInstant0.getChronology();
      LocalDate localDate0 = new LocalDate(chronology0);
      int int0 = 3933;
      // Undeclared exception!
      try { 
        localDate0.minusYears(3933);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      int int1 = 2;
      mockGregorianCalendar0.setWeekDate(0, 0, 2);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      dateTimeZone0.getName((long) 0, locale0);
      dateTimeZone0.getStandardOffset(1000L);
      localDate0.toDateTime(localTime0, dateTimeZone0);
      localDate0.toLocalDateTime(localTime0);
      localDate0.dayOfWeek();
      LocalDate.fromCalendarFields(mockGregorianCalendar0);
      localDate0.yearOfEra();
      localDate0.getYear();
      localDate0.getWeekOfWeekyear();
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.clear(52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDate localDate0 = new LocalDate(2L, (Chronology) null);
      int int0 = 0;
      LocalDate localDate1 = localDate0.plusDays(0);
      LocalDate localDate2 = localDate1.plusMonths((-28));
      LocalDate localDate3 = localDate2.plusYears(0);
      DateTime dateTime0 = new DateTime();
      Duration duration0 = Duration.standardMinutes(2521L);
      Period period0 = new Period(dateTime0, duration0);
      int int1 = (-1417);
      Duration.standardHours(0L);
      Period period1 = period0.minusHours((-1417));
      Period period2 = period1.plusMillis((-1417));
      LocalDate localDate4 = localDate3.minus(period2);
      // Undeclared exception!
      try { 
        localDate4.withDayOfYear((-1417));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1417 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("[>4pv8f)N|Rb<U,b?Ua");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      Chronology chronology0 = testLocalDate_Basics_MockInstant0.getChronology();
      LocalDate localDate0 = new LocalDate(0L, chronology0);
      LocalDate localDate1 = localDate0.plusDays(3201);
      localDate1.withYear(3201);
      Weeks weeks0 = Weeks.MAX_VALUE;
      // Undeclared exception!
      try { 
        weeks0.multipliedBy(3201);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483647 * 3201
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      TimeZone timeZone0 = testDateTimeZone_MockDateTimeZone0.toTimeZone();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      localDate0.getWeekOfWeekyear();
      LocalTime localTime0 = new LocalTime((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      LocalTime localTime1 = localTime0.withMillisOfSecond(7);
      LocalTime localTime2 = localTime1.minusMillis(0);
      LocalTime localTime3 = localTime2.plusSeconds(0);
      localDate0.equals(localTime3);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        localDate0.withFieldAdded(durationFieldType0, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'eras' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      uTCDateTimeZone0.convertLocalToUTC(798L, false);
      LocalDate localDate0 = LocalDate.now((DateTimeZone) uTCDateTimeZone0);
      localDate0.toDateTimeAtMidnight((DateTimeZone) uTCDateTimeZone0);
      localDate0.withDayOfYear(24);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInterval_Basics testInterval_Basics0 = new TestInterval_Basics("Field '");
      testInterval_Basics0.testWithEndInstant_RI1();
      TestInterval_Basics.MockInterval testInterval_Basics_MockInterval0 = testInterval_Basics0.new MockInterval();
      Chronology chronology0 = testInterval_Basics_MockInterval0.getChronology();
      LocalDate localDate0 = LocalDate.now(chronology0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("Field '");
      localDate0.plusDays(0);
      localDate0.toDateTime(localTime0, (DateTimeZone) null);
      localDate0.getDayOfWeek();
      LocalDate localDate1 = localDate0.plusYears(60);
      localDate1.toInterval((DateTimeZone) null);
      YearMonth yearMonth0 = new YearMonth((DateTimeZone) null);
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("Field '");
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      // Undeclared exception!
      try { 
        yearMonth0.withChronologyRetainFields(testDateTime_Basics_MockEqualsChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "Field '";
      TestYearMonthDay_Basics testYearMonthDay_Basics0 = new TestYearMonthDay_Basics("Field '");
      TestYearMonthDay_Basics.MockInstant testYearMonthDay_Basics_MockInstant0 = testYearMonthDay_Basics0.new MockInstant();
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("]@~}QN&E&");
      testLocalDate_Basics0.testIsAfter_LocalDate();
      testLocalDate_Basics0.testEqualsHashCode();
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      Assert.assertNotNull("Field '", (Object) testLocalDate_Basics_MockInstant0);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("Field '");
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(testYearMonthDay_Basics_MockInstant0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestYearMonthDay_Basics testYearMonthDay_Basics0 = new TestYearMonthDay_Basics("4q8Tb{P]S");
      TestYearMonthDay_Basics.MockInstant testYearMonthDay_Basics_MockInstant0 = testYearMonthDay_Basics0.new MockInstant();
      Chronology chronology0 = testYearMonthDay_Basics_MockInstant0.getChronology();
      LocalDate localDate0 = LocalDate.now(chronology0);
      // Undeclared exception!
      try { 
        localDate0.withYear((-1038));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.withYearOfEra(2542);
      localDate0.isEqual(localDate1);
      LocalDate.Property localDate_Property0 = localDate1.weekOfWeekyear();
      localDate_Property0.addWrapFieldToCopy(2542);
      String string0 = "6bKBUi/SQOZJG*.";
      Partial partial0 = new Partial(localDate0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      localDate1.isEqual(partial0);
      // Undeclared exception!
      try { 
        LocalDate.parse("6bKBUi/SQOZJG*.", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"6bKBUi/SQOZJG*.\" is malformed at \"bKBUi/SQOZJG*.\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      localDate0.isSupported(durationFieldType0);
      localDate0.minusWeeks(0);
      LocalDate localDate1 = localDate0.withWeekyear((-898));
      LocalDate localDate2 = localDate1.minusWeeks((-898));
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("0c>~w`Cu+w:");
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      DateTime dateTime0 = new DateTime((Chronology) testDateTime_Basics_MockEqualsChronology0);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Interval interval0 = new Interval(dateTime0, duration0);
      Period period0 = interval0.toPeriod();
      LocalDate localDate3 = localDate2.minus(period0);
      duration0.toPeriod((Chronology) testDateTime_Basics_MockEqualsChronology0);
      localDate1.toDateTime((LocalTime) null);
      localDate0.withFields(localDate1);
      testDateTime_Basics0.testMinusMillis_int();
      LocalDate.now();
      LocalDate localDate4 = localDate3.withYearOfCentury(0);
      localDate4.minusWeeks(63);
      // Undeclared exception!
      try { 
        LocalDate.now((Chronology) testDateTime_Basics_MockEqualsChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-2361L), (-1), 901);
      mockZone0.winterOffset = 453;
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) mockZone0);
      Duration duration0 = Duration.standardMinutes((-444L));
      localDateTime0.withDurationAdded(duration0, 2468);
      Hours hours0 = Hours.EIGHT;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      DurationFieldType durationFieldType1 = unsupportedDurationField0.getType();
      localDateTime0.isSupported(durationFieldType1);
      LocalDate localDate0 = localDateTime0.toLocalDate();
      localDate0.toDateTimeAtStartOfDay((DateTimeZone) mockZone0);
      // Undeclared exception!
      try { 
        LocalDate.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTimeUtils.setCurrentMillisOffset((-1L));
      localDate0.withFields((ReadablePartial) null);
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      localDate_Property0.getMaximumValue();
      // Undeclared exception!
      try { 
        localDate0.compareTo((ReadablePartial) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics("]S@H>~~}O");
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      Chronology chronology0 = testYearMonth_Basics_MockYM0.getChronology();
      LocalDate localDate0 = new LocalDate(chronology0);
      localDate0.getWeekyear();
      testYearMonth_Basics_MockYM0.getFields();
      testYearMonth_Basics0.testWithField_same();
      int int0 = (-1205);
      // Undeclared exception!
      try { 
        localDate0.getValue((-1205));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -1205
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(208, 208, 208, 208, 208, 0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      localDate0.getValue(1);
      LocalDate localDate1 = localDate0.plusYears(208);
      mockGregorianCalendar0.clear(0);
      localDate0.getMonthOfYear();
      LocalDate localDate2 = localDate0.minusMonths(0);
      localDate2.year();
      localDate1.minusWeeks(12);
      LocalDate.Property localDate_Property0 = localDate1.centuryOfEra();
      LocalDate localDate3 = localDate_Property0.withMaximumValue();
      LocalDate.Property localDate_Property1 = localDate3.yearOfCentury();
      localDate3.plusWeeks(0);
      localDate_Property1.addWrapFieldToCopy(491);
      LocalDate localDate4 = localDate_Property0.roundHalfEvenCopy();
      TestMonthDay_Basics testMonthDay_Basics0 = new TestMonthDay_Basics("DDGl4g)`E-)V;Z?7\"");
      TestMonthDay_Basics.MockMD testMonthDay_Basics_MockMD0 = testMonthDay_Basics0.new MockMD();
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("+01:00");
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      testDateTime_Basics_MockEqualsChronology0.getZone();
      testMonthDay_Basics_MockMD0.toDateTime((DateTimeZone) null);
      localDate4.toDateTime((ReadableInstant) null);
      localDate3.dayOfMonth();
      localDate3.minusWeeks(1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      String string0 = "t";
      uTCProvider0.getZone("t");
      LocalDate localDate0 = new LocalDate(2543L, (DateTimeZone) null);
      int int0 = 2510;
      LocalDate localDate1 = localDate0.minusMonths(2510);
      localDate1.toDateTimeAtMidnight((DateTimeZone) null);
      localDate1.getDayOfMonth();
      // Undeclared exception!
      try { 
        localDate1.withCenturyOfEra(292278993);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278993 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.getWeekyear();
      localDate0.toString();
      DateTimeFieldType.era();
      int int0 = 1090;
      // Undeclared exception!
      try { 
        localDate0.withYearOfCentury(1090);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1090 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(1, 1, 1);
      LocalDate localDate1 = localDate0.withWeekyear(1);
      // Undeclared exception!
      try { 
        localDate1.getValue((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -1
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = 0L;
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics(">|1d(z7P{");
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      testDateTime_Basics_MockEqualsChronology0.getZone();
      testDateTime_Basics0.testWithMillis_long();
      testDateTime_Basics_MockEqualsChronology0.hours();
      LocalDateTime localDateTime0 = new LocalDateTime(0L, (DateTimeZone) null);
      testDateTime_Basics_MockEqualsChronology0.dayOfYear();
      testDateTime_Basics_MockEqualsChronology0.days();
      LocalDate localDate0 = new LocalDate(localDateTime0);
      LocalDate localDate1 = localDate0.withYearOfEra(1357);
      localDate1.dayOfMonth();
      localDate0.toString();
      int int0 = (-2193);
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(1357, 1357, (-2193), 1388);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1357 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(64L, (DateTimeZone) null);
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      localDate_Property0.getField();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      TimeZone timeZone0 = uTCDateTimeZone0.toTimeZone();
      MockGregorianCalendar mockGregorianCalendar0 = null;
      try {
        mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, 7, 7, 7, 1972);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      LocalDate localDate1 = localDate0.withLocalMillis(7);
      mockGregorianCalendar0.getTimeZone();
      LocalDate localDate2 = localDate1.withEra(0);
      localDate2.toString();
      LocalDate localDate3 = localDate1.withLocalMillis(388L);
      localDate2.toDateTimeAtMidnight((DateTimeZone) null);
      localDate0.withCenturyOfEra(7);
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      // Undeclared exception!
      try { 
        localDate3.getField(7, chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 7
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      YearMonth yearMonth0 = new YearMonth(localDate0);
      LocalDate localDate1 = localDate0.withFields(yearMonth0);
      LocalDate localDate2 = localDate1.withEra(0);
      yearMonth0.monthOfYear();
      LocalDate localDate3 = localDate2.withWeekOfWeekyear(47);
      LocalDate localDate4 = localDate3.withCenturyOfEra(0);
      LocalDate localDate5 = localDate4.minusYears((-1563));
      localDate5.dayOfMonth();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        LocalDate.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(981L);
      // Undeclared exception!
      try { 
        localDate0.withYearOfEra(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("The calendar must not be null");
      TestMutableDateTime_Basics.MockEqualsChronology testMutableDateTime_Basics_MockEqualsChronology0 = testMutableDateTime_Basics0.new MockEqualsChronology();
      // Undeclared exception!
      try { 
        LocalDate.now((Chronology) testMutableDateTime_Basics_MockEqualsChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDate localDate0 = new LocalDate((-1L), (DateTimeZone) uTCDateTimeZone0);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      localTime0.getMillisOfSecond();
      LocalDate localDate1 = localDate0.withFields(localTime0);
      uTCDateTimeZone0.convertUTCToLocal(0L);
      LocalDate localDate2 = localDate1.withYearOfEra(5);
      localDate2.minusWeeks(1996);
      localDate2.toString();
      LocalTime localTime1 = localTime0.withHourOfDay(5);
      LocalDate.Property localDate_Property0 = localDate1.weekyear();
      localDate_Property0.getChronology();
      localDate1.toDateTime(localTime1);
      localDate0.withYear((-2147));
      LocalDate localDate3 = localDate1.plusWeeks(5);
      localDate3.getYear();
      localDate1.toInterval((DateTimeZone) uTCDateTimeZone0);
      localDate0.toDateTimeAtStartOfDay();
      localDate3.toDateTimeAtStartOfDay();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Chronology chronology0 = null;
      // Undeclared exception!
      try { 
        LocalDate.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = 3600000L;
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(3600000L, (Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestYearMonthDay_Basics testYearMonthDay_Basics0 = new TestYearMonthDay_Basics("");
      TestYearMonthDay_Basics.MockInstant testYearMonthDay_Basics_MockInstant0 = testYearMonthDay_Basics0.new MockInstant();
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(testYearMonthDay_Basics_MockInstant0, mockNullZoneChronology0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = new Object();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(object0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDate localDate0 = new LocalDate((Object) null, uTCDateTimeZone0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        localDate0.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      String string0 = null;
      TestMutableInterval_Updates testMutableInterval_Updates0 = new TestMutableInterval_Updates((String) null);
      TestMutableInterval_Updates.MockBadInterval testMutableInterval_Updates_MockBadInterval0 = testMutableInterval_Updates0.new MockBadInterval();
      Chronology chronology0 = testMutableInterval_Updates_MockBadInterval0.getChronology();
      durationFieldType0.isSupported(chronology0);
      localDate0.isSupported(durationFieldType0);
      int int0 = (-3160);
      // Undeclared exception!
      try { 
        localDate0.withDayOfMonth((-3160));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3160 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        localDate0.toString("E7Ttj1AG>K:vYpX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((Chronology) null);
      localDate0.minusDays(1843);
      localDate0.withWeekyear(0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withLocalMillis(3961L);
      localDate1.getLocalMillis();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      TestMutableInterval_Updates testMutableInterval_Updates0 = new TestMutableInterval_Updates("Cannot parse \"");
      TestMutableInterval_Updates.MockBadInterval testMutableInterval_Updates_MockBadInterval0 = testMutableInterval_Updates0.new MockBadInterval();
      Chronology chronology0 = testMutableInterval_Updates_MockBadInterval0.getChronology();
      dateTimeFieldType0.isSupported(chronology0);
      localDate0.isSupported(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        localDate1.withWeekOfWeekyear(2589);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2589 for weekOfWeekyear must be in the range [1,53]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics("");
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      TestMonthDay_Basics testMonthDay_Basics0 = new TestMonthDay_Basics("The time must not be null");
      TestMonthDay_Basics.MockMD testMonthDay_Basics_MockMD0 = testMonthDay_Basics0.new MockMD();
      Chronology chronology0 = testMonthDay_Basics_MockMD0.getChronology();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(testLocalDate_Basics_MockInstant0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestLocalTime_Basics testLocalTime_Basics0 = new TestLocalTime_Basics("");
      TestLocalTime_Basics.MockInstant testLocalTime_Basics_MockInstant0 = testLocalTime_Basics0.new MockInstant();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(testLocalTime_Basics_MockInstant0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      MonthDay monthDay0 = MonthDay.now((DateTimeZone) uTCDateTimeZone0);
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(monthDay0, uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'year' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = 1000L;
      LocalDate localDate0 = new LocalDate(1000L);
      localDate0.getDayOfWeek();
      Locale locale0 = Locale.UK;
      Locale locale1 = Locale.FRANCE;
      locale0.getDisplayName(locale1);
      locale0.getDisplayLanguage(locale1);
      try { 
        localDate0.toString("org.joda.time.chrono.GJDayOfWeekDateTimeField", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestMonthDay_Basics testMonthDay_Basics0 = new TestMonthDay_Basics("");
      TestMonthDay_Basics.MockMD testMonthDay_Basics_MockMD0 = testMonthDay_Basics0.new MockMD();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(testMonthDay_Basics_MockMD0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1866), (-1866), 2, 2, 2, (-37));
      mockGregorianCalendar0.toInstant();
      mockGregorianCalendar0.set((-37), 2, (-1870), (-1870), 0);
      mockGregorianCalendar0.roll(0, true);
      mockGregorianCalendar0.getActualMaximum(2);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      localDate0.toDateTimeAtCurrentTime();
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      localDate_Property0.roundHalfEvenCopy();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      // Undeclared exception!
      try { 
        localDate0.withField(dateTimeFieldType0, (-1870));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfHour' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse("", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("[Dew WT");
      // Undeclared exception!
      try { 
        LocalDate.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("k|~lcSr");
      TestDateTime_Basics.MockInstant testDateTime_Basics_MockInstant0 = testDateTime_Basics0.new MockInstant();
      testDateTime_Basics_MockInstant0.isBeforeNow();
      Chronology chronology0 = testDateTime_Basics_MockInstant0.getChronology();
      testDateTime_Basics_MockInstant0.toDateTimeISO();
      LocalDate localDate0 = LocalDate.now(chronology0);
      localDate0.getValues();
      DateTimeUtils.setCurrentMillisFixed((-2281L));
      DateTimeZone dateTimeZone0 = testDateTime_Basics_MockInstant0.getZone();
      LocalDate localDate1 = localDate0.plusYears(2);
      LocalDate localDate2 = localDate1.withFields(localDate0);
      LocalDate.Property localDate_Property0 = localDate1.dayOfWeek();
      testDateTime_Basics0.testIsBefore_long();
      LocalDate localDate3 = localDate_Property0.roundHalfEvenCopy();
      localDate1.isBefore(localDate3);
      localDate_Property0.getMillis();
      localDate_Property0.getChronology();
      LocalDate localDate4 = localDate0.minusWeeks(2037);
      localDate3.hashCode();
      LocalTime localTime0 = new LocalTime((-2281L), dateTimeZone0);
      LocalTime localTime1 = localTime0.minusMinutes(2);
      localDate3.toDateTime(localTime1, dateTimeZone0);
      localDate4.era();
      localDate2.getLocalMillis();
      localDate1.size();
      localDate0.dayOfMonth();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TestBasePartial.MockPartial testBasePartial_MockPartial0 = new TestBasePartial.MockPartial();
      Chronology chronology0 = testBasePartial_MockPartial0.getChronology();
      LocalDate localDate0 = new LocalDate(0L, chronology0);
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      TestInterval_Basics testInterval_Basics0 = new TestInterval_Basics("Dl}%d]%C1P&");
      TestInterval_Basics.MockInterval testInterval_Basics_MockInterval0 = testInterval_Basics0.new MockInterval();
      DateTime dateTime0 = testInterval_Basics_MockInterval0.getEnd();
      DateTime dateTime1 = dateTime0.withChronology(chronology0);
      dateTime1.compareTo((ReadableInstant) dateTime0);
      localDate_Property0.compareTo((ReadableInstant) dateTime1);
      localDate0.getCenturyOfEra();
      localDate_Property0.getMaximumValue();
      LocalDate localDate1 = localDate_Property0.getLocalDate();
      localDate0.toDateTimeAtCurrentTime();
      localDate1.era();
      localDate1.monthOfYear();
      LocalDate localDate2 = localDate1.withYearOfCentury(19);
      localDate1.dayOfYear();
      localDate1.getDayOfWeek();
      LocalDate localDate3 = localDate_Property0.roundHalfCeilingCopy();
      localDate3.dayOfWeek();
      localDate2.toString();
      localDate3.getDayOfWeek();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalDate localDate0 = LocalDate.now((DateTimeZone) uTCDateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      localDate0.plusMonths(0);
      // Undeclared exception!
      try { 
        localDate0.withField(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(2, 5, 0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 0;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      int int1 = 0;
      LocalDate localDate1 = localDate0.plusMonths(0);
      int int2 = (-4397);
      LocalDate localDate2 = localDate1.minusWeeks((-4397));
      // Undeclared exception!
      try { 
        localDate2.withYearOfCentury((-4397));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -4397 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.getCenturyOfEra();
      localDate0.getDayOfWeek();
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try { 
        localDate0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("q<(n`PUnpfX");
      LocalDate localDate0 = LocalDate.now((DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      testDateTimeZone_MockDateTimeZone0.getOffsetFromLocal((-825L));
      testDateTimeZone_MockDateTimeZone0.toTimeZone();
      LocalDate localDate1 = localDate0.plusYears((-369));
      localDate1.getWeekOfWeekyear();
      localDate1.getCenturyOfEra();
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      localDate_Property0.addWrapFieldToCopy(7);
      int int0 = 1874;
      // Undeclared exception!
      try { 
        localDate0.withYearOfCentury(1874);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1874 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getTime();
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      TestBaseSingleFieldPeriod.Single testBaseSingleFieldPeriod_Single0 = new TestBaseSingleFieldPeriod.Single((-1181));
      int int0 = 0;
      testBaseSingleFieldPeriod_Single0.getFieldType(0);
      // Undeclared exception!
      try { 
        localDate0.withDayOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      localDate_Property0.withMinimumValue();
      LocalDate localDate1 = localDate_Property0.roundFloorCopy();
      localDate0.dayOfYear();
      // Undeclared exception!
      try { 
        localDate1.withDayOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 1479;
      int int1 = (-76);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate((Chronology) mockNullZoneChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withWeekyear((-1871));
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      uTCDateTimeZone0.getNameKey(0L);
      localDate1.toDateTimeAtStartOfDay((DateTimeZone) uTCDateTimeZone0);
      MonthDay monthDay0 = new MonthDay();
      Chronology chronology0 = monthDay0.getChronology();
      // Undeclared exception!
      try { 
        localDate1.getField((-1871), chronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -1871
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      localDate0.toDateTimeAtMidnight();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        localDate0.withDayOfWeek((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(25L);
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'dayOfMonth' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 0;
      MockZone mockZone0 = new MockZone(5037L, 0, 10805);
      LocalDate localDate0 = new LocalDate((DateTimeZone) mockZone0);
      localDate0.withWeekyear(10805);
      // Undeclared exception!
      try { 
        localDate0.withDayOfWeek(10805);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 10805 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestYearMonth_Basics testYearMonth_Basics0 = new TestYearMonth_Basics("The chronology of the time does not match");
      testYearMonth_Basics0.testGetField();
      TestYearMonth_Basics.MockYM testYearMonth_Basics_MockYM0 = testYearMonth_Basics0.new MockYM();
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(testYearMonth_Basics_MockYM0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must not be smaller than 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(0);
      LocalDate localDate0 = localDateTime1.toLocalDate();
      LocalDate localDate1 = localDate0.withWeekyear(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      LocalDate localDate2 = localDate1.withField(dateTimeFieldType0, 2552);
      LocalDate localDate3 = localDate2.plusWeeks(0);
      localDate3.getYear();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("\"J6DGMi7^PZ6Rck");
      LocalDate localDate0 = new LocalDate(0L, (DateTimeZone) testDateTimeZone_MockDateTimeZone0);
      Duration duration0 = Duration.standardDays(326L);
      Duration duration1 = duration0.plus(326L);
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics("\"J6DGMi7^PZ6Rck");
      TestMutableDateTime_Basics.MockInstant testMutableDateTime_Basics_MockInstant0 = testMutableDateTime_Basics0.new MockInstant();
      Chronology chronology0 = testMutableDateTime_Basics_MockInstant0.getChronology();
      LocalDate.now(chronology0);
      Minutes minutes0 = duration1.toStandardMinutes();
      duration0.toStandardSeconds();
      LocalDate localDate1 = localDate0.withPeriodAdded(minutes0, 1900);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      localDate1.property(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(571L, (DateTimeZone) null);
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      localDate_Property0.addWrapFieldToCopy(0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("D%(PZ");
      localDate0.toDateTimeAtMidnight((DateTimeZone) null);
      localDate0.getMonthOfYear();
      LocalDate localDate1 = localDate0.withYear(2);
      localDate1.isBefore(localDate0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      dateTimeFieldType0.getRangeDurationType();
      localDate1.isSupported(dateTimeFieldType0);
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      // Undeclared exception!
      try { 
        localDate1.withFieldAdded(durationFieldType0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'halfdays' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(86400L, (Chronology) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      // Undeclared exception!
      try { 
        localDate0.withField(dateTimeFieldType0, 2384);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'clockhourOfHalfday' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.minusWeeks(1131);
      localDate1.plusYears(984);
      localDate0.getDayOfMonth();
      localDate1.monthOfYear();
      localDate0.monthOfYear();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.minusMinutes(984);
      LocalTime localTime2 = localTime1.plusMinutes(2);
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      int int0 = 2166;
      // Undeclared exception!
      try { 
        localTime2.withFieldAdded(durationFieldType0, 2166);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'months' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L);
      LocalDate localDate1 = localDate0.plusYears(313);
      LocalDate.Property localDate_Property0 = localDate1.yearOfEra();
      localDate_Property0.addToCopy(313);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(36L);
      LocalDate localDate0 = yearMonth0.toLocalDate(1);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = DateTime.now((DateTimeZone) uTCDateTimeZone0);
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      LocalDate localDate1 = localDate0.minus(period0);
      LocalDate localDate2 = localDate1.minusWeeks(1);
      localDate2.toInterval((DateTimeZone) uTCDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "Illegal rounding mode: ";
      // Undeclared exception!
      try { 
        LocalDate.parse("Illegal rounding mode: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Illegal rounding mode: \"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      int int0 = (-1541);
      // Undeclared exception!
      try { 
        localDate0.withEra((-1541));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1541 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 1888;
      int int1 = 0;
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate(1888, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      // Undeclared exception!
      try { 
        localDate0.withWeekOfWeekyear(5775);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 5775 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDate.parse("' is not supported");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"' is not supported\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0, 0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      localDate0.plusMonths(0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      // Undeclared exception!
      try { 
        localDate0.withEra((-67));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -67 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      localDate0.yearOfCentury();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Date date0 = null;
      // Undeclared exception!
      try { 
        LocalDate.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), 64, 93, 93, (-1));
      LocalDate localDate0 = LocalDate.fromCalendarFields(mockGregorianCalendar0);
      Calendar.getAvailableCalendarTypes();
      String string0 = "";
      // Undeclared exception!
      try { 
        localDate0.toString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate((Object) null, dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      // Undeclared exception!
      try { 
        localDate0.withField(dateTimeFieldType0, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("' is not supported");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      localDate0.yearOfEra();
      LocalDate localDate1 = localDate0.withWeekyear(2162);
      LocalDate.Property localDate_Property0 = localDate1.monthOfYear();
      localDate_Property0.roundHalfFloorCopy();
      localDate_Property0.getAsText();
      localDate_Property0.roundHalfCeilingCopy();
      localDate_Property0.toInterval();
      LocalDate localDate2 = localDate_Property0.addWrapFieldToCopy((-2972));
      localDate0.getMonthOfYear();
      localDate1.era();
      LocalDate localDate3 = localDate2.plusWeeks(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFieldType0.getRangeDurationType();
      localDate3.isSupported(dateTimeFieldType0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      TestMutableInterval_Constructors testMutableInterval_Constructors0 = new TestMutableInterval_Constructors("' is not supported");
      TestMutableInterval_Constructors.MockInterval testMutableInterval_Constructors_MockInterval0 = testMutableInterval_Constructors0.new MockInterval();
      testMutableInterval_Constructors_MockInterval0.getStart();
      testMutableInterval_Constructors_MockInterval0.toString();
      Chronology chronology0 = testMutableInterval_Constructors_MockInterval0.getChronology();
      YearMonth yearMonth0 = YearMonth.now();
      testMutableInterval_Constructors_MockInterval0.equals(yearMonth0);
      localDate2.toDateTimeAtCurrentTime(dateTimeZone0);
      dateTimeFieldType1.getField(chronology0);
      LocalTime localTime0 = new LocalTime((-1L));
      localDate0.toLocalDateTime(localTime0);
      // Undeclared exception!
      try { 
        localDate1.property(dateTimeFieldType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfHour' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.era();
      LocalDate localDate1 = localDate0.plusWeeks(0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.minusHours(0);
      DateTimeUtils.setCurrentMillisOffset((-1266L));
      localDate0.withWeekOfWeekyear(3);
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(3);
      localDateTime1.era();
      LocalDateTime localDateTime2 = localDateTime1.plusMinutes(3);
      localDateTime2.plusWeeks(1900);
      localDate1.hashCode();
      // Undeclared exception!
      try { 
        localDateTime2.withDayOfMonth(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("The calculation caused an overflow: ");
      TestDateTime_Basics.MockEqualsChronology testDateTime_Basics_MockEqualsChronology0 = testDateTime_Basics0.new MockEqualsChronology();
      testDateTime_Basics_MockEqualsChronology0.getZone();
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      localDate0.minusMonths(6);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      LocalDateTime localDateTime0 = new LocalDateTime(604800L, dateTimeZone0);
      dateTimeZone0.getNameKey(0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "aGevpex\"G$", 0, 0, 0, 0, 0, 0, 0, 0);
      Date date0 = localDateTime0.toDate((TimeZone) simpleTimeZone0);
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      Chronology chronology0 = localDateTime0.getChronology();
      durationFieldType0.getField(chronology0);
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 0);
      localDate0.toDateTimeAtStartOfDay();
      localDate1.plusMonths(0);
      localDate0.plusDays((-1));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      LocalDateTime localDateTime0 = new LocalDateTime(604800L, dateTimeZone0);
      dateTimeZone0.getNameKey(0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "aGevpex\"G$", 0, 0, 0, 0, 0, 0, 0, 1900);
      Date date0 = localDateTime0.toDate((TimeZone) simpleTimeZone0);
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      Chronology chronology0 = localDateTime0.getChronology();
      durationFieldType0.getField(chronology0);
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, 0);
      localDate1.toInterval();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TestMutableDateTime_Basics testMutableDateTime_Basics0 = new TestMutableDateTime_Basics((String) null);
      TestMutableDateTime_Basics.MockEqualsChronology testMutableDateTime_Basics_MockEqualsChronology0 = testMutableDateTime_Basics0.new MockEqualsChronology();
      Chronology chronology0 = testMutableDateTime_Basics_MockEqualsChronology0.withUTC();
      // Undeclared exception!
      try { 
        LocalDate.now(chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = null;
      TestLocalDate_Basics testLocalDate_Basics0 = new TestLocalDate_Basics((String) null);
      TestLocalDate_Basics.MockInstant testLocalDate_Basics_MockInstant0 = testLocalDate_Basics0.new MockInstant();
      testLocalDate_Basics_MockInstant0.getFields();
      Chronology chronology0 = testLocalDate_Basics_MockInstant0.getChronology();
      LocalDate localDate0 = LocalDate.now(chronology0);
      localDate0.toDate();
      localDate0.getField(0, chronology0);
      localDate0.plusWeeks(0);
      LocalTime localTime0 = new LocalTime((long) 0, (DateTimeZone) null);
      // Undeclared exception!
      try { 
        localDate0.toDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      localDate0.toDateTimeAtMidnight();
      localDate0.dayOfYear();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(0);
      localDateTime1.era();
      LocalDateTime localDateTime2 = localDateTime1.plusMinutes(0);
      Date date0 = localDate0.toDate();
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", date0.toString());
      
      LocalDateTime localDateTime3 = localDateTime0.withYear(0);
      Date date1 = localDateTime3.toDate();
      localDate0.plusYears(0);
      LocalDate localDate1 = LocalDate.fromDateFields(date1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(502, "MESZ", 0, 0, 0, 0, 0, 0, 0, 0, 502);
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      LocalDate.fromCalendarFields(calendar0);
      localDateTime0.yearOfCentury();
      LocalTime localTime0 = localDateTime2.toLocalTime();
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      LocalDate.Property localDate_Property1 = localDate0.yearOfCentury();
      localDate1.minusYears((-2199));
      localDate_Property0.withMaximumValue();
      localDate0.getMonthOfYear();
      localDate1.withCenturyOfEra(0);
      localDate_Property1.addToCopy(5526);
      LocalDateTime localDateTime4 = localDate1.toLocalDateTime(localTime0);
      assertTrue(localDateTime4.equals((Object)localDateTime3));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MockZone mockZone0 = new MockZone(12053L, 0, 2652);
      mockZone0.writeReplace();
      LocalDate localDate0 = LocalDate.now((DateTimeZone) mockZone0);
      mockZone0.getShortName(0L);
      LocalDate localDate1 = localDate0.minusWeeks(2652);
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      localDate_Property0.getAsText();
      localDate_Property0.addToCopy(2652);
      localDate1.toString();
      // Undeclared exception!
      try { 
        localDate0.withDayOfWeek((-3033));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3033 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("' is not supported");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      localDate0.yearOfEra();
      LocalDate localDate1 = localDate0.withWeekyear(2162);
      LocalDate.Property localDate_Property0 = localDate1.monthOfYear();
      localDate_Property0.toInterval();
      LocalDate localDate2 = localDate_Property0.addWrapFieldToCopy((-2972));
      localDate2.getDayOfMonth();
      localDate1.era();
      LocalDate localDate3 = localDate2.plusWeeks(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      localDate3.isSupported(dateTimeFieldType0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      localDate3.dayOfWeek();
      TestMutableInterval_Constructors testMutableInterval_Constructors0 = new TestMutableInterval_Constructors("' is not supported");
      TestMutableInterval_Constructors.MockInterval testMutableInterval_Constructors_MockInterval0 = testMutableInterval_Constructors0.new MockInterval();
      testMutableInterval_Constructors_MockInterval0.getStart();
      testMutableInterval_Constructors_MockInterval0.toString();
      // Undeclared exception!
      try { 
        localDate1.property(dateTimeFieldType1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'minuteOfHour' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(643L);
      Period period0 = Period.days((-902));
      period0.withSeconds((-902));
      LocalDate localDate1 = localDate0.minus(period0);
      Period period1 = period0.withMillis(3241);
      LocalDate localDate2 = localDate1.minusDays(3241);
      Partial partial0 = new Partial();
      Partial partial1 = partial0.minus(period1);
      localDate2.withWeekyear((-551));
      LocalTime localTime0 = new LocalTime(1000L);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      localDate2.toDateTime(localTime0, dateTimeZone0);
      // Undeclared exception!
      try { 
        partial1.getField(2410);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2410
         //
         verifyException("org.joda.time.Partial", e);
      }
  }
}
