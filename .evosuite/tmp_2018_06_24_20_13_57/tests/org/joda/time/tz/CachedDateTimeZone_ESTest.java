/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:39:58 GMT 2018
 */

package org.joda.time.tz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CachedDateTimeZone_ESTest extends CachedDateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      dateTimeZone0.getShortName(0L);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      dateTimeZone0.isFixed();
      Object object0 = new Object();
      cachedDateTimeZone0.equals(object0);
      cachedDateTimeZone0.convertUTCToLocal(0L);
      cachedDateTimeZone0.nextTransition((-1392L));
      cachedDateTimeZone0.getStandardOffset(0L);
      cachedDateTimeZone0.getNameKey((-1392L));
      cachedDateTimeZone0.getStandardOffset(0L);
      cachedDateTimeZone0.getStandardOffset(0);
      cachedDateTimeZone0.equals("UTC");
      cachedDateTimeZone0.isFixed();
      cachedDateTimeZone0.previousTransition(0L);
      cachedDateTimeZone0.getStandardOffset((-1392L));
      cachedDateTimeZone0.previousTransition(0);
      cachedDateTimeZone0.getOffset(0L);
      CachedDateTimeZone cachedDateTimeZone1 = CachedDateTimeZone.forZone(dateTimeZone0);
      System.setCurrentTimeMillis((-2816L));
      cachedDateTimeZone0.getNameKey((-9223372036854775808L));
      cachedDateTimeZone1.getUncachedZone();
      CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone1.getNameKey((-961L));
      cachedDateTimeZone0.getNameKey(0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.nextTransition(0L);
      cachedDateTimeZone0.getNameKey(0L);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Minutes minutes0 = Minutes.THREE;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      localDateTime0.withPeriodAdded(minutes0, 0);
      cachedDateTimeZone0.adjustOffset(0L, true);
      dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      dateTimeZone0.getOffset(0L);
      cachedDateTimeZone0.getOffset(31536000000L);
      cachedDateTimeZone0.equals((Object) null);
      CachedDateTimeZone cachedDateTimeZone1 = CachedDateTimeZone.forZone(cachedDateTimeZone0);
      DateTimeZone.getAvailableIDs();
      cachedDateTimeZone0.equals(cachedDateTimeZone1);
      cachedDateTimeZone0.nextTransition(1980L);
      cachedDateTimeZone1.getOffset((-670L));
      cachedDateTimeZone0.getUncachedZone();
      // Undeclared exception!
      try { 
        dateTimeZone0.getNameKey((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.getDefault();
      CachedDateTimeZone.forZone(fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        ((CachedDateTimeZone) fixedDateTimeZone0).getUncachedZone();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone.forZone(dateTimeZone0);
      DateTimeZone.setProvider((Provider) null);
      // Undeclared exception!
      try { 
        dateTimeZone0.previousTransition(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      gJChronology0.equals(dateTimeZone0);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.isStandardOffset(1455L);
      cachedDateTimeZone0.getShortName(1L);
      cachedDateTimeZone0.getNameKey((-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 34);
      Instant instant0 = Instant.now();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone1);
      dateTimeZone0.getShortName(2862L);
      Provider provider0 = DateTimeZone.getProvider();
      cachedDateTimeZone0.isFixed();
      cachedDateTimeZone0.getUncachedZone();
      cachedDateTimeZone0.equals(provider0);
      cachedDateTimeZone0.getNameKey(3600L);
      Object object0 = new Object();
      cachedDateTimeZone0.equals(object0);
      cachedDateTimeZone0.getOffset(0L);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.getNameKey(0);
      cachedDateTimeZone0.isFixed();
      cachedDateTimeZone0.getStandardOffset((-385L));
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withYear(0);
      cachedDateTimeZone0.isLocalDateTimeGap(localDateTime1);
      cachedDateTimeZone0.getOffset((-543L));
      cachedDateTimeZone0.getOffset(0L);
      CachedDateTimeZone cachedDateTimeZone1 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.equals(cachedDateTimeZone1);
      cachedDateTimeZone0.getNameKey(0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      DateTimeZone.setProvider((Provider) null);
      cachedDateTimeZone0.previousTransition(0L);
      // Undeclared exception!
      try { 
        DateTimeZone.forID("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'org/joda/time/tz/data' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.equals(dateTimeZone0);
      CachedDateTimeZone cachedDateTimeZone1 = CachedDateTimeZone.forZone(cachedDateTimeZone0);
      cachedDateTimeZone1.getOffset(0L);
      cachedDateTimeZone1.getOffset(0L);
      cachedDateTimeZone0.getNameKey(31556952000L);
      CachedDateTimeZone cachedDateTimeZone2 = CachedDateTimeZone.forZone(cachedDateTimeZone1);
      cachedDateTimeZone1.equals(cachedDateTimeZone2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.hashCode();
      cachedDateTimeZone0.getUncachedZone();
      cachedDateTimeZone0.nextTransition(0);
      cachedDateTimeZone0.getUncachedZone();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2070);
      dateTimeZone0.isStandardOffset(2070);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.previousTransition(2070);
      cachedDateTimeZone0.getMillisKeepLocal(dateTimeZone0, 440L);
      cachedDateTimeZone0.isFixed();
      cachedDateTimeZone0.getNameKey(2070L);
      CachedDateTimeZone.forZone(cachedDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.getNameKey(0L);
      cachedDateTimeZone0.hashCode();
      cachedDateTimeZone0.equals(dateTimeZone0);
      cachedDateTimeZone0.getStandardOffset(0L);
      cachedDateTimeZone0.getOffset(0L);
      cachedDateTimeZone0.previousTransition((-4377L));
      cachedDateTimeZone0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.nextTransition((-1035L));
      cachedDateTimeZone0.nextTransition((-1035L));
      cachedDateTimeZone0.isFixed();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.getOffset((long) 0);
      dateTimeZone0.getOffsetFromLocal((-42521587200000L));
      cachedDateTimeZone0.getNameKey(613L);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      Minutes minutes0 = Minutes.MAX_VALUE;
      gJChronology0.get((ReadablePeriod) minutes0, (-72L));
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      CachedDateTimeZone.forZone(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.isFixed();
      cachedDateTimeZone0.getStandardOffset((-2887L));
      cachedDateTimeZone0.isFixed();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        CachedDateTimeZone.forZone((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.CachedDateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.isFixed();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.previousTransition(1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.nextTransition(1L);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(32);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.isFixed();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.getUncachedZone();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(52);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.getStandardOffset((-1L));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.getNameKey(2562L);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = null;
      String string0 = null;
      int int0 = 641;
      int int1 = 704;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(53, (String) null, 53, 53, 641, 32, 32, 704, 32, 704, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.getOffset((long) 0);
      DateTimeZone.getAvailableIDs();
      cachedDateTimeZone0.getOffset((-4294967296L));
      cachedDateTimeZone0.getUncachedZone();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(102, 1322, 102, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1322 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.withYear(0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1183);
      int int2 = (-2829);
      try { 
        DateTimeZone.forOffsetHoursMinutes((-2829), 1285);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -2829
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      dateTimeZone0.convertLocalToUTC((long) 0, true);
      long long0 = (-552L);
      Locale locale0 = Locale.UK;
      locale0.hasExtensions();
      // Undeclared exception!
      try { 
        DateTimeZone.forID("ADxp;J6F^D!6DYy vjr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'ADxp;J6F^D!6DYy vjr' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.nextTransition(0L);
      cachedDateTimeZone0.getNameKey(0L);
      cachedDateTimeZone0.adjustOffset(0L, true);
      dateTimeZone0.getOffset(0L);
      Integer integer0 = new Integer(0);
      cachedDateTimeZone0.equals((Object) null);
      CachedDateTimeZone cachedDateTimeZone1 = CachedDateTimeZone.forZone(cachedDateTimeZone0);
      DateTimeZone.getAvailableIDs();
      cachedDateTimeZone0.equals(cachedDateTimeZone1);
      cachedDateTimeZone0.nextTransition(1980L);
      cachedDateTimeZone1.getOffset((-670L));
      cachedDateTimeZone0.getUncachedZone();
  }
}
