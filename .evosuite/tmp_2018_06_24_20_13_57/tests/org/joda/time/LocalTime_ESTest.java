/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:18:26 GMT 2018
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.format.FormatStyle;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.convert.ConverterManager;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.Provider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalTime_ESTest extends LocalTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((-1591200000L), (Chronology) buddhistChronology0);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = new LocalTime(localDateTime0, uTCDateTimeZone0);
      localTime0.MIDNIGHT.getMillisOfSecond();
      Seconds seconds0 = Seconds.ONE;
      buddhistChronology0.get((ReadablePartial) localDateTime0, (long) 0);
      LocalTime localTime1 = localTime0.withPeriodAdded(seconds0, (-839));
      LocalTime localTime2 = localTime1.minus(seconds0);
      LocalTime localTime3 = LocalTime.fromMillisOfDay((-1591200000L), (Chronology) buddhistChronology0);
      localTime2.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      localTime2.toString();
      localTime0.getMillisOfDay();
      int int0 = (-2473);
      localTime3.MIDNIGHT.compareTo((ReadablePartial) localTime0);
      localTime1.minusSeconds((-2473));
      LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      buddhistChronology0.centuryOfEra();
      DateTimeFieldType.monthOfYear();
      // Undeclared exception!
      try { 
        localTime1.toString("iKnf'vm\"]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Months months0 = Months.FIVE;
      LocalTime localTime1 = localTime0.minus(months0);
      localTime1.millisOfDay();
      localTime1.minus(months0);
      LocalTime localTime2 = LocalTime.MIDNIGHT;
      localTime0.withLocalMillis(259200000L);
      localTime2.getLocalMillis();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      int int0 = 669;
      LocalTime localTime1 = localTime0.MIDNIGHT.minusHours(669);
      localTime0.size();
      localTime1.toDateTimeToday();
      LocalTime localTime2 = localTime1.MIDNIGHT.withMillisOfDay(0);
      Years years0 = Years.ONE;
      LocalTime localTime3 = localTime1.MIDNIGHT.withFields(localTime0);
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      localTime2.withFieldAdded(durationFieldType0, 4);
      localTime3.MIDNIGHT.getMillisOfSecond();
      LocalTime localTime4 = localTime3.minusMillis(2106);
      localTime4.isAfter(localTime2);
      localTime1.plus(years0);
      localTime0.millisOfSecond();
      // Undeclared exception!
      try { 
        localTime0.withMillisOfSecond(2106);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2106 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      int int0 = (-2796);
      LocalTime localTime1 = localTime0.plusSeconds((-2796));
      localTime1.equals(localTime0);
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      localTime0.isSupported(durationFieldType0);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      // Undeclared exception!
      try { 
        GregorianChronology.getInstance((DateTimeZone) uTCDateTimeZone0, (-2796));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -2796
         //
         verifyException("org.joda.time.chrono.GregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1000000000000000000L);
      localTime0.MIDNIGHT.getFields();
      DateTimeFieldType dateTimeFieldType0 = null;
      localTime0.MIDNIGHT.isSupported((DateTimeFieldType) null);
      int int0 = 11;
      LocalTime localTime1 = localTime0.withMillisOfDay(11);
      localTime1.equals("");
      DateTime dateTime0 = localTime1.toDateTimeToday();
      localTime1.MIDNIGHT.isEqual(localTime0);
      localTime0.plusMillis(11);
      DateTimeZone dateTimeZone0 = dateTime0.getZone();
      LocalTime localTime2 = LocalTime.now(dateTimeZone0);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Period period0 = new Period(1000000000000000000L, 1440L, julianChronology0);
      // Undeclared exception!
      try { 
        localTime2.withPeriodAdded(period0, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -348566987 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1232, (-1278), 1232, (-678), (-1278));
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      Years years0 = Years.TWO;
      Years years1 = years0.plus((-678));
      Years years2 = years1.dividedBy(354);
      LocalTime localTime1 = localTime0.minus(years2);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      localTime0.plusMinutes((-2233));
      mockGregorianCalendar0.getTimeZone();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      delegatedDateTimeField0.addWrapField(1440L, (-1278));
      LocalTime.Property localTime_Property0 = new LocalTime.Property(localTime1, delegatedDateTimeField0);
      localTime_Property0.roundHalfEvenCopy();
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      localTime0.isSupported(durationFieldType0);
      localTime1.getField(1, (Chronology) buddhistChronology0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      int int0 = 669;
      LocalTime localTime1 = localTime0.MIDNIGHT.minusHours(669);
      localTime0.size();
      localTime1.toDateTimeToday();
      LocalTime localTime2 = localTime1.MIDNIGHT.withMillisOfDay(0);
      Years years0 = Years.MAX_VALUE;
      LocalTime localTime3 = localTime1.MIDNIGHT.withFields(localTime0);
      int int1 = 2113;
      localTime3.MIDNIGHT.getMillisOfSecond();
      LocalTime localTime4 = localTime3.minusMillis(2113);
      localTime4.isAfter(localTime2);
      // Undeclared exception!
      try { 
        localTime1.plus(years0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1970 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      int int0 = 1199;
      LocalTime localTime1 = localTime0.withMillisOfDay(1199);
      LocalTime localTime2 = localTime1.plusHours(1199);
      ReadablePeriod readablePeriod0 = null;
      int int1 = (-883);
      LocalTime localTime3 = localTime2.withPeriodAdded((ReadablePeriod) null, (-883));
      LocalTime localTime4 = localTime3.plus((ReadablePeriod) null);
      localTime4.plusMillis((-2656));
      localTime4.MIDNIGHT.minusSeconds(10);
      try { 
        localTime4.toString("America/Denver", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Locale locale0 = Locale.US;
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      LocalTime localTime1 = localTime0.minusMinutes((-2229));
      localTime1.MIDNIGHT.isAfter(localTime0);
      int int0 = 4;
      LocalTime localTime2 = localTime0.plusMinutes(4);
      localTime1.minusMinutes(4);
      localTime0.compareTo((ReadablePartial) localTime2);
      int int1 = 4333;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      // Undeclared exception!
      try { 
        JulianChronology.getInstance(dateTimeZone0, (-2147476727));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -2147476727
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.set(localTime0, 2658L);
      durationFieldType0.isSupported(gregorianChronology0);
      localTime0.isSupported(durationFieldType0);
      localTime0.plusMinutes(0);
      LocalTime localTime1 = localTime0.plusMillis(0);
      localTime1.plusMinutes(0);
      int int0 = (-1919);
      // Undeclared exception!
      try { 
        localTime0.withMillisOfDay((-1919));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1919 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(35000L, (Chronology) gregorianChronology0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
      Chronology chronology0 = localDate0.getChronology();
      LocalTime localTime1 = new LocalTime(1372L, chronology0);
      LocalTime localTime2 = localTime1.withLocalMillis((-3362L));
      DateTimeUtils.setCurrentMillisOffset(0L);
      localTime2.millisOfSecond();
      Partial partial0 = new Partial(localTime0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimePrinter dateTimePrinter0 = dateTimeFormatter1.getPrinter();
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      dateTimeFormatter0.getPrinter();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-89));
      dateTimeFormatter3.withPivotYear((-89));
      Locale locale0 = new Locale("org/joda/time/tz/data");
      locale0.stripExtensions();
      partial0.getFormatter();
      localTime1.getMillisOfDay();
      MockDate mockDate0 = new MockDate();
      LocalTime.fromDateFields(mockDate0);
      localTime2.minusMillis(2);
      LocalTime localTime3 = LocalTime.fromMillisOfDay(4726L);
      localTime3.isSupported((DurationFieldType) null);
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded((DurationFieldType) null, (-2933));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1000000000000000000L);
      localTime0.MIDNIGHT.getFields();
      localTime0.MIDNIGHT.isSupported((DateTimeFieldType) null);
      int int0 = 11;
      // Undeclared exception!
      try { 
        localTime0.withField((DateTimeFieldType) null, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      Provider provider0 = DateTimeZone.getProvider();
      DateTimeZone.setProvider(provider0);
      LocalTime localTime0 = new LocalTime((DateTimeZone) uTCDateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.minusMinutes((-2324));
      LocalTime localTime1 = localTime0.MIDNIGHT.withFieldAdded(durationFieldType0, (-442));
      localTime0.withLocalMillis((-1L));
      LocalTime localTime2 = localTime1.minusMinutes((-442));
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      localTime_Property0.getField();
      localTime2.minusHours((-442));
      Period period0 = Period.hours((-442));
      localTime2.minus(period0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.set(localTime0, 2658L);
      durationFieldType0.isSupported(gregorianChronology0);
      localTime0.isSupported(durationFieldType0);
      localTime0.MIDNIGHT.getValue(0);
      LocalTime localTime1 = localTime0.plusMinutes(0);
      localTime1.withFields(localTime0);
      localTime0.withMinuteOfHour(0);
      int int0 = (-1919);
      // Undeclared exception!
      try { 
        localTime0.withMillisOfDay((-1919));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1919 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1232, (-1278), 1232, (-678), (-1278));
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      Years years0 = Years.TWO;
      years0.plus((-678));
      Years years1 = Years.MAX_VALUE;
      // Undeclared exception!
      try { 
        localTime0.minus(years1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481677 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      LocalTime localTime0 = LocalTime.now((Chronology) copticChronology0);
      localTime0.isEqual(localTime0);
      LocalTime localTime1 = localTime0.plusSeconds(1);
      LocalTime.Property localTime_Property0 = localTime1.secondOfMinute();
      LocalTime localTime2 = localTime_Property0.getLocalTime();
      localTime1.hourOfDay();
      localTime2.toDateTimeToday();
      localTime_Property0.getMinimumValue();
      // Undeclared exception!
      try { 
        localTime2.MIDNIGHT.withSecondOfMinute((-1127));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1127 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      localTime0.getSecondOfMinute();
      localTime_Property0.roundFloorCopy();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      // Undeclared exception!
      try { 
        localTime0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'halfdayOfDay' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.set(localTime0, 2658L);
      durationFieldType0.isSupported(gregorianChronology0);
      localTime0.isSupported(durationFieldType0);
      LocalTime localTime1 = localTime0.plusMinutes(0);
      localTime1.withFields(localTime0);
      localTime0.withMinuteOfHour(0);
      int int0 = (-1919);
      // Undeclared exception!
      try { 
        localTime0.withMillisOfDay((-1919));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1919 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1338L));
      LocalTime localTime1 = localTime0.withLocalMillis((-1338L));
      int int0 = (-3304);
      LocalTime localTime2 = localTime1.minusSeconds((-3304));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      localTime2.isSupported(dateTimeFieldType0);
      DateTime dateTime0 = localTime2.toDateTimeToday();
      Chronology chronology0 = dateTime0.getChronology();
      LocalTime.now(chronology0);
      DateTimeUtils.setCurrentMillisSystem();
      int int1 = (-1093);
      // Undeclared exception!
      try { 
        localTime1.MIDNIGHT.getField((-3304));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -3304
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      YearMonth yearMonth0 = new YearMonth();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.monthOfYear();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 221;
      intArray0[3] = 107;
      intArray0[4] = 107;
      intArray0[5] = 107;
      intArray0[6] = 0;
      intArray0[7] = 0;
      Partial partial0 = new Partial(gJChronology0, dateTimeFieldTypeArray0, intArray0);
      Partial partial1 = new Partial(partial0, intArray0);
      DateTimeFormatter dateTimeFormatter0 = partial1.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(gJChronology0);
      // Undeclared exception!
      try { 
        LocalTime.parse("5mbQBS0H!(LKcA", dateTimeFormatter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"5mbQBS0H!(LKcA\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      mockDate0.setTime((-1968L));
      localTime0.getChronology();
      mockDate0.getTime();
      localTime0.getMinuteOfHour();
      localTime0.withSecondOfMinute(21);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1000000000000000000L);
      localTime0.MIDNIGHT.getFields();
      localTime0.MIDNIGHT.isSupported((DateTimeFieldType) null);
      LocalTime localTime1 = localTime0.withMillisOfDay(11);
      DateTime dateTime0 = localTime1.toDateTimeToday();
      localTime1.MIDNIGHT.isEqual(localTime0);
      LocalTime.now();
      DateTimeZone dateTimeZone0 = dateTime0.getZone();
      LocalTime.now(dateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      LocalTime localTime2 = localTime_Property0.addWrapFieldToCopy(11);
      localTime_Property0.getField();
      LocalTime localTime3 = localTime_Property0.addNoWrapToCopy(2);
      localTime3.MIDNIGHT.getMillisOfSecond();
      localTime_Property0.withMinimumValue();
      localTime2.getSecondOfMinute();
      // Undeclared exception!
      try { 
        localTime2.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Seconds seconds1 = seconds0.multipliedBy(0);
      Seconds.standardSecondsIn(seconds0);
      seconds0.minus(seconds1);
      Seconds.seconds(0);
      Locale locale0 = Locale.ENGLISH;
      LocalTime localTime0 = new LocalTime();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      localTime0.isSupported(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        localTime0.compareTo((ReadablePartial) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      LocalTime localTime0 = LocalTime.now((Chronology) copticChronology0);
      LocalTime localTime1 = LocalTime.now((Chronology) copticChronology0);
      localTime0.isEqual(localTime1);
      LocalTime localTime2 = localTime0.plusSeconds(1);
      LocalTime.Property localTime_Property0 = localTime2.secondOfMinute();
      LocalTime localTime3 = new LocalTime(1, 1, 1);
      int int0 = (-1127);
      localTime2.hourOfDay();
      localTime_Property0.getMinimumValue();
      CopticChronology.getInstance();
      // Undeclared exception!
      try { 
        LocalTime.parse("Chronology must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Chronology must not be null\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Months months0 = Months.FIVE;
      LocalTime localTime1 = localTime0.minus(months0);
      LocalTime.Property localTime_Property0 = localTime1.minuteOfHour();
      localTime1.minus(months0);
      LocalTime localTime2 = localTime_Property0.withMaximumValue();
      localTime0.withLocalMillis(259200000L);
      localTime2.getLocalMillis();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      // Undeclared exception!
      try { 
        GregorianChronology.getInstance((DateTimeZone) uTCDateTimeZone0, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 13
         //
         verifyException("org.joda.time.chrono.GregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Object) null, (Chronology) null);
      localTime0.secondOfMinute();
      localTime0.toDateTimeToday();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      Duration duration0 = seconds0.toStandardDuration();
      Interval interval0 = duration0.toIntervalTo((ReadableInstant) null);
      DateTime dateTime0 = interval0.getStart();
      DateTime dateTime1 = dateTime0.withLaterOffsetAtOverlap();
      dateTime1.isAfter(59980L);
      DateTimeZone dateTimeZone0 = dateTime1.getZone();
      dateTime1.dayOfYear();
      dateTime1.getDayOfMonth();
      LocalTime localTime0 = new LocalTime(59980L, dateTimeZone0);
      localTime0.MIDNIGHT.getMillisOfDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      LocalTime.Property localTime_Property0 = new LocalTime.Property(localTime0, dateTimeField0);
      localTime_Property0.roundHalfEvenCopy();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      localTime0.get(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        localTime_Property0.addNoWrapToCopy(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The addition exceeded the boundaries of LocalTime
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      seconds0.toStandardDuration();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      buddhistChronology0.dayOfMonth();
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) 1);
      LocalTime localTime1 = localTime0.minusHours(44);
      LocalTime.Property localTime_Property0 = localTime1.millisOfDay();
      // Undeclared exception!
      try { 
        localTime_Property0.addNoWrapToCopy((-2145334013));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The addition exceeded the boundaries of LocalTime
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime localTime1 = localTime0.MIDNIGHT.minusHours(669);
      localTime0.size();
      localTime1.toDateTimeToday();
      LocalTime localTime2 = localTime1.MIDNIGHT.withMillisOfDay(0);
      localTime2.MIDNIGHT.minusMinutes((-2066));
      Years years0 = Years.ONE;
      LocalTime localTime3 = localTime1.MIDNIGHT.withFields(localTime0);
      localTime3.minusMillis(2106);
      LocalTime localTime4 = localTime1.plus(years0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      LocalTime localTime5 = localTime_Property0.addWrapFieldToCopy(4);
      localTime5.MIDNIGHT.getMillisOfDay();
      localTime_Property0.getChronology();
      localTime5.withMillisOfSecond(4);
      LocalTime localTime6 = localTime4.withPeriodAdded(years0, 1928);
      localTime6.millisOfDay();
      LocalTime localTime7 = localTime0.minusSeconds(669);
      // Undeclared exception!
      try { 
        localTime7.getFieldType(669);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 669
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      Chronology chronology0 = copticChronology0.withZone(uTCDateTimeZone0);
      copticChronology0.withZone(uTCDateTimeZone0);
      LocalTime localTime0 = new LocalTime((-1L), chronology0);
      LocalTime localTime1 = localTime0.withLocalMillis(0L);
      localTime1.minusMillis(0);
      LocalTime localTime2 = localTime1.withMillisOfSecond(1);
      Locale locale0 = Locale.JAPANESE;
      localTime2.MIDNIGHT.toString((String) null, locale0);
      uTCDateTimeZone0.writeReplace();
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle0);
      dateTimeFormatter0.getResolverStyle();
      Locale locale1 = dateTimeFormatter0.getLocale();
      localTime_Property0.getMaximumTextLength(locale1);
      localTime_Property0.setCopy(1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      localTime_Property0.addCopy(1000000000000L);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      localTime_Property0.getLeapDurationField();
      LocalTime localTime1 = localTime_Property0.roundHalfFloorCopy();
      localTime_Property0.getField();
      LocalDate localDate0 = new LocalDate(31083597720000L);
      // Undeclared exception!
      try { 
        localTime1.compareTo((ReadablePartial) localDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(703L);
      String string0 = "hM\"vg@xc";
      // Undeclared exception!
      try { 
        localTime0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Object) null);
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.compareTo((ReadablePartial) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(9, 9, 9, 9);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      localTime0.getSecondOfMinute();
      // Undeclared exception!
      try { 
        localTime0.getValue(13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 13
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "1";
      LocalTime.parse("1");
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      int int0 = (-2147483640);
      try { 
        DateTimeZone.forOffsetHours((-2147483640));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -2147483640
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2141L));
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime localTime1 = localTime0.minusSeconds(1688);
      LocalTime localTime2 = localTime1.plusMillis(1688);
      // Undeclared exception!
      try { 
        localTime2.getField(1688);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 1688
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = (-1101);
      MockDate mockDate0 = new MockDate(3, 3, 0, (-1101), 0, (-1101));
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      UnsupportedDurationField.getInstance(durationFieldType0);
      localTime0.MIDNIGHT.plusSeconds((-2913));
      // Undeclared exception!
      try { 
        LocalTime.parse("M./3^Yc^T}.{+n\"", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = (-2617);
      int int1 = 28;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      LocalTime localTime0 = new LocalTime(275, 275, (-2617), 28, lenientChronology0);
      ReadablePeriod readablePeriod0 = null;
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      LocalDate localDate0 = new LocalDate((long) (-2617), dateTimeZone0);
      int int2 = 8;
      LocalDate localDate1 = localDate0.plusYears(8);
      localDate1.minusMonths(28);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusYears(3675);
      LocalDateTime localDateTime2 = localDateTime1.minus((ReadablePeriod) null);
      // Undeclared exception!
      try { 
        localDateTime2.withMonthOfYear((-2617));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2617 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      dateTimeZone0.getStandardOffset((-982L));
      Chronology chronology0 = copticChronology0.withZone(dateTimeZone0);
      LocalTime localTime0 = new LocalTime((-2478L), chronology0);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      localTime_Property0.get();
      LocalTime localTime1 = localTime_Property0.withMinimumValue();
      localTime_Property0.addCopy((-190));
      localTime_Property0.roundCeilingCopy();
      CopticChronology.getInstance();
      LocalTime localTime2 = localTime1.minusMinutes(1);
      localTime2.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      dateTimeFieldType0.getField(copticChronology0);
      // Undeclared exception!
      try { 
        localTime2.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'year' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Chronology chronology0 = iSOChronology0.withUTC();
      LocalTime localTime0 = new LocalTime(0L, chronology0);
      localTime0.equals(iSOChronology0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-979);
      // Undeclared exception!
      try { 
        iSOChronology0.validate(localTime0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -979 for hourOfDay must not be smaller than 0
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L);
      LocalTime localTime1 = localTime0.withLocalMillis(0L);
      localTime1.getValues();
      localTime1.MIDNIGHT.getMinuteOfHour();
      localTime1.getSecondOfMinute();
      localTime0.compareTo((ReadablePartial) localTime1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      LocalTime localTime0 = localDateTime0.toLocalTime();
      LocalTime localTime1 = localTime0.withMillisOfDay(1);
      localTime1.MIDNIGHT.toString();
      LocalTime localTime2 = localTime1.withFields(localDateTime0);
      localDateTime0.minusHours(1);
      Period period0 = new Period(1, 1, (-1252), 0);
      Days days0 = period0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      minutes0.multipliedBy(0);
      localTime2.MIDNIGHT.plus(days0);
      // Undeclared exception!
      try { 
        days0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      localTime0.toDateTimeToday();
      localTime0.getMillisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      localTime0.isSupported(dateTimeFieldType0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      localTime0.plus((ReadablePeriod) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(736, 0, (-1536), 0, 736, 0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      Instant instant0 = Instant.now();
      LocalTime localTime1 = localTime0.MIDNIGHT.minusSeconds((-1021));
      Duration duration0 = Duration.standardDays(736);
      Instant instant1 = instant0.plus((ReadableDuration) duration0);
      Weeks weeks0 = Weeks.weeksBetween((ReadableInstant) instant1, (ReadableInstant) instant0);
      duration0.toIntervalTo(instant1);
      LocalTime localTime2 = localTime0.withPeriodAdded(weeks0, 736);
      localTime2.getMillisOfSecond();
      LocalTime.Property localTime_Property0 = localTime1.millisOfDay();
      localTime_Property0.getAsString();
      localTime_Property0.roundHalfCeilingCopy();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(703L);
      localTime0.MIDNIGHT.minuteOfHour();
      // Undeclared exception!
      try { 
        localTime0.withMillisOfSecond((-478));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -478 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Chronology chronology0 = null;
      // Undeclared exception!
      try { 
        LocalTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime localTime1 = localTime0.MIDNIGHT.minusHours(669);
      localTime0.size();
      localTime1.toDateTimeToday();
      localTime1.MIDNIGHT.withMillisOfDay(0);
      Years years0 = Years.ONE;
      LocalTime localTime2 = localTime1.MIDNIGHT.withFields(localTime0);
      localTime2.minusMillis(2106);
      LocalTime localTime3 = localTime1.plus(years0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      LocalTime localTime4 = localTime_Property0.addWrapFieldToCopy(4);
      localTime4.MIDNIGHT.getMillisOfDay();
      localTime_Property0.getChronology();
      localTime4.withMillisOfSecond(4);
      localTime3.withPeriodAdded(years0, 1928);
      LocalTime localTime5 = localTime0.minusSeconds(669);
      // Undeclared exception!
      try { 
        localTime5.getFieldType(669);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 669
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      zoneInfoProvider0.getZone("&@B");
      localTime0.toDateTimeToday((DateTimeZone) null);
      Days days0 = Days.FIVE;
      LocalTime localTime1 = localTime0.plus(days0);
      LocalTime localTime2 = localTime1.plusMillis((-187));
      LocalTime.Property localTime_Property0 = localTime2.secondOfMinute();
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value null for secondOfMinute is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(459L);
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.toString("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      Duration duration0 = seconds0.toStandardDuration();
      Interval interval0 = duration0.toIntervalTo((ReadableInstant) null);
      interval0.getStart();
      DateTime dateTime0 = interval0.getEnd();
      dateTime0.isAfter(60000L);
      DateTimeZone dateTimeZone0 = dateTime0.getZone();
      dateTime0.dayOfYear();
      dateTime0.getDayOfMonth();
      LocalTime localTime0 = new LocalTime(60000L, dateTimeZone0);
      localTime0.MIDNIGHT.getMillisOfDay();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      LocalTime.Property localTime_Property0 = new LocalTime.Property(localTime0, dateTimeField0);
      localTime_Property0.roundHalfEvenCopy();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      localTime0.get(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        localTime_Property0.addNoWrapToCopy(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The addition exceeded the boundaries of LocalTime
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Calendar calendar0 = null;
      // Undeclared exception!
      try { 
        LocalTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((Object) gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.GregorianChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = (-3035);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3035), "Field '");
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      mockGregorianCalendar0.getWeekYear();
      monthDay0.dayOfMonth();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      mockGregorianCalendar0.getLeastMaximum(0);
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(monthDay0, uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime localTime1 = localTime0.plusSeconds(0);
      LocalTime localTime2 = localTime0.withFields(localTime1);
      Months months0 = Months.FIVE;
      localTime2.withPeriodAdded(months0, 0);
      int int0 = 16;
      LocalTime localTime3 = localTime0.MIDNIGHT.minusHours(16);
      localTime3.MIDNIGHT.plusHours(16);
      DurationFieldType durationFieldType0 = null;
      localTime0.MIDNIGHT.isAfter(localTime3);
      int int1 = (-3121);
      // Undeclared exception!
      try { 
        localTime3.withFieldAdded((DurationFieldType) null, (-3121));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(0);
      LocalTime localTime0 = new LocalTime(localDateTime1);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, 0);
      // Undeclared exception!
      try { 
        localTime1.MIDNIGHT.isEqual(localDateTime1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        LocalTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-2482L));
      localTime0.getMillisOfDay();
      int int0 = (-1300);
      // Undeclared exception!
      try { 
        localTime0.withMillisOfDay((-1300));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1300 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0);
      Seconds seconds0 = Seconds.ZERO;
      seconds0.toString();
      seconds0.minus(0);
      LocalTime localTime1 = localTime0.withPeriodAdded(seconds0, 0);
      LocalTime.Property localTime_Property0 = localTime1.secondOfMinute();
      LocalTime localTime2 = localTime_Property0.roundHalfFloorCopy();
      Locale locale0 = Locale.JAPAN;
      try { 
        localTime2.toString("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      Chronology chronology0 = gregorianChronology0.withZone(dateTimeZone0);
      LocalTime localTime0 = new LocalTime(1758L, chronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      int int0 = (-3460);
      localTime0.withFieldAdded(durationFieldType0, (-3460));
      Years years0 = Years.ZERO;
      Years years1 = Years.ONE;
      Years years2 = years0.minus(years1);
      Years years3 = years2.plus((-3460));
      // Undeclared exception!
      try { 
        years3.getFieldType(12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(2065L, (Chronology) gJChronology0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      localTime_Property0.get();
      localTime_Property0.addNoWrapToCopy(0);
      LocalTime.fromMillisOfDay((long) 0, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        LocalTime.parse("(C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"(C\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((-80), (-1615));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -80 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      seconds0.dividedBy(3107);
      LocalTime.fromMillisOfDay((-556L));
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(3107, 28);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3107 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime localTime1 = localTime0.minusSeconds(0);
      LocalTime localTime2 = localTime1.withLocalMillis(0L);
      LocalTime localTime3 = localTime2.withMinuteOfHour(0);
      localTime2.MIDNIGHT.getMinuteOfHour();
      LocalTime.Property localTime_Property0 = new LocalTime.Property(localTime3, (DateTimeField) null);
      // Undeclared exception!
      try { 
        localTime_Property0.addCopy(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      localTime_Property0.addCopy(23118750);
      localTime0.plusHours((-2385));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalTime localTime0 = new LocalTime((-1244L), (Chronology) buddhistChronology0);
      LocalTime localTime1 = localTime0.minusMillis(1);
      localTime1.MIDNIGHT.isEqual(localTime0);
      // Undeclared exception!
      try { 
        localTime1.MIDNIGHT.getFieldType(28181250);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 28181250
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 12740625;
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, uTCDateTimeZone0);
      Chronology chronology0 = zonedChronology0.withUTC();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(12740625, 12740625, 12740625, 4, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 12740625 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1L);
      Years years0 = Years.years(400);
      Years years1 = years0.plus(400);
      LocalTime localTime1 = localTime0.MIDNIGHT.minusMinutes(2150);
      localTime1.isBefore(localTime0);
      Years years2 = years1.minus(0);
      Years years3 = years2.dividedBy(3450);
      years3.dividedBy(400);
      LocalTime localTime2 = localTime0.withPeriodAdded(years3, 3450);
      LocalTime.Property localTime_Property0 = localTime2.secondOfMinute();
      localTime_Property0.setCopy(0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(10L);
      LocalTime localTime1 = localTime0.minusMinutes(0);
      int int0 = (-519);
      // Undeclared exception!
      try { 
        localTime1.withSecondOfMinute((-519));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -519 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(30L);
      LocalTime localTime1 = localTime0.minusMillis((-132));
      LocalTime.Property localTime_Property0 = localTime1.millisOfSecond();
      localTime_Property0.getMillis();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1659L);
      int int0 = 3;
      LocalTime localTime1 = localTime0.plusMillis(3);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(3, 0);
      ConverterManager.getInstance();
      LocalTime localTime2 = null;
      try {
        localTime2 = new LocalTime(localTime1, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(strictChronology0, uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.StrictChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      // Undeclared exception!
      try { 
        localTime0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekOfWeekyear' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(11);
      dateTimeZone0.previousTransition(11);
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      dateTimeZone0.isFixed();
      LocalTime localTime1 = localTime0.withMillisOfDay(0);
      ConverterManager.getInstance();
      localTime1.getHourOfDay();
      localTime1.withMillisOfSecond(0);
      DateTimeZone dateTimeZone1 = null;
      // Undeclared exception!
      try { 
        LocalTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalTime localTime0 = new LocalTime((DateTimeZone) uTCDateTimeZone0);
      LocalTime localTime1 = localTime0.withMillisOfDay(0);
      localTime1.getMillisOfSecond();
      localTime1.MIDNIGHT.getValues();
      DateTimeUtils.setCurrentMillisFixed(0L);
      LocalTime localTime2 = localTime1.minusHours(0);
      LocalTime.Property localTime_Property0 = localTime0.MIDNIGHT.minuteOfHour();
      localTime2.withLocalMillis(0);
      Chronology chronology0 = localTime2.getChronology();
      LocalTime localTime3 = localTime_Property0.withMaximumValue();
      Period period0 = Period.minutes(0);
      Instant instant0 = new Instant();
      Instant instant1 = instant0.withMillis((-1360L));
      Instant instant2 = instant1.minus((long) 0);
      DateTime dateTime0 = new DateTime(chronology0);
      Duration duration0 = new Duration(instant2, dateTime0);
      Duration duration1 = duration0.withDurationAdded(365L, 1098);
      Duration duration2 = duration1.dividedBy((-1283L));
      PeriodType periodType0 = PeriodType.hours();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant2, duration2, periodType0);
      period0.withFields(mutablePeriod0);
      Weeks weeks0 = Weeks.standardWeeksIn(period0);
      localTime3.plus(weeks0);
      localTime_Property0.getMillis();
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy("", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for minuteOfHour is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      localTime0.millisOfDay();
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      zoneInfoProvider0.getZone("*#|u");
      // Undeclared exception!
      try { 
        LocalTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-104L));
      localTime0.getHourOfDay();
      int int0 = 2522;
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.withSecondOfMinute(2522);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2522 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(2160L);
      Seconds seconds0 = Seconds.MIN_VALUE;
      Seconds seconds1 = seconds0.multipliedBy(0);
      Seconds.standardSecondsIn(seconds0);
      Seconds seconds2 = seconds0.minus(seconds1);
      Seconds.seconds(0);
      LocalTime localTime1 = localTime0.minus(seconds2);
      LocalTime localTime2 = localTime1.withHourOfDay(0);
      LocalTime localTime3 = localTime2.withSecondOfMinute(11);
      LocalTime localTime4 = localTime3.minusSeconds(11);
      LocalTime.Property localTime_Property0 = localTime4.millisOfDay();
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy(",cutover=", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \",cutover=\" for millisOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      localTime0.getSecondOfMinute();
      LocalTime.fromMillisOfDay((long) (-4228));
      // Undeclared exception!
      try { 
        localTime0.withMillisOfDay((-3865));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3865 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        LocalTime.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      int int0 = 0;
      LocalTime localTime1 = localTime0.plusSeconds(0);
      int int1 = (-2210);
      localTime1.MIDNIGHT.isBefore(localTime0);
      // Undeclared exception!
      try { 
        localTime0.withHourOfDay((-2210));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2210 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = (-86399999);
      int int1 = 1914;
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(10, (-337), (-86399999), 1914);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -337 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      LocalTime localTime0 = new LocalTime(2267L, (DateTimeZone) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      localTime0.isSupported(dateTimeFieldType0);
      int int0 = (-2821);
      // Undeclared exception!
      try { 
        localTime0.getValue((-2821));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -2821
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.now((Chronology) ethiopicChronology0);
      localTime0.getMillisOfDay();
      // Undeclared exception!
      try { 
        localTime0.withSecondOfMinute(73281320);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 73281320 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L);
      LocalTime localTime1 = localTime0.minusSeconds(2455);
      // Undeclared exception!
      try { 
        localTime1.withHourOfDay(714);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 714 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalTime localTime0 = new LocalTime(674L, (Chronology) gJChronology0);
      localTime0.MIDNIGHT.plusHours(0);
      LocalTime.now();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(0, 0, 0, 0, (-1281), 366);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1281 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(2267L, (DateTimeZone) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      localTime0.isSupported(dateTimeFieldType0);
      localTime0.secondOfMinute();
      // Undeclared exception!
      try { 
        localTime0.getValue((-2821));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -2821
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 3149;
      int int1 = 0;
      int int2 = (-1956);
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(3149, 0, (-1956));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3149 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(1273, 3, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1273 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      dateTimeFieldType0.getField(julianChronology0);
      // Undeclared exception!
      try { 
        localTime0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'yearOfEra' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Object) null);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      localTime_Property0.getMaximumValueOverall();
      localTime_Property0.withMinimumValue();
      localTime0.MIDNIGHT.plusMillis(59);
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 59);
      // Undeclared exception!
      try { 
        mutablePeriod0.getFieldType(59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 59
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalTime localTime0 = new LocalTime((-1752L), dateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      localTime_Property0.addWrapFieldToCopy(0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = (-190);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-190));
      dateTimeZone0.convertLocalToUTC((long) (-190), true, (long) (-190));
      DateTimeZone.getNameProvider();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      DateTimeZone.setDefault(dateTimeZone0);
      LocalTime localTime1 = localTime0.plusMinutes(729);
      localTime1.plusHours(729);
      localTime0.toDateTimeToday(dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      dateTimeFieldType0.getField(copticChronology0);
      // Undeclared exception!
      try { 
        DateTimeUtils.setCurrentMillisProvider((DateTimeUtils.MillisProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The MillisProvider must not be null
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      Chronology chronology0 = copticChronology0.withZone(uTCDateTimeZone0);
      copticChronology0.withZone(uTCDateTimeZone0);
      LocalTime localTime0 = new LocalTime((-1L), chronology0);
      LocalTime localTime1 = localTime0.withLocalMillis(1000L);
      localTime1.plusSeconds(0);
      LocalTime localTime2 = localTime1.withMillisOfSecond(1);
      Locale locale0 = Locale.JAPANESE;
      localTime2.MIDNIGHT.toString((String) null, locale0);
      uTCDateTimeZone0.writeReplace();
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      FormatStyle formatStyle0 = FormatStyle.SHORT;
      java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle0);
      dateTimeFormatter0.getResolverStyle();
      Locale locale1 = dateTimeFormatter0.getLocale();
      localTime_Property0.getMaximumTextLength(locale1);
      localTime_Property0.setCopy(1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, (-848), (-1580));
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      localTime_Property0.roundHalfCeilingCopy();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      localTime0.MIDNIGHT.toString((DateTimeFormatter) null);
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy("uf]*az(", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"uf]*az(\" for minuteOfHour is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1232, (-1278), 1232, (-678), (-1278));
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      Years years0 = Years.TWO;
      Years years1 = years0.plus((-678));
      Years years2 = years1.dividedBy(354);
      LocalTime localTime1 = localTime0.minus(years2);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      localTime0.plusMinutes((-2233));
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      LocalTime.Property localTime_Property0 = new LocalTime.Property(localTime1, delegatedDateTimeField0);
      localTime_Property0.roundHalfEvenCopy();
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      localTime0.isSupported(durationFieldType0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.set(localTime0, 2658L);
      durationFieldType0.isSupported(gregorianChronology0);
      localTime0.isSupported(durationFieldType0);
      LocalTime localTime1 = localTime0.plusMinutes(0);
      localTime1.withFields(localTime0);
      localTime0.withMinuteOfHour(0);
      int int0 = (-1919);
      // Undeclared exception!
      try { 
        localTime0.withMillisOfDay((-1919));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1919 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(674);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      TimeZone timeZone0 = uTCDateTimeZone0.toTimeZone();
      DateTimeZone.forTimeZone(timeZone0);
      LocalTime.now(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2935, 2935, 0, 2935, 0, 0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      CopticChronology.getInstance();
      dateTimeFieldType0.getField(copticChronology0);
      // Undeclared exception!
      try { 
        localTime0.withField(dateTimeFieldType0, 39);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 39 for hourOfHalfday must be in the range [0,11]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      Chronology chronology0 = ethiopicChronology0.withZone(uTCDateTimeZone0);
      LocalTime localTime0 = new LocalTime(chronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      // Undeclared exception!
      try { 
        localTime0.withField(dateTimeFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weekyearOfCentury' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("' is not supported");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      localTime0.MIDNIGHT.hourOfDay();
      int int0 = 500;
      // Undeclared exception!
      try { 
        localTime0.withMinuteOfHour(500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 500 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      Chronology chronology0 = localTime_Property0.getChronology();
      localTime_Property0.compareTo((ReadablePartial) localTime0);
      LocalTime localTime1 = null;
      try {
        localTime1 = new LocalTime("~\".6", chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"~\".6\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      DateTimeUtils.setCurrentMillisFixed((-580L));
      localTime0.getMillisOfSecond();
      localTime0.getLocalMillis();
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      localTime_Property0.getChronology();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1L);
      LocalTime localTime1 = localTime0.withHourOfDay(0);
      LocalTime localTime2 = localTime1.minusSeconds(0);
      LocalTime localTime3 = localTime0.plusSeconds(0);
      localTime3.getMinuteOfHour();
      LocalTime localTime4 = localTime3.minusSeconds(0);
      localTime4.MIDNIGHT.minusHours(449);
      DateTimeUtils.setCurrentMillisFixed((-1754L));
      localTime3.MIDNIGHT.getFields();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      durationFieldType0.getField(islamicChronology0);
      int int0 = 499;
      // Undeclared exception!
      try { 
        localTime2.withFieldAdded(durationFieldType0, 499);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'weeks' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      int int0 = (-2757);
      LocalTime localTime1 = localTime0.plusSeconds((-2757));
      localTime1.equals(localTime0);
      localTime1.plusMinutes((-2757));
      LocalTime.parse("9");
      localTime1.plusSeconds((-2757));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      // Undeclared exception!
      try { 
        localTime0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((Chronology) iSOChronology0);
      localTime0.MIDNIGHT.withLocalMillis(0L);
      localTime0.toString((String) null);
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.getField((-2267), (Chronology) iSOChronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -2267
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(1000000000000000000L);
      localTime0.MIDNIGHT.getFields();
      localTime0.MIDNIGHT.isSupported((DateTimeFieldType) null);
      LocalTime localTime1 = localTime0.withMillisOfDay(11);
      localTime1.equals("");
      DateTime dateTime0 = localTime1.toDateTimeToday();
      localTime1.MIDNIGHT.isEqual(localTime0);
      LocalTime localTime2 = LocalTime.now();
      DateTimeZone dateTimeZone0 = dateTime0.getZone();
      LocalTime localTime3 = LocalTime.now(dateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      LocalTime localTime4 = localTime_Property0.addWrapFieldToCopy(11);
      localTime_Property0.getField();
      LocalTime localTime5 = localTime_Property0.addNoWrapToCopy(2);
      localTime5.MIDNIGHT.getMillisOfSecond();
      localTime_Property0.withMinimumValue();
      localTime4.getSecondOfMinute();
      localTime2.toDateTimeToday();
      localTime1.withSecondOfMinute(11);
      Locale locale0 = Locale.JAPAN;
      try { 
        localTime3.toString("org/joda/time/tz/data", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      int int0 = 669;
      LocalTime localTime1 = localTime0.MIDNIGHT.minusHours(669);
      localTime0.size();
      localTime1.toDateTimeToday();
      LocalTime localTime2 = localTime1.MIDNIGHT.withMillisOfDay(0);
      Years years0 = Years.ONE;
      LocalTime localTime3 = localTime1.MIDNIGHT.withFields(localTime0);
      localTime3.MIDNIGHT.getMillisOfSecond();
      LocalTime localTime4 = localTime3.minusMillis(2106);
      localTime4.isAfter(localTime2);
      LocalTime localTime5 = localTime1.plus(years0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      LocalTime localTime6 = localTime_Property0.addWrapFieldToCopy(4);
      localTime6.MIDNIGHT.getMillisOfDay();
      localTime_Property0.getChronology();
      localTime6.withMillisOfSecond(4);
      localTime5.withPeriodAdded(years0, 1928);
      localTime0.minusSeconds(669);
      // Undeclared exception!
      try { 
        localTime5.withMinuteOfHour(1025);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1025 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTimeZone.getProvider();
      LocalTime localTime0 = new LocalTime((DateTimeZone) uTCDateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.minusMinutes((-2324));
      LocalTime localTime1 = localTime0.MIDNIGHT.withFieldAdded(durationFieldType0, (-442));
      localTime0.withLocalMillis((-1L));
      localTime1.minusMinutes((-442));
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      localTime_Property0.getField();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1232, (-1278), 1232, (-678), (-1278));
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      Years years0 = Years.TWO;
      years0.plus((-678));
      localTime0.plusMinutes((-1278));
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      localTime0.isSupported(durationFieldType0);
      localTime0.withLocalMillis(1669L);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.set(localTime0, 2658L);
      durationFieldType0.getField(gregorianChronology0);
      durationFieldType0.isSupported(gregorianChronology0);
      localTime0.isSupported(durationFieldType0);
      LocalTime localTime1 = localTime0.plusMinutes(0);
      localTime1.withFields(localTime0);
      localTime0.withMinuteOfHour(0);
      int int0 = (-1919);
      MonthDay monthDay0 = new MonthDay((DateTimeZone) null);
      // Undeclared exception!
      try { 
        monthDay0.withMonthOfYear(18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 18 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = (-89);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(35000L, (Chronology) gregorianChronology0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
      Chronology chronology0 = localDate0.getChronology();
      LocalTime localTime1 = new LocalTime(1372L, chronology0);
      LocalTime localTime2 = localTime1.withLocalMillis((-3362L));
      DateTimeUtils.setCurrentMillisOffset(0L);
      localTime2.millisOfSecond();
      Partial partial0 = new Partial(localTime0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimePrinter dateTimePrinter0 = dateTimeFormatter1.getPrinter();
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      dateTimeFormatter0.getPrinter();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-89));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((-89));
      Locale locale0 = new Locale("org/joda/time/tz/data");
      locale0.stripExtensions();
      dateTimeFormatter4.withLocale(locale0);
      localTime1.getMillisOfDay();
      MockDate mockDate0 = new MockDate();
      LocalTime.fromDateFields(mockDate0);
      localTime2.minusMillis(1928);
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded((DurationFieldType) null, (-2933));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = (-89);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LocalTime.fromMillisOfDay(35000L, (Chronology) gregorianChronology0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
      Chronology chronology0 = localDate0.getChronology();
      LocalTime localTime0 = new LocalTime(1372L, chronology0);
      LocalTime localTime1 = localTime0.withLocalMillis((-3362L));
      DateTimeUtils.setCurrentMillisOffset(0L);
      LocalTime.Property localTime_Property0 = localTime1.millisOfSecond();
      LocalTime localTime2 = localTime_Property0.addCopy(1);
      Partial partial0 = new Partial(localTime2);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      DateTimePrinter dateTimePrinter0 = dateTimeFormatter1.getPrinter();
      DateTimeFormatter dateTimeFormatter2 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      dateTimeFormatter0.getPrinter();
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withDefaultYear((-89));
      DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withPivotYear((-89));
      Locale locale0 = new Locale("org/joda/time/tz/data");
      DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withLocale(locale0);
      // Undeclared exception!
      try { 
        LocalTime.parse("org/joda/time/tz/data", dateTimeFormatter5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1232, (-1278), 1232, (-678), (-1278));
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      Years years0 = Years.TWO;
      Years years1 = years0.plus((-678));
      Years years2 = years1.dividedBy(354);
      LocalTime localTime1 = localTime0.minus(years2);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalTime localTime2 = localTime0.plusMinutes((-2233));
      localTime0.MIDNIGHT.isEqual(localTime1);
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      LocalTime.Property localTime_Property0 = new LocalTime.Property(localTime1, delegatedDateTimeField0);
      localTime_Property0.roundHalfEvenCopy();
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      localTime0.isSupported(durationFieldType0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      // Undeclared exception!
      try { 
        localTime2.withField(dateTimeFieldType0, (-1102));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'yearOfEra' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      boolean boolean0 = localTime0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      
      LocalTime localTime1 = localTime0.plusMinutes(0);
      LocalTime localTime2 = localTime1.withFields(localTime0);
      LocalTime localTime3 = localTime0.withMinuteOfHour(0);
      LocalTime localTime4 = localTime0.withMillisOfDay(0);
      localTime4.hourOfDay();
      LocalTime localTime5 = localTime4.withHourOfDay(0);
      assertSame(localTime5, localTime4);
      assertEquals(4, localTime0.size());
      assertNotSame(localTime5, localTime3);
      assertSame(localTime0, localTime2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime.now();
      int int0 = (-413);
      Period period0 = Period.weeks((-413));
      LocalTime localTime1 = localTime0.plus(period0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      localTime1.property(dateTimeFieldType0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      // Undeclared exception!
      try { 
        ZonedChronology.getInstance((Chronology) null, uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a chronology
         //
         verifyException("org.joda.time.chrono.ZonedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      LocalTime localTime0 = LocalTime.now((Chronology) copticChronology0);
      LocalTime localTime1 = LocalTime.now((Chronology) copticChronology0);
      localTime0.isEqual(localTime1);
      LocalTime localTime2 = localTime0.plusSeconds(1);
      LocalTime.Property localTime_Property0 = localTime2.secondOfMinute();
      LocalTime localTime3 = localTime_Property0.getLocalTime();
      int int0 = (-1127);
      localTime2.hourOfDay();
      localTime3.toDateTimeToday();
      localTime_Property0.getMinimumValue();
      // Undeclared exception!
      try { 
        CopticChronology.getInstance((DateTimeZone) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.CopticChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(2845L);
      LocalTime localTime1 = null;
      try {
        localTime1 = new LocalTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }
}
