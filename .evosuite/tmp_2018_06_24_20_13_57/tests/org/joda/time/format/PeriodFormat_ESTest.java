/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:36:44 GMT 2018
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTime;
import org.joda.time.Days;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.format.PeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodFormat_ESTest extends PeriodFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased(locale0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      StringBuffer stringBuffer0 = new StringBuffer("");
      MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod("");
      periodFormat_DynamicWordBased0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("Gj%T`mZ,l<~8d;@L");
      Locale locale0 = Locale.CANADA_FRENCH;
      PeriodType periodType0 = PeriodType.minutes();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      StringWriter stringWriter0 = new StringWriter(0);
      Weeks weeks0 = Weeks.weeks(0);
      periodFormat_DynamicWordBased0.printTo((Writer) stringWriter0, (ReadablePeriod) weeks0, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        PeriodFormat.wordBased((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.getDefault();
      Locale locale0 = Locale.KOREAN;
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter1);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      periodFormat_DynamicWordBased0.parseInto(mutablePeriod0, "", (-1), locale0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased((PeriodFormatter) null);
      Days days0 = Days.ZERO;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      // Undeclared exception!
      try { 
        periodFormat_DynamicWordBased0.parseInto(mutablePeriod0, "44HbVT3d", (-5049), (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormat$DynamicWordBased", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased(locale0);
      assertNotNull(periodFormatter0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Weeks weeks0 = Weeks.weeksBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertNotNull(weeks0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
      
      String string0 = periodFormatter0.print(seconds0);
      assertEquals("0 seconds", string0);
      assertNotNull(string0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(0, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PeriodFormatter periodFormatter0 = PeriodFormat.wordBased();
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0);
      periodFormat_DynamicWordBased0.countFieldsToPrint(mutablePeriod0, (-1865), (Locale) null);
      mutablePeriod0.setHours((-1923));
      Locale locale0 = Locale.ITALY;
      mutablePeriod0.getDays();
      periodFormat_DynamicWordBased0.parseInto(mutablePeriod0, "org.joda.time.format.DateTimeParserBucket", 0, locale0);
      Locale locale1 = new Locale("org.joda.time.field.UnsupportedDurationField", "yu739f~,BO5q8C a3~");
      periodFormat_DynamicWordBased0.calculatePrintedLength(mutablePeriod0, locale1);
      periodFormat_DynamicWordBased0.calculatePrintedLength(mutablePeriod0, locale1);
      PeriodFormatter periodFormatter1 = PeriodFormat.wordBased();
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased1 = new PeriodFormat.DynamicWordBased(periodFormatter1);
      PeriodFormatter periodFormatter2 = PeriodFormat.getDefault();
      assertSame(periodFormatter2, periodFormatter0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PeriodFormat periodFormat0 = new PeriodFormat();
  }
}
