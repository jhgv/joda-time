/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:42:45 GMT 2018
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.BasicChronology;
import org.joda.time.chrono.BasicDayOfYearDateTimeField;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.PreciseDurationField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicDayOfYearDateTimeField_ESTest extends BasicDayOfYearDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.millis();
      assertEquals(1, CopticChronology.AM);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("millis", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertNotNull(durationField0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(islamicChronology0, durationField0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("millis", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertEquals(1L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals(355, basicDayOfYearDateTimeField0.getMaximumValue());
      assertNotNull(basicDayOfYearDateTimeField0);
      
      int int0 = basicDayOfYearDateTimeField0.getMaximumValueForSet(354, 354);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertEquals(354, int0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("millis", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertEquals(1L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals(355, basicDayOfYearDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertNotNull(millisDurationField0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField((BasicChronology) null, millisDurationField0);
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals(1L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertNotNull(basicDayOfYearDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicDayOfYearDateTimeField0.isLeap(887L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicDayOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      assertTrue(millisDurationField0.isSupported());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertNotNull(millisDurationField0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField((BasicChronology) null, millisDurationField0);
      assertTrue(millisDurationField0.isSupported());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertEquals(1L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertNotNull(basicDayOfYearDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicDayOfYearDateTimeField0.getRangeDurationField();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicDayOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertNotNull(millisDurationField0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField((BasicChronology) null, millisDurationField0);
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertEquals(1L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertNotNull(basicDayOfYearDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicDayOfYearDateTimeField0.getMaximumValueForSet(0L, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicDayOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals("millis", millisDurationField0.getName());
      assertNotNull(millisDurationField0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(ethiopicChronology0, millisDurationField0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertEquals(366, basicDayOfYearDateTimeField0.getMaximumValue());
      assertEquals(1L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertNotNull(basicDayOfYearDateTimeField0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        basicDayOfYearDateTimeField0.getMaximumValue((ReadablePartial) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicDayOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertTrue(millisDurationField0.isSupported());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertNotNull(millisDurationField0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField((BasicChronology) null, millisDurationField0);
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertTrue(millisDurationField0.isSupported());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertEquals(1L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertNotNull(basicDayOfYearDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicDayOfYearDateTimeField0.getMaximumValue((ReadablePartial) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicDayOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.days();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField((BasicChronology) null, durationField0);
      assertEquals(1, CopticChronology.AM);
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertEquals(86400000L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertNotNull(basicDayOfYearDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicDayOfYearDateTimeField0.getMaximumValue((long) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicDayOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isPrecise());
      assertTrue(millisDurationField0.isSupported());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertNotNull(millisDurationField0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField((BasicChronology) null, millisDurationField0);
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isPrecise());
      assertTrue(millisDurationField0.isSupported());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertEquals(1L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertNotNull(basicDayOfYearDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicDayOfYearDateTimeField0.getMaximumValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicDayOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = null;
      try {
        basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(copticChronology0, (DurationField) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.PreciseDurationDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Days days0 = Days.SEVEN;
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      DurationFieldType durationFieldType0 = days0.getFieldType();
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, (-448L));
      assertEquals(7, days0.getDays());
      assertEquals(1, days0.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals((-448L), preciseDurationField0.getUnitMillis());
      assertNotNull(preciseDurationField0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = null;
      try {
        basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField((BasicChronology) null, preciseDurationField0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The unit milliseconds must be at least 1
         //
         verifyException("org.joda.time.field.PreciseDurationDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      PreciseDurationField preciseDurationField0 = new PreciseDurationField(durationFieldType0, 3117L);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(3117L, preciseDurationField0.getUnitMillis());
      assertNotNull(preciseDurationField0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(ethiopicChronology0, preciseDurationField0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(3117L, preciseDurationField0.getUnitMillis());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertEquals(3117L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertEquals(366, basicDayOfYearDateTimeField0.getMaximumValue());
      assertNotNull(basicDayOfYearDateTimeField0);
      
      int int0 = basicDayOfYearDateTimeField0.get(1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(113, int0);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", preciseDurationField0.getName());
      assertTrue(preciseDurationField0.isPrecise());
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(3117L, preciseDurationField0.getUnitMillis());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertEquals(3117L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertEquals(366, basicDayOfYearDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertTrue(millisDurationField0.isPrecise());
      assertNotNull(millisDurationField0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(ethiopicChronology0, millisDurationField0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals(366, basicDayOfYearDateTimeField0.getMaximumValue());
      assertEquals(1L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertNotNull(basicDayOfYearDateTimeField0);
      
      int int0 = basicDayOfYearDateTimeField0.getMaximumValue((long) 1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(365, int0);
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertEquals("millis", millisDurationField0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals(366, basicDayOfYearDateTimeField0.getMaximumValue());
      assertEquals(1L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.hours();
      assertEquals(1, CopticChronology.AM);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertNotNull(durationField0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(ethiopicChronology0, durationField0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, CopticChronology.AM);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals(3600000L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertEquals(366, basicDayOfYearDateTimeField0.getMaximumValue());
      assertNotNull(basicDayOfYearDateTimeField0);
      
      int int0 = basicDayOfYearDateTimeField0.getMaximumValueForSet(1, 1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, CopticChronology.AM);
      assertEquals(365, int0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals(3600000L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertEquals(366, basicDayOfYearDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.millis();
      assertEquals(1, CopticChronology.AM);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("millis", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertNotNull(durationField0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(islamicChronology0, durationField0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("millis", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(355, basicDayOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertEquals(1L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertNotNull(basicDayOfYearDateTimeField0);
      
      int int0 = basicDayOfYearDateTimeField0.getMaximumValueForSet((-749), 762);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, CopticChronology.AM);
      assertEquals(354, int0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("millis", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(355, basicDayOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertEquals(1L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.hours();
      assertEquals(1, CopticChronology.AM);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertNotNull(durationField0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(ethiopicChronology0, durationField0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, CopticChronology.AM);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertEquals(366, basicDayOfYearDateTimeField0.getMaximumValue());
      assertEquals(3600000L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertNotNull(basicDayOfYearDateTimeField0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1, (Chronology) copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int[] intArray0 = new int[7];
      int int0 = basicDayOfYearDateTimeField0.getMaximumValue((ReadablePartial) localDateTime0, intArray0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, CopticChronology.AM);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(365, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("hours", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertEquals(366, basicDayOfYearDateTimeField0.getMaximumValue());
      assertEquals(3600000L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.hours();
      assertEquals(1, CopticChronology.AM);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertNotNull(durationField0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(ethiopicChronology0, durationField0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, CopticChronology.AM);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertEquals(3600000L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertEquals(366, basicDayOfYearDateTimeField0.getMaximumValue());
      assertNotNull(basicDayOfYearDateTimeField0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1, (Chronology) copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalTime localTime0 = localDateTime0.toLocalTime();
      assertEquals(1, CopticChronology.AM);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int[] intArray0 = new int[7];
      int int0 = basicDayOfYearDateTimeField0.getMaximumValue((ReadablePartial) localTime0, intArray0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, CopticChronology.AM);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(366, int0);
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertEquals(3600000L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertEquals(366, basicDayOfYearDateTimeField0.getMaximumValue());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.hours();
      assertEquals(1, CopticChronology.AM);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertNotNull(durationField0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(ethiopicChronology0, durationField0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, CopticChronology.AM);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertEquals(366, basicDayOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertEquals(3600000L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertNotNull(basicDayOfYearDateTimeField0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1, (Chronology) copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = basicDayOfYearDateTimeField0.getMaximumValue((ReadablePartial) localDateTime0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, CopticChronology.AM);
      assertEquals(365, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:00", dateTimeZone0.toString());
      assertEquals("+01:00", dateTimeZone0.getID());
      assertTrue(durationField0.isSupported());
      assertEquals("hours", durationField0.getName());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertEquals(366, basicDayOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertEquals(3600000L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = copticChronology0.hours();
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(ethiopicChronology0, durationField0);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1, (Chronology) copticChronology0);
      LocalTime localTime0 = localDateTime0.toLocalTime();
      int int0 = basicDayOfYearDateTimeField0.getMaximumValue((ReadablePartial) localTime0);
      assertEquals(366, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DurationField durationField0 = copticChronology0.millis();
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(islamicChronology0, durationField0);
      boolean boolean0 = basicDayOfYearDateTimeField0.isLeap(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(ethiopicChronology0, millisDurationField0);
      int int0 = basicDayOfYearDateTimeField0.getMaximumValue();
      assertEquals(366, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(ethiopicChronology0, millisDurationField0);
      DurationField durationField0 = basicDayOfYearDateTimeField0.getRangeDurationField();
      assertTrue(durationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(ethiopicChronology0, millisDurationField0);
      int int0 = basicDayOfYearDateTimeField0.getMinimumValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(ethiopicChronology0, millisDurationField0);
      int int0 = basicDayOfYearDateTimeField0.getMaximumValueForSet(0L, (-1));
      assertEquals(365, int0);
  }
}
