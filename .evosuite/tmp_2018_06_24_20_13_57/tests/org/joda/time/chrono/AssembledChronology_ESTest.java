/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:22:09 GMT 2018
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.Instant;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicFixedMonthChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AssembledChronology_ESTest extends AssembledChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JulianChronology julianChronology0 = new JulianChronology((Chronology) null, (Object) null, 2);
      assertNotNull(julianChronology0);
      
      DateTimeZone dateTimeZone0 = julianChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      DateTimeField dateTimeField0 = zonedChronology0.millisOfSecond();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(strictChronology0);
      
      long long0 = BasicFixedMonthChronology.MILLIS_PER_YEAR;
      assertEquals(31557600000L, long0);
      
      DurationField durationField0 = ethiopicChronology0.minutes();
      assertTrue(durationField0.isSupported());
      assertEquals("minutes", durationField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      DateTimeField dateTimeField0 = strictChronology0.era();
      assertTrue(dateTimeField0.isSupported());
      assertEquals("era", dateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeField0);
      
      DateTimeField dateTimeField1 = strictChronology0.millisOfDay();
      assertNotSame(dateTimeField1, dateTimeField0);
      assertEquals("millisOfDay", dateTimeField1.getName());
      assertTrue(dateTimeField1.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField1);
      
      DateTimeZone dateTimeZone0 = strictChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeZone1);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone1, 1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      copticChronology0.assemble(assembledChronology_Fields0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDaysInYear(913);
      assertEquals(355, int0);
      assertEquals(1, IslamicChronology.AH);
      
      int int1 = islamicChronology0.getDayOfMonth((-820L));
      assertEquals(21, int1);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(int1 == int0);
      
      int int2 = islamicChronology0.getYear(298L);
      assertEquals(1389, int2);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(lenientChronology0);
      
      long long0 = islamicChronology0.getYearMonthMillis(689, (-261));
      assertEquals((-22124707200000L), long0);
      assertEquals(1, IslamicChronology.AH);
      
      long long1 = lenientChronology0.getDateTimeMillis(21, 22, 1389, 355, 6, 292272708, 1389);
      assertEquals((-41442141730611L), long1);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(long1 == long0);
      
      String string0 = lenientChronology0.toString();
      assertEquals("LenientChronology[IslamicChronology[UTC]]", string0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.dayOfWeek();
      assertTrue(dateTimeField0.isSupported());
      assertEquals("dayOfWeek", dateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeField0);
      
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeZone1);
      
      // Undeclared exception!
      try { 
        EthiopicChronology.getInstance(dateTimeZone1, (-3578));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -3578
         //
         verifyException("org.joda.time.chrono.EthiopicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(strictChronology0);
      
      DateTimeZone dateTimeZone0 = strictChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 1);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(1, CopticChronology.AM);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(gJChronology1);
      
      DateTimeZone dateTimeZone1 = gJChronology1.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals(1, CopticChronology.AM);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(dateTimeZone1);
      
      Chronology chronology0 = strictChronology0.withZone(dateTimeZone1);
      assertSame(strictChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(chronology0, strictChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals(1, CopticChronology.AM);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(chronology0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertSame(strictChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withUTC();
      assertSame(strictChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology1);
      
      DurationField durationField0 = strictChronology0.millis();
      assertSame(strictChronology0, chronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = gJChronology1.halfdayOfDay();
      assertSame(strictChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(1, CopticChronology.AM);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone((DateTimeZone) null);
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertNotNull(copticChronology1);
      
      int int0 = copticChronology0.getDaysInMonthMaxForSet((-2783L), 0);
      assertNotSame(copticChronology0, copticChronology1);
      assertEquals(30, int0);
      assertEquals(1, CopticChronology.AM);
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      
      DateTimeField dateTimeField0 = copticChronology0.clockhourOfDay();
      assertNotSame(copticChronology0, copticChronology1);
      assertEquals(1, CopticChronology.AM);
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertNotNull(dateTimeField0);
      
      DateTimeField dateTimeField1 = copticChronology0.weekOfWeekyear();
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(dateTimeField1, dateTimeField0);
      assertEquals(1, CopticChronology.AM);
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField1);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      int int1 = 1260;
      try { 
        julianChronology0.getDateTimeMillis((long) 1260, 10080, 387, 10080, 10080);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 10080 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = JulianChronology.adjustYearForSet(2428);
      assertEquals(2428, int0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gregorianChronology0.assemble(assembledChronology_Fields0);
      int int1 = gregorianChronology0.getMaxYear();
      assertEquals(292278993, int1);
      assertFalse(int1 == int0);
      
      DateTimeField dateTimeField0 = gregorianChronology0.yearOfEra();
      assertEquals(1, dateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, 43200000L, 292278993);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 292278993
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      int int0 = copticChronology0.getDayOfMonth((-1513L), 0);
      assertEquals(23, int0);
      assertEquals(1, CopticChronology.AM);
      
      DurationField durationField0 = copticChronology0.weeks();
      assertEquals("weeks", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeZone1);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(zonedChronology0);
      
      DateTimeZone dateTimeZone2 = zonedChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone2.toString());
      assertEquals("America/Recife", dateTimeZone2.getID());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeZone2);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone2.toString());
      assertEquals("America/Recife", dateTimeZone2.getID());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(julianChronology0);
      
      long long0 = julianChronology0.calculateFirstDayOfYearMillis((-2759));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertEquals((-149234745600000L), long0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone2.toString());
      assertEquals("America/Recife", dateTimeZone2.getID());
      assertEquals(1, CopticChronology.AM);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(strictChronology0);
      
      DateTimeZone dateTimeZone3 = strictChronology0.getZone();
      assertSame(dateTimeZone3, dateTimeZone2);
      assertSame(dateTimeZone3, dateTimeZone1);
      assertSame(dateTimeZone3, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone3.getID());
      assertEquals("America/Recife", dateTimeZone3.toString());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeZone3);
      
      Chronology chronology0 = strictChronology0.withZone(dateTimeZone3);
      assertSame(strictChronology0, chronology0);
      assertSame(dateTimeZone3, dateTimeZone2);
      assertSame(dateTimeZone3, dateTimeZone1);
      assertSame(dateTimeZone3, dateTimeZone0);
      assertSame(chronology0, strictChronology0);
      assertEquals("America/Recife", dateTimeZone3.getID());
      assertEquals("America/Recife", dateTimeZone3.toString());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getWeeksInYear((-1964));
      assertEquals(0, int0);
      assertEquals(1, IslamicChronology.AH);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      DateTimeField dateTimeField0 = islamicChronology0.weekyearOfCentury();
      assertTrue(dateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeField0);
      
      assembledChronology_Fields0.weekOfWeekyear = dateTimeField0;
      assertTrue(dateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      
      islamicChronology0.assemble(assembledChronology_Fields0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeField dateTimeField1 = islamicChronology0.clockhourOfDay();
      assertNotSame(dateTimeField1, dateTimeField0);
      assertTrue(dateTimeField1.isSupported());
      assertEquals("clockhourOfDay", dateTimeField1.getName());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField1);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      int int1 = copticChronology0.getMaxYear();
      assertEquals(292272708, int1);
      assertEquals(1, CopticChronology.AM);
      assertFalse(int1 == int0);
      
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.gregorianToJulianByWeekyear(594L);
      assertEquals(1209600594L, long0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Chronology chronology0 = gJChronology0.withUTC();
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(chronology0);
      
      DateTimeZone dateTimeZone0 = chronology0.getZone();
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      int int0 = ethiopicChronology0.getWeeksInYear(41);
      assertEquals(53, int0);
      assertEquals(1, EthiopicChronology.EE);
      
      int int1 = ethiopicChronology0.getDaysInMonthMax((-370L));
      assertEquals(30, int1);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(int1 == int0);
      
      boolean boolean0 = ethiopicChronology0.isLeapDay(10125000);
      assertFalse(boolean0);
      assertEquals(1, EthiopicChronology.EE);
      
      DurationField durationField0 = ethiopicChronology0.halfdays();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
      
      String string0 = gJChronology0.toString();
      assertSame(gJChronology0, chronology0);
      assertEquals("GJChronology[UTC]", string0);
      assertNotNull(string0);
      
      Chronology chronology1 = gJChronology0.withZone(dateTimeZone0);
      assertSame(gJChronology0, chronology0);
      assertSame(gJChronology0, chronology1);
      assertSame(chronology0, gJChronology0);
      assertSame(chronology0, chronology1);
      assertSame(chronology1, chronology0);
      assertSame(chronology1, gJChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(chronology1);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.year();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeField0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Chronology chronology2 = iSOChronology0.withUTC();
      assertSame(iSOChronology0, chronology2);
      assertSame(chronology2, iSOChronology0);
      assertNotNull(chronology2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = islamicChronology0.getLeapYearPatternType();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(lenientChronology0);
      
      long long0 = lenientChronology0.getDateTimeMillis(1410, 0, 1, 0);
      assertEquals(615600000000L, long0);
      assertEquals(1, IslamicChronology.AH);
      
      String string0 = lenientChronology0.toString();
      assertEquals("LenientChronology[IslamicChronology[UTC]]", string0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(string0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      DateTimeField dateTimeField0 = islamicChronology0.minuteOfDay();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeField0);
      
      DurationField durationField0 = islamicChronology0.seconds();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(durationField0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(zonedChronology0);
      
      long long1 = zonedChronology0.getDateTimeMillis(0, 5, 1, 0);
      assertEquals((-42511383624000L), long1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(long1 == long0);
      
      DateTimeField dateTimeField1 = zonedChronology0.hourOfDay();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertTrue(dateTimeField1.isSupported());
      assertEquals("hourOfDay", dateTimeField1.getName());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeField1);
      
      try { 
        zonedChronology0.getDateTimeMillis((-59), 0, (-3146), 20, 20, 20, (-458));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -458 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(zonedChronology0);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone1);
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone(dateTimeZone1);
      assertSame(copticChronology0, copticChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(copticChronology1, copticChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology1);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)zonedChronology0.getZone();
      assertSame(dateTimeZone0, cachedDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(cachedDateTimeZone0, dateTimeZone1);
      assertSame(cachedDateTimeZone0, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(cachedDateTimeZone0);
      
      String string0 = (String)buddhistChronology0.getParam();
      assertEquals("", string0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(string0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertSame(dateTimeZone0, cachedDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(cachedDateTimeZone0, dateTimeZone1);
      assertSame(cachedDateTimeZone0, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertSame(dateTimeZone0, cachedDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(cachedDateTimeZone0, dateTimeZone1);
      assertSame(cachedDateTimeZone0, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(instant0);
      
      int int0 = JulianChronology.adjustYearForSet(1);
      assertEquals(1, int0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertSame(dateTimeZone0, cachedDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(julianChronology0);
      
      JulianChronology julianChronology1 = (JulianChronology)julianChronology0.withZone(dateTimeZone1);
      assertSame(dateTimeZone0, cachedDateTimeZone0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone1, cachedDateTimeZone0);
      assertSame(julianChronology0, julianChronology1);
      assertSame(julianChronology1, julianChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(julianChronology1);
      
      try { 
        gJChronology0.getDateTimeMillis(0, 1, 0, 0, 1, 1, (-51));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -51 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      Chronology chronology0 = iSOChronology0.getBase();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      int int0 = ethiopicChronology0.getMonthOfYear(1392L);
      assertEquals(4, int0);
      assertEquals(1, EthiopicChronology.EE);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.weekyearOfCentury();
      assertTrue(dateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeField0);
      
      DateTimeField dateTimeField1 = ethiopicChronology0.minuteOfDay();
      assertNotSame(dateTimeField1, dateTimeField0);
      assertTrue(dateTimeField1.isSupported());
      assertEquals("minuteOfDay", dateTimeField1.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = islamicChronology0.getLeapYearPatternType();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(lenientChronology0);
      
      long long0 = lenientChronology0.getDateTimeMillis(100000L, 1, 1, 1, 3158);
      assertEquals(3664158L, long0);
      assertEquals(1, IslamicChronology.AH);
      
      long long1 = lenientChronology0.getDateTimeMillis(1410, 0, 1, 0);
      assertEquals(615600000000L, long1);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(long1 == long0);
      
      String string0 = lenientChronology0.toString();
      assertEquals("LenientChronology[IslamicChronology[UTC]]", string0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(string0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      DateTimeField dateTimeField0 = islamicChronology0.minuteOfDay();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeField0);
      
      DurationField durationField0 = islamicChronology0.seconds();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(durationField0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(zonedChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      lenientChronology0.assemble(assembledChronology_Fields0);
      assertEquals(1, IslamicChronology.AH);
      
      try { 
        zonedChronology0.getDateTimeMillis(1410, 0, (-3146), 20, 20, 20, (-458));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -458 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      DurationField durationField0 = gregorianChronology0.halfdays();
      assertEquals(43200000L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      assertEquals("halfdays", durationField0.getName());
      assertTrue(durationField0.isPrecise());
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      // Undeclared exception!
      try { 
        ZonedChronology.getInstance(buddhistChronology0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DateTimeZone must not be null
         //
         verifyException("org.joda.time.chrono.ZonedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DurationField durationField0 = copticChronology0.months();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      Chronology chronology0 = gregorianChronology0.withUTC();
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      assertNotNull(chronology0);
      
      int int0 = copticChronology0.getMinYear();
      assertEquals((-292269337), int0);
      assertEquals(1, CopticChronology.AM);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeZone0);
      
      Chronology chronology1 = lenientChronology0.withZone(dateTimeZone0);
      assertSame(lenientChronology0, chronology1);
      assertSame(chronology1, lenientChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(chronology1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = islamicChronology0.getLeapYearPatternType();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(lenientChronology0);
      
      long long0 = lenientChronology0.getDateTimeMillis(410, 410, 410, 1);
      assertEquals((-28920231623999L), long0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology1);
      
      long long1 = lenientChronology0.getDateTimeMillis(1410, 0, 1, 0);
      assertSame(islamicChronology0, islamicChronology1);
      assertEquals(615610800000L, long1);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(long1 == long0);
      
      String string0 = lenientChronology0.toString();
      assertSame(islamicChronology0, islamicChronology1);
      assertEquals("LenientChronology[IslamicChronology[America/Recife]]", string0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(string0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      DateTimeField dateTimeField0 = islamicChronology0.minuteOfDay();
      assertSame(islamicChronology0, islamicChronology1);
      assertEquals("minuteOfDay", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeField0);
      
      DurationField durationField0 = islamicChronology0.seconds();
      assertSame(islamicChronology0, islamicChronology1);
      assertTrue(durationField0.isSupported());
      assertEquals("seconds", durationField0.getName());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(durationField0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertNotNull(dateTimeZone1);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(zonedChronology0);
      
      boolean boolean0 = zonedChronology0.equals(dateTimeField0);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertFalse(boolean0);
      assertEquals("minuteOfDay", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals(1, IslamicChronology.AH);
      
      try { 
        zonedChronology0.getDateTimeMillis((-59), 4, (-3146), 20, 20, 20, (-458));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -458 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      DateTimeField dateTimeField0 = copticChronology0.minuteOfHour();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeField0);
      
      String string0 = "JH##OXpiG^fa^I";
      DateTimeField dateTimeField1 = copticChronology0.dayOfYear();
      assertNotSame(dateTimeField1, dateTimeField0);
      assertEquals(1, CopticChronology.AM);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField1);
      
      int int0 = copticChronology0.getMonthOfYear(499L);
      assertEquals(4, int0);
      assertEquals(1, CopticChronology.AM);
      
      // Undeclared exception!
      try { 
        copticChronology0.set((ReadablePartial) null, (-1285L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      DateTimeField dateTimeField0 = assembledChronology_Fields0.weekyear;
      assertNull(dateTimeField0);
      
      assembledChronology_Fields0.dayOfYear = null;
      DurationField durationField0 = assembledChronology_Fields0.weekyears;
      assertNull(durationField0);
      
      boolean boolean0 = ZonedChronology.useTimeArithmetic((DurationField) null);
      assertFalse(boolean0);
      
      LimitChronology limitChronology0 = LimitChronology.getInstance(gJChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      assertNotNull(limitChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      long long0 = BasicFixedMonthChronology.MILLIS_PER_MONTH;
      assertEquals(2592000000L, long0);
      
      Chronology chronology0 = limitChronology0.withZone(dateTimeZone0);
      assertSame(limitChronology0, chronology0);
      assertSame(chronology0, limitChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(chronology0);
      
      DateTimeField dateTimeField1 = limitChronology0.millisOfDay();
      assertSame(limitChronology0, chronology0);
      assertNotNull(dateTimeField1);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      islamicChronology0.assemble(assembledChronology_Fields0);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = islamicChronology0.getDayOfYear((-2081L));
      assertEquals(287, int0);
      assertEquals(1, IslamicChronology.AH);
      
      DurationField durationField1 = islamicChronology0.centuries();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(durationField1);
      
      limitChronology0.checkLimits(1, "org/joda/time/tz/data");
      assertSame(limitChronology0, chronology0);
      
      long long1 = islamicChronology0.setYear((-2028L), 3772);
      assertEquals(72960998397972L, long1);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(long1 == long0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      buddhistChronology0.assemble(assembledChronology_Fields0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(strictChronology0);
      
      boolean boolean1 = limitChronology0.equals("org/joda/time/tz/data");
      assertSame(limitChronology0, chronology0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0);
      assertSame(gJChronology0, gJChronology1);
      assertSame(gJChronology1, gJChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(gJChronology1);
      
      EthiopicChronology ethiopicChronology0 = null;
      try {
        ethiopicChronology0 = new EthiopicChronology(chronology0, "org/joda/time/tz/data", 1233);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1233
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(zonedChronology0);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone1);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withZone(dateTimeZone1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      
      int int0 = 0;
      int int1 = 1843;
      int int2 = islamicChronology0.getDayOfMonth(0L, 0, 1843);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertEquals(437810, int2);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      islamicChronology0.assemble(assembledChronology_Fields0);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertNotSame(gJChronology1, gJChronology0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(gJChronology1);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology1.getZone();
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals("America/Recife", cachedDateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.getID());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(cachedDateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals("America/Recife", cachedDateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(ethiopicChronology0);
      
      ethiopicChronology0.assemble(assembledChronology_Fields0);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals("America/Recife", cachedDateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)gJChronology1.clockhourOfHalfday();
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = gJChronology1.add(0L, (long) 1843, 1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals(1843L, long0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      
      boolean boolean0 = gJChronology0.equals((Object) null);
      assertNotSame(gJChronology0, gJChronology1);
      assertFalse(boolean0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      
      try { 
        gJChronology1.getDateTimeMillis(1843, 1, 1, 1, 1843, 437810, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1843 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(gregorianChronology0);
      
      DurationField durationField0 = gregorianChronology0.minutes();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("minutes", durationField0.getName());
      assertEquals(60000L, durationField0.getUnitMillis());
      assertTrue(durationField0.isPrecise());
      assertTrue(durationField0.isSupported());
      assertNotNull(durationField0);
      
      DateTimeField dateTimeField0 = gregorianChronology0.monthOfYear();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(12, dateTimeField0.getMaximumValue());
      assertFalse(dateTimeField0.isLenient());
      assertTrue(dateTimeField0.isSupported());
      assertEquals(1, dateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      int int0 = (-818);
      EthiopicChronology ethiopicChronology0 = null;
      try {
        ethiopicChronology0 = new EthiopicChronology(gregorianChronology0, gregorianChronology0, (-818));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -818
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      boolean boolean0 = iSOChronology0.equals((Object) null);
      assertFalse(boolean0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(iSOChronology0);
      assertNotNull(strictChronology0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getMinYear();
      assertEquals(1, int0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = iSOChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC]", string0);
      assertNotNull(string0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(gJChronology1);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      long long0 = gJChronology1.add((long) 1, 3047L, 1);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals(3048L, long0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      
      gJChronology1.assemble(assembledChronology_Fields0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      
      DateTimeField dateTimeField0 = gJChronology1.yearOfCentury();
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("yearOfCentury", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(dateTimeField0);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      GJChronology gJChronology2 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertSame(gJChronology2, gJChronology1);
      assertNotSame(gJChronology2, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology0, gJChronology2);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertFalse(gJChronology2.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertNotNull(gJChronology2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.monthOfYear();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeField0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getAverageMillisPerYear();
      assertEquals(30617280288L, long0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeZone0);
      
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeZone1);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        JulianChronology.getInstance(dateTimeZone1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology1);
      
      DateTimeField dateTimeField0 = islamicChronology0.weekOfWeekyear();
      assertSame(islamicChronology0, islamicChronology1);
      assertTrue(dateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      int int0 = ethiopicChronology0.getWeekOfWeekyear(4044L, 5);
      assertEquals(1, int0);
      assertEquals(1, EthiopicChronology.EE);
      
      EthiopicChronology ethiopicChronology1 = EthiopicChronology.getInstance();
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology1);
      
      DurationField durationField0 = ethiopicChronology0.eras();
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertTrue(durationField0.isPrecise());
      assertEquals("eras", durationField0.getName());
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeField dateTimeField0 = islamicChronology0.dayOfYear();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotNull(julianChronology0);
      
      Chronology chronology0 = julianChronology0.withZone((DateTimeZone) null);
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertNotNull(chronology0);
      
      long long0 = julianChronology0.getApproxMillisAtEpochDividedByTwo();
      assertSame(julianChronology0, chronology0);
      assertEquals(31083663600000L, long0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      DurationField durationField0 = assembledChronology_Fields0.seconds;
      assertNull(durationField0);
      
      boolean boolean0 = ZonedChronology.useTimeArithmetic((DurationField) null);
      assertFalse(boolean0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      gJChronology0.assemble(assembledChronology_Fields0);
      Chronology chronology1 = gJChronology0.withUTC();
      assertNotSame(gJChronology0, chronology1);
      assertNotSame(chronology1, gJChronology0);
      assertFalse(chronology1.equals((Object)gJChronology0));
      assertNotNull(chronology1);
      
      long long1 = gJChronology0.julianToGregorianByWeekyear(31083663600000L);
      assertNotSame(gJChronology0, chronology1);
      assertEquals(31081849200000L, long1);
      assertFalse(gJChronology0.equals((Object)chronology1));
      assertFalse(long1 == long0);
      
      DurationField durationField1 = gJChronology0.seconds();
      assertNotSame(gJChronology0, chronology1);
      assertEquals("seconds", durationField1.getName());
      assertTrue(durationField1.isSupported());
      assertFalse(gJChronology0.equals((Object)chronology1));
      assertNotNull(durationField1);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDaysInMonthMaxForSet(31081849200000L, 0);
      assertEquals(29, int0);
      assertEquals(1, IslamicChronology.AH);
      
      islamicChronology0.assemble(assembledChronology_Fields0);
      assertEquals(1, IslamicChronology.AH);
      
      long long2 = islamicChronology0.setYear((-1166L), 6);
      assertEquals((-42343689601166L), long2);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      DateTimeField dateTimeField0 = julianChronology0.millisOfSecond();
      assertSame(julianChronology0, chronology0);
      assertTrue(dateTimeField0.isSupported());
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      assertNotNull(dateTimeField0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = julianChronology0.getDaysInMonthMax(0L);
      assertEquals(31, int0);
      
      long long0 = julianChronology0.calculateFirstDayOfYearMillis(202);
      assertEquals((-55792713600000L), long0);
      
      DurationField durationField0 = julianChronology0.years();
      assertNotNull(durationField0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      long long1 = copticChronology0.setYear(31, (-280));
      assertEquals((-62042198399969L), long1);
      assertEquals(1, CopticChronology.AM);
      assertFalse(long1 == long0);
      
      long long2 = copticChronology0.getDateTimeMillis(0L, 0, 7, 31, 7);
      assertEquals((-75148993L), long2);
      assertEquals(1, CopticChronology.AM);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      boolean boolean0 = copticChronology0.isLeapDay((-2419L));
      assertFalse(boolean0);
      assertEquals(1, CopticChronology.AM);
      
      int int1 = julianChronology0.getDaysInMonthMax(0);
      assertEquals(31, int1);
      assertTrue(int1 == int0);
      
      DurationField durationField1 = julianChronology0.hours();
      assertEquals("hours", durationField1.getName());
      assertTrue(durationField1.isPrecise());
      assertEquals(3600000L, durationField1.getUnitMillis());
      assertTrue(durationField1.isSupported());
      assertNotNull(durationField1);
      
      Chronology chronology0 = julianChronology0.withUTC();
      assertSame(julianChronology0, chronology0);
      assertSame(chronology0, julianChronology0);
      assertNotNull(chronology0);
      
      DurationField durationField2 = julianChronology0.seconds();
      assertSame(julianChronology0, chronology0);
      assertNotSame(durationField2, durationField1);
      assertTrue(durationField2.isPrecise());
      assertTrue(durationField2.isSupported());
      assertEquals("seconds", durationField2.getName());
      assertEquals(1000L, durationField2.getUnitMillis());
      assertFalse(durationField2.equals((Object)durationField1));
      assertNotNull(durationField2);
      
      CopticChronology copticChronology1 = CopticChronology.getInstanceUTC();
      assertNotSame(copticChronology1, copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertNotNull(copticChronology1);
      
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      assertNotSame(copticChronology0, copticChronology1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1, CopticChronology.AM);
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);
      assertSame(julianChronology0, chronology0);
      assertNotSame(copticChronology0, copticChronology1);
      assertSame(chronology0, julianChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1, CopticChronology.AM);
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertNotNull(zonedChronology0);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertSame(julianChronology0, chronology0);
      assertNotSame(copticChronology0, copticChronology1);
      assertSame(chronology0, julianChronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals(1, CopticChronology.AM);
      assertFalse(copticChronology0.equals((Object)copticChronology1));
      assertNotNull(dateTimeZone1);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      // Undeclared exception!
      try { 
        buddhistChronology0.get((ReadablePartial) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      EthiopicChronology ethiopicChronology1 = EthiopicChronology.getInstance((DateTimeZone) null);
      assertNotSame(ethiopicChronology1, ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(ethiopicChronology1.equals((Object)ethiopicChronology0));
      assertNotNull(ethiopicChronology1);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.weekyearOfCentury();
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology1));
      assertNotNull(dateTimeField0);
      
      int int0 = ethiopicChronology1.getWeekOfWeekyear(1);
      assertNotSame(ethiopicChronology1, ethiopicChronology0);
      assertEquals(17, int0);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(ethiopicChronology1.equals((Object)ethiopicChronology0));
      
      // Undeclared exception!
      try { 
        ZonedChronology.getInstance(ethiopicChronology0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DateTimeZone must not be null
         //
         verifyException("org.joda.time.chrono.ZonedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeField dateTimeField0 = islamicChronology0.halfdayOfDay();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeField0);
      
      int int0 = islamicChronology0.getWeekOfWeekyear((-1462L));
      assertEquals(42, int0);
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = islamicChronology0.getTotalMillisByYearMonth(346, 2);
      assertEquals(2592000000L, long0);
      assertEquals(1, IslamicChronology.AH);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(strictChronology0);
      
      DateTimeZone dateTimeZone0 = strictChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(zonedChronology0);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone1);
      
      Chronology chronology0 = strictChronology0.withZone(dateTimeZone1);
      assertSame(strictChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(chronology0, strictChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(chronology0);
      
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone1, (ReadableInstant) instant0, 2);
      assertSame(strictChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(gJChronology0);
      
      int int1 = gJChronology0.getMinimumDaysInFirstWeek();
      assertSame(strictChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals(2, int1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(int1 == int0);
      
      DateTimeField dateTimeField1 = islamicChronology0.hourOfHalfday();
      assertNotSame(dateTimeField1, dateTimeField0);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField1);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Chronology chronology1 = gregorianChronology0.withUTC();
      assertNotSame(gregorianChronology0, chronology1);
      assertNotSame(chronology1, gregorianChronology0);
      assertFalse(chronology1.equals((Object)gregorianChronology0));
      assertNotNull(chronology1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      long long0 = 3622L;
      try { 
        buddhistChronology0.getDateTimeMillis((-945), (-945), (-945), (-945));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -945 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      long long0 = buddhistChronology0.add(1078L, 1078L, 768);
      assertEquals(828982L, long0);
      assertEquals(1, BuddhistChronology.BE);
      
      try { 
        buddhistChronology0.getDateTimeMillis(43, 0, (-799), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      DurationField durationField0 = assembledChronology_Fields0.eras;
      assertNull(durationField0);
      
      assembledChronology_Fields0.years = null;
      DurationField durationField1 = islamicChronology0.weekyears();
      assertTrue(durationField1.isSupported());
      assertEquals("weekyears", durationField1.getName());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(durationField1);
      
      assembledChronology_Fields0.minutes = durationField1;
      assertTrue(durationField1.isSupported());
      assertEquals("weekyears", durationField1.getName());
      
      ethiopicChronology0.assemble(assembledChronology_Fields0);
      assertEquals(1, EthiopicChronology.EE);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      long long0 = gregorianChronology0.getApproxMillisAtEpochDividedByTwo();
      assertEquals(31083597720000L, long0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(lenientChronology0);
      
      boolean boolean0 = lenientChronology0.equals(ethiopicChronology0);
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      DateTimeField dateTimeField0 = gregorianChronology0.hourOfHalfday();
      assertTrue(dateTimeField0.isSupported());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = islamicChronology0.getLeapYearPatternType();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      DateTimeField dateTimeField1 = gregorianChronology0.centuryOfEra();
      assertNotSame(dateTimeField1, dateTimeField0);
      assertEquals("centuryOfEra", dateTimeField1.getName());
      assertTrue(dateTimeField1.isSupported());
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.calculateFirstDayOfYearMillis(1757);
      assertEquals(11242368000000L, long0);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = islamicChronology0.getDayOfMonth(0);
      assertEquals(22, int0);
      assertEquals(1, IslamicChronology.AH);
      
      int int1 = islamicChronology0.getDaysInYear(0);
      assertEquals(354, int1);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(int1 == int0);
      
      DateTimeField dateTimeField0 = islamicChronology0.secondOfDay();
      assertTrue(dateTimeField0.isSupported());
      assertEquals("secondOfDay", dateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeField0);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withZone((DateTimeZone) null);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology1);
      
      // Undeclared exception!
      try { 
        ZonedChronology.getInstance(islamicChronology1, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DateTimeZone must not be null
         //
         verifyException("org.joda.time.chrono.ZonedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      try { 
        buddhistChronology0.getDateTimeMillis(1, 20587500, 20587500, 1, 20587500, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 20587500 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      DateTimeField dateTimeField0 = gJChronology0.era();
      assertNotNull(dateTimeField0);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(30585600000L);
      assertEquals(29376000000L, long0);
      
      assembledChronology_Fields0.dayOfWeek = dateTimeField0;
      gJChronology0.assemble(assembledChronology_Fields0);
      Chronology chronology0 = gJChronology0.withUTC();
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(chronology0);
      
      DateTimeField dateTimeField1 = gJChronology0.weekyear();
      assertSame(gJChronology0, chronology0);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField1);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getMonthOfYear(1809L, 155);
      assertEquals(14834, int0);
      assertEquals(1, IslamicChronology.AH);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      try { 
        buddhistChronology0.getDateTimeMillis(14834, 2003, 0, 14834, 2003, 155, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2003 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      int int0 = gregorianChronology0.getYear(1L);
      assertEquals(1970, int0);
      
      int int1 = gregorianChronology0.getWeekOfWeekyear(2348, 0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      long long0 = gregorianChronology0.getTotalMillisByYearMonth(2348, 1);
      assertEquals(0L, long0);
      
      int int2 = gregorianChronology0.getMaxYear();
      assertEquals(292278993, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(zonedChronology0);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone1);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone1, 0L, 1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone2 = gJChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone2.getID());
      assertEquals("America/Recife", dateTimeZone2.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone2);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withZone(dateTimeZone2);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone2.getID());
      assertEquals("America/Recife", dateTimeZone2.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology1);
      
      String string0 = zonedChronology0.toString();
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertEquals("ZonedChronology[GregorianChronology[UTC], America/Recife]", string0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(string0);
      
      long long1 = gregorianChronology0.calculateFirstDayOfYearMillis(0);
      assertEquals((-62167219200000L), long1);
      assertFalse(long1 == long0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)zonedChronology0.days();
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("days", zonedChronology_ZonedDurationField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      int int3 = gregorianChronology0.getDayOfMonth(1153L);
      assertEquals(1, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      
      long long2 = gJChronology0.julianToGregorianByYear(415L);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertEquals((-1123199585L), long2);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      GregorianChronology gregorianChronology1 = (GregorianChronology)zonedChronology0.withUTC();
      assertNotSame(gregorianChronology0, gregorianChronology1);
      assertNotSame(gregorianChronology1, gregorianChronology0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(gregorianChronology1.equals((Object)gregorianChronology0));
      assertNotNull(gregorianChronology1);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long3 = islamicChronology0.getTotalMillisByYearMonth(0, (-3243));
      assertEquals((-8268307200000L), long3);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology0.LEAP_YEAR_HABASH_AL_HASIB);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      
      long long4 = islamicChronology1.getAverageMillisPerYearDividedByTwo();
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertEquals(15308640144L, long4);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(long4 == long1);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      
      int int4 = islamicChronology1.getMonthOfYear(1L, 23);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertEquals(16419, int4);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      
      // Undeclared exception!
      try { 
        CopticChronology.getInstance(dateTimeZone2, (-3243));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -3243
         //
         verifyException("org.joda.time.chrono.CopticChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(chronology0);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertSame(gJChronology0, chronology0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertNotNull(dateTimeZone1);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone1);
      assertSame(gJChronology0, chronology0);
      assertSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(gJChronology1, gJChronology0);
      assertSame(gJChronology1, chronology0);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertNotNull(gJChronology1);
      
      GJChronology gJChronology2 = GJChronology.getInstanceUTC();
      assertSame(gJChronology2, gJChronology0);
      assertSame(gJChronology2, chronology0);
      assertSame(gJChronology2, gJChronology1);
      assertNotNull(gJChronology2);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone1);
      assertSame(gJChronology0, chronology0);
      assertSame(gJChronology0, gJChronology1);
      assertSame(gJChronology0, gJChronology2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      int int0 = ethiopicChronology0.getMinYear();
      assertSame(gJChronology0, chronology0);
      assertSame(gJChronology0, gJChronology1);
      assertSame(gJChronology0, gJChronology2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals((-292269337), int0);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1, EthiopicChronology.EE);
      
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)ethiopicChronology0.withZone(dateTimeZone0);
      assertSame(gJChronology0, chronology0);
      assertSame(gJChronology0, gJChronology1);
      assertSame(gJChronology0, gJChronology2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology1);
      
      DateTimeZone dateTimeZone2 = gJChronology2.getZone();
      assertSame(gJChronology2, gJChronology0);
      assertSame(gJChronology2, chronology0);
      assertSame(gJChronology2, gJChronology1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertEquals("UTC", dateTimeZone2.toString());
      assertEquals("UTC", dateTimeZone2.getID());
      assertNotNull(dateTimeZone2);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone2);
      assertSame(gJChronology2, gJChronology0);
      assertSame(gJChronology2, chronology0);
      assertSame(gJChronology2, gJChronology1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertEquals("UTC", dateTimeZone2.toString());
      assertEquals("UTC", dateTimeZone2.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int1 = islamicChronology0.getDaysInYearMonth(0, (-292269337));
      assertSame(gJChronology2, gJChronology0);
      assertSame(gJChronology2, chronology0);
      assertSame(gJChronology2, gJChronology1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertEquals(30, int1);
      assertEquals("UTC", dateTimeZone2.toString());
      assertEquals("UTC", dateTimeZone2.getID());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(int1 == int0);
      
      int int2 = islamicChronology0.getYear(0L);
      assertSame(gJChronology2, gJChronology0);
      assertSame(gJChronology2, chronology0);
      assertSame(gJChronology2, gJChronology1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertEquals(1389, int2);
      assertEquals("UTC", dateTimeZone2.toString());
      assertEquals("UTC", dateTimeZone2.getID());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      try { 
        gJChronology1.getDateTimeMillis(0L, 1389, 1887, 3351, (-571));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1389 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, "?<tSRjn3 (St7<", islamicChronology0.LEAP_YEAR_HABASH_AL_HASIB);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology1);
      
      int int0 = islamicChronology1.getYear(1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertEquals(1389, int0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      
      DateTimeField dateTimeField0 = islamicChronology1.era();
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(dateTimeField0);
      
      long long0 = gJChronology0.gregorianToJulianByYear((-2311L));
      assertEquals(1123197689L, long0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = islamicChronology1.getLeapYearPatternType();
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology1);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(strictChronology0);
      
      String string0 = strictChronology0.toString();
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertEquals("StrictChronology[IslamicChronology[UTC]]", string0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(string0);
      
      DurationField durationField0 = strictChronology0.centuries();
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotNull(durationField0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      int int1 = gregorianChronology0.getMinYear();
      assertEquals((-292275054), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology0, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertNotNull(dateTimeZone1);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeField dateTimeField0 = islamicChronology0.era();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(strictChronology0);
      
      String string0 = strictChronology0.toString();
      assertEquals("StrictChronology[EthiopicChronology[America/Recife]]", string0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(string0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.dayOfMonth();
      assertTrue(dateTimeField0.isSupported());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeField0);
      
      DateTimeField dateTimeField1 = ethiopicChronology0.weekyear();
      assertNotSame(dateTimeField1, dateTimeField0);
      assertTrue(dateTimeField1.isSupported());
      assertEquals("weekyear", dateTimeField1.getName());
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertNotNull(dateTimeField1);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(lenientChronology0);
      
      String string1 = lenientChronology0.toString();
      assertEquals("LenientChronology[EthiopicChronology[America/Recife]]", string1);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      long long0 = copticChronology0.calculateFirstDayOfYearMillis(1);
      assertEquals((-53184211200000L), long0);
      assertEquals(1, CopticChronology.AM);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(zonedChronology0);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeZone1);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone1, (long) 1, 1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(gJChronology0);
      
      int int0 = copticChronology0.getWeekOfWeekyear((-53184211200000L), 1);
      assertEquals(53, int0);
      assertEquals(1, CopticChronology.AM);
      
      DateTimeZone dateTimeZone2 = gJChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone2.toString());
      assertEquals("America/Recife", dateTimeZone2.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(dateTimeZone2);
      
      int int1 = (-201);
      // Undeclared exception!
      try { 
        GregorianChronology.getInstance(dateTimeZone2, (-201));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -201
         //
         verifyException("org.joda.time.chrono.GregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      DateTimeField dateTimeField0 = julianChronology0.clockhourOfDay();
      assertTrue(dateTimeField0.isSupported());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertEquals(1, dateTimeField0.getMinimumValue());
      assertNotNull(dateTimeField0);
      
      assembledChronology_Fields0.halfdayOfDay = dateTimeField0;
      assertTrue(dateTimeField0.isSupported());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertEquals(1, dateTimeField0.getMinimumValue());
      
      DateTimeField dateTimeField1 = assembledChronology_Fields0.millisOfDay;
      assertNull(dateTimeField1);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      DurationField durationField0 = copticChronology0.centuries();
      assertTrue(durationField0.isSupported());
      assertEquals("centuries", durationField0.getName());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(durationField0);
      
      assembledChronology_Fields0.minutes = durationField0;
      assertTrue(durationField0.isSupported());
      assertEquals("centuries", durationField0.getName());
      
      assembledChronology_Fields0.hourOfDay = null;
      julianChronology0.assemble(assembledChronology_Fields0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(ethiopicChronology0, copticChronology0, islamicChronology_LeapYearPatternType0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      assertEquals(21260793600000L, long0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(lenientChronology0);
      
      LenientChronology lenientChronology1 = LenientChronology.getInstance(islamicChronology0);
      assertNotSame(lenientChronology1, lenientChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertTrue(lenientChronology1.equals((Object)lenientChronology0));
      assertNotNull(lenientChronology1);
      
      long long0 = islamicChronology0.setYear((-1L), 832);
      assertEquals((-17053804800001L), long0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      
      Chronology chronology0 = lenientChronology0.withZone(dateTimeZone0);
      assertSame(lenientChronology0, chronology0);
      assertNotSame(lenientChronology0, lenientChronology1);
      assertSame(chronology0, lenientChronology0);
      assertNotSame(chronology0, lenientChronology1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertTrue(lenientChronology0.equals((Object)lenientChronology1));
      assertTrue(chronology0.equals((Object)lenientChronology1));
      assertNotNull(chronology0);
      
      DateTimeZone dateTimeZone1 = islamicChronology0.getZone();
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone1);
      
      Chronology chronology1 = lenientChronology0.withZone(dateTimeZone1);
      assertSame(lenientChronology0, chronology0);
      assertSame(lenientChronology0, chronology1);
      assertNotSame(lenientChronology0, lenientChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(chronology1, lenientChronology1);
      assertSame(chronology1, chronology0);
      assertSame(chronology1, lenientChronology0);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1, IslamicChronology.AH);
      assertTrue(lenientChronology0.equals((Object)lenientChronology1));
      assertTrue(chronology1.equals((Object)lenientChronology1));
      assertNotNull(chronology1);
      
      DateTimeField dateTimeField0 = lenientChronology0.minuteOfHour();
      assertSame(lenientChronology0, chronology0);
      assertSame(lenientChronology0, chronology1);
      assertNotSame(lenientChronology0, lenientChronology1);
      assertTrue(dateTimeField0.isLenient());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
      assertTrue(lenientChronology0.equals((Object)lenientChronology1));
      assertNotNull(dateTimeField0);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology1);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      boolean boolean0 = ethiopicChronology0.isLeapDay(832);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertFalse(boolean0);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology1, dateTimeZone1);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(lenientChronology0, chronology0);
      assertSame(lenientChronology0, chronology1);
      assertNotSame(lenientChronology0, lenientChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(chronology1, lenientChronology1);
      assertSame(chronology1, chronology0);
      assertSame(chronology1, lenientChronology0);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1, IslamicChronology.AH);
      assertTrue(lenientChronology0.equals((Object)lenientChronology1));
      assertTrue(chronology1.equals((Object)lenientChronology1));
      assertNotNull(zonedChronology0);
      
      long long1 = zonedChronology0.getDateTimeMillis((-2044L), 0, 0, 1, 31);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(lenientChronology0, chronology0);
      assertSame(lenientChronology0, chronology1);
      assertNotSame(lenientChronology0, lenientChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(chronology1, lenientChronology1);
      assertSame(chronology1, chronology0);
      assertSame(chronology1, lenientChronology0);
      assertEquals((-86398969L), long1);
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1, IslamicChronology.AH);
      assertTrue(lenientChronology0.equals((Object)lenientChronology1));
      assertTrue(chronology1.equals((Object)lenientChronology1));
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      try { 
        ethiopicChronology0.getDateTimeMillis(1753L, 48, 0, (-1143), (-1143));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 48 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDayOfMonth((-1407L), 5066);
      assertEquals((-57), int0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeField dateTimeField0 = islamicChronology0.dayOfMonth();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getAverageMillisPerYear();
      assertEquals(30617280288L, long0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeField dateTimeField0 = islamicChronology0.minuteOfHour();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeField0);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone0);
      
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone1);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(zonedChronology0);
      
      DateTimeZone dateTimeZone2 = zonedChronology0.getZone();
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone2.toString());
      assertEquals("UTC", dateTimeZone2.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTimeZone2);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone2);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone2.toString());
      assertEquals("UTC", dateTimeZone2.getID());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertNotNull(gJChronology1);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gJChronology1.assemble(assembledChronology_Fields0);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertNotSame(gJChronology1, gJChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone2.toString());
      assertEquals("UTC", dateTimeZone2.getID());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withUTC();
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology1);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(strictChronology0);
      
      StrictChronology strictChronology1 = (StrictChronology)strictChronology0.withUTC();
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertSame(strictChronology0, strictChronology1);
      assertSame(strictChronology1, strictChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(strictChronology1);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(strictChronology1);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertSame(strictChronology0, strictChronology1);
      assertSame(strictChronology1, strictChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(lenientChronology0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getYear(1);
      assertEquals(1389, int0);
      assertEquals(1, IslamicChronology.AH);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      GregorianChronology gregorianChronology1 = (GregorianChronology)gregorianChronology0.withUTC();
      assertNotSame(gregorianChronology0, gregorianChronology1);
      assertNotSame(gregorianChronology1, gregorianChronology0);
      assertFalse(gregorianChronology1.equals((Object)gregorianChronology0));
      assertNotNull(gregorianChronology1);
      
      int int1 = gregorianChronology0.getMaxYear();
      assertNotSame(gregorianChronology0, gregorianChronology1);
      assertEquals(292278993, int1);
      assertFalse(gregorianChronology0.equals((Object)gregorianChronology1));
      assertFalse(int1 == int0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gregorianChronology0.assemble(assembledChronology_Fields0);
      assertNotSame(gregorianChronology0, gregorianChronology1);
      assertFalse(gregorianChronology0.equals((Object)gregorianChronology1));
      
      LenientChronology lenientChronology1 = LenientChronology.getInstance(buddhistChronology1);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotSame(lenientChronology1, lenientChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(lenientChronology1.equals((Object)lenientChronology0));
      assertNotNull(lenientChronology1);
      
      DateTimeZone dateTimeZone0 = lenientChronology1.getZone();
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotSame(lenientChronology1, lenientChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(lenientChronology1.equals((Object)lenientChronology0));
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology1, dateTimeZone0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotSame(gregorianChronology0, gregorianChronology1);
      assertNotSame(gregorianChronology1, gregorianChronology0);
      assertNotSame(lenientChronology1, lenientChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(gregorianChronology0.equals((Object)gregorianChronology1));
      assertFalse(gregorianChronology1.equals((Object)gregorianChronology0));
      assertFalse(lenientChronology1.equals((Object)lenientChronology0));
      assertNotNull(zonedChronology0);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertSame(buddhistChronology0, buddhistChronology1);
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotSame(gregorianChronology0, gregorianChronology1);
      assertNotSame(gregorianChronology1, gregorianChronology0);
      assertNotSame(lenientChronology1, lenientChronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      assertFalse(gregorianChronology0.equals((Object)gregorianChronology1));
      assertFalse(gregorianChronology1.equals((Object)gregorianChronology0));
      assertFalse(lenientChronology1.equals((Object)lenientChronology0));
      assertNotNull(dateTimeZone1);
      
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone1, (ReadableInstant) instant0, 292278993);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 292278993
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assembledChronology_Fields0.copyFieldsFrom(copticChronology0);
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      try { 
        strictChronology0.getDateTimeMillis(0L, (-3578), (-3578), (-3578), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3578 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      buddhistChronology0.getZone();
      try { 
        buddhistChronology0.getDateTimeMillis(1, 1, 1, 1, 1, 1, 2156);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2156 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getLeapYearPatternType();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      lenientChronology0.getDateTimeMillis(1410, 0, 1, 0);
      lenientChronology0.toString();
      GregorianChronology.getInstanceUTC();
      islamicChronology0.minuteOfDay();
      islamicChronology0.seconds();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      try { 
        zonedChronology0.getDateTimeMillis((-59), 0, (-3146), 20, 20, 20, (-458));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -458 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      try { 
        buddhistChronology0.getDateTimeMillis(803, 0, (-2332), 803);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
