/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:37:26 GMT 2018
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.chrono.BasicChronology;
import org.joda.time.chrono.BasicWeekyearDateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicWeekyearDateTimeField_ESTest extends BasicWeekyearDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(basicWeekyearDateTimeField0);
      
      boolean boolean0 = basicWeekyearDateTimeField0.isLeap(168L);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertNotNull(basicWeekyearDateTimeField0);
      
      long long0 = basicWeekyearDateTimeField0.add((long) (-292275054), 52);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1641134924946L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      assertEquals("-01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertEquals("-01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:00", dateTimeZone0.toString());
      assertNotNull(julianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(julianChronology0);
      assertEquals("-01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:00", dateTimeZone0.toString());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertNotNull(basicWeekyearDateTimeField0);
      
      long long0 = basicWeekyearDateTimeField0.addWrapField((long) (-1), 293);
      assertEquals("-01:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-01:00", dateTimeZone0.toString());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals(9246182399999L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(copticChronology0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(basicWeekyearDateTimeField0);
      
      long long0 = basicWeekyearDateTimeField0.getDifferenceAsLong(1, 1);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(copticChronology0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(basicWeekyearDateTimeField0);
      
      long long0 = basicWeekyearDateTimeField0.roundFloor(31622400000L);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
      assertEquals(22118400000L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(basicWeekyearDateTimeField0);
      
      int int0 = basicWeekyearDateTimeField0.getMinimumValue();
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(copticChronology0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(basicWeekyearDateTimeField0);
      
      int int0 = basicWeekyearDateTimeField0.getLeapAmount(1571L);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(basicWeekyearDateTimeField0);
      
      int int0 = basicWeekyearDateTimeField0.getLeapAmount((-1091L));
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(julianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(julianChronology0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertNotNull(basicWeekyearDateTimeField0);
      
      long long0 = basicWeekyearDateTimeField0.getDifferenceAsLong((-31557254400000L), 0L);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals((-1000L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(copticChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(basicWeekyearDateTimeField0);
      
      int int0 = basicWeekyearDateTimeField0.get((-8465858799287151616L));
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, CopticChronology.AM);
      assertEquals((-268265191), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertNotNull(basicWeekyearDateTimeField0);
      
      long long0 = basicWeekyearDateTimeField0.addWrapField(0L, 0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(gregorianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertNotNull(basicWeekyearDateTimeField0);
      
      long long0 = basicWeekyearDateTimeField0.add((long) 0, (long) 0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(copticChronology0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(basicWeekyearDateTimeField0);
      
      long long0 = basicWeekyearDateTimeField0.add((long) 1, 437L);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals(1, CopticChronology.AM);
      assertEquals(13790736000001L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(gJChronology0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(gJChronology0, integer0, (IslamicChronology.LeapYearPatternType) null);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(basicWeekyearDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicWeekyearDateTimeField0.set((-1013L), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(basicWeekyearDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicWeekyearDateTimeField0.set(2645L, 292271022);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too large: 292271023 > 292271022
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(julianChronology0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertNotNull(basicWeekyearDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicWeekyearDateTimeField0.addWrapField(0L, 292272992);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292274961 for weekyear must be in the range [-292269054,292272992]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertNotNull(basicWeekyearDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicWeekyearDateTimeField0.add((-762L), 604800000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 604801970 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(gregorianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertNotNull(basicWeekyearDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicWeekyearDateTimeField0.add(0L, (-9223309849823997898L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -9223309849823997898
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(ethiopicChronology0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(basicWeekyearDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicWeekyearDateTimeField0.add((-1472L), 292272984);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292274946 for weekyear must be in the range [-292269337,292272984]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = null;
      try {
        basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField((BasicChronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicWeekyearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(copticChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(basicWeekyearDateTimeField0);
      
      long long0 = basicWeekyearDateTimeField0.roundFloor(1000L);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, CopticChronology.AM);
      assertEquals((-9925200000L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertNotNull(basicWeekyearDateTimeField0);
      
      long long0 = basicWeekyearDateTimeField0.roundFloor(0L);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals((-259200000L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(gregorianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertNotNull(basicWeekyearDateTimeField0);
      
      long long0 = basicWeekyearDateTimeField0.set(1101L, 0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals((-62166787198899L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(1, 0);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(basicWeekyearDateTimeField0);
      
      long long0 = basicWeekyearDateTimeField0.set((long) 1, 2179);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(24187766400001L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertNotNull(basicWeekyearDateTimeField0);
      
      long long0 = basicWeekyearDateTimeField0.add((-2272L), 0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals((-2272L), long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(1, 0);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(basicWeekyearDateTimeField0);
      
      long long0 = basicWeekyearDateTimeField0.remainder(4059L);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(25056004059L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      
      DateTime dateTime0 = new DateTime((Object) null, lenientChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTime0);
      
      DateTimeZone dateTimeZone0 = dateTime0.getZone();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(gregorianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(basicWeekyearDateTimeField0);
      
      boolean boolean0 = basicWeekyearDateTimeField0.isLenient();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(1, CopticChronology.AM);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(copticChronology0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(basicWeekyearDateTimeField0);
      
      int int0 = basicWeekyearDateTimeField0.get(1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1686, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertNotNull(basicWeekyearDateTimeField0);
      
      boolean boolean0 = basicWeekyearDateTimeField0.isLeap(0L);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(lenientChronology0);
      
      DateTime dateTime0 = new DateTime((Object) null, lenientChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTime0);
      
      DateTimeZone dateTimeZone0 = dateTime0.getZone();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(dateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(gregorianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
      assertNotNull(basicWeekyearDateTimeField0);
      
      boolean boolean0 = basicWeekyearDateTimeField0.isLeap((-34L));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(basicWeekyearDateTimeField0);
      
      // Undeclared exception!
      try { 
        basicWeekyearDateTimeField0.set((-122432688000000L), (-1787));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertNotNull(basicWeekyearDateTimeField0);
      
      long long0 = basicWeekyearDateTimeField0.set((-308L), 1970);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals((-308L), long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertNotNull(basicWeekyearDateTimeField0);
      
      long long0 = basicWeekyearDateTimeField0.getDifferenceAsLong(94955500803009L, 31449600000L);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(3008L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertNotNull(basicWeekyearDateTimeField0);
      
      long long0 = basicWeekyearDateTimeField0.getDifferenceAsLong((-998L), 31449600000L);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(basicWeekyearDateTimeField0);
      
      long long0 = basicWeekyearDateTimeField0.add((-122432688000000L), 0L);
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-122432688000000L), long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(basicWeekyearDateTimeField0);
      
      DurationField durationField0 = basicWeekyearDateTimeField0.getLeapDurationField();
      assertTrue(basicWeekyearDateTimeField0.isSupported());
      assertEquals("weekyear", basicWeekyearDateTimeField0.getName());
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(islamicChronology0);
      long long0 = basicWeekyearDateTimeField0.add((-1183L), (-1183L));
      assertEquals((-36220262401183L), long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      DateTime dateTime0 = new DateTime((Object) null, lenientChronology0);
      DateTimeZone dateTimeZone0 = dateTime0.getZone();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      basicWeekyearDateTimeField0.getMinimumValue();
      assertFalse(basicWeekyearDateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      int int0 = basicWeekyearDateTimeField0.getMaximumValue();
      assertEquals(292278993, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      DateTime dateTime0 = new DateTime((Object) null, lenientChronology0);
      DateTimeZone dateTimeZone0 = dateTime0.getZone();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      long long0 = basicWeekyearDateTimeField0.addWrapField(1722L, (-3894));
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals((-122882572798278L), long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      DateTime dateTime0 = new DateTime((Object) null, lenientChronology0);
      DateTimeZone dateTimeZone0 = dateTime0.getZone();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      int int0 = basicWeekyearDateTimeField0.getLeapAmount(1508L);
      assertFalse(basicWeekyearDateTimeField0.isLenient());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      DateTime dateTime0 = new DateTime((Object) null, lenientChronology0);
      DateTimeZone dateTimeZone0 = dateTime0.getZone();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      BasicWeekyearDateTimeField basicWeekyearDateTimeField0 = new BasicWeekyearDateTimeField(gregorianChronology0);
      basicWeekyearDateTimeField0.getRangeDurationField();
      assertFalse(basicWeekyearDateTimeField0.isLenient());
  }
}
