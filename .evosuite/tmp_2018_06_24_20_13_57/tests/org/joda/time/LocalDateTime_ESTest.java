/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:18:33 GMT 2018
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalField;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.convert.ConverterManager;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalDateTime_ESTest extends LocalDateTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(13);
      DateTimeZone.forOffsetHours(13);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.toDateTime(dateTimeZone0);
      dateTimeZone0.isStandardOffset(1306L);
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(13);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.centuryOfEra();
      localDateTime_Property0.getName();
      LocalDateTime localDateTime2 = localDateTime_Property0.addToCopy(13);
      LocalDateTime localDateTime3 = localDateTime0.withYearOfCentury(0);
      LocalDateTime localDateTime4 = localDateTime0.minusDays(13);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      ethiopicChronology0.getDateTimeMillis(1306L, 0, 13, 13, 13);
      ethiopicChronology0.set(localDateTime4, 1944L);
      localDateTime4.equals(ethiopicChronology0);
      localDateTime3.getYearOfEra();
      localDateTime4.toLocalDate();
      localDateTime2.getMonthOfYear();
      localDateTime1.getYearOfCentury();
      localDateTime3.getWeekOfWeekyear();
      dateTimeZone0.toTimeZone();
      LocalDateTime localDateTime5 = localDateTime3.withYear((-3342));
      LocalDateTime localDateTime6 = localDateTime_Property0.roundHalfFloorCopy();
      localDateTime6.year();
      localDateTime5.toLocalTime();
      LocalDateTime localDateTime7 = localDateTime4.withMinuteOfHour(13);
      LocalDateTime localDateTime8 = localDateTime7.minusHours(2);
      localDateTime6.compareTo((ReadablePartial) localDateTime8);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      timeZone0.observesDaylightTime();
      ConverterManager.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      Partial partial0 = new Partial(dateTimeFieldType0, 875);
      Seconds seconds0 = Seconds.THREE;
      partial0.minus(seconds0);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime(641, 97, 430, 430, 754, (-888), 672, lenientChronology0);
      LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(186);
      LocalDateTime localDateTime2 = localDateTime1.withDayOfYear(1978);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
      localDateTime2.isSupported(dateTimeFieldType1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.getMillisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldType0.getDurationType();
      localDateTime0.property(dateTimeFieldType0);
      localDateTime0.hourOfDay();
      localDateTime0.secondOfMinute();
      localDateTime0.getDayOfYear();
      localDateTime0.get(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        LocalDateTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 0;
      int int1 = (-668);
      DateTimeUtils.setCurrentMillisSystem();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      Interval interval0 = new Interval(0, 1000L, dateTimeZone0);
      Days days0 = Days.daysIn(interval0);
      int int2 = 157;
      int int3 = 1944;
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null, (Chronology) null);
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(1944);
      LocalDateTime localDateTime2 = localDateTime1.plus((ReadableDuration) null);
      LocalDateTime localDateTime3 = localDateTime2.plusSeconds(1845);
      LocalDateTime localDateTime4 = localDateTime3.plus((ReadablePeriod) days0);
      // Undeclared exception!
      try { 
        localDateTime4.withYearOfEra((-1913));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1913 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2073432487, 3565, 3565, 1484, 2);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        localDateTime0.withYear(2073432487);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2073432487 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null);
      int int0 = (-679);
      // Undeclared exception!
      try { 
        Seconds.parseSeconds("GJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"GJ\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.withYear(901);
      localDateTime1.isBefore(localDateTime0);
      LocalDateTime localDateTime2 = localDateTime0.withYearOfEra(901);
      localDateTime1.plusSeconds(901);
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.weekyear();
      localDateTime_Property0.toInterval();
      LocalDateTime localDateTime3 = localDateTime_Property0.roundCeilingCopy();
      localDateTime3.minusMonths(13);
      int int0 = 4;
      LocalDateTime localDateTime4 = localDateTime1.withMonthOfYear(4);
      // Undeclared exception!
      try { 
        localDateTime4.withEra(4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(901);
      localDateTime1.isBefore(localDateTime0);
      LocalDateTime localDateTime2 = localDateTime1.minusMillis(901);
      LocalDateTime localDateTime3 = localDateTime1.plusSeconds(901);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.millisOfSecond();
      LocalDateTime.Property localDateTime_Property1 = localDateTime2.weekyear();
      localDateTime_Property1.toInterval();
      LocalDateTime localDateTime4 = localDateTime_Property1.roundCeilingCopy();
      LocalDateTime localDateTime5 = localDateTime0.plusMonths(4);
      localDateTime5.getValues();
      localDateTime_Property1.getMinimumValueOverall();
      localDateTime4.getMillisOfSecond();
      localDateTime_Property1.getMillis();
      LocalDateTime localDateTime6 = localDateTime_Property0.roundCeilingCopy();
      localDateTime6.toDate();
      localDateTime3.minusWeeks(0);
      localDateTime3.getLocalMillis();
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(86400026, 0, (-498), 4, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1000L);
      int int0 = (-3844);
      LocalDateTime localDateTime1 = localDateTime0.minusYears((-3844));
      // Undeclared exception!
      try { 
        localDateTime1.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(3592L);
      int int0 = 901;
      LocalDateTime localDateTime1 = new LocalDateTime((long) 901);
      LocalDateTime localDateTime2 = localDateTime1.minusDays(901);
      localDateTime1.getMonthOfYear();
      localDateTime2.getSecondOfMinute();
      localDateTime0.millisOfDay();
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      localDateTime0.withFieldAdded(durationFieldType0, 901);
      localDateTime2.plusMonths(901);
      localDateTime0.getCenturyOfEra();
      DateTimeUtils.setCurrentMillisSystem();
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.secondOfMinute();
      localDateTime_Property0.getFieldType();
      LocalDateTime localDateTime3 = localDateTime_Property0.withMinimumValue();
      localDateTime3.plusMinutes(901);
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime4 = LocalDateTime.now((Chronology) gJChronology0);
      localDateTime4.yearOfCentury();
      localDateTime4.secondOfMinute();
      localDateTime3.minusMonths(0);
      int int1 = 2405;
      // Undeclared exception!
      try { 
        localDateTime3.withMinuteOfHour(2405);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2405 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) uTCDateTimeZone0);
      uTCDateTimeZone0.getName(46611763200001L);
      DateTimeZone.getProvider();
      DateTimeZone dateTimeZone0 = null;
      uTCDateTimeZone0.getMillisKeepLocal((DateTimeZone) null, (-2028L));
      localDateTime0.getWeekyear();
      localDateTime0.secondOfMinute();
      localDateTime0.getYearOfEra();
      // Undeclared exception!
      try { 
        LocalDateTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks((-9));
      LocalDateTime localDateTime2 = localDateTime0.plusHours((-9));
      int int0 = (-668);
      DateTimeUtils.setCurrentMillisSystem();
      localDateTime2.minusYears((-668));
      // Undeclared exception!
      try { 
        localDateTime1.withMinuteOfHour((-9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -9 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(901);
      localDateTime1.isBefore(localDateTime0);
      localDateTime1.minusMillis(901);
      LocalDateTime localDateTime2 = localDateTime1.plusSeconds(901);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.millisOfSecond();
      localDateTime_Property0.toInterval();
      LocalDateTime localDateTime3 = localDateTime_Property0.roundCeilingCopy();
      localDateTime0.plusMonths(4);
      localDateTime3.getMillisOfSecond();
      localDateTime_Property0.getMillis();
      LocalDateTime localDateTime4 = localDateTime_Property0.roundCeilingCopy();
      localDateTime4.toDate();
      localDateTime2.minusWeeks(0);
      localDateTime4.compareTo((ReadablePartial) localDateTime3);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(86400000, 0, (-498), 4, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = 2802L;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      Partial partial0 = new Partial(yearMonth0);
      Interval interval0 = yearMonth0.toInterval();
      interval0.toDurationMillis();
      ReadableDuration readableDuration0 = null;
      Interval interval1 = interval0.withDurationBeforeEnd(readableDuration0);
      DateTime dateTime0 = interval1.getEnd();
      partial0.isMatch((ReadableInstant) dateTime0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      long long1 = 3811L;
      buddhistChronology0.set(partial0, long1);
      DateTimeZone dateTimeZone0 = dateTimeFormatter2.getZone();
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (Chronology) gJChronology0);
      int int0 = 509;
      LocalDateTime localDateTime1 = localDateTime0.plusYears(int0);
      localDateTime1.getMillisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldType0.isSupported(chronology0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.property(dateTimeFieldType0);
      int int1 = 0;
      localDateTime0.withMillisOfDay(int1);
      long long2 = (-2190L);
      LocalDateTime localDateTime2 = localDateTime_Property0.addToCopy(long2);
      int int2 = (-387);
      // Undeclared exception!
      try { 
        localDateTime2.getField(int2, (Chronology) buddhistChronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -387
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = 2802L;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      Partial partial0 = new Partial(yearMonth0);
      Interval interval0 = yearMonth0.toInterval();
      interval0.toDurationMillis();
      ReadableDuration readableDuration0 = null;
      Interval interval1 = interval0.withDurationBeforeEnd(readableDuration0);
      DateTime dateTime0 = interval1.getEnd();
      partial0.isMatch((ReadableInstant) dateTime0);
      partial0.getFormatter();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      long long1 = 3811L;
      buddhistChronology0.set(partial0, long1);
      DateTimeZone dateTimeZone0 = dateTimeFormatter1.getZone();
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (Chronology) gJChronology0);
      int int0 = 509;
      LocalDateTime localDateTime1 = localDateTime0.plusYears(int0);
      localDateTime1.getMillisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldType0.isSupported(chronology0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.property(dateTimeFieldType0);
      int int1 = 0;
      localDateTime0.withMillisOfDay(int1);
      long long2 = (-2190L);
      localDateTime_Property0.addToCopy(long2);
      Weeks weeks0 = Weeks.THREE;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      localDateTime0.withFieldAdded(durationFieldType0, buddhistChronology0.BE);
      // Undeclared exception!
      try { 
        LocalDateTime.parse(dateTimeZone0.DEFAULT_TZ_DATA_PATH, dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime((long) 40, (DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(40);
      LocalDateTime localDateTime2 = localDateTime1.plusHours(0);
      LocalDateTime localDateTime3 = localDateTime2.plusWeeks(0);
      LocalDateTime localDateTime4 = localDateTime3.withYear(0);
      localDateTime4.getCenturyOfEra();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L);
      localDateTime4.plusHours(0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = 2802L;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      Partial partial0 = new Partial(yearMonth0);
      Interval interval0 = yearMonth0.toInterval();
      interval0.toDurationMillis();
      ReadableDuration readableDuration0 = null;
      Interval interval1 = interval0.withDurationBeforeEnd(readableDuration0);
      DateTime dateTime0 = interval1.getEnd();
      partial0.isMatch((ReadableInstant) dateTime0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      long long1 = 3811L;
      buddhistChronology0.set(partial0, long1);
      DateTimeZone dateTimeZone0 = dateTimeFormatter2.getZone();
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (Chronology) gJChronology0);
      int int0 = 509;
      LocalDateTime localDateTime1 = localDateTime0.plusYears(int0);
      localDateTime1.getMillisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldType0.isSupported(chronology0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.property(dateTimeFieldType0);
      int int1 = 0;
      localDateTime0.withMillisOfDay(int1);
      long long2 = (-2190L);
      LocalDateTime localDateTime2 = localDateTime_Property0.addToCopy(long2);
      Weeks weeks0 = Weeks.THREE;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      localDateTime0.withFieldAdded(durationFieldType0, buddhistChronology0.BE);
      // Undeclared exception!
      try { 
        localDateTime2.compareTo((ReadablePartial) partial0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      int int0 = (-2145102844);
      // Undeclared exception!
      try { 
        localDateTime0.plusYears((-2145102844));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2145100830 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = new LocalDateTime((long) 40, (DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(40);
      LocalDateTime localDateTime2 = localDateTime1.plusHours(0);
      LocalDateTime localDateTime3 = localDateTime2.plusWeeks(0);
      localDateTime3.withYear(0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks(0);
      LocalDateTime localDateTime2 = localDateTime0.withTime(0, 0, 0, 0);
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      localDateTime1.isSupported(durationFieldType0);
      DateTimeUtils.setCurrentMillisSystem();
      LocalDateTime localDateTime3 = localDateTime2.minusYears((-668));
      localDateTime1.withMinuteOfHour(0);
      // Undeclared exception!
      try { 
        localDateTime3.withHourOfDay((-668));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -668 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = 2802L;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      Partial partial0 = new Partial(yearMonth0);
      Interval interval0 = yearMonth0.toInterval();
      interval0.toDurationMillis();
      ReadableDuration readableDuration0 = null;
      Interval interval1 = interval0.withDurationBeforeEnd(readableDuration0);
      DateTime dateTime0 = interval1.getEnd();
      partial0.isMatch((ReadableInstant) dateTime0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      long long1 = 3811L;
      buddhistChronology0.set(partial0, long1);
      DateTimeZone dateTimeZone0 = dateTimeFormatter2.getZone();
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (Chronology) gJChronology0);
      int int0 = 509;
      LocalDateTime localDateTime1 = localDateTime0.plusYears(int0);
      localDateTime1.getMillisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldType0.isSupported(chronology0);
      localDateTime1.property(dateTimeFieldType0);
      int int1 = 0;
      LocalDateTime localDateTime2 = localDateTime0.withMillisOfDay(int1);
      LocalDateTime localDateTime3 = localDateTime2.withDayOfMonth(buddhistChronology0.BE);
      int int2 = (-2147481942);
      // Undeclared exception!
      try { 
        localDateTime3.withSecondOfMinute(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481942 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = 2802L;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      Partial partial0 = new Partial(yearMonth0);
      Interval interval0 = yearMonth0.toInterval();
      interval0.toDurationMillis();
      ReadableDuration readableDuration0 = null;
      Interval interval1 = interval0.withDurationBeforeEnd(readableDuration0);
      DateTime dateTime0 = interval1.getEnd();
      partial0.isMatch((ReadableInstant) dateTime0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      long long1 = 3811L;
      buddhistChronology0.set(partial0, long1);
      DateTimeZone dateTimeZone0 = dateTimeFormatter2.getZone();
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (Chronology) gJChronology0);
      int int0 = 509;
      LocalDateTime localDateTime1 = localDateTime0.plusYears(int0);
      localDateTime1.getMillisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldType0.isSupported(chronology0);
      localDateTime1.property(dateTimeFieldType0);
      int int1 = 0;
      localDateTime0.withMillisOfDay(int1);
      localDateTime0.withDurationAdded(readableDuration0, int0);
      Weeks weeks0 = Weeks.THREE;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      localDateTime0.withFieldAdded(durationFieldType0, buddhistChronology0.BE);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.isBefore(localDateTime0);
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(901);
      LocalDateTime localDateTime2 = localDateTime0.plusSeconds(901);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfSecond();
      LocalDateTime.Property localDateTime_Property1 = localDateTime1.weekyear();
      localDateTime_Property1.toInterval();
      LocalDateTime localDateTime3 = localDateTime_Property1.roundCeilingCopy();
      localDateTime3.getMillisOfSecond();
      localDateTime_Property1.getMillis();
      LocalDateTime localDateTime4 = localDateTime_Property0.roundCeilingCopy();
      localDateTime4.toDate();
      localDateTime2.minusWeeks(0);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(86400000, 0, (-498), 4, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = 2802L;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      Partial partial0 = new Partial(yearMonth0);
      Interval interval0 = yearMonth0.toInterval();
      interval0.toDurationMillis();
      ReadableDuration readableDuration0 = null;
      Interval interval1 = interval0.withDurationBeforeEnd(readableDuration0);
      DateTime dateTime0 = interval1.getEnd();
      partial0.isMatch((ReadableInstant) dateTime0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      long long1 = 3811L;
      buddhistChronology0.set(partial0, long1);
      DateTimeZone dateTimeZone0 = dateTimeFormatter2.getZone();
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (Chronology) gJChronology0);
      int int0 = 509;
      LocalDateTime localDateTime1 = localDateTime0.plusYears(int0);
      localDateTime1.getMillisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldType0.isSupported(chronology0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.property(dateTimeFieldType0);
      int int1 = 0;
      localDateTime0.withMillisOfDay(int1);
      long long2 = (-2190L);
      LocalDateTime localDateTime2 = localDateTime_Property0.addToCopy(long2);
      Weeks weeks0 = Weeks.THREE;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      localDateTime0.withFieldAdded(durationFieldType0, buddhistChronology0.BE);
      int int2 = 2;
      localDateTime2.getValue(int2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      gJChronology0.getZone();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      gJChronology0.withZone((DateTimeZone) null);
      LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(3);
      localDateTime1.getWeekOfWeekyear();
      localDateTime1.yearOfEra();
      localDateTime1.getEra();
      java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
      TemporalField[] temporalFieldArray0 = new TemporalField[1];
      ChronoField chronoField0 = ChronoField.PROLEPTIC_MONTH;
      temporalFieldArray0[0] = (TemporalField) chronoField0;
      java.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withResolverFields(temporalFieldArray0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      java.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      Locale locale1 = dateTimeFormatter2.getLocale();
      localDateTime0.toString("'Bw:*z1EId$cWayg", locale1);
      localDateTime0.dayOfYear();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      int int0 = (-3005);
      LocalDateTime localDateTime1 = localDateTime0.plusDays((-3005));
      localDateTime1.getDayOfMonth();
      int int1 = 0;
      // Undeclared exception!
      try { 
        localDateTime1.withDayOfWeek(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "S8/1^MiXE";
      // Undeclared exception!
      try { 
        LocalDateTime.parse("S8/1^MiXE", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.plusMillis(0);
      localDateTime1.minusMillis((-619));
      // Undeclared exception!
      try { 
        localDateTime1.withYearOfCentury((-619));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -619 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusDays(3);
      // Undeclared exception!
      try { 
        Duration.parse(":f\"/R: Vk?}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \":f\"/R: Vk?}\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      gJChronology0.withZone((DateTimeZone) null);
      LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(3);
      localDateTime1.getYear();
      localDateTime1.getWeekOfWeekyear();
      localDateTime1.yearOfEra();
      localDateTime1.getEra();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        localDateTime0.withWeekyear(2147483600);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2147483600 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 1900, 1900, 1900, 1900);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      gJChronology0.add((long) 1900, (long) 1900, 1900);
      Chronology chronology1 = copticChronology0.withZone(dateTimeZone0);
      durationFieldType0.getField(chronology1);
      durationFieldType0.isSupported(chronology0);
      localDateTime0.isSupported(durationFieldType0);
      localDateTime0.minusSeconds(363);
      MockDate mockDate0 = new MockDate(0);
      LocalDateTime.fromDateFields(mockDate0);
      Partial partial0 = null;
      try {
        partial0 = new Partial((DateTimeFieldType) null, 363);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      copticChronology0.withUTC();
      copticChronology0.add(0L, (long) (-867), 0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-867));
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.toString();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      localDateTime0.minuteOfHour();
      localDateTime0.withField(dateTimeFieldType0, 5);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusMonths((-6390));
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(0);
      localDateTime1.plusMinutes(0);
      LocalDateTime localDateTime2 = localDateTime1.minusYears(0);
      int int1 = 17887500;
      localDateTime2.plusMillis(17887500);
      MutablePeriod mutablePeriod0 = new MutablePeriod(17887500, (-6390), 17887500, 17887500, 0, (-6390), 0, 17887500);
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      Duration duration0 = mutablePeriod1.toDurationTo((ReadableInstant) null);
      localDateTime2.minusMillis((-6390));
      // Undeclared exception!
      try { 
        localDateTime1.withDurationAdded(duration0, (-2314));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 576822014622511500 * -2314
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(0);
      Duration duration0 = Duration.millis((-1083L));
      LocalDateTime localDateTime2 = localDateTime1.withDurationAdded(duration0, 0);
      localDateTime2.getMinuteOfHour();
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.weekyear();
      localDateTime_Property0.isLeap();
      LocalDateTime localDateTime3 = localDateTime1.withMinuteOfHour(0);
      localDateTime3.getYearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      localDateTime1.isSupported(dateTimeFieldType0);
      localDateTime_Property0.roundFloorCopy();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(zonedChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) lenientChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusHours(1);
      Duration duration0 = Duration.standardDays(1);
      localDateTime1.getValue(1);
      Duration duration1 = duration0.toDuration();
      duration1.plus((long) 1);
      // Undeclared exception!
      try { 
        Duration.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      localDateTime_Property0.get();
      localDateTime_Property0.getMillis();
      // Undeclared exception!
      try { 
        localDateTime0.getValue(1183);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 1183
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      gJChronology0.withZone((DateTimeZone) null);
      LocalDateTime localDateTime1 = localDateTime0.withDate(3, 3, 3);
      localDateTime1.getWeekOfWeekyear();
      localDateTime1.yearOfEra();
      localDateTime1.getEra();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(901);
      localDateTime1.isBefore(localDateTime0);
      LocalDateTime localDateTime2 = localDateTime1.minusMillis(901);
      LocalDateTime localDateTime3 = localDateTime1.plusSeconds(901);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.millisOfSecond();
      LocalDateTime.Property localDateTime_Property1 = localDateTime2.weekyear();
      localDateTime_Property1.toInterval();
      LocalDateTime localDateTime4 = localDateTime_Property1.roundCeilingCopy();
      localDateTime0.plusMonths(4);
      localDateTime4.getMillisOfSecond();
      localDateTime_Property1.getMillis();
      LocalDateTime localDateTime5 = localDateTime_Property0.roundCeilingCopy();
      localDateTime5.toDate();
      localDateTime3.minusWeeks(0);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(86400000, 0, (-498), 4, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime(1, 1, 1, 1, 1, 1, 1);
      try { 
        buddhistChronology0.getDateTimeMillis(1736, 1736, 1023, 0, 0, 1736, 1736);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1736 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, (-2894));
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      localDateTime0.secondOfMinute();
      LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(0);
      LocalDateTime localDateTime2 = localDateTime0.minusMonths(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.minuteOfHour();
      DateTimeZone.forOffsetHours(0);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      localDateTime0.minuteOfHour();
      LocalDateTime localDateTime3 = localDateTime2.withEra(0);
      localDateTime1.plusWeeks(0);
      localDateTime3.withDayOfYear(12);
      localDateTime2.monthOfYear();
      localDateTime_Property0.roundFloorCopy();
      localDateTime0.plusWeeks((-2894));
      LocalDateTime.now((DateTimeZone) uTCDateTimeZone0);
      localDateTime_Property0.addToCopy(747L);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Date date0 = dateTime0.toDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      localDateTime0.getYearOfCentury();
      localDateTime0.getYearOfEra();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      copticChronology0.withUTC();
      LocalDateTime localDateTime0 = new LocalDateTime(1, 1, 1, 1, 1, 1);
      int int0 = 34;
      try { 
        DateTimeZone.forOffsetHours(34);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 34
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      LocalDateTime localDateTime1 = localDateTime_Property0.getLocalDateTime();
      Period period0 = new Period((Object) null);
      Duration duration0 = period0.toStandardDuration();
      localDateTime1.withDurationAdded(duration0, 85);
      localDateTime1.toLocalTime();
      LocalDateTime localDateTime2 = LocalDateTime.now();
      localDateTime2.withWeekOfWeekyear(21);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      String string0 = "org.joda.time.field.DividedDateTimeField";
      uTCProvider0.getZone("org.joda.time.field.DividedDateTimeField");
      LocalDateTime localDateTime0 = new LocalDateTime((-1298L), (DateTimeZone) null);
      localDateTime0.plusYears(0);
      int int0 = 1000;
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(1000);
      // Undeclared exception!
      try { 
        localDateTime1.withSecondOfMinute(1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1000 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime("@X=q11a?<{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"@X=q11a?<{\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      int int0 = 2647;
      localDateTime0.plusMonths(2647);
      // Undeclared exception!
      try { 
        localDateTime0.withCenturyOfEra((-2656));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2656 for centuryOfEra must be in the range [0,2922789]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.getMonthOfYear();
      localDateTime0.getFieldTypes();
      localDateTime0.getWeekOfWeekyear();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.monthOfYear();
      LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(2);
      Period period0 = Period.millis(2);
      period0.getSeconds();
      period0.toString();
      localDateTime1.getWeekOfWeekyear();
      Period period1 = period0.toPeriod();
      period1.withMinutes(7);
      localDateTime_Property0.addToCopy((-583L));
      period1.toString();
      period1.minus((ReadablePeriod) null);
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("PT0.002S", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"PT0.002S\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      dateTimeZone1.getShortName((-1923L));
      Chronology chronology0 = iSOChronology0.withZone(dateTimeZone1);
      LocalDateTime localDateTime0 = new LocalDateTime((-1923L), chronology0);
      localDateTime0.getEra();
      localDateTime0.equals(dateTimeZone0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      localDateTime_Property0.withMinimumValue();
      localDateTime0.minus((ReadablePeriod) null);
      localDateTime_Property0.addToCopy(900L);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      java.time.Instant instant0 = MockInstant.ofEpochSecond((-149L), (-149L));
      Date date0 = Date.from(instant0);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      localDateTime0.getChronology();
      localDateTime0.getHourOfDay();
      localDateTime0.getHourOfDay();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 1900;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 1900, 1900, 1900, 1900);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      gJChronology0.add((long) 1900, (long) 1900, 1900);
      Chronology chronology1 = copticChronology0.withZone(dateTimeZone0);
      durationFieldType0.getField(chronology1);
      durationFieldType0.isSupported(chronology0);
      localDateTime0.isSupported(durationFieldType0);
      localDateTime0.minusSeconds(363);
      MockDate mockDate0 = new MockDate(1900);
      LocalDateTime.fromDateFields(mockDate0);
      Partial partial0 = null;
      try {
        partial0 = new Partial((DateTimeFieldType) null, 363);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      Chronology chronology0 = copticChronology0.withUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((-1708L), chronology0);
      copticChronology0.add(0L, (long) (-867), 0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-867));
      localDateTime0.toDateTime(dateTimeZone0);
      localDateTime0.getEra();
      localDateTime0.getWeekOfWeekyear();
      localDateTime0.hourOfDay();
      localDateTime0.secondOfMinute();
      localDateTime0.getMillisOfSecond();
      LocalDateTime localDateTime1 = LocalDateTime.now(dateTimeZone0);
      localDateTime1.toString();
      // Undeclared exception!
      try { 
        localDateTime0.withMillisOfDay((-454));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -454 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1072));
      LocalDateTime localDateTime0 = new LocalDateTime((-6981L), dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withFields((ReadablePartial) null);
      int int0 = 89;
      Period period0 = Period.weeks(89);
      LocalDateTime localDateTime2 = localDateTime1.plus((ReadablePeriod) period0);
      int int1 = (-236);
      // Undeclared exception!
      try { 
        localDateTime2.withDayOfWeek((-236));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -236 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, uTCDateTimeZone0);
      DateTimeZone dateTimeZone0 = zonedChronology0.getZone();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      localDateTime0.withYearOfEra(40);
      DateTimeZone.setNameProvider((NameProvider) null);
      LocalDateTime localDateTime1 = localDateTime0.plusMillis((-93));
      Locale locale0 = Locale.JAPANESE;
      locale0.getDisplayScript();
      uTCDateTimeZone0.getName((long) 40, locale0);
      localDateTime0.getValues();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      // Undeclared exception!
      try { 
        localDateTime1.withField(dateTimeFieldType0, (-93));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -93 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1200L);
      int int0 = (-399);
      LocalDateTime localDateTime1 = localDateTime0.minusHours((-399));
      localDateTime1.equals(localDateTime0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.era();
      localDateTime_Property0.addWrapFieldToCopy((-399));
      localDateTime_Property0.withMaximumValue();
      LocalDateTime localDateTime2 = localDateTime_Property0.roundHalfFloorCopy();
      localDateTime2.dayOfYear();
      localDateTime0.getMillisOfDay();
      localDateTime2.minuteOfHour();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(1200L);
      // Undeclared exception!
      try { 
        LimitChronology.getInstance(islamicChronology0, mutableDateTime0, mutableDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The lower limit must be come before than the upper limit
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = new Period((-1L), (-1L), iSOChronology0);
      period0.getHours();
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) period0);
      int int0 = (-5147);
      LocalDateTime localDateTime2 = localDateTime1.minusMinutes((-5147));
      int int1 = (-1936);
      // Undeclared exception!
      try { 
        localDateTime2.withTime((-5147), (-1936), 790, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -5147 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = (-292269337);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-292269337), (-1567), (-292269337));
      int int1 = 1321;
      mockGregorianCalendar0.set((-1567), (-292269337), 1321, 0, 0, (-1567));
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      localDateTime0.plusYears((-1567));
      int int2 = 1000;
      // Undeclared exception!
      try { 
        localDateTime0.withMillisOfSecond(1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1000 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      Duration duration0 = Duration.millis(1);
      LocalDateTime localDateTime1 = localDateTime0.withDurationAdded(duration0, 160);
      LocalDateTime localDateTime2 = localDateTime1.withCenturyOfEra(160);
      LocalDateTime localDateTime3 = localDateTime2.withYearOfCentury(1);
      LocalDateTime localDateTime4 = localDateTime3.minusYears(39);
      LocalDateTime localDateTime5 = localDateTime4.plus((ReadableDuration) duration0);
      localDateTime5.yearOfCentury();
      Locale locale0 = Locale.PRC;
      try { 
        localDateTime4.toString("CY{L4=2(vQ", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      uTCDateTimeZone0.toTimeZone();
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) uTCDateTimeZone0);
      localDateTime0.minusMonths(1);
      DateTimeZone.forOffsetHours(0);
      localDateTime0.getCenturyOfEra();
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks(20);
      localDateTime1.withCenturyOfEra(13);
      localDateTime1.toLocalDate();
      // Undeclared exception!
      try { 
        localDateTime0.withYearOfEra((-2902));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2902 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDate localDate0 = localDateTime0.toLocalDate();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      // Undeclared exception!
      try { 
        localDate0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'secondOfDay' is not supported
         //
         verifyException("org.joda.time.LocalDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(2559L);
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds((-589));
      LocalDateTime localDateTime2 = localDateTime1.plusWeeks((-1314));
      LocalDateTime localDateTime3 = localDateTime2.minusWeeks((-1314));
      localDateTime3.millisOfDay();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusMonths((-6390));
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(0);
      localDateTime1.plusMinutes(0);
      LocalDateTime localDateTime2 = localDateTime1.minusYears(0);
      localDateTime2.plusMillis(17887500);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      Duration duration0 = mutablePeriod1.toDurationTo((ReadableInstant) null);
      localDateTime2.minusMillis((-6390));
      LocalDateTime localDateTime3 = localDateTime1.withDurationAdded(duration0, (-2314));
      // Undeclared exception!
      try { 
        localDateTime3.toString("aqlxP$UN0'(^Y\"rA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime0 = new LocalDateTime((-3552L), dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withHourOfDay(0);
      LocalDateTime localDateTime2 = localDateTime1.minusSeconds(5);
      LocalDateTime localDateTime3 = localDateTime2.withMillisOfDay(5);
      LocalDateTime localDateTime4 = localDateTime3.minusYears(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      LocalDateTime.Property localDateTime_Property0 = localDateTime4.property(dateTimeFieldType0);
      localDateTime_Property0.roundHalfEvenCopy();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) mutablePeriod0);
      int int0 = 2495;
      // Undeclared exception!
      try { 
        localDateTime1.withDate(2495, 1, 1016);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1016 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      int int0 = 0;
      int int1 = (-3709);
      // Undeclared exception!
      try { 
        localDateTime0.withTime(0, (-3709), (-3709), (-3709));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3709 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withLocalMillis((-323L));
      DateTime dateTime0 = localDate1.toDateTimeAtCurrentTime();
      DateTime dateTime1 = dateTime0.plusYears(0);
      DateTime dateTime2 = dateTime1.minusYears(3);
      LocalDateTime localDateTime0 = dateTime2.toLocalDateTime();
      localDateTime0.minusSeconds(0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-2239L));
      localDateTime0.getDayOfYear();
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfMonth((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object object0 = new Object();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'year' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(2483L);
      int int0 = 13;
      localDateTime0.millisOfDay();
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(13);
      int int1 = 2548;
      LocalDateTime localDateTime2 = localDateTime1.minusMonths(2548);
      // Undeclared exception!
      try { 
        localDateTime2.withEra(13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 13 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      gJChronology0.withZone((DateTimeZone) null);
      LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(3);
      localDateTime1.getWeekOfWeekyear();
      localDateTime1.yearOfEra();
      localDateTime1.getEra();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gregorianChronology0);
      LocalDateTime localDateTime1 = localDateTime0.withYear(337);
      Hours hours0 = Hours.hours(25650000);
      hours0.toStandardDuration();
      // Undeclared exception!
      try { 
        localDateTime1.withPeriodAdded(hours0, 352831696);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 9050133002400000 * 3600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTimeZone dateTimeZone0 = dateTime0.getZone();
      dateTimeZone0.convertLocalToUTC(659L, true);
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) iSOChronology0);
      localDateTime0.toDateTime(dateTimeZone0);
      localDateTime0.getLocalMillis();
      iSOChronology0.toString();
      localDateTime0.toLocalTime();
      localDateTime0.getWeekyear();
      Minutes minutes0 = Minutes.ZERO;
      iSOChronology0.add((ReadablePeriod) minutes0, 1037L, 2014);
      int int0 = (-1120);
      minutes0.toPeriod();
      minutes0.toStandardDays();
      int int1 = 0;
      iSOChronology0.get((ReadablePeriod) minutes0, (long) 0, 659L);
      try { 
        iSOChronology0.getDateTimeMillis(2014, (-1120), 3, 3, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1120 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTimeZone.setDefault(dateTimeZone0);
      DateTime dateTime0 = new DateTime(3600L, dateTimeZone0);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withYear(0);
      LocalDateTime localDateTime2 = localDateTime1.withMinuteOfHour(26);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      localDateTime2.getWeekyear();
      localDateTime2.getHourOfDay();
      localDateTime0.getLocalMillis();
      MockGregorianCalendar mockGregorianCalendar0 = null;
      try {
        mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Date date0 = null;
      // Undeclared exception!
      try { 
        LocalDateTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      int int0 = (-2177);
      // Undeclared exception!
      try { 
        localDateTime0.withFieldAdded((DurationFieldType) null, (-2177));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(901);
      localDateTime1.isBefore(localDateTime0);
      LocalDateTime localDateTime2 = localDateTime1.minusMillis(901);
      localDateTime1.plusSeconds(901);
      localDateTime1.millisOfSecond();
      LocalDateTime.Property localDateTime_Property0 = localDateTime2.weekyear();
      localDateTime_Property0.toInterval();
      localDateTime_Property0.roundCeilingCopy();
      int int0 = 4;
      localDateTime0.plusMonths(4);
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("~~B]~y|`[$I/AO_-cDo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"~~B]~y|`[$I/AO_-cDo\" for weekyear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(0);
      localDateTime1.minusMonths(227);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null, (DateTimeZone) null);
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis(0L);
      localDateTime1.getWeekyear();
      Hours hours0 = Hours.EIGHT;
      // Undeclared exception!
      try { 
        localDateTime1.withHourOfDay(1970);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1970 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = 0L;
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(0);
      localDateTime0.getMillisOfSecond();
      // Undeclared exception!
      try { 
        localDateTime1.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-3427L));
      int int0 = (-844);
      LocalDateTime localDateTime1 = localDateTime0.minusMonths((-844));
      localDateTime0.getCenturyOfEra();
      LocalDateTime localDateTime2 = localDateTime1.plusMinutes(19);
      localDateTime2.dayOfYear();
      Object object0 = null;
      int int1 = (-243);
      // Undeclared exception!
      try { 
        localDateTime1.withDate(19, (-243), (-844));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -243 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      int int0 = (-567);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds((-567));
      int int1 = (-2042);
      LocalDateTime localDateTime2 = localDateTime1.withYear((-2042));
      // Undeclared exception!
      try { 
        localDateTime2.withHourOfDay((-2042));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2042 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 5;
      int int1 = 770;
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(0, 1652, 1927, 5, 1927, 770);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1927 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(ethiopicChronology0, ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.EthiopicChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(2976, (-908), 2976, 1900, 2976, 1900);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1900 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(copticChronology0, copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.CopticChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      Hours hours0 = Hours.EIGHT;
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) hours0);
      int int0 = 87;
      LocalDateTime localDateTime2 = localDateTime1.withDayOfYear(87);
      LocalDateTime localDateTime3 = localDateTime2.withMillisOfSecond(684);
      int int1 = (-151);
      // Undeclared exception!
      try { 
        localDateTime3.withHourOfDay((-151));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -151 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 12, 12, 0, 12, 0);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(12);
      localDateTime1.getDayOfWeek();
      localDateTime1.size();
      localDateTime1.dayOfMonth();
      localDateTime1.minusMillis(0);
      LocalDateTime localDateTime2 = localDateTime1.plusMillis(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      int int0 = 0;
      MockDate.UTC(600, 0, 12, 12, 4, 2208);
      dateTimeFieldType0.getDurationType();
      localDateTime2.indexOf(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        localDateTime1.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalTime localTime0 = new LocalTime((DateTimeZone) uTCDateTimeZone0);
      DateTime dateTime0 = localTime0.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      localTime0.toString();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateTime dateTime1 = dateTime0.withField(dateTimeFieldType0, 3);
      DateTimeZone dateTimeZone0 = dateTime0.getZone();
      dateTimeZone0.getOffsetFromLocal(3);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      dateTime1.toDateTime((Chronology) gJChronology0);
      Date date0 = dateTime1.toDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      localDateTime0.plusWeeks(3);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalDateTime localDateTime1 = LocalDateTime.now((Chronology) buddhistChronology0);
      localDateTime1.plusMillis(1603);
      localDateTime0.getMonthOfYear();
      TimeZone timeZone0 = TimeZone.getDefault();
      localDateTime0.toDate(timeZone0);
      localDateTime0.dayOfWeek();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-3798L));
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0, 5);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);
      localDateTime0.getDayOfYear();
      LocalDateTime localDateTime1 = localDateTime0.minusDays(3);
      // Undeclared exception!
      try { 
        localDateTime1.withMillisOfDay((-191));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -191 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      int int0 = (-1668);
      // Undeclared exception!
      try { 
        localDateTime0.withDate((-1668), (-1668), (-1668));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1668 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Chronology chronology0 = julianChronology0.withUTC();
      LocalDateTime localDateTime0 = new LocalDateTime(chronology0);
      int int0 = 2988;
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(2988);
      // Undeclared exception!
      try { 
        localDateTime1.withMinuteOfHour(2988);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2988 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withLocalMillis(0L);
      Duration duration0 = Duration.standardSeconds(0L);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(duration0, dateTime0, periodType0);
      period0.getMinutes();
      Period period1 = period0.withFields((ReadablePeriod) null);
      LocalDateTime localDateTime2 = localDateTime1.minus((ReadablePeriod) period1);
      dateTime0.plusMinutes(0);
      TimeZone timeZone0 = TimeZone.getTimeZone("]$#cP0>SP29|-");
      localDateTime2.toDate(timeZone0);
      LocalDateTime localDateTime3 = localDateTime2.minusMillis(3204);
      localDateTime3.withDurationAdded(duration0, 0);
      localDateTime2.minusMonths(0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Chronology chronology0 = islamicChronology0.withUTC();
      LocalDateTime localDateTime0 = new LocalDateTime(1000L, chronology0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, uTCDateTimeZone0);
      DateTimeZone dateTimeZone0 = zonedChronology0.getZone();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) 0, 1);
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      LocalDateTime.now(dateTimeZone1);
      localDateTime0.plusMonths(0);
      // Undeclared exception!
      try { 
        localDateTime0.toDate((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1L));
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      LocalDateTime.Property localDateTime_Property0 = new LocalDateTime.Property(localDateTime0, dateTimeField0);
      localDateTime_Property0.getMillis();
      LocalDateTime localDateTime1 = localDateTime_Property0.withMaximumValue();
      localDateTime1.plusMinutes(76);
      localDateTime0.toDate();
      localDateTime1.getSecondOfMinute();
      localDateTime0.getDayOfYear();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 291;
      MockDate mockDate0 = new MockDate(83, 83, 291, 0, 0);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(0);
      // Undeclared exception!
      try { 
        localDateTime1.withYearOfEra(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1429);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      localDateTime0.getDayOfWeek();
      LocalDateTime localDateTime1 = localDateTime0.plusHours(86400);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      localDateTime1.get(dateTimeFieldType0);
      localDateTime1.hourOfDay();
      int int0 = 2815;
      // Undeclared exception!
      try { 
        localDateTime0.withDate(1, (-1424), 60000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1424 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
      localDateTime_Property0.getChronology();
      int int0 = (-804);
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfWeek((-804));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -804 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(139);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 139);
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(mutablePeriod0, (-414));
      LocalDateTime localDateTime2 = localDateTime1.minusMinutes(2297);
      Months months0 = Months.TWO;
      LocalDateTime localDateTime3 = localDateTime2.minus((ReadablePeriod) months0);
      LocalDateTime localDateTime4 = localDateTime3.minusDays((-414));
      LocalDateTime localDateTime5 = localDateTime4.plusMillis(139);
      LocalDateTime.Property localDateTime_Property0 = localDateTime5.centuryOfEra();
      localDateTime3.isAfter(localDateTime0);
      localDateTime4.getDayOfWeek();
      localDateTime4.dayOfMonth();
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for centuryOfEra is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      Chronology chronology0 = gregorianChronology0.withUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now(chronology0);
      localDateTime0.getSecondOfMinute();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = new Object();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(object0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((-236L), (Chronology) gregorianChronology0);
      LocalDateTime localDateTime1 = localDateTime0.withYear(4673);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.weekOfWeekyear();
      // Undeclared exception!
      try { 
        localDateTime_Property0.setCopy("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org/joda/time/tz/data\" for weekOfWeekyear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = 0L;
      LocalDateTime localDateTime0 = new LocalDateTime(0L, (Chronology) null);
      LocalDateTime localDateTime1 = localDateTime0.plusDays(0);
      localDateTime1.minusDays(0);
      LocalDateTime localDateTime2 = localDateTime1.minusYears(15356250);
      LocalDateTime localDateTime3 = localDateTime1.plusDays(0);
      localDateTime3.isEqual(localDateTime2);
      localDateTime1.isEqual(localDateTime2);
      Duration duration0 = new Duration(0L, 0L);
      duration0.toStandardSeconds();
      LocalDateTime localDateTime4 = localDateTime2.minus((ReadableDuration) duration0);
      DateTimeUtils.setCurrentMillisSystem();
      // Undeclared exception!
      try { 
        localDateTime4.withSecondOfMinute(4549);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4549 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime((-84L), (DateTimeZone) uTCDateTimeZone0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfCentury();
      localDateTime0.getMillisOfDay();
      LocalDateTime localDateTime1 = localDateTime_Property0.addWrapFieldToCopy(4079);
      LocalDateTime localDateTime2 = localDateTime_Property0.addToCopy((-1742L));
      localDateTime1.plusSeconds(4079);
      localDateTime_Property0.addToCopy(86399916);
      localDateTime2.compareTo((ReadablePartial) localDateTime0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(buddhistChronology0, uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.BuddhistChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 22;
      int int1 = 0;
      int int2 = (-1603);
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(0, 22, 0, (-1603), 22, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1603 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 462;
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(2151, 981, 462, (-1839), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1839 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(3559L);
      int int0 = 901;
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(901);
      // Undeclared exception!
      try { 
        localDateTime1.withDayOfWeek(901);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 901 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone("");
      Chronology chronology0 = ethiopicChronology0.withZone((DateTimeZone) null);
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(0, 0, 3600, (-1590), 3600, (-1590), 3600, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1590 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.plusMillis(0);
      LocalDateTime localDateTime2 = localDateTime1.withFields(localDateTime0);
      LocalDateTime localDateTime3 = localDateTime2.minusMillis((-625));
      LocalDateTime localDateTime4 = localDateTime3.plus((ReadableDuration) null);
      int int0 = 0;
      localDateTime2.withMinuteOfHour(0);
      localDateTime3.yearOfEra();
      // Undeclared exception!
      try { 
        localDateTime4.withDayOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(2521, (-23), 12, 2521, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2521 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) ethiopicChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks(1);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      localDateTime0.indexOf(dateTimeFieldType0);
      LocalDateTime localDateTime2 = localDateTime1.withDayOfWeek(1);
      LocalDateTime localDateTime3 = localDateTime2.minusYears(615);
      localDateTime3.getEra();
      // Undeclared exception!
      try { 
        localDateTime2.withTime(0, 0, 615, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 615 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1000L);
      int int0 = (-3844);
      LocalDateTime localDateTime1 = localDateTime0.minusYears((-3844));
      Duration duration0 = Duration.standardSeconds(298L);
      LocalDateTime localDateTime2 = localDateTime1.plus((ReadableDuration) duration0);
      // Undeclared exception!
      try { 
        localDateTime2.withDayOfYear((-3844));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3844 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Duration duration0 = Duration.standardSeconds(0L);
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) duration0);
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      LocalDateTime localDateTime2 = localDateTime1.withFieldAdded(durationFieldType0, 5);
      LocalDateTime localDateTime3 = localDateTime2.withDurationAdded(duration0, 0);
      LocalDateTime localDateTime4 = localDateTime3.withWeekyear(5);
      localDateTime4.toString();
      localDateTime3.getMinuteOfHour();
      Seconds seconds0 = Seconds.TWO;
      Seconds seconds1 = seconds0.dividedBy(5);
      localDateTime2.plus((ReadablePeriod) seconds1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "PeriodFormat.weeks.regex";
      // Undeclared exception!
      try { 
        LocalDateTime.parse("PeriodFormat.weeks.regex");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"PeriodFormat.weeks.regex\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalDateTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      int int0 = 1577;
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(1577);
      int int1 = (-2941);
      LocalDateTime localDateTime2 = localDateTime1.plusMinutes((-2941));
      // Undeclared exception!
      try { 
        localDateTime2.withMonthOfYear((-2941));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2941 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime(0L, (Chronology) ethiopicChronology0);
      Hours hours0 = Hours.ZERO;
      ethiopicChronology0.get((ReadablePeriod) hours0, 0L, (-550L));
      LocalDateTime localDateTime1 = localDateTime0.minusHours(0);
      LocalDateTime localDateTime2 = localDateTime1.plusWeeks(0);
      LocalDateTime localDateTime3 = localDateTime2.withMillisOfSecond(22);
      localDateTime3.getDayOfWeek();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      MockDate mockDate0 = new MockDate(1, 1, 1, 1, 1);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.minusYears(0);
      LocalDateTime localDateTime2 = localDateTime1.minusMillis(0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        buddhistChronology0.validate(localDateTime2, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(168);
      Duration duration0 = Duration.millis((-1083L));
      LocalDateTime localDateTime2 = localDateTime1.withDurationAdded(duration0, 168);
      localDateTime2.getMinuteOfHour();
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.weekyear();
      localDateTime_Property0.isLeap();
      LocalDateTime localDateTime3 = localDateTime_Property0.roundHalfEvenCopy();
      localDateTime2.yearOfCentury();
      localDateTime3.getYearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      localDateTime1.isSupported(dateTimeFieldType0);
      localDateTime3.dayOfMonth();
      localDateTime_Property0.roundFloorCopy();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      localDateTime0.getMonthOfYear();
      LocalDateTime localDateTime1 = localDateTime0.withMinuteOfHour(1);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalDateTime localDateTime2 = LocalDateTime.now((DateTimeZone) uTCDateTimeZone0);
      localDateTime2.compareTo((ReadablePartial) localDateTime0);
      localDateTime1.plusMillis(0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      int int0 = 0;
      localDateTime0.withMinuteOfHour(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekyear();
      localDateTime_Property0.withMaximumValue();
      // Undeclared exception!
      try { 
        localDateTime0.withWeekOfWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      LocalDateTime localDateTime1 = localDateTime0.withMinuteOfHour(14);
      // Undeclared exception!
      try { 
        localDateTime1.toString("S:@G[?6wIw{aO>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.minusHours(15356250);
      LocalDateTime localDateTime2 = localDateTime1.withLocalMillis(1000L);
      Duration duration0 = new Duration(1000L, 1000L);
      Duration duration1 = duration0.dividedBy((long) 15356250);
      LocalDateTime localDateTime3 = localDateTime2.minus((ReadableDuration) duration1);
      LocalDateTime localDateTime4 = localDateTime3.minusSeconds(15356250);
      // Undeclared exception!
      try { 
        localDateTime4.withWeekOfWeekyear(15356250);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 15356250 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(26607895200000L);
      localDateTime0.toDateTime();
      localDateTime0.weekOfWeekyear();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Asia/Dhaka");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(1L, dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfSecond(0);
      LocalDateTime localDateTime2 = localDateTime1.plusMillis(3);
      LocalDateTime localDateTime3 = localDateTime2.plusMinutes(3);
      LocalDateTime.Property localDateTime_Property0 = localDateTime3.dayOfYear();
      localDateTime_Property0.withMaximumValue();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.plusDays(0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();
      Locale locale0 = Locale.KOREA;
      localDateTime_Property0.getMaximumTextLength(locale0);
      localDateTime_Property0.addToCopy(2);
      localDateTime0.getFieldTypes();
      localDateTime0.getMillisOfSecond();
      localDateTime_Property0.roundHalfCeilingCopy();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalDateTime.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.getDayOfYear();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      mockDate0.toInstant();
      LocalDateTime localDateTime1 = localDateTime0.plusMillis(13);
      localDateTime0.minusDays(13);
      // Undeclared exception!
      try { 
        localDateTime1.withYearOfCentury(604800);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 604800 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) uTCDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(10);
      localDateTime1.getDayOfYear();
      LocalDateTime localDateTime2 = localDateTime1.minusMillis(10);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      LocalDateTime localDateTime3 = localDateTime2.withField(dateTimeFieldType0, 11);
      Days days0 = Days.days((-1329));
      Hours hours0 = days0.toStandardHours();
      LocalDateTime localDateTime4 = localDateTime3.minusMonths(11);
      localDateTime1.getDayOfMonth();
      Duration duration0 = hours0.toStandardDuration();
      dateTimeFieldType0.getDurationType();
      Duration duration1 = duration0.plus(1783L);
      duration1.withMillis(0L);
      Days days1 = days0.dividedBy(10);
      days0.compareTo((BaseSingleFieldPeriod) days1);
      Duration duration2 = duration1.withDurationAdded((long) 11, (-1329));
      LocalDateTime localDateTime5 = localDateTime3.plus((ReadableDuration) duration2);
      localDateTime5.dayOfYear();
      localDateTime1.withFields(localDateTime4);
      localDateTime0.minusMonths(11);
      localDateTime3.yearOfEra();
      localDateTime2.minusWeeks(0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks(0);
      LocalDateTime localDateTime2 = localDateTime0.plusHours(0);
      DateTimeUtils.setCurrentMillisSystem();
      LocalDateTime localDateTime3 = localDateTime2.minusYears((-668));
      localDateTime1.withMinuteOfHour(0);
      // Undeclared exception!
      try { 
        localDateTime3.withHourOfDay((-668));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -668 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(898);
      LocalDateTime localDateTime2 = localDateTime0.minusMinutes(898);
      localDateTime1.getMonthOfYear();
      localDateTime2.getSecondOfMinute();
      localDateTime0.millisOfDay();
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      localDateTime0.withFieldAdded(durationFieldType0, 898);
      LocalDateTime localDateTime3 = localDateTime2.plusMonths(898);
      DateTimeUtils.setCurrentMillisSystem();
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.secondOfMinute();
      localDateTime_Property0.getFieldType();
      LocalDateTime localDateTime4 = localDateTime_Property0.withMinimumValue();
      LocalDateTime localDateTime5 = localDateTime4.plusMinutes(898);
      GJChronology.getInstance();
      LocalDateTime localDateTime6 = localDateTime3.withWeekyear(21);
      localDateTime6.yearOfCentury();
      localDateTime6.secondOfMinute();
      localDateTime4.minusMonths(21);
      localDateTime5.plus((ReadablePeriod) null);
      // Undeclared exception!
      try { 
        localDateTime0.withDate(2420, 2420, 898);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2420 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(13);
      DateTimeZone.forOffsetHours(13);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      localDateTime0.toDateTime(dateTimeZone0);
      dateTimeZone0.isStandardOffset(1306L);
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(13);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.centuryOfEra();
      localDateTime_Property0.getName();
      LocalDateTime localDateTime2 = localDateTime_Property0.addToCopy(13);
      LocalDateTime localDateTime3 = localDateTime0.withYearOfCentury(0);
      LocalDateTime localDateTime4 = localDateTime0.minusDays(13);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      ethiopicChronology0.getDateTimeMillis(1306L, 0, 13, 13, 13);
      ethiopicChronology0.set(localDateTime4, 1944L);
      localDateTime4.equals(ethiopicChronology0);
      localDateTime3.getYearOfEra();
      localDateTime4.toLocalDate();
      localDateTime2.getMonthOfYear();
      localDateTime1.getYearOfCentury();
      localDateTime3.getWeekOfWeekyear();
      dateTimeZone0.toTimeZone();
      LocalDateTime localDateTime5 = localDateTime3.withYear((-3342));
      LocalDateTime localDateTime6 = localDateTime_Property0.roundHalfFloorCopy();
      localDateTime6.year();
      localDateTime5.toLocalTime();
      localDateTime4.withMinuteOfHour(13);
      localDateTime5.toLocalDate();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = 2802L;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      Partial partial0 = new Partial(yearMonth0);
      Interval interval0 = yearMonth0.toInterval();
      interval0.toDurationMillis();
      ReadableDuration readableDuration0 = null;
      Interval interval1 = interval0.withDurationBeforeEnd(readableDuration0);
      DateTime dateTime0 = interval1.getEnd();
      partial0.isMatch((ReadableInstant) dateTime0);
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(buddhistChronology0);
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZoneUTC();
      long long1 = 3811L;
      buddhistChronology0.set(partial0, long1);
      DateTimeZone dateTimeZone0 = dateTimeFormatter2.getZone();
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (Chronology) gJChronology0);
      int int0 = 509;
      LocalDateTime localDateTime1 = localDateTime0.plusYears(int0);
      localDateTime1.getMillisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      dateTimeFieldType0.isSupported(chronology0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.property(dateTimeFieldType0);
      int int1 = 0;
      localDateTime0.withMillisOfDay(int1);
      long long2 = (-2190L);
      localDateTime_Property0.addToCopy(long2);
      Weeks weeks0 = Weeks.THREE;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      localDateTime0.withFieldAdded(durationFieldType0, buddhistChronology0.BE);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(2857);
      localDateTime0.minuteOfHour();
      Minutes minutes0 = Minutes.ONE;
      LocalDateTime localDateTime2 = localDateTime1.plus((ReadablePeriod) minutes0);
      minutes0.negated();
      localDateTime0.plusMinutes(495);
      localDateTime2.minusHours((-2147482895));
      localDateTime2.plusDays((-2147482895));
      // Undeclared exception!
      try { 
        localDateTime2.withSecondOfMinute(2857);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2857 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gJChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(2857);
      Minutes minutes0 = Minutes.ONE;
      LocalDateTime localDateTime2 = localDateTime1.plus((ReadablePeriod) minutes0);
      minutes0.negated();
      localDateTime0.plusMinutes(495);
      // Undeclared exception!
      try { 
        localDateTime2.withSecondOfMinute(2857);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2857 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      localDateTime0.getMillisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      dateTimeFieldType0.getDurationType();
      localDateTime0.property(dateTimeFieldType0);
      dateTimeFieldType0.isSupported((Chronology) null);
      localDateTime0.hourOfDay();
      localDateTime0.secondOfMinute();
      localDateTime0.getDayOfYear();
      localDateTime0.get(dateTimeFieldType0);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(97);
      Locale locale0 = Locale.forLanguageTag("");
      try { 
        localDateTime1.toString("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1000L);
      int int0 = (-3844);
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks((-3844));
      Duration.standardSeconds(298L);
      LocalDateTime localDateTime2 = localDateTime1.minusMinutes((-3844));
      // Undeclared exception!
      try { 
        localDateTime2.withDayOfYear((-3844));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3844 for dayOfYear must be in the range [1,366]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(901);
      localDateTime1.isBefore(localDateTime0);
      LocalDateTime localDateTime2 = localDateTime1.minusMillis(901);
      LocalDateTime localDateTime3 = localDateTime1.plusSeconds(901);
      LocalDateTime.Property localDateTime_Property0 = localDateTime1.millisOfSecond();
      LocalDateTime.Property localDateTime_Property1 = localDateTime2.weekyear();
      localDateTime_Property1.toInterval();
      LocalDateTime localDateTime4 = localDateTime_Property1.roundCeilingCopy();
      LocalDateTime localDateTime5 = localDateTime0.plusMonths(4);
      localDateTime5.withLocalMillis(901);
      localDateTime4.getMillisOfSecond();
      localDateTime_Property1.getMillis();
      LocalDateTime localDateTime6 = localDateTime_Property0.roundCeilingCopy();
      localDateTime6.toDate();
      localDateTime3.minusWeeks(0);
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(86400000, 0, (-498), 4, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      int int2 = (-2894);
      MockDate mockDate0 = new MockDate(0, 0, (-2894));
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      localDateTime0.secondOfMinute();
      localDateTime0.withLocalMillis(0);
      localDateTime0.minusMonths(0);
      localDateTime0.getDayOfYear();
      localDateTime0.minuteOfHour();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      // Undeclared exception!
      try { 
        GregorianChronology.getInstance(dateTimeZone0, 28);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 28
         //
         verifyException("org.joda.time.chrono.GregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.plusMillis(0);
      LocalDateTime localDateTime2 = localDateTime1.withFields(localDateTime0);
      LocalDateTime localDateTime3 = localDateTime2.minusMillis((-625));
      localDateTime3.plus((ReadableDuration) null);
      int int0 = 0;
      localDateTime2.withMinuteOfHour(0);
      localDateTime3.yearOfEra();
      localDateTime1.minusSeconds(0);
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      localDateTime2.isSupported(durationFieldType0);
      localDateTime2.getDayOfYear();
      LocalDateTime localDateTime4 = localDateTime2.withLocalMillis(1156L);
      Days days0 = Days.TWO;
      Days days1 = days0.minus(45);
      Period period0 = days1.toPeriod();
      Period period1 = period0.withFields(days1);
      int int1 = (-4674);
      localDateTime4.withPeriodAdded(period1, int1);
      localDateTime4.yearOfCentury();
      LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(int0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      localDateTime5.isSupported(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        localDateTime5.withDayOfWeek(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
