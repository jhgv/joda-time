/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:43:17 GMT 2018
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SkipUndoDateTimeField_ESTest extends SkipUndoDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(buddhistChronology0, dateTimeField0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-292268510), skipUndoDateTimeField0.getMinimumValue());
      assertEquals("year", skipUndoDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(skipUndoDateTimeField0);
      
      long long0 = skipUndoDateTimeField0.set((long) 1, 1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-292268510), skipUndoDateTimeField0.getMinimumValue());
      assertEquals("year", skipUndoDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-79271567999999L), long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) null, dateTimeField0);
      assertEquals("hourOfDay", skipUndoDateTimeField0.getName());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(skipUndoDateTimeField0);
      
      int int0 = skipUndoDateTimeField0.get(1);
      assertEquals("hourOfDay", skipUndoDateTimeField0.getName());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(gJChronology0, dateTimeField0, (-885));
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", skipUndoDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(skipUndoDateTimeField0);
      
      long long0 = skipUndoDateTimeField0.set(0L, 0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", skipUndoDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) null, dateTimeField0, 2783);
      assertEquals(1, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("millisOfSecond", skipUndoDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(skipUndoDateTimeField0);
      
      int int0 = skipUndoDateTimeField0.getMinimumValue();
      assertEquals(1, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("millisOfSecond", skipUndoDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(gJChronology0, dateTimeField0, (-3334));
      assertEquals((-2922684), skipUndoDateTimeField0.getMinimumValue());
      assertEquals("centuryOfEra", skipUndoDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(skipUndoDateTimeField0);
      
      int int0 = skipUndoDateTimeField0.getMinimumValue();
      assertEquals((-2922684), skipUndoDateTimeField0.getMinimumValue());
      assertEquals("centuryOfEra", skipUndoDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-2922684), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(gregorianChronology0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(gregorianChronology0, dateTimeField0, (-5028));
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("hourOfDay", skipUndoDateTimeField0.getName());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(skipUndoDateTimeField0);
      
      int int0 = skipUndoDateTimeField0.get(1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("hourOfDay", skipUndoDateTimeField0.getName());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = null;
      try {
        skipUndoDateTimeField0 = new SkipUndoDateTimeField(islamicChronology0, (DateTimeField) null, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1, EthiopicChronology.EE);
      assertNotNull(ethiopicChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isPrecise());
      assertTrue(millisDurationField0.isSupported());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertNotNull(millisDurationField0);
      
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, millisDurationField0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isPrecise());
      assertTrue(millisDurationField0.isSupported());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertEquals("yearOfEra", unsupportedDateTimeField0.getName());
      assertNotNull(unsupportedDateTimeField0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = null;
      try {
        skipUndoDateTimeField0 = new SkipUndoDateTimeField(ethiopicChronology0, unsupportedDateTimeField0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // yearOfEra field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SkipUndoDateTimeField skipUndoDateTimeField0 = null;
      try {
        skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) null, (DateTimeField) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      DateTimeZone dateTimeZone0 = dateTime0.getZone();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", offsetDateTimeField0.getName());
      assertEquals(2, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(offsetDateTimeField0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(buddhistChronology0, offsetDateTimeField0, 0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", offsetDateTimeField0.getName());
      assertEquals(2, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", skipUndoDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(skipUndoDateTimeField0);
      
      long long0 = skipUndoDateTimeField0.set((long) 0, 1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", offsetDateTimeField0.getName());
      assertEquals(2, offsetDateTimeField0.getMaximumValue());
      assertTrue(offsetDateTimeField0.isSupported());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", skipUndoDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertEquals((-43200000L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeField0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(julianChronology0, dateTimeField0, 0);
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("minuteOfHour", skipUndoDateTimeField0.getName());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(skipUndoDateTimeField0);
      
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.set((long) 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(buddhistChronology0, dateTimeField0);
      long long0 = skipUndoDateTimeField0.set((long) 1, 1);
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(buddhistChronology0, dateTimeField0);
      int int0 = skipUndoDateTimeField0.get(1);
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(gregorianChronology0, dateTimeField0, 1553);
      int int0 = skipUndoDateTimeField0.get((-1654L));
      assertEquals(2, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(buddhistChronology0, dateTimeField0);
      int int0 = skipUndoDateTimeField0.getMinimumValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(buddhistChronology0, dateTimeField0);
      // Undeclared exception!
      try { 
        skipUndoDateTimeField0.get((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000-02:19:36 (BuddhistChronology[America/Recife])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }
}
