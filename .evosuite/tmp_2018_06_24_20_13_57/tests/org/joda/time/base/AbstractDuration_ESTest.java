/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:35:04 GMT 2018
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Duration;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractDuration_ESTest extends AbstractDuration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1825L);
      assertEquals(76L, duration0.getStandardDays());
      assertEquals(109500L, duration0.getStandardMinutes());
      assertEquals(6570000L, duration0.getStandardSeconds());
      assertEquals(6570000000L, duration0.getMillis());
      assertEquals(1825L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.minus((-792L));
      assertEquals(76L, duration0.getStandardDays());
      assertEquals(109500L, duration0.getStandardMinutes());
      assertEquals(6570000L, duration0.getStandardSeconds());
      assertEquals(6570000000L, duration0.getMillis());
      assertEquals(1825L, duration0.getStandardHours());
      assertEquals(6570000L, duration1.getStandardSeconds());
      assertEquals(76L, duration1.getStandardDays());
      assertEquals(6570000792L, duration1.getMillis());
      assertEquals(1825L, duration1.getStandardHours());
      assertEquals(109500L, duration1.getStandardMinutes());
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      String string0 = duration1.toString();
      assertEquals(76L, duration0.getStandardDays());
      assertEquals(109500L, duration0.getStandardMinutes());
      assertEquals(6570000L, duration0.getStandardSeconds());
      assertEquals(6570000000L, duration0.getMillis());
      assertEquals(1825L, duration0.getStandardHours());
      assertEquals(6570000L, duration1.getStandardSeconds());
      assertEquals(76L, duration1.getStandardDays());
      assertEquals(6570000792L, duration1.getMillis());
      assertEquals(1825L, duration1.getStandardHours());
      assertEquals(109500L, duration1.getStandardMinutes());
      assertEquals("PT6570000.792S", string0);
      assertNotNull(string0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.plus((-731L));
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals((-731L), duration1.getMillis());
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      duration1.hashCode();
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals((-731L), duration1.getMillis());
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-2128L));
      assertEquals((-7660800L), duration0.getStandardSeconds());
      assertEquals((-88L), duration0.getStandardDays());
      assertEquals((-127680L), duration0.getStandardMinutes());
      assertEquals((-7660800000L), duration0.getMillis());
      assertEquals((-2128L), duration0.getStandardHours());
      assertNotNull(duration0);
      
      Duration duration1 = Duration.standardDays((-2128L));
      assertEquals((-2128L), duration1.getStandardDays());
      assertEquals((-183859200L), duration1.getStandardSeconds());
      assertEquals((-183859200000L), duration1.getMillis());
      assertEquals((-3064320L), duration1.getStandardMinutes());
      assertEquals((-51072L), duration1.getStandardHours());
      assertNotNull(duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      boolean boolean0 = duration1.equals(duration0);
      assertEquals((-7660800L), duration0.getStandardSeconds());
      assertEquals((-88L), duration0.getStandardDays());
      assertEquals((-127680L), duration0.getStandardMinutes());
      assertEquals((-7660800000L), duration0.getMillis());
      assertEquals((-2128L), duration0.getStandardHours());
      assertEquals((-2128L), duration1.getStandardDays());
      assertEquals((-183859200L), duration1.getStandardSeconds());
      assertEquals((-183859200000L), duration1.getMillis());
      assertEquals((-3064320L), duration1.getStandardMinutes());
      assertEquals((-51072L), duration1.getStandardHours());
      assertFalse(boolean0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.withMillis((-1764L));
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals((-1764L), duration1.getMillis());
      assertEquals((-1L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      boolean boolean0 = duration0.isShorterThan(duration1);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals((-1764L), duration1.getMillis());
      assertEquals((-1L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertFalse(boolean0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = Duration.millis(32000L);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(32L, duration0.getStandardSeconds());
      assertEquals(32000L, duration0.getMillis());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.withMillis((-1686L));
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(32L, duration0.getStandardSeconds());
      assertEquals(32000L, duration0.getMillis());
      assertEquals((-1L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-1686L), duration1.getMillis());
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      boolean boolean0 = duration1.isLongerThan(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(32L, duration0.getStandardSeconds());
      assertEquals(32000L, duration0.getMillis());
      assertEquals((-1L), duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals((-1686L), duration1.getMillis());
      assertFalse(boolean0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1825L);
      assertEquals(109500L, duration0.getStandardMinutes());
      assertEquals(1825L, duration0.getStandardHours());
      assertEquals(6570000L, duration0.getStandardSeconds());
      assertEquals(76L, duration0.getStandardDays());
      assertEquals(6570000000L, duration0.getMillis());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.plus(1825L);
      assertEquals(109500L, duration0.getStandardMinutes());
      assertEquals(1825L, duration0.getStandardHours());
      assertEquals(6570000L, duration0.getStandardSeconds());
      assertEquals(76L, duration0.getStandardDays());
      assertEquals(6570000000L, duration0.getMillis());
      assertEquals(1825L, duration1.getStandardHours());
      assertEquals(76L, duration1.getStandardDays());
      assertEquals(109500L, duration1.getStandardMinutes());
      assertEquals(6570001L, duration1.getStandardSeconds());
      assertEquals(6570001825L, duration1.getMillis());
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      boolean boolean0 = duration0.isEqual(duration1);
      assertEquals(109500L, duration0.getStandardMinutes());
      assertEquals(1825L, duration0.getStandardHours());
      assertEquals(6570000L, duration0.getStandardSeconds());
      assertEquals(76L, duration0.getStandardDays());
      assertEquals(6570000000L, duration0.getMillis());
      assertEquals(1825L, duration1.getStandardHours());
      assertEquals(76L, duration1.getStandardDays());
      assertEquals(109500L, duration1.getStandardMinutes());
      assertEquals(6570001L, duration1.getStandardSeconds());
      assertEquals(6570001825L, duration1.getMillis());
      assertFalse(boolean0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(1L);
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertNotNull(duration0);
      
      Period period0 = duration0.toPeriod();
      assertEquals(1L, duration0.getStandardSeconds());
      assertEquals(1000L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1825L);
      assertEquals(6570000000L, duration0.getMillis());
      assertEquals(109500L, duration0.getStandardMinutes());
      assertEquals(6570000L, duration0.getStandardSeconds());
      assertEquals(76L, duration0.getStandardDays());
      assertEquals(1825L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.toDuration();
      assertEquals(6570000000L, duration0.getMillis());
      assertEquals(109500L, duration0.getStandardMinutes());
      assertEquals(6570000L, duration0.getStandardSeconds());
      assertEquals(76L, duration0.getStandardDays());
      assertEquals(1825L, duration0.getStandardHours());
      assertEquals(6570000000L, duration1.getMillis());
      assertEquals(109500L, duration1.getStandardMinutes());
      assertEquals(76L, duration1.getStandardDays());
      assertEquals(1825L, duration1.getStandardHours());
      assertEquals(6570000L, duration1.getStandardSeconds());
      assertNotNull(duration1);
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.toDuration();
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardDays());
      assertNotNull(duration1);
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1L));
      assertEquals((-1440L), duration0.getStandardMinutes());
      assertEquals((-86400000L), duration0.getMillis());
      assertEquals((-24L), duration0.getStandardHours());
      assertEquals((-86400L), duration0.getStandardSeconds());
      assertEquals((-1L), duration0.getStandardDays());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.toDuration();
      assertEquals((-1440L), duration0.getStandardMinutes());
      assertEquals((-86400000L), duration0.getMillis());
      assertEquals((-24L), duration0.getStandardHours());
      assertEquals((-86400L), duration0.getStandardSeconds());
      assertEquals((-1L), duration0.getStandardDays());
      assertEquals((-24L), duration1.getStandardHours());
      assertEquals((-1440L), duration1.getStandardMinutes());
      assertEquals((-86400000L), duration1.getMillis());
      assertEquals((-86400L), duration1.getStandardSeconds());
      assertEquals((-1L), duration1.getStandardDays());
      assertNotNull(duration1);
      assertSame(duration0, duration1);
      assertSame(duration1, duration0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = new Duration(1L);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.minus(1L);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      boolean boolean0 = duration0.isLongerThan(duration1);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(1L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardMinutes());
      assertEquals(0L, duration1.getStandardHours());
      assertTrue(boolean0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.millis(32000L);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(32L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(32000L, duration0.getMillis());
      assertNotNull(duration0);
      
      boolean boolean0 = duration0.isLongerThan(duration0);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(32L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(32000L, duration0.getMillis());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      boolean boolean0 = duration0.isEqual(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = Duration.millis(587L);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(587L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.multipliedBy(788L);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(587L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(462L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(7L, duration1.getStandardMinutes());
      assertEquals(462556L, duration1.getMillis());
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      boolean boolean0 = duration1.isEqual(duration0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(587L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(462L, duration1.getStandardSeconds());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(7L, duration1.getStandardMinutes());
      assertEquals(462556L, duration1.getMillis());
      assertFalse(boolean0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = new Duration(0L);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertNotNull(duration0);
      
      // Undeclared exception!
      try { 
        duration0.compareTo((ReadableDuration) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractDuration", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-1645L));
      assertEquals((-27L), duration0.getStandardHours());
      assertEquals((-1645L), duration0.getStandardMinutes());
      assertEquals((-98700L), duration0.getStandardSeconds());
      assertEquals((-1L), duration0.getStandardDays());
      assertEquals((-98700000L), duration0.getMillis());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.minus((-1L));
      assertEquals((-27L), duration0.getStandardHours());
      assertEquals((-1645L), duration0.getStandardMinutes());
      assertEquals((-98700L), duration0.getStandardSeconds());
      assertEquals((-1L), duration0.getStandardDays());
      assertEquals((-98700000L), duration0.getMillis());
      assertEquals((-98699L), duration1.getStandardSeconds());
      assertEquals((-1644L), duration1.getStandardMinutes());
      assertEquals((-98699999L), duration1.getMillis());
      assertEquals((-1L), duration1.getStandardDays());
      assertEquals((-27L), duration1.getStandardHours());
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      int int0 = duration1.compareTo((ReadableDuration) duration0);
      assertEquals((-27L), duration0.getStandardHours());
      assertEquals((-1645L), duration0.getStandardMinutes());
      assertEquals((-98700L), duration0.getStandardSeconds());
      assertEquals((-1L), duration0.getStandardDays());
      assertEquals((-98700000L), duration0.getMillis());
      assertEquals((-98699L), duration1.getStandardSeconds());
      assertEquals((-1644L), duration1.getStandardMinutes());
      assertEquals((-98699999L), duration1.getMillis());
      assertEquals((-1L), duration1.getStandardDays());
      assertEquals((-27L), duration1.getStandardHours());
      assertEquals(1, int0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(1000L);
      assertEquals(1000L, duration0.getStandardMinutes());
      assertEquals(60000000L, duration0.getMillis());
      assertEquals(60000L, duration0.getStandardSeconds());
      assertEquals(16L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertNotNull(duration0);
      
      Duration duration1 = duration0.dividedBy(1000L);
      assertEquals(1000L, duration0.getStandardMinutes());
      assertEquals(60000000L, duration0.getMillis());
      assertEquals(60000L, duration0.getStandardSeconds());
      assertEquals(16L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(60L, duration1.getStandardSeconds());
      assertEquals(60000L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(1L, duration1.getStandardMinutes());
      assertNotNull(duration1);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration1.equals((Object)duration0));
      
      int int0 = duration1.compareTo((ReadableDuration) duration0);
      assertEquals(1000L, duration0.getStandardMinutes());
      assertEquals(60000000L, duration0.getMillis());
      assertEquals(60000L, duration0.getStandardSeconds());
      assertEquals(16L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration1.getStandardHours());
      assertEquals(60L, duration1.getStandardSeconds());
      assertEquals(60000L, duration1.getMillis());
      assertEquals(0L, duration1.getStandardDays());
      assertEquals(1L, duration1.getStandardMinutes());
      assertEquals((-1), int0);
      assertNotSame(duration0, duration1);
      assertNotSame(duration1, duration0);
      assertFalse(duration0.equals((Object)duration1));
      assertFalse(duration1.equals((Object)duration0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      int int0 = duration0.compareTo((ReadableDuration) duration0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertNotNull(duration0);
      
      String string0 = duration0.toString();
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals("PT0S", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = Duration.millis((-102));
      String string0 = duration0.toString();
      assertEquals("PT-0.102S", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Duration duration1 = duration0.multipliedBy((-2223L));
      boolean boolean0 = duration0.equals(duration1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1L);
      boolean boolean0 = duration0.equals("org.joda.time.base.AbstractDuration");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1825L);
      boolean boolean0 = duration0.equals(duration0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1825L);
      Duration duration1 = duration0.minus((-779L));
      boolean boolean0 = duration1.equals(duration0);
      assertFalse(boolean0);
      assertFalse(duration0.equals((Object)duration1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      boolean boolean0 = duration0.isShorterThan(duration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.millis((-102));
      boolean boolean0 = duration0.isShorterThan((ReadableDuration) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      boolean boolean0 = duration0.isLongerThan((ReadableDuration) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1825L);
      boolean boolean0 = duration0.isEqual((ReadableDuration) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Duration duration1 = Duration.standardMinutes((-49620000L));
      boolean boolean0 = duration1.isShorterThan(duration0);
      assertTrue(boolean0);
  }
}
