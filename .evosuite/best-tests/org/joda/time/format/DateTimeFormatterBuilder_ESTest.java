/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:21:21 GMT 2018
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.time.LocalDateTime;
import java.time.format.ResolverStyle;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.MockPartial;
import org.joda.time.MockZone;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.MillisDurationField;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.field.UnsupportedDateTimeField;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimeParserInternalParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.DateTimePrinterInternalPrinter;
import org.joda.time.format.InternalParser;
import org.joda.time.format.InternalParserDateTimeParser;
import org.joda.time.format.InternalPrinter;
import org.joda.time.format.InternalPrinterDateTimePrinter;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeFormatterBuilder_ESTest extends DateTimeFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.toPrinter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing is not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYear(10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendYear(10, 10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1999), (-1999), (-1999));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeParser0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.append(dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder1.appendSecondOfDay(3255);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      
      int int0 = 2976;
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new DateTimeFormatterBuilder();
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder4));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder3));
      assertNotNull(dateTimeFormatterBuilder5);
      
      int int1 = 50;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendHourOfHalfday((-1999));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 65533, 65533);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTwoDigitWeekyear(65533, true);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendMonthOfYearText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder2.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendMillisOfDay(65533);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendTimeZoneOffset("", true, 327, 65533);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder2.appendFractionOfSecond(59, 59);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder7);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendEraText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertNotNull(dateTimeFormatterBuilder8);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder8.appendTwoDigitWeekyear(327, false);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder9);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>(hashMap0);
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-2077), hashMap1);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      int int0 = dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength();
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertEquals(20, int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder7.append((DateTimePrinter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, 6, 6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(6));
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertFalse(linkedList0.contains(6));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimePrinter0);
      assertFalse(linkedList0.contains(6));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[0];
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.append(dateTimePrinter0, dateTimeParserArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 40;
      StringBuilder stringBuilder0 = new StringBuilder(40);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendDecimal((DateTimeFieldType) null, 40, 1131);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g6CQ/");
      assertFalse(boolean0);
      
      int int0 = (-937);
      // Undeclared exception!
      try { 
        DateTimeFormatterBuilder.csCompare("g6CQ/", (-937), "g6CQ/");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.toParser();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing is not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 58;
      int int1 = 175;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYear(58, 175);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendMonthOfYear(175);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendMinuteOfDay(175);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder1.appendMillisOfDay(58);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      boolean boolean0 = false;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        Instant.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfMinute(2105);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneId();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTimeZoneName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder1.appendFraction(dateTimeFieldType0, 2105, (-591));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder0.appendLiteral("_Q,1`*f5");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder6);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder2.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder7);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendLiteral('d');
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertNotNull(dateTimeFormatterBuilder8);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder8.appendFraction(dateTimeFieldType0, 2105, (-591));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder9);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder9);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, true, 8);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotNull(julianChronology0);
      
      Locale locale0 = new Locale("hV&Bb=!E!rz|K", "hV&Bb=!E!rz|K", "Im\nhuCy5kh9/\n|");
      assertNotNull(locale0);
      assertEquals("hv&bb=!e!rz|k_HV&BB=!E!RZ|K_Im\nhuCy5kh9/\n|", locale0.toString());
      assertEquals("HV&BB=!E!RZ|K", locale0.getCountry());
      assertEquals("Im\nhuCy5kh9/\n|", locale0.getVariant());
      assertEquals("hv&bb=!e!rz|k", locale0.getLanguage());
      
      Integer integer0 = Integer.getInteger("", 0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, julianChronology0, locale0, integer0, (-1137));
      assertNotNull(dateTimeParserBucket0);
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(0, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals("hv&bb=!e!rz|k_HV&BB=!E!RZ|K_Im\nhuCy5kh9/\n|", locale0.toString());
      assertEquals("HV&BB=!E!RZ|K", locale0.getCountry());
      assertEquals("Im\nhuCy5kh9/\n|", locale0.getVariant());
      assertEquals("hv&bb=!e!rz|k", locale0.getLanguage());
      
      int int0 = dateTimeFormatterBuilder_PaddedNumber0.parseInto(dateTimeParserBucket0, "Im\nhuCy5kh9/\n|", (-1137));
      assertEquals(1136, int0);
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(0, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals("hv&bb=!e!rz|k_HV&BB=!E!RZ|K_Im\nhuCy5kh9/\n|", locale0.toString());
      assertEquals("HV&BB=!E!RZ|K", locale0.getCountry());
      assertEquals("Im\nhuCy5kh9/\n|", locale0.getVariant());
      assertEquals("hv&bb=!e!rz|k", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1999), (-1999), (-1999));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeParser0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfDay(50);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      dateTimeFormatterBuilder1.clear();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendYearOfEra(50, 868);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      boolean boolean0 = dateTimeFormatterBuilder2.canBuildParser();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertTrue(boolean0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder2.appendTwoDigitWeekyear(50);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      int int0 = dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
      assertEquals(0, int0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('3');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      File file0 = MockFile.createTempFile("org.joda.time.YearMonth$Property", "org.joda.time.YearMonth$Property");
      assertNotNull(file0);
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals("/var/folders/_x/tfjywptd7r50k3bqzfvdz4pc0000gn/T/org.joda.time.YearMonth$Property0org.joda.time.YearMonth$Property", file0.toString());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertEquals("org.joda.time.YearMonth$Property0org.joda.time.YearMonth$Property", file0.getName());
      assertEquals("/var/folders/_x/tfjywptd7r50k3bqzfvdz4pc0000gn/T", file0.getParent());
      assertTrue(file0.canExecute());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        LocalDate.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      int int0 = 757;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 757, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(757, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(757, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimePrinter0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(757, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(757, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(757, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append(dateTimePrinter0, dateTimeParserArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 714;
      int int1 = DateTimeFormatterBuilder.csCompare("sW^klBi?/cD[Cm} $fA", 714, "");
      assertFalse(int1 == int0);
      assertEquals(695, int1);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("6'");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      StringBuffer stringBuffer0 = new StringBuffer("6'");
      assertNotNull(stringBuffer0);
      assertEquals("6'", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      
      Partial partial0 = new Partial(dateTimeFieldType0, 18);
      assertNotNull(partial0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      // Undeclared exception!
      try { 
        partial0.with(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for yearOfEra must be in the range [1,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      int int0 = (-2404);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType0, (-2404), (-1074));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(525, 525);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendYearOfCentury(525, (-1928));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendShortText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      
      int int0 = (-3572);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder3.appendHourOfDay((-3572));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PT");
      assertFalse(boolean0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      
      int int0 = 0;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      Appendable appendable0 = null;
      ReadablePartial readablePartial0 = null;
      java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
      assertNotNull(dateTimeFormatter0);
      
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Appendable) null, (ReadablePartial) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      int int0 = dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength();
      assertEquals(32, int0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      Integer integer0 = new Integer((-1121));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-1121), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1822L, (Chronology) null, locale0, integer0, (-1121));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals((-1121), (int)dateTimeParserBucket0.getPivotYear());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      int int1 = 76;
      // Undeclared exception!
      try { 
        stringBuffer0.deleteCharAt(76);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 76
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 756, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimePrinter0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(756, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeParser0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(756, dateTimeParser0.estimateParsedLength());
      
      dateTimeParserArray0[0] = dateTimeParser0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimePrinter0, dateTimeParserArray0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals(1, dateTimeParserArray0.length);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(756, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(1, dateTimeParserArray0.length);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(756, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendMinuteOfDay(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(1, dateTimeParserArray0.length);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(756, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendClockhourOfHalfday(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(1, dateTimeParserArray0.length);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(756, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendSecondOfDay(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(1, dateTimeParserArray0.length);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(756, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder3.appendSecondOfDay(3280);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals(1, dateTimeParserArray0.length);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(756, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendYearOfEra(3280, 0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder7);
      assertEquals(1, dateTimeParserArray0.length);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(756, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(756, dateTimePrinter0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendSecondOfDay((-2874));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      int int0 = (-984);
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, (-984), false);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals((-984), dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals((-984), dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      String string0 = "+WMd@X laJlNCs";
      // Undeclared exception!
      try { 
        DateTimeZone.forID("+WMd@X laJlNCs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+WMd@X laJlNCs\" is malformed at \"WMd@X laJlNCs\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 461;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(461);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendFixedDecimal((DateTimeFieldType) null, 461);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, 23);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTwoDigitWeekyear(23);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendMinuteOfHour(23);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendClockhourOfHalfday(23);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Set<Map.Entry<String, DateTimeZone>> set0 = (Set<Map.Entry<String, DateTimeZone>>)hashMap0.entrySet();
      assertNotNull(set0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendDayOfWeekShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("-+%.&LCc!$");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      int int0 = dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength();
      assertEquals(10, int0);
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(23));
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertFalse(linkedList0.contains(23));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "-+%.&LCc!$");
      assertNotNull(stringBuilder0);
      assertEquals("-+%.&LCc!$", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(10);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("-+%.&LCc!$\n", stringBuilder0.toString());
      assertEquals("-+%.&LCc!$\n", stringBuilder1.toString());
      
      // Undeclared exception!
      try { 
        stringBuilder1.insert(785, 'r');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendWeekOfWeekyear(485);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of((InternalPrinter) null);
      assertNull(dateTimePrinter0);
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeParser0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeParser0.estimateParsedLength());
      
      dateTimeParserArray0[0] = dateTimeParser0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.append((DateTimePrinter) null, dateTimeParserArray0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(1, dateTimeParserArray0.length);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(1, dateTimeParserArray0.length);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendCenturyOfEra(485, 123);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(1, dateTimeParserArray0.length);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendDayOfMonth(123);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals(1, dateTimeParserArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      int int0 = (-912);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-912), (-912));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-912), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-912), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      dateTimeFormatterBuilder_Fraction0.iMaxDigits = (-912);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-912), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-912), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      StringBuffer stringBuffer1 = stringBuffer0.append((String) null);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals("null", stringBuffer0.toString());
      assertEquals(4, stringBuffer0.length());
      assertEquals(4, stringBuffer1.length());
      assertEquals("null", stringBuffer1.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      dateTimeFormatterBuilder_Fraction0.printTo((Appendable) stringBuffer1, (long) (-912), (Chronology) gJChronology0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-912), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-912), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(5, stringBuffer0.length());
      assertEquals("null0", stringBuffer0.toString());
      assertEquals(5, stringBuffer1.length());
      assertEquals("null0", stringBuffer1.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneId();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      int int1 = 4;
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFractionOfSecond(4, 4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      int int2 = 1682;
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendMillisOfDay(1682);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      try { 
        DateTimeZone.forOffsetHours(1682);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 1682
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 23, 23);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'j';
      charArray0[2] = 'T';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'>', 'j', 'T'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(">jT", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.limit());
      
      CharBuffer charBuffer1 = charBuffer0.put('T');
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertArrayEquals(new char[] {'T', 'j', 'T'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("jT", charBuffer0.toString());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer1.limit());
      assertEquals("jT", charBuffer1.toString());
      assertEquals(2, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1, charBuffer1.position());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(2, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(3, charBuffer1.capacity());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Fraction0.printTo((Appendable) charBuffer1, (long) 23, (Chronology) islamicChronology0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      assertNotNull(millisDurationField0);
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      
      UnsupportedDateTimeField unsupportedDateTimeField0 = UnsupportedDateTimeField.getInstance(dateTimeFieldType0, millisDurationField0);
      assertNotNull(unsupportedDateTimeField0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("era", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      
      DateTimeFieldType dateTimeFieldType1 = unsupportedDateTimeField0.getType();
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("era", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("era", dateTimeFieldType1.getName());
      assertEquals("era", dateTimeFieldType1.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType1, 0, 0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("era", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("era", dateTimeFieldType1.getName());
      assertEquals("era", dateTimeFieldType1.toString());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_Fraction0);
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimePrinter0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("era", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("era", dateTimeFieldType1.getName());
      assertEquals("era", dateTimeFieldType1.toString());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_Fraction0);
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeParser0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("era", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("era", dateTimeFieldType1.getName());
      assertEquals("era", dateTimeFieldType1.toString());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("era", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("era", dateTimeFieldType1.getName());
      assertEquals("era", dateTimeFieldType1.toString());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimePrinter0.estimatePrintedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("era", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("era", dateTimeFieldType1.getName());
      assertEquals("era", dateTimeFieldType1.toString());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimePrinter0.estimatePrintedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      DateTimeZone dateTimeZone0 = dateTimeFormatter1.getZone();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertSame(dateTimeFieldType0, dateTimeFieldType1);
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNull(dateTimeZone0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isSupported());
      assertTrue(millisDurationField0.isPrecise());
      assertFalse(unsupportedDateTimeField0.isSupported());
      assertEquals("era", unsupportedDateTimeField0.getName());
      assertEquals("UnsupportedDateTimeField", unsupportedDateTimeField0.toString());
      assertFalse(unsupportedDateTimeField0.isLenient());
      assertEquals("era", dateTimeFieldType1.getName());
      assertEquals("era", dateTimeFieldType1.toString());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimePrinter0.estimatePrintedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      assertNotNull(gregorianChronology0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_Fraction0.printTo((Appendable) null, 0L, (Chronology) gregorianChronology0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(525, 525);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendDecimal(dateTimeFieldType0, 0, (-1928));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 50;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(50, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      int int1 = 213;
      Integer integer0 = new Integer(213);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(213, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(50, gregorianChronology0, (Locale) null, integer0, 213);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(213, (int)dateTimeParserBucket0.getPivotYear());
      
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(dateTimeZone0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(213, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      String string0 = dateTimeZone0.getNameKey(50);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(string0);
      assertEquals("UTC", string0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(213, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(213, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone(dateTimeZone0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(213, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Integer integer1 = Integer.getInteger((String) null, integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(213, (int)integer1);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TimeZoneName0.printTo((Appendable) null, (long) 50, (Chronology) copticChronology1, (-2270), dateTimeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      int int0 = 178958986;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", false, 178958986, 178958986);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      int int1 = dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength();
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      assertEquals(10, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfDay(178958986);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      int int2 = (-2461);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendDayOfMonth((-2461));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "No parsers supplied");
      assertFalse(boolean0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(65533, 65533);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder1.appendEraText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder1.appendTimeZoneOffset("", false, 65533, 65533);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder1.appendYear(65533, 65533);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder5);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendClockhourOfHalfday(65533);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder6);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder4.appendTwoDigitWeekyear(65533, false);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertNotNull(dateTimeFormatterBuilder7);
      
      boolean boolean1 = dateTimeFormatterBuilder4.canBuildFormatter();
      assertFalse(boolean1 == boolean0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertTrue(boolean1);
      
      int int0 = (-374);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder7.appendFractionOfHour((-374), 3470);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("org.joda.time.field.TestPreciseDateTimeField$MockStandardDateTimeField");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(70, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(70, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral1 = new DateTimeFormatterBuilder.StringLiteral("");
      assertFalse(dateTimeFormatterBuilder_StringLiteral1.equals((Object)dateTimeFormatterBuilder_StringLiteral0));
      assertNotNull(dateTimeFormatterBuilder_StringLiteral1);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral1.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneId();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      
      int int0 = (-808);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfHalfday();
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertEquals("clockhourOfHalfday", dateTimeFieldType1.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType1.toString());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType1.getRangeDurationType();
      assertSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(durationFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType1.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType1.toString());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType1, (-808), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfDay(9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      int int0 = (-89);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendDayOfWeek((-89));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      int int0 = (-156);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendClockhourOfHalfday((-156));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 1660;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("\"", "", true, 1660, 2002);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength());
      assertEquals(13, dateTimeFormatterBuilder_TimeZoneOffset0.estimatePrintedLength());
      
      Appendable appendable0 = null;
      long long0 = 0L;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      // Undeclared exception!
      try { 
        DateTimeZone.forID("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('m');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      StringWriter stringWriter0 = new StringWriter(1917);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      charArray0[5] = 'm';
      charArray0[6] = 'm';
      charArray0[7] = 'm';
      charArray0[8] = 'm';
      StringBuffer stringBuffer1 = stringBuffer0.append(charArray0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertArrayEquals(new char[] {'m', 'm', 'm', 'm', 'm', 'm', 'm', 'm', 'm'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("mmmmmmmmm", stringWriter0.toString());
      assertEquals("mmmmmmmmm", stringBuffer0.toString());
      assertEquals(9, stringBuffer0.length());
      assertEquals(9, stringBuffer1.length());
      assertEquals("mmmmmmmmm", stringBuffer1.toString());
      
      StringBuffer stringBuffer2 = stringBuffer1.insert(0, 'm');
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertNotNull(stringBuffer2);
      assertArrayEquals(new char[] {'m', 'm', 'm', 'm', 'm', 'm', 'm', 'm', 'm'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("mmmmmmmmmm", stringWriter0.toString());
      assertEquals("mmmmmmmmmm", stringBuffer0.toString());
      assertEquals(10, stringBuffer0.length());
      assertEquals("mmmmmmmmmm", stringBuffer1.toString());
      assertEquals(10, stringBuffer1.length());
      assertEquals("mmmmmmmmmm", stringBuffer2.toString());
      assertEquals(10, stringBuffer2.length());
      
      StringBuffer stringBuffer3 = stringBuffer2.append("org.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear");
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer3);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer3);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer3, stringBuffer2);
      assertSame(stringBuffer3, stringBuffer0);
      assertSame(stringBuffer3, stringBuffer1);
      assertNotNull(stringBuffer3);
      assertArrayEquals(new char[] {'m', 'm', 'm', 'm', 'm', 'm', 'm', 'm', 'm'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("mmmmmmmmmmorg.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", stringWriter0.toString());
      assertEquals("mmmmmmmmmmorg.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", stringBuffer0.toString());
      assertEquals(68, stringBuffer0.length());
      assertEquals(68, stringBuffer1.length());
      assertEquals("mmmmmmmmmmorg.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", stringBuffer1.toString());
      assertEquals("mmmmmmmmmmorg.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", stringBuffer2.toString());
      assertEquals(68, stringBuffer2.length());
      assertEquals("mmmmmmmmmmorg.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", stringBuffer3.toString());
      assertEquals(68, stringBuffer3.length());
      
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto((DateTimeParserBucket) null, stringBuffer3, 0);
      assertSame(stringBuffer0, stringBuffer2);
      assertSame(stringBuffer0, stringBuffer3);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer3);
      assertSame(stringBuffer1, stringBuffer2);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer3);
      assertSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      assertSame(stringBuffer3, stringBuffer2);
      assertSame(stringBuffer3, stringBuffer0);
      assertSame(stringBuffer3, stringBuffer1);
      assertArrayEquals(new char[] {'m', 'm', 'm', 'm', 'm', 'm', 'm', 'm', 'm'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(1, int0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals("mmmmmmmmmmorg.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", stringWriter0.toString());
      assertEquals("mmmmmmmmmmorg.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", stringBuffer0.toString());
      assertEquals(68, stringBuffer0.length());
      assertEquals(68, stringBuffer1.length());
      assertEquals("mmmmmmmmmmorg.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", stringBuffer1.toString());
      assertEquals("mmmmmmmmmmorg.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", stringBuffer2.toString());
      assertEquals(68, stringBuffer2.length());
      assertEquals("mmmmmmmmmmorg.joda.time.format.DateTimeFormatterBuilder$TwoDigitYear", stringBuffer3.toString());
      assertEquals(68, stringBuffer3.length());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      int int0 = dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength();
      assertEquals(32, int0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      
      DateTimeFormatterBuilder.TimeZoneId[] dateTimeFormatterBuilder_TimeZoneIdArray0 = DateTimeFormatterBuilder.TimeZoneId.values();
      assertNotNull(dateTimeFormatterBuilder_TimeZoneIdArray0);
      assertEquals(1, dateTimeFormatterBuilder_TimeZoneIdArray0.length);
      
      int int1 = 643;
      StringBuilder stringBuilder0 = new StringBuilder(643);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      char char0 = '-';
      charArray0[1] = '-';
      // Undeclared exception!
      try { 
        stringBuilder0.insert(643, charArray0, 643, 643);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 643
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 1518;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfMinute(1518, 1518);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of((InternalPrinter) null);
      assertNull(dateTimePrinter0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.append((DateTimePrinter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 733;
      int int1 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekyear(733, 0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendLiteral("Field type must not be null");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of((InternalPrinter) null);
      assertNull(dateTimePrinter0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.append((DateTimePrinter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 1820, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1820, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(1820, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 1858;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1858);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.858", dateTimeZone0.toString());
      assertEquals("+00:00:01.858", dateTimeZone0.getID());
      
      long long0 = 2301L;
      boolean boolean0 = dateTimeZone0.isStandardOffset(2301L);
      assertTrue(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.858", dateTimeZone0.toString());
      assertEquals("+00:00:01.858", dateTimeZone0.getID());
      
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      assertFalse(chronology0.equals((Object)gJChronology0));
      assertNotSame(gJChronology0, chronology0);
      assertNotSame(chronology0, gJChronology0);
      assertNotNull(chronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.858", dateTimeZone0.toString());
      assertEquals("+00:00:01.858", dateTimeZone0.getID());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1820, chronology0, locale0, (Integer) null, 1858);
      assertFalse(gJChronology0.equals((Object)chronology0));
      assertFalse(chronology0.equals((Object)gJChronology0));
      assertNotNull(dateTimeParserBucket0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:01.858", dateTimeZone0.toString());
      assertEquals("+00:00:01.858", dateTimeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertFalse(gJChronology0.equals((Object)chronology0));
      assertNotSame(gJChronology0, chronology0);
      assertNotNull(dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_UnpaddedNumber0.parseInto(dateTimeParserBucket0, (CharSequence) null, 1858);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DateTimeFormatterBuilder.appendUnknownString((Appendable) null, (-427));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-3280);
      int int1 = 48;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFractionOfMinute((-3280), 48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, false);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      DateTimeParserBucket dateTimeParserBucket0 = null;
      String string0 = "9{V/$/Id-Ao0TR";
      StringBuilder stringBuilder0 = new StringBuilder("9{V/$/Id-Ao0TR");
      assertNotNull(stringBuilder0);
      assertEquals("9{V/$/Id-Ao0TR", stringBuilder0.toString());
      
      int int0 = (-12);
      Object object0 = new Object();
      assertNotNull(object0);
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimePrinter0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeParser0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimePrinter0.estimatePrintedLength());
      assertEquals(20, dateTimeParser0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-12));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.012", dateTimeZone0.toString());
      assertEquals("-00:00:00.012", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("-00:00:00.012", dateTimeZone0.toString());
      assertEquals("-00:00:00.012", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(zonedChronology0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(20, dateTimePrinter0.estimatePrintedLength());
      assertEquals(20, dateTimeParser0.estimateParsedLength());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("-00:00:00.012", dateTimeZone0.toString());
      assertEquals("-00:00:00.012", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      // Undeclared exception!
      try { 
        dateTimeFormatter1.parseLocalTime("0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      
      long long0 = (-2067L);
      Chronology chronology0 = null;
      String string0 = "I";
      Locale locale0 = new Locale("I", "I");
      assertNotNull(locale0);
      assertEquals("i", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("i_I", locale0.toString());
      assertEquals("I", locale0.getCountry());
      
      int int0 = 130;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "I");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertEquals("I", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      Integer integer0 = new Integer(1665);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1665, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0L, (Chronology) null, locale0, integer0, 3009);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals("i", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("i_I", locale0.toString());
      assertEquals("I", locale0.getCountry());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1665, (int)dateTimeParserBucket0.getPivotYear());
      
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(dateTimeZone0);
      assertEquals("i", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("i_I", locale0.toString());
      assertEquals("I", locale0.getCountry());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1665, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      Locale locale1 = Locale.UK;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder_TextField0.printTo((Appendable) charBuffer0, 760L, (Chronology) null, 3009, dateTimeZone0, locale1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('1');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
      assertEquals(1, int0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.append((DateTimeFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendLiteral("");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      
      int int0 = (-1798);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder3.appendWeekOfWeekyear((-1798));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendHourOfHalfday(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      int int0 = 2443;
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendYearOfCentury(0, 2443);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendYear(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of((InternalPrinter) null);
      assertNull(dateTimePrinter0);
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('R');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeParser0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFixedDecimal(dateTimeFieldType0, 1961);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendTimeZoneOffset("vJ~#C32E+Tk90]9", "%[hNl-C", false, 0, 2976);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      boolean boolean0 = dateTimeFormatterBuilder_Composite0.isParser();
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildParser();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral('r');
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append(dateTimeFormatter0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendHourOfHalfday(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDayOfMonth(58);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendFractionOfHour(0, 50);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder5.appendWeekyear((-2958), 2808);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 5117;
      String string0 = "org.joda.time.MockPartial";
      // Undeclared exception!
      try { 
        DateTimeFormatterBuilder.csStartsWith((CharSequence) null, 5117, "org.joda.time.MockPartial");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = (-1417);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-1417), hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int1 = (-1370);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendMinuteOfDay((-1370));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of((InternalParser) null);
      assertNull(dateTimeParser0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendOptional((DateTimeParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No parser supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 74;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYear(74, 175);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendMonthOfYear(175);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder1.appendMillisOfDay(74);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      String string0 = dateTimeZone0.getNameKey((-999L));
      assertNotNull(string0);
      assertEquals("UTC", string0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Chronology chronology0 = zonedChronology0.withZone(dateTimeZone0);
      assertSame(zonedChronology0, chronology0);
      assertSame(chronology0, zonedChronology0);
      assertNotNull(chronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0);
      assertSame(zonedChronology0, chronology0);
      assertSame(chronology0, zonedChronology0);
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 175, false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder3.appendSecondOfMinute((-955));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      int int0 = dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
      assertEquals(0, int0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)ethiopicChronology0.withUTC();
      assertFalse(ethiopicChronology1.equals((Object)ethiopicChronology0));
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(ethiopicChronology1, ethiopicChronology0);
      assertNotNull(ethiopicChronology1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      String string0 = "CST";
      Locale locale0 = null;
      try {
        locale0 = new Locale("CST", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendMillisOfDay((-13));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-1911);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFractionOfSecond((-1911), (-1911));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 1201, false, 0);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(1201, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(1201, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1201);
      assertNotNull(charBuffer0);
      assertEquals(1201, charBuffer0.remaining());
      assertEquals(1201, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1201, charBuffer0.length());
      assertEquals(1201, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      
      CharBuffer charBuffer1 = charBuffer0.slice();
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertEquals(1201, charBuffer0.remaining());
      assertEquals(1201, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1201, charBuffer0.length());
      assertEquals(1201, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertEquals(1201, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1201, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1201, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1201, charBuffer1.remaining());
      
      CharBuffer charBuffer2 = charBuffer1.asReadOnlyBuffer();
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer2);
      assertEquals(1201, charBuffer0.remaining());
      assertEquals(1201, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1201, charBuffer0.length());
      assertEquals(1201, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertEquals(1201, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1201, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1201, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1201, charBuffer1.remaining());
      assertTrue(charBuffer2.isReadOnly());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals(1201, charBuffer2.capacity());
      assertEquals(1201, charBuffer2.remaining());
      assertEquals(1201, charBuffer2.limit());
      assertFalse(charBuffer2.hasArray());
      assertFalse(charBuffer2.isDirect());
      assertEquals(1201, charBuffer2.length());
      assertEquals(0, charBuffer2.position());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Chronology chronology0 = zonedChronology0.withZone(dateTimeZone0);
      assertSame(zonedChronology0, chronology0);
      assertSame(chronology0, zonedChronology0);
      assertNotNull(chronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(chronology0);
      assertSame(zonedChronology0, chronology0);
      assertSame(chronology0, zonedChronology0);
      assertNotNull(strictChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(0, chronology0, locale0, integer0, 1201);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(0, (int)dateTimeParserBucket0.getPivotYear());
      
      Locale locale1 = dateTimeParserBucket0.getLocale();
      assertSame(zonedChronology0, chronology0);
      assertSame(chronology0, zonedChronology0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(0, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
      
      dateTimeFormatterBuilder_PaddedNumber0.printTo((Appendable) charBuffer2, (long) 1201, (Chronology) strictChronology0, 0, dateTimeZone0, locale1);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer0.equals((Object)charBuffer2));
      assertTrue(charBuffer1.equals((Object)charBuffer2));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertSame(zonedChronology0, chronology0);
      assertSame(chronology0, zonedChronology0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(1201, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(1201, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(1201, charBuffer0.remaining());
      assertEquals(1201, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1201, charBuffer0.length());
      assertEquals(1201, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertEquals(1201, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1201, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1201, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1201, charBuffer1.remaining());
      assertTrue(charBuffer2.isReadOnly());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals(1201, charBuffer2.capacity());
      assertEquals(1201, charBuffer2.remaining());
      assertEquals(1201, charBuffer2.limit());
      assertFalse(charBuffer2.hasArray());
      assertFalse(charBuffer2.isDirect());
      assertEquals(1201, charBuffer2.length());
      assertEquals(0, charBuffer2.position());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(0, (int)dateTimeParserBucket0.getPivotYear());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('c');
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength();
      assertEquals(1, int0);
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      assertNotNull(gJChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gJChronology0);
      assertNotNull(lenientChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      Integer integer0 = Integer.valueOf(1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(1, lenientChronology0, locale0, integer0, 1);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(dateTimeParserBucket0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      assertEquals(1, (int)dateTimeParserBucket0.getPivotYear());
      
      StringBuffer stringBuffer0 = new StringBuffer("2002-06-09T05:00:00.000+01:00");
      assertNotNull(stringBuffer0);
      assertEquals("2002-06-09T05:00:00.000+01:00", stringBuffer0.toString());
      assertEquals(29, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) stringBuffer0, 3063, 3063);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendFractionOfHour((-625), (-625));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 9;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfMinute(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendDayOfMonth(9);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendShortText((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      int int0 = (-522);
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendYear(3792, (-522));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendShortText((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendDecimal(dateTimeFieldType0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      int int0 = 0;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(12345678L, gregorianChronology0, (Locale) null, (Integer) null, 0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      int int1 = 0;
      int int2 = dateTimeFormatterBuilder_StringLiteral0.parseInto(dateTimeParserBucket0, "", 0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNull(dateTimeParserBucket0.getPivotYear());
      assertNull(dateTimeParserBucket0.getOffsetInteger());
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
      try {
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("{25%iCa6zy/[c", "", false, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral((String) null);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_StringLiteral0, dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimeFormatter0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[0];
      int int0 = 0;
      MockZone mockZone0 = new MockZone(0L, 0, 0);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      
      // Undeclared exception!
      try { 
        Instant.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) null);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeek(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      int int0 = (-778);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder3.appendFixedDecimal(dateTimeFieldType0, (-778));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -778
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      boolean boolean0 = dateTimeFieldType0.isSupported((Chronology) null);
      assertTrue(boolean0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      int int0 = 0;
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 0, false, 0);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime(31083663600000L, (Chronology) null);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Locale locale0 = new Locale("<xQ[tlE.R{r2o!a3:[J", "Ihx;o", "<xQ[tlE.R{r2o!a3:[J");
      assertNotNull(locale0);
      assertEquals("<xq[tle.r{r2o!a3:[j_IHX;O_<xQ[tlE.R{r2o!a3:[J", locale0.toString());
      assertEquals("<xq[tle.r{r2o!a3:[j", locale0.getLanguage());
      assertEquals("IHX;O", locale0.getCountry());
      assertEquals("<xQ[tlE.R{r2o!a3:[J", locale0.getVariant());
      
      dateTimeFormatterBuilder_PaddedNumber0.printTo((Appendable) null, (ReadablePartial) localDateTime0, locale0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(4, localDateTime0.size());
      assertEquals("<xq[tle.r{r2o!a3:[j_IHX;O_<xQ[tlE.R{r2o!a3:[J", locale0.toString());
      assertEquals("<xq[tle.r{r2o!a3:[j", locale0.getLanguage());
      assertEquals("IHX;O", locale0.getCountry());
      assertEquals("<xQ[tlE.R{r2o!a3:[J", locale0.getVariant());
      
      int int1 = dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int2 = 45;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendTimeZoneOffset(", ", "pB_}^Ulr", false, 0, 45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      
      int int0 = (-1608);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendFixedDecimal(dateTimeFieldType0, (-1608));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -1608
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(0, false);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendMonthOfYear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendSignedDecimal(dateTimeFieldType0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendCenturyOfEra(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      String string0 = "]9~u\\_Zv~";
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendPattern("]9~u_Zv~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(915, 915);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendMonthOfYearText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder1.appendTimeZoneOffset("`>u 0P:aIu", "PeriodFormat.milliseconds.regex", false, 915, 915);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder2.appendMinuteOfDay(915);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      
      int int0 = (-2387);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendMinuteOfHour((-2387));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 898, true);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(898, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(898, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      boolean boolean0 = linkedList0.add((Object) dateTimeFormatterBuilder_FixedNumber0);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(898));
      assertEquals(1, linkedList0.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(898, dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength());
      assertEquals(898, dateTimeFormatterBuilder_FixedNumber0.estimateParsedLength());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = null;
      try {
        dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InternalParser[] internalParserArray0 = new InternalParser[3];
      int int0 = 0;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      
      internalParserArray0[0] = (InternalParser) dateTimeFormatterBuilder_TimeZoneName0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      int int1 = 46;
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 46, false, 0);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(46, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(46, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      
      internalParserArray0[1] = (InternalParser) dateTimeFormatterBuilder_PaddedNumber0;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 46, false);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength());
      assertEquals(2, dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength());
      
      internalParserArray0[2] = (InternalParser) dateTimeFormatterBuilder_TwoDigitYear0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(internalParserArray0);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(3, internalParserArray0.length);
      assertEquals(46, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      int int2 = dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(3, internalParserArray0.length);
      assertEquals(46, int2);
      assertEquals(46, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
      
      int int3 = 99;
      StringBuffer stringBuffer0 = new StringBuffer(99);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        stringBuffer0.insert(46, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 46
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfMonth(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      int int1 = 5;
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFractionOfDay(5, 0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      int int2 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMinuteOfDay(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendDayOfWeekShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder5.toFormatter();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      String string0 = "Y{>}:LJk/:7EM4$";
      // Undeclared exception!
      try { 
        DateTimeFormatterBuilder.TimeZoneId.valueOf("Y{>}:LJk/:7EM4$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId.Y{>}:LJk/:7EM4$
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfDay(592);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendMonthOfYearShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.PaddedNumber dateTimeFormatterBuilder_PaddedNumber0 = new DateTimeFormatterBuilder.PaddedNumber(dateTimeFieldType0, 44, true, 676);
      assertNotNull(dateTimeFormatterBuilder_PaddedNumber0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(44, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(44, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_PaddedNumber0);
      assertNotNull(dateTimeParser0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(44, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(44, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(44, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.append(dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(44, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(44, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(44, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendFractionOfDay(0, 303);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(44, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(44, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(44, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendTwoDigitYear(676);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(44, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(44, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(44, dateTimeParser0.estimateParsedLength());
      
      boolean boolean0 = dateTimeFormatterBuilder5.canBuildFormatter();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertTrue(boolean0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(44, dateTimeFormatterBuilder_PaddedNumber0.estimatePrintedLength());
      assertEquals(44, dateTimeFormatterBuilder_PaddedNumber0.estimateParsedLength());
      assertEquals(44, dateTimeParser0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFractionOfDay(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("U'xiCJy8B:QJ%4i");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      int int0 = dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength();
      assertEquals(16, int0);
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(16, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(3, 0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendPattern("");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder1.appendPattern("x");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendHourOfDay(857);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      
      int int1 = (-1);
      DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder3.toFormatter();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatter0);
      assertTrue(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendYearOfCentury((-1), 3454);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      String string0 = "No printer supplied";
      int int0 = 6602;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendTimeZoneOffset("No printer supplied", "No printer supplied", false, 6602, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfMonth(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFractionOfDay(5, 0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMinuteOfDay(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendDayOfWeekShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder5.toFormatter();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatter0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfDay(18);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTwoDigitWeekyear(2746, true);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_TimeZoneId0);
      assertNotNull(dateTimeParser0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      
      InternalParser internalParser0 = DateTimeParserInternalParser.of(dateTimeParser0);
      assertSame(dateTimeParser0, internalParser0);
      assertSame(internalParser0, dateTimeParser0);
      assertNotNull(internalParser0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      assertEquals(32, internalParser0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_TimeZoneId0, internalParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      assertEquals(32, internalParser0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      DateTimeParser dateTimeParser1 = dateTimeFormatter0.getParser();
      assertSame(dateTimeParser0, internalParser0);
      assertSame(dateTimeParser0, dateTimeParser1);
      assertSame(internalParser0, dateTimeParser1);
      assertSame(internalParser0, dateTimeParser0);
      assertSame(dateTimeParser1, dateTimeParser0);
      assertSame(dateTimeParser1, internalParser0);
      assertNotNull(dateTimeParser1);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      assertEquals(32, internalParser0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(32, dateTimeParser1.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.append(dateTimeParser1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeParser0, internalParser0);
      assertSame(dateTimeParser0, dateTimeParser1);
      assertSame(internalParser0, dateTimeParser1);
      assertSame(internalParser0, dateTimeParser0);
      assertSame(dateTimeParser1, dateTimeParser0);
      assertSame(dateTimeParser1, internalParser0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      assertEquals(32, internalParser0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(32, dateTimeParser1.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendHourOfDay(2746);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeParser0, internalParser0);
      assertSame(dateTimeParser0, dateTimeParser1);
      assertSame(internalParser0, dateTimeParser1);
      assertSame(internalParser0, dateTimeParser0);
      assertSame(dateTimeParser1, dateTimeParser0);
      assertSame(dateTimeParser1, internalParser0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      assertEquals(32, internalParser0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(32, dateTimeParser1.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendPattern("");
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeParser0, internalParser0);
      assertSame(dateTimeParser0, dateTimeParser1);
      assertSame(internalParser0, dateTimeParser1);
      assertSame(internalParser0, dateTimeParser0);
      assertSame(dateTimeParser1, dateTimeParser0);
      assertSame(dateTimeParser1, internalParser0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      assertEquals(32, internalParser0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(32, dateTimeParser1.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendFractionOfHour(2746, 99);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeParser0, internalParser0);
      assertSame(dateTimeParser0, dateTimeParser1);
      assertSame(internalParser0, dateTimeParser1);
      assertSame(internalParser0, dateTimeParser0);
      assertSame(dateTimeParser1, dateTimeParser0);
      assertSame(dateTimeParser1, internalParser0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimatePrintedLength());
      assertEquals(32, dateTimeFormatterBuilder_TimeZoneId0.estimateParsedLength());
      assertEquals(32, dateTimeParser0.estimateParsedLength());
      assertEquals(32, internalParser0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertTrue(dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(32, dateTimeParser1.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendYearOfCentury(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 35;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfMinute(35, 35);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFractionOfHour(1608, 58);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendHourOfDay(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMillisOfSecond(58);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendFixedSignedDecimal(dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: 0
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 100);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      int int0 = dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
      assertEquals(18, int0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals(18, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFractionOfMinute(18, 0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendHourOfHalfday(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDayOfMonth(100);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendFractionOfDay((-2654), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      int int0 = (-3419);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendFractionOfDay((-7), (-3419));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 588;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(588, true);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFixedSignedDecimal(dateTimeFieldType0, 21);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendYear((-3094), 21);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 0, false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength();
      assertEquals(0, int0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = null;
      try {
        dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneOffset("&Y&@8LPqK-c#7^|v", false, 643, 643);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFractionOfSecond(44, 0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneId();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTwoDigitYear(1460, true);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendYearOfEra(1460, 44);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder5);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder5.appendTimeZoneOffset("&Y&@8LPqK-c#7^|v", "vy=NCW", true, 643, (-2062));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      int int0 = 34;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendYearOfEra((-1131), 34);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendWeekyear(1943, (-662));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendClockhourOfHalfday(337);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of((InternalPrinter) null);
      assertNull(dateTimePrinter0);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("\uFFFD");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeParser0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.append(dateTimeFormatter0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      assertEquals(1, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(1, dateTimeParser0.estimateParsedLength());
      assertFalse(dateTimeFormatter0.isPrinter());
      assertTrue(dateTimeFormatter0.isParser());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder5.appendMonthOfYear((-662));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 553;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber((DateTimeFieldType) null, 553, false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals(553, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(553, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimePrinter0);
      assertEquals(553, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(553, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(553, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeParser0);
      assertEquals(553, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(553, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(553, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append(dateTimePrinter0, dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals(553, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(553, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(553, dateTimePrinter0.estimatePrintedLength());
      assertEquals(553, dateTimeParser0.estimateParsedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendFixedSignedDecimal((DateTimeFieldType) null, 553);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfHour(15271875, 4900);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(4900));
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertFalse(linkedList0.contains(4900));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimePrinter0);
      assertFalse(linkedList0.contains(4900));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeParser0);
      assertFalse(linkedList0.contains(4900));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append(dateTimePrinter0, dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertFalse(linkedList0.contains(4900));
      assertEquals(0, linkedList0.size());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimateParsedLength());
      assertEquals(0, dateTimeFormatterBuilder_Composite0.estimatePrintedLength());
      assertEquals(0, dateTimePrinter0.estimatePrintedLength());
      assertEquals(0, dateTimeParser0.estimateParsedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendFractionOfSecond((-559), (-559));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = (-1391);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-1391), hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder3.appendYearOfEra((-568), (-1391));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(1974);
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendMinuteOfHour(1974);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendEraText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendMillisOfDay((-1212));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendClockhourOfHalfday(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendFractionOfSecond(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFraction(dateTimeFieldType0, 1000, (-934));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitYear(1000);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDayOfWeek(1000);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendTimeZoneOffset("bce", (String) null, true, 160, 1000);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder5);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendMinuteOfDay(160);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder6);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendSecondOfDay(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      
      int int0 = (-75);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendFraction(dateTimeFieldType0, 0, (-75));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, true);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("-$^::)]w+\"Q", true);
      assertNotNull(mockFileWriter0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("-$^::)]w+\"Q");
      assertNull(dateTimeZone0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      dateTimeFormatterBuilder_TextField0.printTo((Appendable) mockFileWriter0, 968L, (Chronology) buddhistChronology0, 1, (DateTimeZone) null, locale0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimateParsedLength());
      assertEquals(6, dateTimeFormatterBuilder_TextField0.estimatePrintedLength());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 1939, false);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1939, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(1939, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(1939, (-771));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertNotNull(dateTimeParser0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1939, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(1939, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(1939, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendOptional(dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1939, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(1939, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      assertEquals(1939, dateTimeParser0.estimateParsedLength());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendSecondOfMinute((-1418));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
      try {
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("7[~ET{LyG@kr*RHD", "7[~ET{LyG@kr*RHD", false, (-1869), 1520);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int0 = (-1813);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendDayOfYear((-1813));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-1361);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendCenturyOfEra((-1361), (-1361));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 0;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      
      int int1 = dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength();
      assertFalse(int1 == int0);
      assertEquals(20, int1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(0, true);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendTimeZoneOffset("", "", true, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfMonth(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(3447, (Map<String, DateTimeZone>) null);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimePrinter0);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append(dateTimePrinter0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitYear((-1911));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimePrinter0.estimatePrintedLength());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 3447, (-1911));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-1911), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1911), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-1911), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1911), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.append(dateTimeFormatter0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimePrinter0.estimatePrintedLength());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-1911), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1911), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendTimeZoneName((Map<String, DateTimeZone>) null);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      assertEquals(20, dateTimePrinter0.estimatePrintedLength());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals((-1911), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-1911), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeFormatter0.getPivotYear());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, 9, true);
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(9, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(9, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      int int0 = dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength();
      assertEquals(9, int0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(9, dateTimeFormatterBuilder_UnpaddedNumber0.estimateParsedLength());
      assertEquals(9, dateTimeFormatterBuilder_UnpaddedNumber0.estimatePrintedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear(168);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFractionOfHour(121, 0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendMinuteOfHour(2533);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYearText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendMillisOfSecond((-232));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      int int0 = 304;
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFractionOfMinute(304, 304);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendFixedSignedDecimal(dateTimeFieldType0, (-1080));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: -1080
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendShortText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitYear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDecimal(dateTimeFieldType0, 0, 292272984);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendFractionOfHour(292272984, 724);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendDecimal(dateTimeFieldType0, 160, 160);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder6);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      boolean boolean0 = dateTimeFormatterBuilder1.canBuildParser();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertTrue(boolean0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 121;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekyear(121, 5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendDayOfYear(1656);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendPattern("org.joda.time.format.DateTimeFormatterBuilder$TextField");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendMinuteOfHour((-1031));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneId();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      int int0 = (-3626);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder2.appendCenturyOfEra((-3626), 771);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("BCE");
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      int int0 = dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength();
      assertEquals(3, int0);
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimateParsedLength());
      assertEquals(3, dateTimeFormatterBuilder_StringLiteral0.estimatePrintedLength());
      
      InternalParser[] internalParserArray0 = new InternalParser[5];
      internalParserArray0[0] = (InternalParser) dateTimeFormatterBuilder_StringLiteral0;
      internalParserArray0[1] = (InternalParser) dateTimeFormatterBuilder_StringLiteral0;
      internalParserArray0[2] = (InternalParser) dateTimeFormatterBuilder_StringLiteral0;
      internalParserArray0[3] = (InternalParser) dateTimeFormatterBuilder_StringLiteral0;
      internalParserArray0[4] = (InternalParser) dateTimeFormatterBuilder_StringLiteral0;
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(internalParserArray0);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      assertEquals(5, internalParserArray0.length);
      assertEquals(3, dateTimeFormatterBuilder_MatchingParser0.estimateParsedLength());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      int int0 = 619;
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, (-2013), 619);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekOfWeekyear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      int int0 = (-98);
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTwoDigitWeekyear((-98), true);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendDayOfWeekShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder3.appendTimeZoneOffset("", true, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName((-1391), hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimatePrintedLength());
      assertEquals(20, dateTimeFormatterBuilder_TimeZoneName0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendText(dateTimeFieldType0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder3.appendFractionOfSecond((-1391), (-3480));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
      try {
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset("", "", true, (-3077), (-90));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFractionOfSecond(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, (-4297), (-4297));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals((-4297), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-4297), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      long long0 = 1000000000000L;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4297), "[!'i.U954u", 0, 0, 564, 564, 564, 0, 0, 564, 564, (-567), 2915);
      assertNotNull(simpleTimeZone0);
      assertEquals((-4297), simpleTimeZone0.getRawOffset());
      assertEquals("[!'i.U954u", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=[!'i.U954u,offset=-4297,dstSavings=2915,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=564,startTime=564,startTimeMode=564,endMode=0,endMonth=0,endDay=0,endDayOfWeek=564,endTime=564,endTimeMode=-567]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '[!'i.U954u' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYear(0, 2781);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendMonthOfYear(76);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendWeekOfWeekyear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTwoDigitWeekyear(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendMillisOfDay(0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder5);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        DateTimeFormatterBuilder.TimeZoneId.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.joda.time.format.DateTimeFormatterBuilder.TimeZoneId.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 186;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendWeekyear(494, 186);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTwoDigitYear(556, true);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder3);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      int int1 = (-304);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 556, (-304));
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals((-304), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-304), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimeFormatterBuilder_Fraction0, dateTimeFormatterBuilder_Fraction0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals((-304), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-304), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter1);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals((-304), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-304), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withChronology(gregorianChronology0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeFormatter2);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals((-304), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-304), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      
      DateTimeParser dateTimeParser0 = dateTimeFormatter2.getParser();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotNull(dateTimeParser0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals((-304), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-304), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals((-304), dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendOptional(dateTimeParser0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder5);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals((-304), dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals((-304), dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertTrue(dateTimeFormatter0.isParser());
      assertFalse(dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(dateTimeFormatter0.getPivotYear());
      assertTrue(dateTimeFormatter0.isPrinter());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(dateTimeFormatter1.isOffsetParsed());
      assertTrue(dateTimeFormatter1.isParser());
      assertNull(dateTimeFormatter1.getPivotYear());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertTrue(dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertTrue(dateTimeFormatter2.isParser());
      assertFalse(dateTimeFormatter2.isOffsetParsed());
      assertNull(dateTimeFormatter2.getPivotYear());
      assertTrue(dateTimeFormatter2.isPrinter());
      assertEquals((-304), dateTimeParser0.estimateParsedLength());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        DateTimeZone.forID("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYear(10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendYear(10, 10);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormat.StyleFormatter dateTimeFormat_StyleFormatter0 = new DateTimeFormat.StyleFormatter((-1999), (-1999), (-1999));
      assertNotNull(dateTimeFormat_StyleFormatter0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormat_StyleFormatter0);
      assertNotNull(dateTimeParser0);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.append(dateTimeParser0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder3, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder3);
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimatePrintedLength());
      assertEquals(40, dateTimeFormat_StyleFormatter0.estimateParsedLength());
      assertEquals(40, dateTimeParser0.estimateParsedLength());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder1.appendSecondOfDay(3255);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder4, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder4);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new DateTimeFormatterBuilder();
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder3));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder4));
      assertNotNull(dateTimeFormatterBuilder5);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendMinuteOfDay(50);
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder3));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder4));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder4));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder3));
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder6);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder1.appendMillisOfSecond(2976);
      assertFalse(dateTimeFormatterBuilder0.equals((Object)dateTimeFormatterBuilder6));
      assertFalse(dateTimeFormatterBuilder0.equals((Object)dateTimeFormatterBuilder5));
      assertFalse(dateTimeFormatterBuilder1.equals((Object)dateTimeFormatterBuilder5));
      assertFalse(dateTimeFormatterBuilder1.equals((Object)dateTimeFormatterBuilder6));
      assertFalse(dateTimeFormatterBuilder7.equals((Object)dateTimeFormatterBuilder5));
      assertFalse(dateTimeFormatterBuilder7.equals((Object)dateTimeFormatterBuilder6));
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder3);
      assertNotSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder6);
      assertNotSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder6);
      assertNotSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder0);
      assertNotSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder7, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder7);
      
      dateTimeFormatterBuilder6.clear();
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder3));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder7));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder4));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder7));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder4));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder3));
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendText(dateTimeFieldType0);
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder3));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder7));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder4));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder7));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder4));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder3));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder7));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder3));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder4));
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder8);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder8);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertNotNull(dateTimeFormatterBuilder8);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder8.appendYearOfEra(50, 868);
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder3));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder7));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder4));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder7));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder4));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder3));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder7));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder3));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder4));
      assertFalse(dateTimeFormatterBuilder9.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder9.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder9.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder9.equals((Object)dateTimeFormatterBuilder4));
      assertFalse(dateTimeFormatterBuilder9.equals((Object)dateTimeFormatterBuilder7));
      assertFalse(dateTimeFormatterBuilder9.equals((Object)dateTimeFormatterBuilder3));
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder9);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder8);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder9);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder9);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder6);
      assertNotSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder2);
      assertNotSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder5);
      assertNotSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder7);
      assertNotSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder9, dateTimeFormatterBuilder8);
      assertNotNull(dateTimeFormatterBuilder9);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      boolean boolean0 = dateTimeFormatterBuilder8.canBuildParser();
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder3));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder7));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder4));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder7));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder4));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder3));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder7));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder3));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder4));
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder9);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder8);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder9);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder9);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertTrue(boolean0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendTwoDigitWeekyear(50);
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder3));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder7));
      assertFalse(dateTimeFormatterBuilder5.equals((Object)dateTimeFormatterBuilder4));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder7));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder4));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder6.equals((Object)dateTimeFormatterBuilder3));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder7));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder3));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder8.equals((Object)dateTimeFormatterBuilder4));
      assertFalse(dateTimeFormatterBuilder10.equals((Object)dateTimeFormatterBuilder2));
      assertFalse(dateTimeFormatterBuilder10.equals((Object)dateTimeFormatterBuilder1));
      assertFalse(dateTimeFormatterBuilder10.equals((Object)dateTimeFormatterBuilder0));
      assertFalse(dateTimeFormatterBuilder10.equals((Object)dateTimeFormatterBuilder7));
      assertFalse(dateTimeFormatterBuilder10.equals((Object)dateTimeFormatterBuilder4));
      assertFalse(dateTimeFormatterBuilder10.equals((Object)dateTimeFormatterBuilder3));
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder3);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder2);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder6);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder9);
      assertNotSame(dateTimeFormatterBuilder5, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder8);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder10);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder7);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder9);
      assertNotSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder3);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder7);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder6);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder2);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder3);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder5);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder10);
      assertSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder9);
      assertNotSame(dateTimeFormatterBuilder8, dateTimeFormatterBuilder4);
      assertNotSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder2);
      assertNotSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder1);
      assertNotSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder6);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder5);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder9);
      assertNotSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder7);
      assertNotSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder4);
      assertSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder8);
      assertNotSame(dateTimeFormatterBuilder10, dateTimeFormatterBuilder3);
      assertNotNull(dateTimeFormatterBuilder10);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 0, 0);
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      int int0 = dateTimeFormatterBuilder_Fraction0.estimateParsedLength();
      assertEquals(0, int0);
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimatePrintedLength());
      assertEquals(0, dateTimeFormatterBuilder_Fraction0.estimateParsedLength());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      
      String string0 = "org.joda.time.YearMonth$Property";
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendPattern("org.joda.time.YearMonth$Property");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 65533, false);
      dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(2, hashMap0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneShortName();
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFractionOfMinute(2191, 109);
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendWeekyear(2773, 58);
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYear(0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendDayOfMonth(0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder5.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder6, dateTimeFormatterBuilder4);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      int int0 = 2105;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfMinute(2105);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendText(dateTimeFieldType0);
      DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneId();
      DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTimeZoneName();
      String string0 = "hV&Bb=!E!rz|K";
      int int1 = (-591);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder4.appendTimeZoneOffset("hV&Bb=!E!rz|K", "", false, 2105, (-591));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfMinute(0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      dateTimeFormatterBuilder0.toParser();
      dateTimeFormatterBuilder0.appendYearOfCentury(2, 20);
      dateTimeFieldType0.getDurationType();
      int int1 = (-792);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.appendSignedDecimal(dateTimeFieldType0, (-792), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?@`R");
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder0.appendFractionOfSecond(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(0);
      InternalPrinterDateTimePrinter.of((InternalPrinter) null);
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral('R');
      DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_CharacterLiteral0);
      // Undeclared exception!
      try { 
        dateTimeFormatterBuilder1.append((DateTimePrinter) null, dateTimeParser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer supplied
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      dateTimeFormatterBuilder_Composite0.estimatePrintedLength();
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(0, hashMap0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology.getInstance(dateTimeZone0);
      String string0 = "CST";
      Locale locale0 = null;
      try {
        locale0 = new Locale("CST", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        MonthDay.parse("EOBt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"EOBt\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }
}
