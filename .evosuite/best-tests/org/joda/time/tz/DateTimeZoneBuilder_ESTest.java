/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:25:00 GMT 2018
 */

package org.joda.time.tz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.channels.FileChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.DateTimeZone;
import org.joda.time.PeriodType;
import org.joda.time.tz.DateTimeZoneBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeZoneBuilder_ESTest extends DateTimeZoneBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      String string0 = ":Bf{;rDEB{6H$";
      int int0 = 52;
      PipedInputStream pipedInputStream0 = new PipedInputStream(52);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      pipedInputStream0.mark(1179);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataOutputStream0);
      
      dateTimeZoneBuilder0.writeTo("I?;", (OutputStream) dataOutputStream0);
      assertEquals(8, pipedInputStream0.available());
      
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InputStream inputStream0 = null;
      String string0 = "w#:}?xJPY";
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(dataOutputStream0);
      
      DateTimeZoneBuilder.writeMillis(dataOutputStream0, 63158400000L);
      assertEquals("@\u0010\u000F\uFFFD", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.addRecurringSavings("w#:}?xJPY", (-2594), (-2594), 192, '9', (-917), (-917), 119, false, (-2594));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: 9
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addCutover(0, '8', 0, 0, 0, true, 705);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertNotNull(dateTimeZoneBuilder1);
      
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("YWy!@TGTBhv&P(", 705);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      assertNotNull(dateTimeZoneBuilder2);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(dataOutputStream0);
      
      dateTimeZoneBuilder1.writeTo("", (DataOutput) dataOutputStream0);
      assertEquals("F\u0000\u000EYWy!@TGTBhv&P(\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0002\uFFFD\u0000", byteArrayOutputStream0.toString());
      assertEquals(27, byteArrayOutputStream0.size());
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder2);
      
      DateTimeZone dateTimeZone0 = dateTimeZoneBuilder2.toDateTimeZone("YWy!@TGTBhv&P(", false);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("YWy!@TGTBhv&P(", dateTimeZone0.toString());
      assertEquals("YWy!@TGTBhv&P(", dateTimeZone0.getID());
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      assertNotNull(dateTimeZone0);
      
      dateTimeZoneBuilder1.writeTo("l!5#$", (OutputStream) byteArrayOutputStream0);
      assertEquals("F\u0000\u000EYWy!@TGTBhv&P(\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0002\uFFFD\u0000F\u0000\u000EYWy!@TGTBhv&P(\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0002\uFFFD\u0000", byteArrayOutputStream0.toString());
      assertEquals(54, byteArrayOutputStream0.size());
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte) (-25);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)117, (byte) (-33), (byte)60, (byte) (-10), (byte)103, (byte)81, (byte) (-25)}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-99), (byte)117, (byte) (-33), (byte)60, (byte) (-10), (byte)103, (byte)81, (byte) (-25)}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      try { 
        DateTimeZoneBuilder.readFrom((DataInput) dataInputStream0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DataInput dataInput0 = null;
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.readMillis((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addRecurringSavings("", (-699), 1111, (-2852), 's', 690562340, 1111, (-699), false, (-688));
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertNotNull(dateTimeZoneBuilder1);
      
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("T)D>:%", 0);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      assertNotNull(dateTimeZoneBuilder2);
      
      DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder2.addCutover((-1312), 's', 0, (-699), (-993), false, 0);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder3);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder3);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder3);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder3, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder3, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder3, dateTimeZoneBuilder0);
      assertNotNull(dateTimeZoneBuilder3);
      
      DateTimeZoneBuilder dateTimeZoneBuilder4 = dateTimeZoneBuilder3.setStandardOffset(1111);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder3);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder4);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder4);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder3);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder4);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder3);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder3, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder3, dateTimeZoneBuilder4);
      assertSame(dateTimeZoneBuilder3, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder3, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder4, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder4, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder4, dateTimeZoneBuilder3);
      assertSame(dateTimeZoneBuilder4, dateTimeZoneBuilder2);
      assertNotNull(dateTimeZoneBuilder4);
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder4.toDateTimeZone("/", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)81, (byte)2, (byte) (-1), (byte)88}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)81, (byte)2, (byte) (-1), (byte)88}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      long long0 = DateTimeZoneBuilder.readMillis(dataInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)81, (byte)2, (byte) (-1), (byte)88}, byteArray0);
      assertEquals(0L, long0);
      assertEquals(5, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.writeTo("org.joda.time.tz.DateTimeZoneBuilder$OfYear", (DataOutput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      String string0 = "vCOw.vC-3l?p.F@n\"";
      int int0 = 2233;
      int int1 = (-349);
      char char0 = 'y';
      int int2 = 290;
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearMonthDay();
      assertEquals(3, periodType1.size());
      assertEquals("YearMonthDay", periodType1.getName());
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      int int3 = 0;
      int int4 = (-122);
      String string1 = "n05Q";
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.readFrom((DataInput) null, "n05Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(dataInputStream0);
      
      try { 
        DateTimeZoneBuilder.readMillis(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      boolean boolean0 = true;
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addCutover(164, 'w', 0, 3020, 3020, true, 164);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertNotNull(dateTimeZoneBuilder1);
      
      int int0 = (-26);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.addCutover(3020, 'w', 65535, 65535, (-26), true, 0);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      assertNotNull(dateTimeZoneBuilder2);
      
      String string0 = "org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone";
      try { 
        MockURI.URI("", "", "J|OYg1'V 6HwH*BIE,i");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :#J%7COYg1'V%206HwH*BIE,i
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)86;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)57;
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)86, (byte)0, (byte)57, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      try { 
        DateTimeZoneBuilder.readFrom((InputStream) byteArrayInputStream0, "9cOh0GO");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addCutover(0, '-', 0, (-1982), 34, true, 34);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertNotNull(dateTimeZoneBuilder1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-3), (byte)0, (byte)113, (byte)67, (byte)5, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      try { 
        DateTimeZoneBuilder.readFrom((InputStream) byteArrayInputStream0, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid encoding
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("y+W");
      assertNotNull(mockFileOutputStream0);
      
      mockFileOutputStream0.flush();
      DateTimeZone dateTimeZone0 = dateTimeZoneBuilder0.toDateTimeZone("-jFpSl*1tO`", false);
      assertEquals("-jFpSl*1tO`", dateTimeZone0.getID());
      assertEquals("-jFpSl*1tO`", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      assertEquals(0L, fileChannel0.size());
      assertNotNull(fileChannel0);
      
      dateTimeZoneBuilder0.writeTo("y+W", (OutputStream) mockFileOutputStream0);
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset((-115));
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertNotNull(dateTimeZoneBuilder1);
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.addCutover((-115), 'a', (-1367), 0, 4, false, 3036);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: a
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)0;
      pipedOutputStream0.close();
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)0;
      int int0 = pipedInputStream0.read(byteArray0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-116), (byte)0, (byte)109, (byte)0, (byte)36, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      assertEquals(0, pipedInputStream0.available());
      
      String string0 = "WPD^";
      try { 
        DateTimeZoneBuilder.readFrom((InputStream) pipedInputStream0, "WPD^");
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addCutover(0, '8', 0, 0, 0, true, 1723);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertNotNull(dateTimeZoneBuilder1);
      
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("YWy!@TGTBhv&P(", 1723);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      assertNotNull(dateTimeZoneBuilder2);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(dataOutputStream0);
      
      dateTimeZoneBuilder1.writeTo("", (DataOutput) dataOutputStream0);
      assertEquals(27, byteArrayOutputStream0.size());
      assertEquals("F\u0000\u000EYWy!@TGTBhv&P(\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0006\uFFFD\u0000", byteArrayOutputStream0.toString());
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      
      DateTimeZone dateTimeZone0 = dateTimeZoneBuilder2.toDateTimeZone("YWy!@TGTBhv&P(", false);
      assertEquals("YWy!@TGTBhv&P(", dateTimeZone0.getID());
      assertEquals("YWy!@TGTBhv&P(", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      assertNotNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(80);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertNotNull(dateTimeZoneBuilder1);
      
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("", 0);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      assertNotNull(dateTimeZoneBuilder2);
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder2.writeTo("", (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(2615625);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertNotNull(dateTimeZoneBuilder1);
      
      String string0 = "millisOfDay";
      DateTimeZone dateTimeZone0 = dateTimeZoneBuilder1.toDateTimeZone("millisOfDay", false);
      assertEquals("millisOfDay", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("millisOfDay", dateTimeZone0.getID());
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertNotNull(dateTimeZone0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder1.addRecurringSavings("millisOfDay", 2615625, (-935), 2615625, '?', 635, 70, (-935), true, 1727);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: ?
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addRecurringSavings("org.joda.time.field.TestPreciseDurationDateTimeField$MockStandardBaseDateTimeField", 0, (-1158), (-1036), 'u', (-1158), 0, 2823, true, (-1158));
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertNotNull(dateTimeZoneBuilder1);
      
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.toDateTimeZone("PeriodFormat.seconds", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1158 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      String string0 = "";
      String string1 = "z,2x:pvt{AUy%h,('4";
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.readFrom((InputStream) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      String string0 = "";
      String string1 = "bad";
      // Undeclared exception!
      try { 
        DateTimeZoneBuilder.writeMillis((DataOutput) null, (-5319L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      DateTimeZoneBuilder.writeMillis(objectOutputStream0, 9223372036854775807L);
      dateTimeZoneBuilder0.toDateTimeZone("", false);
      DateTimeZoneBuilder.writeMillis(objectOutputStream0, (-2848L));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("@P");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeBoolean(false);
      dataOutputStream0.writeBoolean(true);
      DateTimeZoneBuilder.writeMillis(dataOutputStream0, 0L);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.addRecurringSavings("}n-kNx,w0", (-2855), (-125), 0, '/', (-788), (-853), (-788), true, (-2855));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: /
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.toDateTimeZone((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addCutover(0, '~', 0, 310, (-312), true, (-3106));
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("", 0);
      DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder2.setStandardOffset(0);
      DateTimeZoneBuilder dateTimeZoneBuilder4 = dateTimeZoneBuilder3.addRecurringSavings("", 0, 390, 0, '~', 0, (-3106), 310, true, (-1581));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder4.writeTo((String) null, (DataOutput) objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      int int0 = 6;
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setStandardOffset(6);
      int int1 = 0;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder1.addRecurringSavings(" - ", 6, 3076, 3076, '#', (-3801), (-528), 0, true, 3076);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: #
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      String string0 = null;
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setFixedSavings((String) null, 0);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder1.addCutover(1660, 'P', (-86399999), 2696, 15271875, false, 1660);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: P
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setFixedSavings("AwP>x{['", 0);
      dateTimeZoneBuilder1.setStandardOffset(157);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.addCutover(0, 'u', 157, 1922, 157, true, 115);
      DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder2.setStandardOffset(157);
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder3.writeTo("", (DataOutput) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 157 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      int int0 = 1048;
      char char0 = '|';
      int int1 = 58;
      int int2 = 4;
      boolean boolean0 = true;
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addCutover(1048, '|', 58, 4, 560, true, 581);
      int int3 = 0;
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder1.addCutover(560, '|', 58, 1048, 1048, true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: |
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addCutover(0, '8', 0, 0, 0, true, 1723);
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings("YWy!@TGTBhv&P(", 1723);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      dateTimeZoneBuilder1.writeTo("", (DataOutput) dataOutputStream0);
      dateTimeZoneBuilder2.toDateTimeZone("YWy!@TGTBhv&P(", false);
      DateTimeZoneBuilder dateTimeZoneBuilder3 = dateTimeZoneBuilder0.addRecurringSavings("YWy!@TGTBhv&P(", 80, 2493, 0, '8', 8, 209, 209, false, 8);
      assertSame(dateTimeZoneBuilder3, dateTimeZoneBuilder2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 662, 292271022);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (-2121));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.setFixedSavings("lY>),i7;3Ga", 0);
      int int0 = 2500;
      int int1 = 1422;
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder1.addCutover(0, '9', 2500, 1422, 0, false, 1422);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: 9
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      String string0 = "U a)c w(B?hfgy:V86v";
      DateTimeZone.getDefault();
      // Undeclared exception!
      try { 
        dateTimeZoneBuilder0.addRecurringSavings("8aUu", (-2140855611), 1035, 1035, '7', 1035, (-553), (-2140855611), true, 1035);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown mode: 7
         //
         verifyException("org.joda.time.tz.DateTimeZoneBuilder$OfYear", e);
      }
  }
}
