/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:42:40 GMT 2018
 */

package org.joda.time.tz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.MockZone;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CachedDateTimeZone_ESTest extends CachedDateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-412L), 0, 0);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(mockZone0);
      cachedDateTimeZone0.getStandardOffset((-2112L));
      cachedDateTimeZone0.getUncachedZone();
      cachedDateTimeZone0.getUncachedZone();
      cachedDateTimeZone0.getNameKey((-412L));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone1);
      CachedDateTimeZone cachedDateTimeZone1 = CachedDateTimeZone.forZone(cachedDateTimeZone0);
      cachedDateTimeZone0.equals(cachedDateTimeZone1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(23);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.getStandardOffset(23);
      cachedDateTimeZone0.getStandardOffset((-1310L));
      cachedDateTimeZone0.getUncachedZone();
      cachedDateTimeZone0.nextTransition(0L);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      dateTimeZone0.convertLocalToUTC((-915L), false);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.previousTransition(2489L);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.getStandardOffset(880L);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-769));
      Locale locale0 = Locale.GERMANY;
      dateTimeZone0.getName((long) (-769), locale0);
      dateTimeZone0.convertLocalToUTC((-1032L), false, (long) (-769));
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.isFixed();
      cachedDateTimeZone0.nextTransition((-749L));
      cachedDateTimeZone0.isFixed();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.equals("%_[Kt4!wzU-");
      cachedDateTimeZone0.getOffset(176L);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.hashCode();
      cachedDateTimeZone0.getOffset(4294967295L);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      buddhistChronology0.toString();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      dateTimeZone0.nextTransition(1);
      buddhistChronology0.toString();
      LocalDateTime localDateTime0 = new LocalDateTime(1L);
      localDateTime0.getCenturyOfEra();
      dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone.forTimeZone(timeZone0);
      cachedDateTimeZone0.previousTransition(1);
      localDateTime0.getYearOfCentury();
      cachedDateTimeZone0.isStandardOffset(0L);
      cachedDateTimeZone0.toTimeZone();
      cachedDateTimeZone0.getUncachedZone();
      cachedDateTimeZone0.adjustOffset(1L, true);
      cachedDateTimeZone0.getStandardOffset(1L);
      cachedDateTimeZone0.getNameKey(2684L);
      cachedDateTimeZone0.nextTransition(0L);
      cachedDateTimeZone0.equals(localDateTime0);
      cachedDateTimeZone0.getOffset(0L);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.equals(dateTimeZone0);
      cachedDateTimeZone0.nextTransition(4507L);
      cachedDateTimeZone0.getUncachedZone();
      cachedDateTimeZone0.previousTransition(3927L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      DateTimeZone.getNameProvider();
      DateTimeZone.setNameProvider(nameProvider0);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.isFixed();
      dateTimeZone1.nextTransition(0);
      cachedDateTimeZone0.getNameKey(0);
      cachedDateTimeZone0.isFixed();
      cachedDateTimeZone0.convertUTCToLocal((-560L));
      cachedDateTimeZone0.equals(dateTimeZone1);
      cachedDateTimeZone0.getNameKey(3859L);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.previousTransition(1L);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone1);
      cachedDateTimeZone0.getNameKey(1808L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone1);
      cachedDateTimeZone0.isFixed();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      // Undeclared exception!
      try { 
        ZonedChronology.getInstance(iSOChronology0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DateTimeZone must not be null
         //
         verifyException("org.joda.time.chrono.ZonedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone1);
      cachedDateTimeZone0.getNameKey(31083663600000L);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1416);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      Locale locale0 = Locale.CANADA;
      cachedDateTimeZone0.getShortName((long) 1416, locale0);
      DateTimeZone.forID((String) null);
      cachedDateTimeZone0.getUncachedZone();
      cachedDateTimeZone0.hashCode();
      cachedDateTimeZone0.getOffset((-129L));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        CachedDateTimeZone.forZone((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.CachedDateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      int int1 = (-662);
      MockZone mockZone0 = new MockZone(50400000L, 0, (-662));
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(mockZone0);
      cachedDateTimeZone0.getShortName((long) 0);
      cachedDateTimeZone0.convertLocalToUTC((-1L), false, 50400000L);
      try { 
        DateTimeZone.forOffsetHours(32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 32
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DateTime dateTime0 = new DateTime((DateTimeZone) null);
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) dateTime0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateTime0);
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(0);
      dateTimeZone0.isLocalDateTimeGap(localDateTime1);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.getUncachedZone();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("Av");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'Av' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 455;
      try { 
        DateTimeZone.forOffsetHoursMinutes(455, 455);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 455
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.isFixed();
      DateTimeZone.setDefault(dateTimeZone0);
      dateTimeZone0.convertLocalToUTC((-1257L), true, (-1894L));
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.getShortName(0L);
      Locale locale0 = Locale.US;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      dateTimeZone0.toTimeZone();
      cachedDateTimeZone0.getName((-2430L), locale0);
      cachedDateTimeZone0.hashCode();
      cachedDateTimeZone0.isFixed();
      cachedDateTimeZone0.isFixed();
      cachedDateTimeZone0.getStandardOffset(330L);
      cachedDateTimeZone0.hashCode();
      cachedDateTimeZone0.getUncachedZone();
      cachedDateTimeZone0.isFixed();
      Integer integer0 = new Integer((-1045));
      cachedDateTimeZone0.equals(integer0);
      cachedDateTimeZone0.previousTransition((-1484L));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CachedDateTimeZone.forZone(dateTimeZone0);
      CachedDateTimeZone cachedDateTimeZone0 = CachedDateTimeZone.forZone(dateTimeZone0);
      cachedDateTimeZone0.previousTransition(0L);
      cachedDateTimeZone0.getNameKey(0L);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 23034375;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(23034375);
      CachedDateTimeZone.forZone(dateTimeZone0);
      try { 
        DateTimeZone.forOffsetHoursMinutes(23034375, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 23034375
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }
}
