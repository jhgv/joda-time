/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:48:28 GMT 2018
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.format.DateTimeFormatter;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalTime;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.BasicChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJMonthOfYearDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.ZonedChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GJMonthOfYearDateTimeField_ESTest extends GJMonthOfYearDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      gJMonthOfYearDateTimeField0.getAsText(1, (Locale) null);
      gJMonthOfYearDateTimeField0.getAsText(1, (Locale) null);
      gJMonthOfYearDateTimeField0.getAsShortText(1, (Locale) null);
      gJMonthOfYearDateTimeField0.convertText("January", (Locale) null);
      Locale locale0 = Locale.JAPANESE;
      gJMonthOfYearDateTimeField0.getAsText(2, locale0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      ethiopicChronology0.getYearMonthMillis(0, 0);
      Locale locale0 = Locale.JAPAN;
      gJMonthOfYearDateTimeField0.getAsShortText(0, locale0);
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.getAsText(449, locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 449
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      copticChronology0.getDaysInMonthMaxForSet(2094L, 1292);
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      gJMonthOfYearDateTimeField0.getAsText(0, (Locale) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(julianChronology0);
      gJMonthOfYearDateTimeField0.roundFloor(0L);
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.getAsShortText((-3204), locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3204
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      Locale locale0 = Locale.CANADA;
      gJMonthOfYearDateTimeField0.getMaximumTextLength(locale0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      ethiopicChronology0.getWeekOfWeekyear((-501L));
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      gJMonthOfYearDateTimeField0.getAsText(1, locale0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      Locale locale0 = Locale.ENGLISH;
      gJMonthOfYearDateTimeField0.getMaximumTextLength(locale0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = null;
      try {
        gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField((BasicChronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.getAsText((-2910), locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2910
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_DATE;
      Locale locale0 = dateTimeFormatter0.getLocale();
      gJMonthOfYearDateTimeField0.getAsShortText(1, locale0);
      dateTimeFormatter0.getResolverStyle();
      Locale locale1 = Locale.UK;
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.convertText("7`v,va.cUqqB$aI,}", locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"7`v,va.cUqqB$aI,}\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      Locale locale0 = Locale.JAPAN;
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.convertText((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      int int0 = 928;
      Locale locale0 = Locale.ROOT;
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.getAsShortText(928, locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 928
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      Locale locale0 = Locale.FRENCH;
      gJMonthOfYearDateTimeField0.getMaximumShortTextLength(locale0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
      Locale locale0 = Locale.US;
      gJMonthOfYearDateTimeField0.getAsText(0, locale0);
      gJMonthOfYearDateTimeField0.getAsShortText(0, locale0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getYearDifference(1, 1);
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_OFFSET_DATE_TIME;
      Locale locale0 = dateTimeFormatter0.getLocale();
      gJMonthOfYearDateTimeField0.getMaximumTextLength(locale0);
      gJMonthOfYearDateTimeField0.getMaximumShortTextLength(locale0);
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.convertText((String) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
