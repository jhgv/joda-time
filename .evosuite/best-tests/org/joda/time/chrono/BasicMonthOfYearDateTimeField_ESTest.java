/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:32:34 GMT 2018
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MockPartial;
import org.joda.time.MockZone;
import org.joda.time.MonthDay;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.BasicChronology;
import org.joda.time.chrono.BasicMonthOfYearDateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJMonthOfYearDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicMonthOfYearDateTimeField_ESTest extends BasicMonthOfYearDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.setExtended(0L, 4128);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4128 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1982292598);
      MockZone mockZone0 = new MockZone(768L, 1, (-1));
      MonthDay monthDay0 = new MonthDay((DateTimeZone) mockZone0);
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.add((ReadablePartial) monthDay0, (-1), intArray0, (-1298));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,13]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 1);
      basicMonthOfYearDateTimeField0.set(0L, 1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      gJMonthOfYearDateTimeField0.set(1900799258L, 12);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
      gJMonthOfYearDateTimeField0.roundFloor(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = gJMonthOfYearDateTimeField0.roundFloor(1814401406L);
      assertEquals(691200000L, long0);
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      
      long long0 = basicMonthOfYearDateTimeField0.remainder(0L);
      assertEquals(0L, long0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = basicMonthOfYearDateTimeField0.addWrapField((long) 1, 1);
      assertEquals(2592000001L, long0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      
      MockPartial mockPartial0 = new MockPartial();
      assertNotNull(mockPartial0);
      
      int[] intArray0 = basicMonthOfYearDateTimeField0.add((ReadablePartial) mockPartial0, 0, (int[]) null, 0);
      assertNull(intArray0);
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, (-1));
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = basicMonthOfYearDateTimeField0.add(0L, 0L);
      assertEquals(0L, long0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = basicMonthOfYearDateTimeField0.add(0L, 0);
      assertEquals(0L, long0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, EthiopicChronology.EE);
      
      // Undeclared exception!
      try { 
        gJMonthOfYearDateTimeField0.set((long) 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,13]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, CopticChronology.AM);
      
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.add((ReadablePartial) null, 0, intArray0, (-3014));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, EthiopicChronology.EE);
      
      LocalDate localDate0 = new LocalDate((Object) null);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.add((ReadablePartial) localDate0, 1, intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = null;
      try {
        basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField((BasicChronology) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
      
      boolean boolean0 = basicMonthOfYearDateTimeField0.isLeap(50L);
      assertFalse(boolean0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = basicMonthOfYearDateTimeField0.set((-1L), 1);
      assertEquals((-7776000001L), long0);
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 28);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      
      long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong((-1590L), (-1590L));
      assertEquals(0L, long0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0, 1);
      assertNotNull(ethiopicChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1, dateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(1, IslamicChronology.AH);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      int[] intArray1 = gJMonthOfYearDateTimeField0.add((ReadablePartial) localDateTime0, 1, intArray0, 1177);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 1, 1, 0}, intArray0);
      assertArrayEquals(new int[] {91, 8, 1, 0}, intArray1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1982292598);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, EthiopicChronology.EE);
      
      MockZone mockZone0 = new MockZone(768L, 1, (-1));
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      
      MonthDay monthDay0 = new MonthDay((DateTimeZone) mockZone0);
      assertNotNull(monthDay0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      
      int[] intArray0 = new int[6];
      int[] intArray1 = basicMonthOfYearDateTimeField0.add((ReadablePartial) monthDay0, 0, intArray0, (-1298));
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {10, 1, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {10, 1, 0, 0, 0, 0}, intArray1);
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(14, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.size());
      assertEquals(2, monthDay0.getMonthOfYear());
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals(1, CopticChronology.AM);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = basicMonthOfYearDateTimeField0.add((ReadablePartial) null, 4, intArray0, 0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = basicMonthOfYearDateTimeField0.add(1440L, 653);
      assertEquals(1585699201440L, long0);
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertEquals(1, CopticChronology.AM);
      
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getLeapDurationField();
      assertNotNull(durationField0);
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals("days", durationField0.getName());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, CopticChronology.AM);
      
      boolean boolean0 = basicMonthOfYearDateTimeField0.isLeap(31083663600000L);
      assertFalse(boolean0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, CopticChronology.AM);
      
      int int0 = gJMonthOfYearDateTimeField0.getLeapAmount(996L);
      assertEquals(0, int0);
      assertEquals(13, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      DateTimeZone dateTimeZone0 = julianChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, 3600);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      
      long long0 = basicMonthOfYearDateTimeField0.addWrapField((-10797800L), (-3394));
      assertEquals((-26449197800L), long0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
      assertNotNull(gJMonthOfYearDateTimeField0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
      
      long long0 = gJMonthOfYearDateTimeField0.getDifferenceAsLong((-7775999996L), (-1557L));
      assertEquals((-2L), long0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(1, gJMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(12, gJMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(gJMonthOfYearDateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      assertNotNull(basicMonthOfYearDateTimeField0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
      
      long long0 = basicMonthOfYearDateTimeField0.getDifferenceAsLong(1L, 1219L);
      assertEquals(0L, long0);
      assertEquals("monthOfYear", basicMonthOfYearDateTimeField0.getName());
      assertTrue(basicMonthOfYearDateTimeField0.isSupported());
      assertEquals(1, basicMonthOfYearDateTimeField0.getMinimumValue());
      assertEquals(13, basicMonthOfYearDateTimeField0.getMaximumValue());
      assertFalse(basicMonthOfYearDateTimeField0.isLenient());
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      long long0 = gJMonthOfYearDateTimeField0.getDifferenceAsLong(1738991203200394L, 716368);
      assertEquals(716368L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1982292598);
      MockZone mockZone0 = new MockZone(768L, 1, (-1));
      MonthDay monthDay0 = new MonthDay((DateTimeZone) mockZone0);
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.add((ReadablePartial) monthDay0, 86400, intArray0, (-1298));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,13]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(julianChronology0, 16);
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.add(2349L, 13737600000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: 13737600000
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(ethiopicChronology0, 1);
      // Undeclared exception!
      try { 
        basicMonthOfYearDateTimeField0.add(1L, (-7775999999L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: -7775999999
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(gregorianChronology0);
      long long0 = gJMonthOfYearDateTimeField0.add((-1L), (-1L));
      assertEquals((-2678400001L), long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(gregorianChronology0, (-708));
      long long0 = basicMonthOfYearDateTimeField0.add(3120L, (long) (-708));
      assertEquals((-1861919996880L), long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      long long0 = basicMonthOfYearDateTimeField0.add(1333L, (-1162));
      assertEquals((-2819404798667L), long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      long long0 = basicMonthOfYearDateTimeField0.add((long) 1, (long) 4);
      assertEquals(10368000001L, long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      DurationField durationField0 = basicMonthOfYearDateTimeField0.getRangeDurationField();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      long long0 = basicMonthOfYearDateTimeField0.addWrapField(0L, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      int int0 = basicMonthOfYearDateTimeField0.getMaximumValue();
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      boolean boolean0 = gJMonthOfYearDateTimeField0.isLenient();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      int int0 = basicMonthOfYearDateTimeField0.getMinimumValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicMonthOfYearDateTimeField basicMonthOfYearDateTimeField0 = new BasicMonthOfYearDateTimeField(copticChronology0, 1);
      int int0 = basicMonthOfYearDateTimeField0.get(1L);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(ethiopicChronology0);
      long long0 = gJMonthOfYearDateTimeField0.remainder((-4614206620694398030L));
      assertEquals(1900801970L, long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      long long0 = gJMonthOfYearDateTimeField0.roundFloor(1);
      assertEquals((-1900800000L), long0);
  }
}
