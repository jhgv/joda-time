/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:36:46 GMT 2018
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.chrono.GJLocaleSymbols;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GJLocaleSymbols_ESTest extends GJLocaleSymbols_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      String string0 = gJLocaleSymbols0.monthOfYearValueToText(0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale((Locale) null);
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      String string0 = gJLocaleSymbols0.monthOfYearValueToText(7);
      assertEquals("July", string0);
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(1, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      String string0 = gJLocaleSymbols0.monthOfYearValueToShortText(0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(1, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = new Locale("8Zkqqf|/o<vua|t");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("8zkqqf|/o<vua|t", locale0.toString());
      assertEquals("8zkqqf|/o<vua|t", locale0.getLanguage());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("8zkqqf|/o<vua|t", locale0.toString());
      assertEquals("8zkqqf|/o<vua|t", locale0.getLanguage());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      String string0 = gJLocaleSymbols0.monthOfYearValueToShortText(2);
      assertEquals("Feb", string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("8zkqqf|/o<vua|t", locale0.toString());
      assertEquals("8zkqqf|/o<vua|t", locale0.getLanguage());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(1, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      String string0 = gJLocaleSymbols0.halfdayValueToText(0);
      assertEquals("\uC624\uC804", string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(1, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(4, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(8, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(5, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      int int0 = gJLocaleSymbols0.halfdayTextToValue("pm");
      assertEquals(1, int0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(4, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(8, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(5, gJLocaleSymbols0.getMonthMaxShortTextLength());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(10, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(7, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      String string0 = gJLocaleSymbols0.dayOfWeekValueToText(0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(10, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(7, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      String string0 = gJLocaleSymbols0.dayOfWeekValueToShortText(0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      String string0 = gJLocaleSymbols0.dayOfWeekValueToShortText(3);
      assertEquals("\u661F\u671F\u4E09", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.monthOfYearTextToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.eraTextToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale((Locale) null);
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.dayOfWeekValueToText(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.dayOfWeekTextToValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = new Locale("GMT-", "MDT", "IQ#'qr-NLtbNj`W");
      assertEquals("gmt-", locale0.getLanguage());
      assertEquals("IQ#'qr-NLtbNj`W", locale0.getVariant());
      assertEquals("gmt-_MDT_IQ#'qr-NLtbNj`W", locale0.toString());
      assertEquals("MDT", locale0.getCountry());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("gmt-", locale0.getLanguage());
      assertEquals("IQ#'qr-NLtbNj`W", locale0.getVariant());
      assertEquals("gmt-_MDT_IQ#'qr-NLtbNj`W", locale0.toString());
      assertEquals("MDT", locale0.getCountry());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      String string0 = gJLocaleSymbols0.eraValueToText(0);
      assertEquals("BC", string0);
      assertEquals("gmt-", locale0.getLanguage());
      assertEquals("IQ#'qr-NLtbNj`W", locale0.getVariant());
      assertEquals("gmt-_MDT_IQ#'qr-NLtbNj`W", locale0.toString());
      assertEquals("MDT", locale0.getCountry());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      int int0 = gJLocaleSymbols0.halfdayTextToValue("\u4E0A\u5348");
      assertEquals(0, int0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.halfdayTextToValue("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for halfdayOfDay is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(11, gJLocaleSymbols0.getEraMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      int int0 = gJLocaleSymbols0.dayOfWeekTextToValue("1");
      assertEquals(1, int0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(11, gJLocaleSymbols0.getEraMaxTextLength());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale((Locale) null);
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.dayOfWeekTextToValue("CE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"CE\" for dayOfWeek is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = new Locale("8Zkqqf|/o<vua|t");
      assertEquals("8zkqqf|/o<vua|t", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("8zkqqf|/o<vua|t", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("8zkqqf|/o<vua|t", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("8zkqqf|/o<vua|t", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      int int0 = gJLocaleSymbols0.monthOfYearTextToValue("Feb");
      assertEquals(2, int0);
      assertEquals("8zkqqf|/o<vua|t", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("8zkqqf|/o<vua|t", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(11, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.monthOfYearTextToValue(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \" \" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale((Locale) null);
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      int int0 = gJLocaleSymbols0.eraTextToValue("BCE");
      assertEquals(0, int0);
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.eraTextToValue("Taiwan");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"Taiwan\" for era is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = new Locale("8Zkqqf|/o<vua|t");
      assertEquals("8zkqqf|/o<vua|t", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("8zkqqf|/o<vua|t", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("8zkqqf|/o<vua|t", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("8zkqqf|/o<vua|t", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      int int0 = gJLocaleSymbols0.getHalfdayMaxTextLength();
      assertEquals(2, int0);
      assertEquals("8zkqqf|/o<vua|t", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("8zkqqf|/o<vua|t", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals(9, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(5, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(4, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(8, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      int int0 = gJLocaleSymbols0.getMonthMaxShortTextLength();
      assertEquals(5, int0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals(9, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(5, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(4, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(8, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = new Locale("8Zkqqf|/o<vua|t");
      assertEquals("8zkqqf|/o<vua|t", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("8zkqqf|/o<vua|t", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("8zkqqf|/o<vua|t", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("8zkqqf|/o<vua|t", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = gJLocaleSymbols0.dayOfWeekValueToText((int) integer0);
      assertEquals("Tuesday", string0);
      assertEquals("8zkqqf|/o<vua|t", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("8zkqqf|/o<vua|t", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(1, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.halfdayValueToText(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = new Locale("8Zkqqf|/o<vua|t");
      assertEquals("", locale0.getVariant());
      assertEquals("8zkqqf|/o<vua|t", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("8zkqqf|/o<vua|t", locale0.getLanguage());
      assertNotNull(locale0);
      
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("8zkqqf|/o<vua|t", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("8zkqqf|/o<vua|t", locale0.getLanguage());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
      assertNotNull(gJLocaleSymbols0);
      
      int int0 = gJLocaleSymbols0.getDayOfWeekMaxShortTextLength();
      assertEquals(3, int0);
      assertEquals("", locale0.getVariant());
      assertEquals("8zkqqf|/o<vua|t", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("8zkqqf|/o<vua|t", locale0.getLanguage());
      assertEquals(9, gJLocaleSymbols0.getMonthMaxTextLength());
      assertEquals(2, gJLocaleSymbols0.getHalfdayMaxTextLength());
      assertEquals(9, gJLocaleSymbols0.getDayOfWeekMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getDayOfWeekMaxShortTextLength());
      assertEquals(2, gJLocaleSymbols0.getEraMaxTextLength());
      assertEquals(3, gJLocaleSymbols0.getMonthMaxShortTextLength());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = new Locale("8Zkqqf|/o<vua|t");
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.eraValueToText(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      int int0 = gJLocaleSymbols0.getEraMaxTextLength();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale((Locale) null);
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.dayOfWeekValueToShortText(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      int int0 = gJLocaleSymbols0.getDayOfWeekMaxTextLength();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      int int0 = gJLocaleSymbols0.getMonthMaxTextLength();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.monthOfYearValueToText(17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = new Locale("");
      GJLocaleSymbols gJLocaleSymbols0 = GJLocaleSymbols.forLocale(locale0);
      // Undeclared exception!
      try { 
        gJLocaleSymbols0.monthOfYearValueToShortText((-2300));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2300
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }
}
