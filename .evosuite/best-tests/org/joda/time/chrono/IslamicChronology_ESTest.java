/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:27:19 GMT 2018
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.IslamicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IslamicChronology_ESTest extends IslamicChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      islamicChronology0.getFirstWeekOfYearMillis((-292269337));
      islamicChronology0.getYear((-2467L));
      islamicChronology0.getAverageMillisPerMonth();
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology2.getDaysInMonthMax((-946L));
      islamicChronology0.equals(islamicChronology2);
      islamicChronology0.getMonthOfYear(30962844000000L, 29);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      islamicChronology_LeapYearPatternType0.equals(islamicChronology0);
      islamicChronology2.isLeapYear(13);
      islamicChronology0.getDayOfYear(28495);
      islamicChronology2.getYearMillis(28495);
      islamicChronology2.setYear((-2482L), (-292269337));
      islamicChronology2.LEAP_YEAR_16_BASED.equals((Object) null);
      islamicChronology2.getYearDifference((-292269337), 3329L);
      islamicChronology2.getDaysInYearMonth(1, 0);
      islamicChronology2.LEAP_YEAR_16_BASED.equals(islamicChronology_LeapYearPatternType0);
      islamicChronology0.getDaysInMonthMax();
      islamicChronology2.getYearDifference((-715L), 3329L);
      islamicChronology1.getYear((-8948534433609600000L));
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
      islamicChronology1.getYear(2551440384L);
      islamicChronology1.getMinYear();
      // Undeclared exception!
      try { 
        IslamicChronology.getInstance((DateTimeZone) null, (IslamicChronology.LeapYearPatternType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology0.equals((Object) null);
      islamicChronology0.getDaysInYearMax();
      islamicChronology0.getDaysInYear(288);
      islamicChronology0.setYear(288, 2048);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      islamicChronology0.withZone((DateTimeZone) null);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_15_BASED);
      islamicChronology0.getDaysInMonthMax();
      islamicChronology0.calculateFirstDayOfYearMillis((-21));
      islamicChronology1.setYear((-42521587200000L), 30);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_INDIAN);
      IslamicChronology islamicChronology3 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology1.getAverageMillisPerYear();
      islamicChronology1.getMaxYear();
      IslamicChronology islamicChronology4 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology3.LEAP_YEAR_HABASH_AL_HASIB);
      islamicChronology4.getYearDifference(165L, (-41633654400000L));
      islamicChronology2.getDaysInYearMax();
      IslamicChronology.getInstanceUTC();
      islamicChronology2.getApproxMillisAtEpochDividedByTwo();
      islamicChronology0.calculateFirstDayOfYearMillis(1);
      islamicChronology2.getYearDifference((-42521587200000L), (-2740L));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.hashCode();
      islamicChronology0.calculateFirstDayOfYearMillis(0);
      islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      islamicChronology0.isLeapDay(0L);
      islamicChronology0.add((-42521587200000L), (-407L), 2);
      islamicChronology0.getDaysInYearMax();
      islamicChronology0.assemble((AssembledChronology.Fields) null);
      islamicChronology0.getDaysInYearMonth(12, 355);
      islamicChronology0.getYearMillis((-458));
      islamicChronology0.getDaysInMonthMax(2500);
      // Undeclared exception!
      try { 
        islamicChronology0.getDayOfMonth((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -301245869 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      islamicChronology0.getFirstWeekOfYearMillis((-292269337));
      islamicChronology0.getYear((-2467L));
      islamicChronology0.getAverageMillisPerMonth();
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology2.getDaysInMonthMax((-946L));
      islamicChronology0.equals(islamicChronology2);
      islamicChronology0.getMonthOfYear(30962844000000L, 29);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      islamicChronology_LeapYearPatternType0.equals(islamicChronology0);
      islamicChronology2.isLeapYear(13);
      islamicChronology0.getDayOfMonth((-946L));
      IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_15_BASED);
      islamicChronology2.getYearMillis(28495);
      islamicChronology2.setYear((-2482L), (-292269337));
      islamicChronology2.LEAP_YEAR_16_BASED.equals((Object) null);
      islamicChronology2.getYearDifference((-292269337), 3329L);
      islamicChronology2.getDaysInYearMonth(1, 0);
      islamicChronology2.LEAP_YEAR_16_BASED.equals(islamicChronology_LeapYearPatternType0);
      islamicChronology0.getDaysInMonthMax();
      islamicChronology2.getYearDifference((-715L), 3329L);
      islamicChronology1.getYear((-8948534433609600000L));
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
      islamicChronology1.getYear(2551440384L);
      islamicChronology1.getMinYear();
      islamicChronology0.isLeapYear(1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, islamicChronology0, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getYearMonthDayMillis((-4153), (-1), 13);
      islamicChronology0.equals(islamicChronology1);
      islamicChronology0.getMaxYear();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getDayOfMonth(30672000000L);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology1.getDateTimeMillis(2104L, 13, 13, 1, 13);
      islamicChronology0.getMinYear();
      islamicChronology0.withZone((DateTimeZone) null);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_INDIAN);
      islamicChronology0.getDaysInYearMax();
      islamicChronology2.getYear(1);
      islamicChronology1.equals((Object) null);
      islamicChronology2.getDaysInYear(1);
      islamicChronology1.getDaysInYearMax();
      islamicChronology0.getDayOfMonth(2104L);
      IslamicChronology islamicChronology3 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_16_BASED);
      islamicChronology2.getDayOfMonth(13);
      islamicChronology3.hashCode();
      islamicChronology0.getYearDifference(1389, 1L);
      islamicChronology3.getAverageMillisPerYear();
      islamicChronology3.getDaysInMonthMax();
      islamicChronology0.getYear(355);
      islamicChronology2.getLeapYearPatternType();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfYear(86399986L, 292271017);
      islamicChronology0.isLeapDay(292271017);
      islamicChronology0.getYearMillis(2467);
      islamicChronology0.getMonthOfYear(86399986L);
      islamicChronology0.getDaysInMonthMax(86399986L);
      islamicChronology0.getDayOfMonth((-491398449));
      islamicChronology0.getMinYear();
      islamicChronology0.getAverageMillisPerMonth();
      islamicChronology0.getTotalMillisByYearMonth(29, 292271022);
      islamicChronology0.getLeapYearPatternType();
      islamicChronology0.getAverageMillisPerYear();
      islamicChronology0.calculateFirstDayOfYearMillis(65536);
      islamicChronology0.getYear(292271022);
      islamicChronology0.calculateFirstDayOfYearMillis(292271022);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getMaxYear();
      int int0 = IslamicChronology.AH;
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      islamicChronology0.withUTC();
      islamicChronology1.getFirstWeekOfYearMillis(1061);
      islamicChronology0.getYearMonthMillis(292271022, 3156);
      islamicChronology1.calculateFirstDayOfYearMillis(2615625);
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
      islamicChronology0.getMonthOfYear(1, 1);
      islamicChronology1.getDaysInYear(904);
      islamicChronology0.getAverageMillisPerYear();
      islamicChronology1.getAverageMillisPerYear();
      islamicChronology1.getAverageMillisPerYearDividedByTwo();
      islamicChronology1.getMonthOfYear((-863L), 292271022);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getWeekOfWeekyear(1846L);
      islamicChronology0.getWeekOfWeekyear(86399999L, 486);
      islamicChronology0.getMonthOfYear(86399999L, 292271022);
      int int0 = IslamicChronology.AH;
      int int1 = IslamicChronology.AH;
      islamicChronology0.getDayOfMonth(2168L);
      islamicChronology0.getMonthOfYear(86400000L, 1755);
      islamicChronology0.getAverageMillisPerYear();
      islamicChronology0.getDayOfMonth(1);
      islamicChronology0.getMonthOfYear(1, 1);
      islamicChronology0.getDayOfMonth(1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      islamicChronology0.getFirstWeekOfYearMillis((-292269337));
      islamicChronology0.getYear((-2467L));
      islamicChronology0.getAverageMillisPerMonth();
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology2.getDaysInMonthMax((-946L));
      islamicChronology0.equals(islamicChronology2);
      islamicChronology0.getMonthOfYear(30962844000000L, 29);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      islamicChronology_LeapYearPatternType0.equals(islamicChronology0);
      islamicChronology2.isLeapYear(13);
      islamicChronology0.getDayOfMonth((-946L));
      islamicChronology2.getYearMillis(28495);
      islamicChronology2.setYear((-2482L), (-292269337));
      islamicChronology2.LEAP_YEAR_16_BASED.equals((Object) null);
      islamicChronology2.getYearDifference((-292269337), 3329L);
      islamicChronology2.getDaysInYearMonth(1, 0);
      islamicChronology2.LEAP_YEAR_16_BASED.equals(islamicChronology_LeapYearPatternType0);
      islamicChronology0.getDaysInMonthMax();
      islamicChronology2.getYearDifference((-715L), 3329L);
      islamicChronology1.getYear((-8948534433609600000L));
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
      islamicChronology1.getYear(2551440384L);
      islamicChronology1.getMinYear();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      int int0 = (-496);
      IslamicChronology.getInstanceUTC();
      int int1 = 1;
      islamicChronology0.getDaysInYearMonth(1, 1);
      ReadablePeriod readablePeriod0 = null;
      // Undeclared exception!
      try { 
        islamicChronology0.getDateMidnightMillis((-496), (-2209), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -496 for year must be in the range [0,292271023]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfYear(86399986L, 292271017);
      islamicChronology0.getYearMillis(2467);
      islamicChronology0.getMonthOfYear((-1693L));
      islamicChronology0.getDaysInMonthMax((-1693L));
      islamicChronology0.getMinYear();
      islamicChronology0.getAverageMillisPerMonth();
      islamicChronology0.getYearMonthDayMillis(29, 292271022, 162);
      islamicChronology0.getTotalMillisByYearMonth(29, 292271022);
      islamicChronology0.getLeapYearPatternType();
      islamicChronology0.getAverageMillisPerYear();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.assemble((AssembledChronology.Fields) null);
      islamicChronology0.getDaysInMonthMax();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      long long0 = 208483200355L;
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        islamicChronology0.calculateFirstDayOfYearMillis(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too large: 2147483647 > 292271022
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.hashCode();
      islamicChronology0.calculateFirstDayOfYearMillis(0);
      islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      islamicChronology0.isLeapDay(0L);
      islamicChronology0.add((-42521587200000L), (-407L), 2);
      islamicChronology0.getDaysInYearMax();
      islamicChronology0.getDaysInYearMonth(12, 355);
      islamicChronology0.setYear((-407L), 30);
      islamicChronology0.getDaysInMonthMax(0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getDayOfMonth(30672000000L);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology1.getDateTimeMillis(2104L, 13, 13, 1, 13);
      islamicChronology0.getMinYear();
      islamicChronology0.withZone((DateTimeZone) null);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_INDIAN);
      islamicChronology0.getDaysInYearMax();
      islamicChronology2.getYear(1);
      islamicChronology1.equals((Object) null);
      islamicChronology2.getDaysInYear(1);
      islamicChronology1.getDaysInYearMax();
      islamicChronology1.getDaysInYear(288);
      IslamicChronology islamicChronology3 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_16_BASED);
      islamicChronology2.getDayOfMonth(13);
      islamicChronology3.hashCode();
      islamicChronology0.getYearDifference(1389, 116639999504L);
      islamicChronology3.getAverageMillisPerYear();
      islamicChronology3.getDaysInMonthMax();
      islamicChronology0.getYear(355);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      islamicChronology0.getFirstWeekOfYearMillis((-292269337));
      islamicChronology0.getYear((-2467L));
      islamicChronology0.getAverageMillisPerMonth();
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology2.getDaysInMonthMax((-946L));
      islamicChronology0.equals(islamicChronology2);
      islamicChronology0.getMonthOfYear(30962844000000L, 29);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(1, 1);
      islamicChronology_LeapYearPatternType0.equals(islamicChronology0);
      islamicChronology2.isLeapYear(13);
      islamicChronology0.getDayOfMonth((-946L));
      islamicChronology2.getYearMillis(28495);
      islamicChronology2.setYear((-2482L), (-292269337));
      islamicChronology2.LEAP_YEAR_16_BASED.equals((Object) null);
      islamicChronology2.getYearDifference((-292269337), 3329L);
      islamicChronology2.getDaysInYearMonth(1, 0);
      islamicChronology2.LEAP_YEAR_16_BASED.equals(islamicChronology_LeapYearPatternType0);
      islamicChronology0.getDaysInMonthMax();
      islamicChronology2.getYearDifference((-715L), 3329L);
      islamicChronology1.getYear((-8948534433609600000L));
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
      islamicChronology1.getYear(2551440384L);
      islamicChronology1.getMinYear();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      islamicChronology0.getFirstWeekOfYearMillis((-292269337));
      islamicChronology0.getYear((-2467L));
      islamicChronology0.getAverageMillisPerMonth();
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology2.getDaysInMonthMax((-946L));
      islamicChronology0.equals(islamicChronology2);
      islamicChronology0.getMonthOfYear(30962844000000L, 29);
      islamicChronology0.LEAP_YEAR_HABASH_AL_HASIB.equals(islamicChronology0);
      islamicChronology2.isLeapYear(13);
      islamicChronology0.getDayOfMonth((-946L));
      islamicChronology2.getYearMillis(28495);
      islamicChronology2.setYear((-2482L), (-292269337));
      islamicChronology2.LEAP_YEAR_16_BASED.equals((Object) null);
      islamicChronology2.getYearDifference((-292269337), 3329L);
      islamicChronology2.getDaysInYearMonth(1, 0);
      islamicChronology2.LEAP_YEAR_16_BASED.equals(islamicChronology0.LEAP_YEAR_HABASH_AL_HASIB);
      islamicChronology0.getDaysInMonthMax();
      islamicChronology2.getYearDifference((-715L), 3329L);
      islamicChronology1.getYear((-8948534433609600000L));
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
      islamicChronology1.getYear(2551440384L);
      islamicChronology1.getMinYear();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getDaysInMonthMax(12);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      islamicChronology0.getFirstWeekOfYearMillis((-292269337));
      islamicChronology0.getYear((-2467L));
      islamicChronology0.getAverageMillisPerMonth();
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology2.getDaysInMonthMax((-946L));
      islamicChronology0.equals(islamicChronology2);
      islamicChronology0.getMonthOfYear(30962844000000L, 29);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      islamicChronology_LeapYearPatternType0.equals(islamicChronology0);
      islamicChronology2.isLeapYear(13);
      islamicChronology0.getDayOfMonth((-946L));
      islamicChronology2.getYearMillis(28495);
      islamicChronology2.setYear((-2482L), (-292269337));
      islamicChronology2.LEAP_YEAR_16_BASED.equals((Object) null);
      islamicChronology2.getYearDifference((-292269337), 3329L);
      islamicChronology2.getDaysInYearMonth(1, 0);
      islamicChronology2.LEAP_YEAR_16_BASED.equals(islamicChronology_LeapYearPatternType0);
      islamicChronology0.getDaysInMonthMax();
      islamicChronology2.getYearDifference((-715L), 3329L);
      islamicChronology1.getYear((-8948534433609600000L));
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
      islamicChronology1.getWeekOfWeekyear(829887206400000L);
      islamicChronology1.getMinYear();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IslamicChronology.getInstanceUTC();
      long long0 = 0L;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getMonthOfYear((-711L), (-3970));
      islamicChronology0.getDayOfMonth(5097600000L, 1, 29);
      // Undeclared exception!
      try { 
        islamicChronology0.getDateMidnightMillis(1, 29, (-617));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getWeekyear(0L);
      islamicChronology0.getDayOfMonth((-23L));
      islamicChronology0.getLeapYearPatternType();
      islamicChronology0.getAverageMillisPerMonth();
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance((DateTimeZone) null);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      islamicChronology2.isLeapDay(2551440384L);
      islamicChronology0.getDayOfMonth((-1787L));
      islamicChronology1.isLeapDay(11L);
      islamicChronology0.setYear(0L, 12);
      islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      islamicChronology1.getMinYear();
      islamicChronology1.withZone((DateTimeZone) null);
      islamicChronology1.getWeeksInYear(1);
      islamicChronology0.setYear((-23L), 1);
      islamicChronology2.calculateFirstDayOfYearMillis(21);
      islamicChronology1.getLeapYearPatternType();
      islamicChronology2.getDaysInYear(3504);
      islamicChronology2.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getMonthOfYear(86400000L, 57);
      islamicChronology0.getYearDifference(0L, (-651L));
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, islamicChronology0, islamicChronology0.LEAP_YEAR_16_BASED);
      islamicChronology1.getMonthOfYear((-2212L), 1);
      islamicChronology1.calculateFirstDayOfYearMillis((-292269337));
      islamicChronology1.getFirstWeekOfYearMillis(0);
      islamicChronology0.withZone((DateTimeZone) null);
      islamicChronology1.getDayOfYear(16011);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(57, (-3855));
      islamicChronology_LeapYearPatternType0.isLeapYear((-292269337));
      islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      islamicChronology1.getYearDifference((-292269337), 57);
      islamicChronology1.getAverageMillisPerMonth();
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_INDIAN);
      islamicChronology1.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(1485);
      islamicChronology2.getDaysInYear((-292269337));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IslamicChronology.getInstanceUTC();
      long long0 = 0L;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getDayOfMonth(5097600000L, 1, 29);
      // Undeclared exception!
      try { 
        islamicChronology0.getDateMidnightMillis(1, 29, (-617));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology0.getAverageMillisPerMonth();
      islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      islamicChronology0.getMaxYear();
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      islamicChronology0.getDayOfMonth(2551440384L, 865);
      islamicChronology1.getYearDifference(1, (-444L));
      islamicChronology0.getDayOfMonth((-444L));
      islamicChronology1.getAverageMillisPerYearDividedByTwo();
      islamicChronology1.getMonthOfYear(15308640144L, 292271022);
      islamicChronology1.withUTC();
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology2.getDayOfMonth(0L, (-1093), 1);
      islamicChronology2.getDayOfMonth((-356L));
      islamicChronology0.getDaysInMonthMax(1);
      islamicChronology2.getYearDifference(30, (-1058L));
      islamicChronology0.setYear(2551440384L, (-292269337));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getAverageMillisPerMonth();
      islamicChronology0.getDayOfMonth(2551440384L);
      islamicChronology0.getYear(22);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getAverageMillisPerYear();
      islamicChronology0.getTotalMillisByYearMonth((-601), 128);
      islamicChronology0.getDaysInMonthMax((-601));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfMonth((-448L), 12, 12);
      islamicChronology0.getMonthOfYear(292271022);
      islamicChronology0.getYearMonthDayMillis(292271022, 292271022, 292271022);
      islamicChronology0.getMinYear();
      islamicChronology0.getDaysInMonthMax();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, (Object) null, (IslamicChronology.LeapYearPatternType) null);
      // Undeclared exception!
      try { 
        islamicChronology0.getYear(15778800000L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.add((-344L), (-344L), (-86399999));
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType((-149), (-799));
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, (Object) null, islamicChronology_LeapYearPatternType0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getYearDifference(1704L, 0L);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getFirstWeekOfYearMillis(12);
      islamicChronology0.getDaysInMonthMax();
      islamicChronology0.getApproxMillisAtEpochDividedByTwo();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, islamicChronology0, islamicChronology0.LEAP_YEAR_HABASH_AL_HASIB);
      islamicChronology1.getAverageMillisPerMonth();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfMonth(355, (-1545), 1603);
      islamicChronology0.getYearMillis(355);
      islamicChronology0.getWeekOfWeekyear(30672000000L, 355);
      islamicChronology0.getDaysInYearMax();
      islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      islamicChronology0.setYear((-17L), (-292269337));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getYearMonthDayMillis((-91), (-91), 1);
      islamicChronology0.getDayOfMonth(21260793600000L);
      islamicChronology0.getMinYear();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getYearDifference((-2503L), (-2503L));
      islamicChronology0.getAverageMillisPerYear();
      islamicChronology0.getDaysInYearMonth(935, 935);
      islamicChronology0.setYear(0L, 935);
      int int0 = (-292269054);
      // Undeclared exception!
      try { 
        islamicChronology0.setYear(9223372036854775807L, (-292269054));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -301245869 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getDaysInYearMax();
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology1.getMonthOfYear(30672000000L, (-386));
      // Undeclared exception!
      try { 
        islamicChronology0.getDateMidnightMillis(1, (-887), 355);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -887 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      // Undeclared exception!
      try { 
        islamicChronology0.getMonthOfYear(3015L, 352831696);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too large: 352831696 > 292271022
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      islamicChronology_LeapYearPatternType0.isLeapYear((-1531));
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDaysInMonthMax(30);
      islamicChronology0.getLeapYearPatternType();
      islamicChronology0.equals("gV~)U/a=/YaN@");
      islamicChronology0.setYear((-1531), (-1531));
      islamicChronology0.getDaysInYearMonth(30, 3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getTotalMillisByYearMonth(292271022, 554);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      islamicChronology_LeapYearPatternType0.equals("R.jKu+}<=(edp");
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getMonthOfYear(1464L, 714);
      islamicChronology0.getMinYear();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      islamicChronology_LeapYearPatternType0.isLeapYear(3594);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getMinYear();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getMonthOfYear(31083663600000L, 1312);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getYear((-2194L));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      islamicChronology0.withZone((DateTimeZone) null);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_15_BASED);
      islamicChronology0.getDaysInMonthMax();
      islamicChronology0.calculateFirstDayOfYearMillis((-21));
      islamicChronology1.setYear((-42521587200000L), 30);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_INDIAN);
      IslamicChronology islamicChronology3 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology1.getAverageMillisPerYear();
      islamicChronology1.getMaxYear();
      IslamicChronology.getInstance((DateTimeZone) null, islamicChronology3.LEAP_YEAR_HABASH_AL_HASIB);
      islamicChronology2.getDaysInYearMax();
      IslamicChronology.getInstanceUTC();
      islamicChronology2.getApproxMillisAtEpochDividedByTwo();
      islamicChronology0.calculateFirstDayOfYearMillis(1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.hashCode();
      islamicChronology0.calculateFirstDayOfYearMillis(0);
      islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      islamicChronology0.isLeapDay(0L);
      islamicChronology0.add((-42521587200000L), (-407L), 2);
      islamicChronology0.getDaysInYearMax();
      islamicChronology0.getDaysInYearMonth(12, 355);
      islamicChronology0.getYearMillis((-458));
      islamicChronology0.getDaysInMonthMax(2500);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getWeekyear(0L);
      islamicChronology0.getDayOfMonth((-23L));
      islamicChronology0.getLeapYearPatternType();
      islamicChronology0.getAverageMillisPerMonth();
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance((DateTimeZone) null);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      islamicChronology2.isLeapDay(2551440384L);
      islamicChronology0.getDayOfMonth((-1787L));
      islamicChronology0.setYear(0L, 12);
      islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      islamicChronology1.getMinYear();
      IslamicChronology islamicChronology3 = (IslamicChronology)islamicChronology1.withZone((DateTimeZone) null);
      islamicChronology3.getDayOfMonth(21260793600000L, 1389, 21);
      islamicChronology1.getDayOfYear((-3725L), 21);
      islamicChronology1.getWeeksInYear(1);
      islamicChronology0.setYear((-23L), 1);
      islamicChronology1.calculateFirstDayOfYearMillis(21);
      islamicChronology1.getLeapYearPatternType();
      islamicChronology2.getDaysInYear(3504);
      islamicChronology2.hashCode();
      // Undeclared exception!
      try { 
        islamicChronology1.setYear((-1073L), Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too large: 2147483647 > 292271022
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getDayOfMonth(30672000000L);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology1.getDateTimeMillis(2104L, 13, 13, 1, 13);
      islamicChronology0.getMinYear();
      islamicChronology0.withZone((DateTimeZone) null);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_INDIAN);
      islamicChronology0.getDaysInYearMax();
      islamicChronology2.getYear(1);
      islamicChronology1.equals((Object) null);
      islamicChronology2.getDaysInYear(1);
      islamicChronology1.getDaysInYearMax();
      islamicChronology1.getDaysInYear(288);
      IslamicChronology islamicChronology3 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_16_BASED);
      islamicChronology2.getDayOfMonth(13);
      islamicChronology3.hashCode();
      islamicChronology0.getYearDifference(1389, 116639999504L);
      islamicChronology3.getAverageMillisPerYear();
      islamicChronology3.getDaysInMonthMax();
      islamicChronology0.getYear(355);
      islamicChronology2.getLeapYearPatternType();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      islamicChronology0.getFirstWeekOfYearMillis((-292269337));
      islamicChronology0.getYear((-2467L));
      islamicChronology0.calculateFirstDayOfYearMillis(1);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology2.getDaysInMonthMax((-946L));
      islamicChronology0.equals(islamicChronology2);
      islamicChronology0.getMonthOfYear(30962844000000L, 29);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      islamicChronology_LeapYearPatternType0.equals(islamicChronology0);
      islamicChronology2.isLeapYear(13);
      islamicChronology0.getDayOfMonth((-946L));
      islamicChronology2.getYearMillis(28495);
      islamicChronology2.setYear((-2482L), (-292269337));
      islamicChronology2.getYearDifference((-292269337), 3329L);
      islamicChronology2.getDaysInYearMonth(1, 0);
      islamicChronology2.LEAP_YEAR_16_BASED.equals(islamicChronology_LeapYearPatternType0);
      islamicChronology0.getDaysInMonthMax();
      islamicChronology2.getYearDifference((-715L), 3329L);
      islamicChronology1.getYear((-8948534433609600000L));
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
      islamicChronology1.getYear((-42521587200000L));
      islamicChronology1.getMinYear();
      islamicChronology0.equals(islamicChronology1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      int int0 = (-496);
      IslamicChronology.getInstance();
      int int1 = 1;
      islamicChronology0.getDaysInYearMonth(1, 1);
      ReadablePeriod readablePeriod0 = null;
      // Undeclared exception!
      try { 
        islamicChronology0.getDateMidnightMillis((-496), (-2209), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -496 for year must be in the range [0,292271023]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfYear(86399986L, 292271001);
      islamicChronology0.getYearMillis(2467);
      islamicChronology0.getMonthOfYear((-1693L));
      islamicChronology0.getDaysInMonthMax((-1693L));
      islamicChronology0.getMinYear();
      islamicChronology0.getAverageMillisPerMonth();
      islamicChronology0.getYearMonthDayMillis(29, 292271022, 162);
      islamicChronology0.getTotalMillisByYearMonth(29, 292271022);
      islamicChronology0.getLeapYearPatternType();
      islamicChronology0.getAverageMillisPerYear();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfYear(561L, 0);
      IslamicChronology.getInstance((DateTimeZone) null);
      IslamicChronology.getInstance();
      islamicChronology0.isLeapDay(0L);
      int int0 = islamicChronology0.getDaysInYear(1);
      assertEquals(354, int0);
      
      long long0 = islamicChronology0.calculateFirstDayOfYearMillis(354);
      assertEquals((-31713724800000L), long0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType((-1992), (-2912));
      boolean boolean0 = islamicChronology_LeapYearPatternType0.isLeapYear((-1992));
      assertTrue(boolean0);
  }
}
