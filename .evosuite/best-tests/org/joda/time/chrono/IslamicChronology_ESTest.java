/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:30:45 GMT 2018
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.IslamicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IslamicChronology_ESTest extends IslamicChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDaysInYearMonth(694, 694);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      islamicChronology1.assemble((AssembledChronology.Fields) null);
      // Undeclared exception!
      try { 
        islamicChronology0.getWeeksInYear((-1649826310));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -1649826310 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfMonth((-863L), 292271022, 292271022);
      islamicChronology0.getDaysInMonthMax();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      islamicChronology_LeapYearPatternType0.isLeapYear(30);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      islamicChronology1.setYear(2592000000L, 30);
      islamicChronology1.getWeekOfWeekyear(0L, 2971);
      islamicChronology1.setYear(3282L, 30);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      islamicChronology2.getYearDifference((-41606265600000L), 2551440384L);
      islamicChronology0.getYearDifference(2592000000L, (-2217L));
      islamicChronology1.getTotalMillisByYearMonth(59, 59);
      islamicChronology0.getDaysInMonthMax(50);
      islamicChronology1.getAverageMillisPerMonth();
      IslamicChronology islamicChronology3 = IslamicChronology.getInstanceUTC();
      islamicChronology2.getMaxYear();
      islamicChronology0.LEAP_YEAR_16_BASED.isLeapYear((-292269337));
      islamicChronology1.getDaysInMonthMax(50);
      islamicChronology3.getAverageMillisPerYearDividedByTwo();
      islamicChronology0.getDaysInMonthMax(3503);
      islamicChronology2.calculateFirstDayOfYearMillis(12);
      islamicChronology3.LEAP_YEAR_16_BASED.equals(islamicChronology_LeapYearPatternType0);
      // Undeclared exception!
      try { 
        islamicChronology1.setYear((-3523L), 690562340);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too large: 690562340 > 292271022
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfMonth(269740797783L, 2267, (-4));
      islamicChronology0.getYearMillis((-2180));
      islamicChronology0.getYear(269740797783L);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_16_BASED);
      islamicChronology1.getMonthOfYear(1398, (-4));
      islamicChronology0.getMonthOfYear(1398, 3259);
      islamicChronology0.getDaysInYearMonth((-469), 59);
      islamicChronology1.getAverageMillisPerYear();
      islamicChronology1.getMinYear();
      islamicChronology1.setYear((-5360L), (-469));
      islamicChronology1.isLeapYear(512);
      islamicChronology1.withUTC();
      islamicChronology1.getDayOfMonth((-2963L));
      islamicChronology1.getApproxMillisAtEpochDividedByTwo();
      islamicChronology0.getLeapYearPatternType();
      islamicChronology0.getMinYear();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfMonth((-863L), 292271022, 292271022);
      islamicChronology0.getDaysInMonthMax();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      islamicChronology0.isLeapYear(292271022);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      islamicChronology1.setYear(2592000000L, 30);
      islamicChronology1.getWeekOfWeekyear(0L, 2955);
      islamicChronology1.setYear(3265L, 30);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      islamicChronology2.getYearDifference((-41606265600000L), 2551440384L);
      islamicChronology0.getYearDifference(2592000000L, (-2217L));
      islamicChronology1.getTotalMillisByYearMonth(59, 59);
      islamicChronology0.getDaysInMonthMax(50);
      islamicChronology1.getAverageMillisPerMonth();
      IslamicChronology islamicChronology3 = IslamicChronology.getInstanceUTC();
      islamicChronology2.getMaxYear();
      islamicChronology0.LEAP_YEAR_16_BASED.isLeapYear((-292269337));
      islamicChronology1.getDaysInMonthMax(50);
      islamicChronology3.getAverageMillisPerYearDividedByTwo();
      islamicChronology0.getDaysInMonthMax(3503);
      islamicChronology2.calculateFirstDayOfYearMillis(12);
      IslamicChronology.getInstanceUTC();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.calculateFirstDayOfYearMillis(902);
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, (Object) null, islamicChronology0.LEAP_YEAR_HABASH_AL_HASIB);
      islamicChronology1.getAverageMillisPerYearDividedByTwo();
      islamicChronology1.getDayOfYear(902, 1);
      islamicChronology1.getDaysInMonthMax((-14935449600000L));
      islamicChronology1.getYearDifference(119232000000L, (-3128L));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfMonth((-863L), 292271022, 292271022);
      islamicChronology0.getDaysInMonthMax();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      islamicChronology_LeapYearPatternType0.isLeapYear(30);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      islamicChronology1.setYear(2592000000L, 30);
      islamicChronology1.getWeekOfWeekyear(0L, 2971);
      islamicChronology1.setYear(3265L, 30);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      islamicChronology2.getYearDifference((-41606265600000L), 2551440384L);
      islamicChronology0.getYearDifference(2592000000L, (-2217L));
      islamicChronology1.getTotalMillisByYearMonth(59, 59);
      islamicChronology0.getDaysInMonthMax(50);
      islamicChronology1.getAverageMillisPerMonth();
      IslamicChronology islamicChronology3 = IslamicChronology.getInstanceUTC();
      islamicChronology2.getMaxYear();
      islamicChronology0.LEAP_YEAR_16_BASED.isLeapYear((-292269337));
      islamicChronology1.getDaysInMonthMax(50);
      islamicChronology3.getAverageMillisPerYearDividedByTwo();
      islamicChronology0.getDaysInMonthMax(3503);
      islamicChronology2.calculateFirstDayOfYearMillis(12);
      islamicChronology1.getMonthOfYear(3503, 2004);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfMonth((-863L), 292271022, 292271022);
      islamicChronology0.getDaysInMonthMax();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      islamicChronology_LeapYearPatternType0.isLeapYear(30);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      islamicChronology1.setYear(2592000000L, 30);
      islamicChronology1.getWeekOfWeekyear(3265L, 2955);
      islamicChronology1.setYear(3265L, 30);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      islamicChronology2.getYearDifference((-41606265600000L), 2551440384L);
      islamicChronology0.getYearDifference(2592000000L, (-2217L));
      islamicChronology1.getTotalMillisByYearMonth(1, 1);
      islamicChronology0.getDaysInMonthMax(50);
      islamicChronology1.getAverageMillisPerMonth();
      IslamicChronology islamicChronology3 = IslamicChronology.getInstanceUTC();
      islamicChronology2.getMaxYear();
      islamicChronology0.LEAP_YEAR_16_BASED.isLeapYear((-292269337));
      islamicChronology1.getDaysInMonthMax(50);
      islamicChronology3.getAverageMillisPerYearDividedByTwo();
      islamicChronology0.getDaysInMonthMax(3503);
      islamicChronology2.calculateFirstDayOfYearMillis(292271022);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getYearDifference(0L, (-3L));
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, islamicChronology0, islamicChronology0.LEAP_YEAR_16_BASED);
      islamicChronology0.getYearMonthDayMillis(1, (-121), (-121));
      islamicChronology1.getMonthOfYear(2675L);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(292271022, 292271022);
      islamicChronology_LeapYearPatternType0.equals(islamicChronology0);
      islamicChronology1.equals(islamicChronology0);
      islamicChronology0.getYearDifference(1561L, (-3L));
      islamicChronology0.withZone((DateTimeZone) null);
      islamicChronology1.LEAP_YEAR_15_BASED.equals(islamicChronology0);
      islamicChronology0.getDayOfMonth((-475L));
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_15_BASED);
      islamicChronology0.withUTC();
      IslamicChronology islamicChronology3 = IslamicChronology.getInstance();
      islamicChronology3.getWeekOfWeekyear(23L);
      islamicChronology2.setYear((-3L), 1);
      islamicChronology1.getYearMonthMillis(623, 21);
      islamicChronology3.getDaysInMonthMax(1188L);
      islamicChronology3.getDaysInMonthMax();
      islamicChronology2.getDayOfYear((-3L));
      IslamicChronology islamicChronology4 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology2.LEAP_YEAR_INDIAN);
      islamicChronology4.getYearMonthDayMillis(1, 1, (-3756));
      IslamicChronology.getInstance((DateTimeZone) null, islamicChronology1.LEAP_YEAR_16_BASED);
      islamicChronology2.getMinYear();
      islamicChronology2.getAverageMillisPerMonth();
      IslamicChronology islamicChronology5 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology5.getDaysInYearMax();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      long long0 = (-3L);
      islamicChronology0.getYearDifference(0L, (-3L));
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, islamicChronology0, islamicChronology0.LEAP_YEAR_16_BASED);
      islamicChronology0.getYearMonthDayMillis(1, (-121), (-121));
      islamicChronology1.getMonthOfYear(2675L);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(292271022, 292271022);
      islamicChronology_LeapYearPatternType0.equals(islamicChronology0);
      islamicChronology1.equals(islamicChronology0);
      islamicChronology0.getYearDifference(1561L, (-3L));
      islamicChronology1.LEAP_YEAR_15_BASED.equals(islamicChronology0);
      islamicChronology0.getDayOfMonth((-475L));
      IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_15_BASED);
      islamicChronology0.withUTC();
      IslamicChronology.getInstance();
      long long1 = 0L;
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType1 = new IslamicChronology.LeapYearPatternType(1023, 1);
      // Undeclared exception!
      try { 
        IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology0.getYearDifference(0L, (-3L));
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, islamicChronology0, islamicChronology0.LEAP_YEAR_16_BASED);
      islamicChronology0.getYearMonthDayMillis(1, (-121), (-121));
      islamicChronology1.getMonthOfYear(2675L);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(292271022, 292271022);
      islamicChronology_LeapYearPatternType0.equals(islamicChronology0);
      islamicChronology1.equals(islamicChronology0);
      islamicChronology0.getYearDifference(1561L, (-3L));
      islamicChronology0.withZone((DateTimeZone) null);
      islamicChronology1.LEAP_YEAR_15_BASED.equals(islamicChronology0);
      islamicChronology0.getDayOfMonth((-475L));
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_15_BASED);
      islamicChronology0.withUTC();
      IslamicChronology islamicChronology3 = IslamicChronology.getInstance();
      islamicChronology3.getWeekOfWeekyear(0L);
      islamicChronology2.setYear((-3L), 1);
      islamicChronology1.getYearMonthMillis(623, 21);
      islamicChronology3.getDaysInMonthMax(1188L);
      islamicChronology3.getDaysInMonthMax();
      islamicChronology2.getDayOfYear((-3L));
      IslamicChronology islamicChronology4 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology2.LEAP_YEAR_INDIAN);
      islamicChronology4.getYearMonthDayMillis(1, 1, (-3756));
      IslamicChronology.getInstance((DateTimeZone) null, islamicChronology1.LEAP_YEAR_16_BASED);
      islamicChronology2.getMinYear();
      islamicChronology2.getAverageMillisPerMonth();
      IslamicChronology islamicChronology5 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology5.getDaysInYearMax();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDaysInMonthMaxForSet((-388L), 1584);
      islamicChronology0.hashCode();
      islamicChronology0.getWeekyear((-1401L));
      islamicChronology0.getMinYear();
      islamicChronology0.getDaysInYearMax();
      islamicChronology0.getMonthOfYear(894L);
      islamicChronology0.getAverageMillisPerYear();
      islamicChronology0.getDaysInMonthMax();
      islamicChronology0.getDaysInYearMax();
      islamicChronology0.getAverageMillisPerMonth();
      islamicChronology0.getDayOfMonth(30);
      islamicChronology0.getMonthOfYear(112L, 16777216);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      islamicChronology_LeapYearPatternType0.isLeapYear(690562340);
      islamicChronology0.setYear((-2147483648L), 1584);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfMonth((-863L), 292271022, 292271022);
      islamicChronology0.getDaysInMonthMax();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      islamicChronology1.setYear(2592000000L, 30);
      islamicChronology1.getWeekOfWeekyear(0L, 2955);
      islamicChronology1.setYear(1, 30);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      islamicChronology2.getYearDifference((-41606265600000L), 2551440384L);
      islamicChronology0.getYearDifference(2592000000L, (-2217L));
      islamicChronology1.getTotalMillisByYearMonth(59, 59);
      islamicChronology0.getDaysInMonthMax(50);
      islamicChronology1.getAverageMillisPerMonth();
      IslamicChronology islamicChronology3 = IslamicChronology.getInstanceUTC();
      islamicChronology2.getMaxYear();
      islamicChronology0.LEAP_YEAR_16_BASED.isLeapYear((-292269337));
      islamicChronology1.getDaysInMonthMax(50);
      islamicChronology3.getAverageMillisPerYearDividedByTwo();
      islamicChronology0.getDaysInMonthMax(3503);
      islamicChronology2.calculateFirstDayOfYearMillis(12);
      islamicChronology1.getApproxMillisAtEpochDividedByTwo();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfMonth((-863L), 292271022, 292271022);
      islamicChronology0.getDaysInMonthMax();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      islamicChronology_LeapYearPatternType0.isLeapYear(30);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      islamicChronology1.setYear(2592000000L, 30);
      islamicChronology1.getWeekOfWeekyear(0L, 2955);
      islamicChronology1.setYear(3265L, 30);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      islamicChronology2.getYearDifference((-41606265600000L), 2551440384L);
      islamicChronology0.getYearDifference(2592000000L, (-2217L));
      islamicChronology1.getTotalMillisByYearMonth(59, 59);
      islamicChronology0.getDaysInMonthMax(50);
      islamicChronology1.getAverageMillisPerMonth();
      IslamicChronology islamicChronology3 = IslamicChronology.getInstanceUTC();
      islamicChronology2.getMaxYear();
      islamicChronology0.LEAP_YEAR_16_BASED.isLeapYear((-292269337));
      islamicChronology3.calculateFirstDayOfYearMillis(292271022);
      islamicChronology1.getDaysInMonthMax(50);
      islamicChronology3.getAverageMillisPerYearDividedByTwo();
      islamicChronology0.getDaysInMonthMax(3503);
      islamicChronology2.calculateFirstDayOfYearMillis(12);
      islamicChronology3.withUTC();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfMonth((-863L), 292271022, 292271022);
      islamicChronology0.getDaysInMonthMax();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      islamicChronology_LeapYearPatternType0.isLeapYear(30);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      islamicChronology1.setYear(2592000000L, 30);
      islamicChronology1.getWeekOfWeekyear(0L, 2926);
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      islamicChronology2.getYearDifference((-41606265600000L), 2551440384L);
      islamicChronology0.getYearDifference(2592000000L, (-2217L));
      islamicChronology1.getTotalMillisByYearMonth(59, 59);
      islamicChronology0.getDaysInMonthMax(50);
      islamicChronology1.getAverageMillisPerMonth();
      IslamicChronology islamicChronology3 = IslamicChronology.getInstanceUTC();
      islamicChronology2.getMaxYear();
      islamicChronology0.LEAP_YEAR_16_BASED.isLeapYear((-292269337));
      islamicChronology1.getDaysInMonthMax(50);
      islamicChronology3.getAverageMillisPerYearDividedByTwo();
      islamicChronology0.getDaysInMonthMax(3503);
      islamicChronology2.calculateFirstDayOfYearMillis(12);
      islamicChronology2.getDayOfMonth(3503);
      islamicChronology1.equals(islamicChronology3);
      islamicChronology2.getLeapYearPatternType();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDaysInYearMonth(745, 745);
      islamicChronology0.getMonthOfYear(745, 745);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      islamicChronology1.calculateFirstDayOfYearMillis(30);
      islamicChronology0.getDaysInYear((-898));
      islamicChronology0.getYear(745);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getYearDifference(945L, 945L);
      islamicChronology0.getWeekOfWeekyear(0L);
      islamicChronology0.getDayOfMonth(802L, 271, 271);
      islamicChronology0.getDaysInYear(2204);
      islamicChronology0.getDaysInYearMonth(354, 12);
      islamicChronology0.hashCode();
      islamicChronology0.getAverageMillisPerYear();
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      // Undeclared exception!
      try { 
        islamicChronology1.get((ReadablePeriod) null, 945L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfMonth((-863L), 292271022, 292271022);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      islamicChronology_LeapYearPatternType0.isLeapYear((-1767843216));
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      long long0 = 2592000000L;
      // Undeclared exception!
      try { 
        islamicChronology1.setYear(2592000000L, (-1767843216));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -1767843216 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDaysInYearMonth(733, 733);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      islamicChronology0.getYearMonthDayMillis(30, 262144, 1680);
      islamicChronology0.getDaysInYear((-898));
      islamicChronology1.equals(islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDaysInYearMonth(733, 733);
      IslamicChronology.getInstance();
      islamicChronology0.getDaysInYear((-898));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology0.getYearDifference(0L, (-3L));
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, islamicChronology0, islamicChronology0.LEAP_YEAR_16_BASED);
      islamicChronology0.getYearMonthDayMillis(1, (-121), (-121));
      islamicChronology1.getMonthOfYear(2675L);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(292271022, 292271022);
      islamicChronology_LeapYearPatternType0.equals(islamicChronology0);
      islamicChronology1.equals(islamicChronology0);
      islamicChronology0.getYearDifference(1561L, (-3L));
      islamicChronology1.LEAP_YEAR_15_BASED.equals(islamicChronology0);
      islamicChronology0.getDayOfMonth((-475L));
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_15_BASED);
      islamicChronology0.withUTC();
      IslamicChronology islamicChronology3 = IslamicChronology.getInstance();
      islamicChronology3.getWeekOfWeekyear(0L);
      islamicChronology2.setYear((-3L), 1);
      islamicChronology1.getYearMonthMillis(623, 21);
      islamicChronology3.getDaysInMonthMax(1188L);
      islamicChronology3.getDaysInMonthMax();
      islamicChronology2.getDayOfYear((-3L));
      IslamicChronology islamicChronology4 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology2.LEAP_YEAR_INDIAN);
      islamicChronology4.getYearMonthDayMillis(1, 1, (-3756));
      IslamicChronology.getInstance((DateTimeZone) null, islamicChronology1.LEAP_YEAR_16_BASED);
      islamicChronology2.getMinYear();
      islamicChronology2.getAverageMillisPerMonth();
      IslamicChronology.getInstance((DateTimeZone) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfMonth((-863L), 292271022, 292271022);
      islamicChronology0.getDaysInMonthMax();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      islamicChronology_LeapYearPatternType0.isLeapYear(30);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      islamicChronology1.setYear(2592000000L, 30);
      islamicChronology1.getWeekOfWeekyear(0L, 2955);
      islamicChronology1.setYear(3265L, 30);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      islamicChronology2.getYearDifference((-41606265600000L), 2551440384L);
      islamicChronology0.getYearDifference(2592000000L, (-2217L));
      islamicChronology1.getTotalMillisByYearMonth(59, 59);
      islamicChronology0.getDaysInMonthMax(50);
      islamicChronology1.getAverageMillisPerMonth();
      IslamicChronology islamicChronology3 = IslamicChronology.getInstanceUTC();
      islamicChronology2.getMaxYear();
      islamicChronology0.LEAP_YEAR_16_BASED.isLeapYear((-292269337));
      islamicChronology1.getDaysInMonthMax(50);
      islamicChronology3.getAverageMillisPerYearDividedByTwo();
      islamicChronology0.getDaysInMonthMax(3503);
      islamicChronology2.calculateFirstDayOfYearMillis(12);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfMonth((-863L), 292271022, 292271022);
      islamicChronology0.getDaysInMonthMax();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      islamicChronology_LeapYearPatternType0.isLeapYear(30);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      islamicChronology1.setYear(2592000000L, 30);
      islamicChronology1.getWeekOfWeekyear(0L, 2955);
      islamicChronology1.setYear(3265L, 30);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      islamicChronology2.getYearDifference((-41606265600000L), 2551440384L);
      // Undeclared exception!
      try { 
        islamicChronology0.calculateFirstDayOfYearMillis((-1767843216));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -1767843216 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      // Undeclared exception!
      try { 
        islamicChronology0.getDayOfMonth(116639997783L, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -2147483648 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance((DateTimeZone) null);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      islamicChronology0.getYearMillis(1);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getAverageMillisPerMonth();
      islamicChronology2.calculateFirstDayOfYearMillis(292271022);
      islamicChronology0.isLeapYear(1);
      IslamicChronology.getInstance((DateTimeZone) null, islamicChronology1.LEAP_YEAR_15_BASED);
      islamicChronology2.LEAP_YEAR_16_BASED.equals(islamicChronology1);
      islamicChronology1.setYear(1, 1);
      islamicChronology0.getAverageMillisPerYear();
      islamicChronology1.getMinYear();
      islamicChronology2.equals(islamicChronology0);
      islamicChronology0.getYearDifference((-42496790399999L), 1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology0.getYearDifference(0L, (-3L));
      islamicChronology0.getYearMonthDayMillis(1, (-121), (-121));
      islamicChronology0.getMonthOfYear(2675L);
      islamicChronology0.LEAP_YEAR_16_BASED.equals(islamicChronology0);
      islamicChronology0.equals(islamicChronology0);
      islamicChronology0.getYearDifference(1561L, (-3L));
      islamicChronology0.LEAP_YEAR_15_BASED.equals(islamicChronology0);
      islamicChronology0.getDayOfMonth((-475L));
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_15_BASED);
      islamicChronology0.withUTC();
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      islamicChronology2.getWeekOfWeekyear(0L);
      islamicChronology1.setYear((-3L), 1);
      islamicChronology0.getYearMonthMillis(623, 21);
      islamicChronology2.getDaysInMonthMax(1188L);
      islamicChronology2.getDaysInMonthMax();
      islamicChronology1.getDayOfYear((-3L));
      IslamicChronology islamicChronology3 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology1.LEAP_YEAR_INDIAN);
      islamicChronology0.calculateFirstDayOfYearMillis(1);
      islamicChronology3.getYearMonthDayMillis(1, 1, (-3756));
      IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_16_BASED);
      islamicChronology1.getMinYear();
      islamicChronology1.getAverageMillisPerMonth();
      IslamicChronology.getInstance((DateTimeZone) null);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getWeekyear(0L);
      islamicChronology0.getYearDifference((-326L), (-326L));
      islamicChronology0.getDaysInYear(12);
      islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      islamicChronology0.getMinYear();
      islamicChronology0.getMonthOfYear(0L, 292271022);
      islamicChronology0.getYearDifference((-501L), (-326L));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.equals((Object) null);
      IslamicChronology.getInstance();
      islamicChronology0.getDaysInMonthMax(7837);
      IslamicChronology.getInstanceUTC();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      IslamicChronology islamicChronology2 = new IslamicChronology(islamicChronology0, islamicChronology1, islamicChronology0.LEAP_YEAR_HABASH_AL_HASIB);
      islamicChronology2.getMaxYear();
      islamicChronology2.getDaysInMonthMax();
      islamicChronology2.withZone((DateTimeZone) null);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getMinYear();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(0, 0);
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, islamicChronology0, islamicChronology_LeapYearPatternType0);
      islamicChronology_LeapYearPatternType0.equals(islamicChronology1);
      islamicChronology1.isLeapYear(890);
      islamicChronology1.getMonthOfYear((-883L), 890);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      islamicChronology_LeapYearPatternType0.equals((Object) null);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDaysInYearMonth((-1086), (-4892));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getYearMillis(292271022);
      islamicChronology0.getMaxYear();
      islamicChronology0.getMinYear();
      islamicChronology0.getDaysInMonthMax(1);
      islamicChronology0.getDayOfMonth(8948501164252800000L);
      islamicChronology0.setYear(12345L, 30);
      islamicChronology0.getLeapYearPatternType();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDaysInMonthMax(563L);
      islamicChronology0.getDayOfMonth(29, 884, (-837));
      islamicChronology0.setYear(918518400000L, (-332));
      IslamicChronology.getInstanceUTC();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = null;
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, (Object) null, (IslamicChronology.LeapYearPatternType) null);
      // Undeclared exception!
      try { 
        islamicChronology0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.isLeapDay(31536000000L);
      islamicChronology0.getYearMonthMillis(2, 2);
      islamicChronology0.isLeapYear(2);
      islamicChronology0.getTotalMillisByYearMonth(2, 2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getYearMonthDayMillis(292271022, 292271022, 292271022);
      islamicChronology0.getMonthOfYear(292271022);
      // Undeclared exception!
      try { 
        islamicChronology0.getWeeksInYear(292271022);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too large: 292271023 > 292271022
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getYearMonthMillis(153692453, 2);
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getLeapYearPatternType();
      islamicChronology0.getWeekOfWeekyear(1220L);
      islamicChronology0.getWeeksInYear(3250);
      islamicChronology0.getYear(0L);
      islamicChronology0.getDaysInYearMax();
      islamicChronology0.getDaysInYear(30);
      islamicChronology0.getDaysInYearMax();
      islamicChronology0.withUTC();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology0.getYearMonthMillis((-681), (-681));
      islamicChronology0.getYear(1016L);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology1.add((-1236L), (long) 1, (-292269337));
      islamicChronology1.calculateFirstDayOfYearMillis(1389);
      IslamicChronology.getInstance((DateTimeZone) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      IslamicChronology.getInstance();
      // Undeclared exception!
      try { 
        islamicChronology0.getYearMillis(690562340);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too large: 690562340 > 292271022
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getDayOfMonth(21260793600000L, (-3572), (-3572));
      islamicChronology0.getDaysInYearMax();
      islamicChronology0.getDaysInMonthMax();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, islamicChronology0, islamicChronology0.LEAP_YEAR_15_BASED);
      islamicChronology1.getDaysInYearMonth(1, 2101);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getDayOfMonth(2772L, 292271022);
      islamicChronology0.getYearDifference(2772L, (-2633L));
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, islamicChronology0, islamicChronology0.LEAP_YEAR_15_BASED);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDaysInMonthMax((-862));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDaysInYear(3092);
      islamicChronology0.getMinYear();
      islamicChronology0.getYearDifference(579L, 0L);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, islamicChronology0, islamicChronology0.LEAP_YEAR_16_BASED);
      islamicChronology1.getYearDifference(1, (-1938L));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType((-625), (-625));
      islamicChronology_LeapYearPatternType0.isLeapYear((-625));
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      islamicChronology0.getMaxYear();
      islamicChronology0.getDaysInYear(1440);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, (Object) null, islamicChronology0.LEAP_YEAR_16_BASED);
      islamicChronology1.getYearDifference((-749L), (-749L));
      islamicChronology1.getYearMillis(0);
      islamicChronology1.getApproxMillisAtEpochDividedByTwo();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, islamicChronology0, islamicChronology_LeapYearPatternType0);
      islamicChronology1.getMaxYear();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfMonth((-863L), 292271022, 292271022);
      islamicChronology0.getDaysInMonthMax();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      islamicChronology_LeapYearPatternType0.isLeapYear(30);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      islamicChronology1.setYear(2592000000L, 30);
      islamicChronology1.getWeekOfWeekyear(0L, 2971);
      islamicChronology1.setYear(3282L, 30);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      islamicChronology2.getYearDifference((-41606265600000L), 2551440384L);
      islamicChronology0.getYearDifference(2592000000L, (-2217L));
      islamicChronology1.getTotalMillisByYearMonth(59, 59);
      islamicChronology0.getDaysInMonthMax(50);
      islamicChronology1.getAverageMillisPerMonth();
      IslamicChronology islamicChronology3 = IslamicChronology.getInstanceUTC();
      islamicChronology2.getMaxYear();
      islamicChronology0.LEAP_YEAR_16_BASED.isLeapYear((-292269337));
      islamicChronology1.getDaysInMonthMax(50);
      islamicChronology3.getAverageMillisPerYearDividedByTwo();
      islamicChronology0.getDaysInMonthMax(3503);
      islamicChronology2.calculateFirstDayOfYearMillis(12);
      islamicChronology3.LEAP_YEAR_16_BASED.equals(islamicChronology_LeapYearPatternType0);
      islamicChronology1.setYear((-3523L), 1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getYearDifference(945L, 945L);
      islamicChronology0.getWeekOfWeekyear(0L);
      islamicChronology0.getDayOfMonth(802L, 271, 271);
      islamicChronology0.getDaysInYear(2216);
      islamicChronology0.getDaysInYearMonth(355, 12);
      islamicChronology0.hashCode();
      islamicChronology0.getAverageMillisPerYear();
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      // Undeclared exception!
      try { 
        islamicChronology1.get((ReadablePeriod) null, 945L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDaysInYearMonth(733, 733);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      islamicChronology0.getYearDifference((-51L), 394848000000L);
      islamicChronology0.getYearMonthDayMillis(30, 262144, 1680);
      islamicChronology0.getWeeksInYear((-5791));
      islamicChronology0.getDaysInYear((-898));
      islamicChronology1.equals(islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDaysInYearMonth(1, 1);
      IslamicChronology.getInstance();
      // Undeclared exception!
      try { 
        islamicChronology0.getWeeksInYear((-1649826310));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -1649826310 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology0.getYearDifference(1, (-3L));
      IslamicChronology islamicChronology1 = new IslamicChronology(islamicChronology0, islamicChronology0, islamicChronology0.LEAP_YEAR_16_BASED);
      islamicChronology0.getYearMonthDayMillis(1, (-121), (-121));
      IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology1.getMonthOfYear(2675L);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(292271022, 292271022);
      islamicChronology_LeapYearPatternType0.equals(islamicChronology0);
      islamicChronology1.equals(islamicChronology0);
      islamicChronology0.getYearDifference(1561L, (-3L));
      islamicChronology0.withZone((DateTimeZone) null);
      islamicChronology1.LEAP_YEAR_15_BASED.equals(islamicChronology0);
      islamicChronology0.getDayOfMonth((-475L));
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_15_BASED);
      islamicChronology0.withUTC();
      IslamicChronology islamicChronology3 = IslamicChronology.getInstance();
      islamicChronology3.getWeekOfWeekyear(0L);
      islamicChronology2.setYear((-3L), 1);
      islamicChronology1.getYearMonthMillis(623, 21);
      islamicChronology3.getDaysInMonthMax(1188L);
      islamicChronology3.getDaysInMonthMax();
      islamicChronology2.getDayOfYear((-3L));
      IslamicChronology islamicChronology4 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology2.LEAP_YEAR_INDIAN);
      islamicChronology4.getYearMonthDayMillis(1, 1, (-3756));
      IslamicChronology.getInstance((DateTimeZone) null, islamicChronology1.LEAP_YEAR_16_BASED);
      islamicChronology2.getMinYear();
      islamicChronology2.getAverageMillisPerMonth();
      IslamicChronology islamicChronology5 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology5.getDaysInYearMax();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getWeekOfWeekyear(0L, 2955);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance();
      islamicChronology0.getTotalMillisByYearMonth(59, 59);
      islamicChronology0.getAverageMillisPerMonth();
      IslamicChronology islamicChronology2 = IslamicChronology.getInstanceUTC();
      islamicChronology1.getMaxYear();
      islamicChronology0.getDaysInMonthMax(50);
      islamicChronology1.getFirstWeekOfYearMillis(2955);
      islamicChronology1.calculateFirstDayOfYearMillis(12);
      islamicChronology0.getLeapYearPatternType();
      islamicChronology2.getApproxMillisAtEpochDividedByTwo();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getDayOfMonth((-863L), 292271022, 292271022);
      islamicChronology0.getDaysInMonthMax();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology1 = IslamicChronology.getInstanceUTC();
      islamicChronology1.setYear(2592000000L, 30);
      islamicChronology1.getWeekOfWeekyear(0L, 2955);
      islamicChronology1.setYear(3265L, 30);
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      islamicChronology2.getYearDifference((-41606265600000L), 2551440384L);
      IslamicChronology islamicChronology3 = new IslamicChronology(islamicChronology0, islamicChronology0, islamicChronology_LeapYearPatternType0);
      islamicChronology0.equals(islamicChronology3);
      islamicChronology0.getYearDifference(2592000000L, (-2217L));
      islamicChronology0.getDaysInMonthMax(50);
      islamicChronology1.getAverageMillisPerMonth();
      IslamicChronology islamicChronology4 = IslamicChronology.getInstanceUTC();
      islamicChronology2.getMaxYear();
      islamicChronology0.LEAP_YEAR_16_BASED.isLeapYear((-292269337));
      islamicChronology1.getDaysInMonthMax(50);
      islamicChronology4.getAverageMillisPerYearDividedByTwo();
      islamicChronology0.getDaysInMonthMax(3503);
      islamicChronology2.calculateFirstDayOfYearMillis(12);
      islamicChronology1.getMinYear();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.calculateFirstDayOfYearMillis(902);
      Object object0 = null;
      int int0 = 623191204;
      islamicChronology0.getYearMillis(623191204);
      islamicChronology0.getAverageMillisPerYear();
      int int1 = 694;
      int int2 = 32;
      // Undeclared exception!
      try { 
        islamicChronology0.getDateMidnightMillis(int0, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 623191204 for year must be in the range [0,292271023]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
