/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:45:52 GMT 2018
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Partial;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicChronology;
import org.joda.time.chrono.BasicYearDateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJEraDateTimeField;
import org.joda.time.chrono.GJMonthOfYearDateTimeField;
import org.joda.time.chrono.GJYearOfEraDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GJYearOfEraDateTimeField_ESTest extends GJYearOfEraDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{#}0?)");
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = copticChronology0.weekyearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      int int0 = 287;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 287, 287);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      copticChronology0.assemble(assembledChronology_Fields0);
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(offsetDateTimeField0, copticChronology0);
      copticChronology0.getFirstWeekOfYearMillis(287);
      MonthDay monthDay0 = new MonthDay();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      gJYearOfEraDateTimeField0.getAsShortText((ReadablePartial) monthDay0, 4, locale0);
      // Undeclared exception!
      try { 
        gJYearOfEraDateTimeField0.add(3250L, 1686);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 74 for dayOfMonth must be in the range [287,101]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = copticChronology0.era();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      long long0 = (-948L);
      long long1 = 2562L;
      int int0 = (-1813);
      MockDate mockDate0 = new MockDate((-1813), (-1813), 1);
      // Undeclared exception!
      try { 
        gJYearOfEraDateTimeField0.getDifference(1, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.joda.time.chrono.GJYearOfEraDateTimeField");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = copticChronology0.weekyear();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.getAsShortText((long) 1);
      gJYearOfEraDateTimeField0.getDifference(1, 1L);
      copticChronology0.getDayOfMonth(1L, 0);
      gJYearOfEraDateTimeField0.getDifference(2155L, 0);
      System.setCurrentTimeMillis(754L);
      gJYearOfEraDateTimeField0.get(754L);
      gJYearOfEraDateTimeField0.set(754L, 1);
      gJYearOfEraDateTimeField0.getMaximumValue();
      gJYearOfEraDateTimeField0.getRangeDurationField();
      gJYearOfEraDateTimeField0.getRangeDurationField();
      gJYearOfEraDateTimeField0.add((long) 24, 775);
      gJYearOfEraDateTimeField0.getDifference(1686, 24457507200024L);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = copticChronology0.millisOfSecond();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.getMinimumValue();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      copticChronology0.assemble(assembledChronology_Fields0);
      gJYearOfEraDateTimeField0.getLeapAmount((-1L));
      gJYearOfEraDateTimeField0.getDifferenceAsLong(0, 918518400000L);
      LocalDateTime localDateTime0 = new LocalDateTime();
      gJYearOfEraDateTimeField0.roundCeiling((-1L));
      LocalDateTime localDateTime1 = null;
      try {
        localDateTime1 = new LocalDateTime(971, 971, 1, 0, 0, 0, 0, copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 971 for monthOfYear must be in the range [1,13]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-1));
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate(0L, (Chronology) gregorianChronology0);
      GregorianChronology gregorianChronology1 = (GregorianChronology)localDate0.getChronology();
      PreciseDateTimeField preciseDateTimeField0 = (PreciseDateTimeField)dateTimeFieldType0.getField(gregorianChronology1);
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(preciseDateTimeField0, gregorianChronology0);
      gregorianChronology1.getWeeksInYear(10080);
      gJYearOfEraDateTimeField0.add((-2237L), 993);
      gJYearOfEraDateTimeField0.add((-2237L), 0L);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = copticChronology0.millisOfSecond();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.getMinimumValue();
      gJYearOfEraDateTimeField0.getLeapAmount((-1L));
      gJYearOfEraDateTimeField0.getDifferenceAsLong(0, 918518400000L);
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = null;
      try {
        localDateTime1 = new LocalDateTime(971, 971, 1, 0, 0, 0, 0, copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 971 for monthOfYear must be in the range [1,13]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(julianChronology0);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(gJEraDateTimeField0, islamicChronology0);
      gJEraDateTimeField0.addWrapField((long) 1, 1823);
      gJEraDateTimeField0.get(0L);
      gJYearOfEraDateTimeField0.getMinimumValue();
      gJYearOfEraDateTimeField0.getMinimumValue();
      gJYearOfEraDateTimeField0.getMinimumValue();
      // Undeclared exception!
      try { 
        gJYearOfEraDateTimeField0.add((long) 1, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeField dateTimeField0 = copticChronology0.centuryOfEra();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.remainder(942L);
      gJYearOfEraDateTimeField0.remainder(1);
      // Undeclared exception!
      try { 
        MockZonedDateTime.parse((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // text
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2542));
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = copticChronology0.millisOfDay();
      copticChronology0.getFirstWeekOfYearMillis(2583);
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.roundFloor(1);
      gJYearOfEraDateTimeField0.remainder(271L);
      gJYearOfEraDateTimeField0.roundFloor(1);
      gJYearOfEraDateTimeField0.getMaximumValue();
      gJYearOfEraDateTimeField0.getMaximumValue();
      gJYearOfEraDateTimeField0.add((long) 86399999, (long) (-2542));
      gJYearOfEraDateTimeField0.get(0L);
      gJYearOfEraDateTimeField0.set(0L, 86399999);
      gJYearOfEraDateTimeField0.roundCeiling(86397458);
      LocalDate localDate0 = new LocalDate(271L);
      int int0 = 4244;
      LocalDate localDate1 = localDate0.withCenturyOfEra(4244);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        gJYearOfEraDateTimeField0.addWrapField((ReadablePartial) localDate1, 0, intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = copticChronology0.weekyear();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      long long0 = 1209600000L;
      gJYearOfEraDateTimeField0.get(1209600000L);
      long long1 = 0L;
      copticChronology0.add((ReadablePeriod) null, 1209600000L, 2528);
      // Undeclared exception!
      try { 
        gJYearOfEraDateTimeField0.add(0L, 1209600000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1209601686 for weekyear must be in the range [-292269337,292272708]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = copticChronology0.secondOfMinute();
      copticChronology0.getWeekOfWeekyear(0L);
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.remainder(0L);
      gJYearOfEraDateTimeField0.roundFloor(0L);
      gJYearOfEraDateTimeField0.getRangeDurationField();
      gJYearOfEraDateTimeField0.getMinimumValue();
      gJYearOfEraDateTimeField0.roundCeiling(0L);
      gJYearOfEraDateTimeField0.getMinimumValue();
      gJYearOfEraDateTimeField0.getRangeDurationField();
      gJYearOfEraDateTimeField0.getRangeDurationField();
      // Undeclared exception!
      try { 
        LocalDate.parse("PeriodFormat.month");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"PeriodFormat.month\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeField dateTimeField0 = copticChronology0.monthOfYear();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.getDifference(31622400000L, 1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      copticChronology0.getYearDifference((-314L), 0L);
      DateTimeField dateTimeField0 = copticChronology0.yearOfEra();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.roundFloor(1);
      gJYearOfEraDateTimeField0.remainder((-1L));
      gJYearOfEraDateTimeField0.getDifference(1, (-9666000000L));
      gJYearOfEraDateTimeField0.add(0L, 1);
      gJYearOfEraDateTimeField0.set((-875L), 1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeField dateTimeField0 = copticChronology0.secondOfMinute();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.get(1);
      copticChronology0.getDaysInMonthMaxForSet(1, (-1));
      LocalDate localDate0 = new LocalDate((Chronology) copticChronology0);
      gJYearOfEraDateTimeField0.add((long) 1, (long) 1);
      int int0 = (-2211);
      LocalDate localDate1 = localDate0.minusYears((-2211));
      int int1 = 381;
      localDate1.equals(gJYearOfEraDateTimeField0);
      int[] intArray0 = new int[2];
      try { 
        copticChronology0.getDateTimeMillis((-371L), 1, (-2211), 680, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2211 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = copticChronology0.yearOfEra();
      copticChronology0.getYearMonthDayMillis(0, (-1), 0);
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, (BasicChronology) null);
      // Undeclared exception!
      try { 
        gJYearOfEraDateTimeField0.getRangeDurationField();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJYearOfEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeField dateTimeField0 = copticChronology0.hourOfDay();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.add(0L, 0L);
      gJYearOfEraDateTimeField0.getRangeDurationField();
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(copticChronology0, copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.CopticChronology
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(copticChronology0);
      dateTimeZone0.convertLocalToUTC(0L, true);
      basicYearDateTimeField0.roundFloor(0L);
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(basicYearDateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.addWrapField((long) 1, 1);
      gJYearOfEraDateTimeField0.roundFloor(1);
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-3L));
      LocalTime localTime1 = localTime0.withMinuteOfHour(0);
      ZoneInfoProvider zoneInfoProvider0 = new ZoneInfoProvider();
      DateTimeZone.setProvider(zoneInfoProvider0);
      int int0 = 59;
      int[] intArray0 = new int[0];
      int int1 = 2044;
      // Undeclared exception!
      try { 
        gJYearOfEraDateTimeField0.addWrapField((ReadablePartial) localTime1, 59, intArray0, 2044);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 59
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = copticChronology0.weekOfWeekyear();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.roundCeiling(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Object object0 = new Object();
      CopticChronology copticChronology0 = new CopticChronology(islamicChronology0, object0, 1);
      DateTimeField dateTimeField0 = copticChronology0.halfdayOfDay();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, islamicChronology0);
      islamicChronology_LeapYearPatternType0.isLeapYear(1);
      dateTimeZone0.convertUTCToLocal((-2760L));
      copticChronology0.getDayOfMonth(0, 1, 1);
      islamicChronology0.isLeapYear(0);
      islamicChronology_LeapYearPatternType0.isLeapYear(0);
      gJYearOfEraDateTimeField0.getRangeDurationField();
      islamicChronology0.isLeapDay(615559);
      gJYearOfEraDateTimeField0.getDifferenceAsLong(2155L, (-636L));
      gJYearOfEraDateTimeField0.getMaximumValue();
      gJYearOfEraDateTimeField0.get(1);
      gJYearOfEraDateTimeField0.roundFloor(0L);
      gJYearOfEraDateTimeField0.getRangeDurationField();
      gJYearOfEraDateTimeField0.getDifferenceAsLong(86399999L, 0L);
      gJYearOfEraDateTimeField0.remainder(236L);
      gJYearOfEraDateTimeField0.addWrapField((-32400000L), 3729);
      gJYearOfEraDateTimeField0.add(1149L, (-1));
      // Undeclared exception!
      try { 
        gJYearOfEraDateTimeField0.set((-1126L), 3729);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3729 for yearOfEra must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = copticChronology0.secondOfMinute();
      copticChronology0.getDaysInMonthMaxForSet(1L, 0);
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.addWrapField((-3234L), 1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = copticChronology0.era();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.get(0L);
      gJYearOfEraDateTimeField0.set(481L, 1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      copticChronology0.assemble(assembledChronology_Fields0);
      DateTimeField dateTimeField0 = copticChronology0.millisOfSecond();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.getDifferenceAsLong(0L, 0L);
      gJYearOfEraDateTimeField0.remainder(0L);
      gJYearOfEraDateTimeField0.roundFloor(0L);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      DateTimeField dateTimeField0 = assembledChronology_Fields0.clockhourOfDay;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = null;
      try {
        gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField((DateTimeField) null, gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DecoratedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = copticChronology0.secondOfMinute();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.getDifferenceAsLong(1, 24L);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeField dateTimeField0 = copticChronology0.centuryOfEra();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      int int0 = 0;
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      UTCProvider uTCProvider0 = new UTCProvider();
      DateTimeZone.setProvider(uTCProvider0);
      dateTimeZone0.adjustOffset(1, true);
      CopticChronology.getInstance(dateTimeZone0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        gJYearOfEraDateTimeField0.addWrapField((ReadablePartial) null, 0, intArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = copticChronology0.millisOfDay();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.getMaximumValue();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.toTimeZone();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);
      dateTimeZone0.isStandardOffset((-1129L));
      DateTimeField dateTimeField0 = copticChronology0.yearOfEra();
      copticChronology0.getYearMonthDayMillis(275, (-1419), (-2227));
      dateTimeZone0.isFixed();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.getDifference(0L, 1);
      gJYearOfEraDateTimeField0.getRangeDurationField();
      gJYearOfEraDateTimeField0.getMinimumValue();
      gJYearOfEraDateTimeField0.get(1);
      gJYearOfEraDateTimeField0.add(0L, (long) 1686);
      gJYearOfEraDateTimeField0.add((long) 0, 1);
      gJYearOfEraDateTimeField0.getRangeDurationField();
      gJYearOfEraDateTimeField0.add((long) 1, (-942));
      gJYearOfEraDateTimeField0.remainder((-1129L));
      gJYearOfEraDateTimeField0.roundFloor((-1L));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = copticChronology0.minuteOfDay();
      CopticChronology copticChronology1 = CopticChronology.getInstance((DateTimeZone) null);
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, copticChronology0);
      gJYearOfEraDateTimeField0.roundHalfCeiling(1);
      gJYearOfEraDateTimeField0.addWrapField((-1492L), 1);
      copticChronology1.withZone((DateTimeZone) null);
      System.setCurrentTimeMillis(65L);
      gJYearOfEraDateTimeField0.add((-1492L), 116);
      CopticChronology.getInstance((DateTimeZone) null);
      gJYearOfEraDateTimeField0.get(1);
      gJYearOfEraDateTimeField0.addWrapField((-412L), 512);
      gJYearOfEraDateTimeField0.set(0L, 1);
      gJYearOfEraDateTimeField0.add(588L, 512);
      gJYearOfEraDateTimeField0.get(43L);
      gJYearOfEraDateTimeField0.addWrapField((-3407L), 116);
      gJYearOfEraDateTimeField0.getDifference(116, (-43L));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      Object object0 = new Object();
      CopticChronology copticChronology0 = new CopticChronology(islamicChronology0, object0, 1);
      DateTimeField dateTimeField0 = copticChronology0.halfdayOfDay();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, islamicChronology0);
      islamicChronology_LeapYearPatternType0.isLeapYear(1);
      dateTimeZone0.convertUTCToLocal((-2760L));
      copticChronology0.getDayOfMonth(0, 1, 1);
      islamicChronology0.isLeapYear(0);
      islamicChronology_LeapYearPatternType0.isLeapYear(0);
      gJYearOfEraDateTimeField0.getRangeDurationField();
      islamicChronology0.isLeapDay(615559);
      gJYearOfEraDateTimeField0.getDifferenceAsLong(2155L, (-636L));
      gJYearOfEraDateTimeField0.getMaximumValue();
      gJYearOfEraDateTimeField0.get(1);
      gJYearOfEraDateTimeField0.roundFloor(0L);
      gJYearOfEraDateTimeField0.getRangeDurationField();
      gJYearOfEraDateTimeField0.getDifferenceAsLong(86399999L, 0L);
      gJYearOfEraDateTimeField0.remainder(236L);
      gJYearOfEraDateTimeField0.addWrapField((-32400000L), 3729);
      gJYearOfEraDateTimeField0.add(1149L, 19);
      // Undeclared exception!
      try { 
        gJYearOfEraDateTimeField0.set((-1126L), 3729);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3729 for yearOfEra must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(copticChronology0);
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(gJMonthOfYearDateTimeField0, copticChronology0);
      YearMonth yearMonth0 = new YearMonth((-1L));
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      gJYearOfEraDateTimeField0.addWrapField((ReadablePartial) yearMonth0, 0, intArray0, 1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeField dateTimeField0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        EthiopicChronology.getInstance((DateTimeZone) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.EthiopicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assembledChronology_Fields0.copyFieldsFrom(buddhistChronology0);
      DateTimeField dateTimeField0 = assembledChronology_Fields0.secondOfMinute;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(dateTimeField0, julianChronology0);
      gJYearOfEraDateTimeField0.getAsText(640L);
      gJYearOfEraDateTimeField0.roundFloor(640L);
      long long0 = 0L;
      int int0 = (-1223);
      julianChronology0.getDayOfMonth(0L, (-1223));
      julianChronology0.getDaysInMonthMax(0L);
      buddhistChronology0.toString();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      dateTimeZone0.convertUTCToLocal((-1223));
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      julianChronology0.get((ReadablePartial) yearMonth0, (-625L));
      gJYearOfEraDateTimeField0.getLeapDurationField();
      gJYearOfEraDateTimeField0.remainder((-2668L));
      gJYearOfEraDateTimeField0.getLeapDurationField();
      int int1 = 326565;
      gJYearOfEraDateTimeField0.set((long) 1, 31);
      // Undeclared exception!
      try { 
        gJYearOfEraDateTimeField0.set(332L, 326565);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 326565 for yearOfEra must be in the range [1,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
