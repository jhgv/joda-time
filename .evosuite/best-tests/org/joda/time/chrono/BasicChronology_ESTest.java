/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:24:47 GMT 2018
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicFixedMonthChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicChronology_ESTest extends BasicChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      julianChronology0.getYearDifference(4093L, 4093L);
      julianChronology0.getYearMillis(1475);
      julianChronology0.getWeeksInYear(1475);
      julianChronology0.getWeekOfWeekyear(4093L);
      julianChronology0.getWeekyear(4093L);
      julianChronology0.getDaysInYearMax();
      julianChronology0.getFirstWeekOfYearMillis(1969);
      julianChronology0.getDayOfMonth((-30499200000L));
      julianChronology0.getAverageMillisPerYearDividedByTwo();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      int int0 = BasicFixedMonthChronology.MONTH_LENGTH;
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      gregorianChronology0.withZone(dateTimeZone0);
      gregorianChronology0.getYearMillis(0);
      DateTimeZone dateTimeZone1 = gregorianChronology0.getZone();
      GregorianChronology gregorianChronology1 = GregorianChronology.getInstance(dateTimeZone1);
      gregorianChronology1.getDateTimeMillis((-196L), 0, 0, 0, 61);
      gregorianChronology0.getZone();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone1, islamicChronology_LeapYearPatternType0);
      GregorianChronology gregorianChronology2 = (GregorianChronology)gregorianChronology1.withUTC();
      julianChronology0.hashCode();
      gregorianChronology0.getYear(0L);
      islamicChronology0.getAverageMillisPerYear();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      EthiopicChronology.getInstance();
      ethiopicChronology0.withZone(dateTimeZone0);
      islamicChronology0.setYear(1, (-2513));
      // Undeclared exception!
      try { 
        gregorianChronology2.assemble((AssembledChronology.Fields) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology0.getDaysInMonthMax(0L);
      islamicChronology0.getYearDifference(0L, 1);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      islamicChronology0.getDayOfMonth(29);
      copticChronology0.getDayOfMonth(64L, 22);
      copticChronology0.getDayOfYear(981L);
      copticChronology0.getYearMonthMillis(1, 29);
      long long0 = BasicFixedMonthChronology.MILLIS_PER_YEAR;
      GregorianChronology.getInstanceUTC();
      IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_HABASH_AL_HASIB);
      islamicChronology0.isLeapYear((-2906));
      IslamicChronology.getInstance();
      islamicChronology0.getMillisOfDay(0L);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      int int0 = EthiopicChronology.EE;
      islamicChronology0.getDateMidnightMillis(1, 5, 17);
      islamicChronology0.getYearDifference(0L, (-1903L));
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      islamicChronology0.getDayOfMonth(1);
      copticChronology0.getDayOfMonth(64L, 22);
      copticChronology0.getDayOfYear(981L);
      copticChronology0.getYearMonthMillis(1, 22);
      copticChronology0.getApproxMillisAtEpochDividedByTwo();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      islamicChronology0.withUTC();
      islamicChronology0.isLeapYear((-2906));
      IslamicChronology.getInstance();
      gregorianChronology0.getAverageMillisPerYearDividedByTwo();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      int int0 = BasicFixedMonthChronology.MONTH_LENGTH;
      gregorianChronology0.getDayOfYear(10800000L, 5062500);
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      gregorianChronology0.withZone(dateTimeZone0);
      gregorianChronology0.getYearMillis(0);
      DateTimeZone dateTimeZone1 = gregorianChronology0.getZone();
      GregorianChronology gregorianChronology1 = GregorianChronology.getInstance(dateTimeZone1);
      gregorianChronology1.getDateTimeMillis((-196L), 0, 0, 0, 61);
      gregorianChronology0.getZone();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      gregorianChronology1.withUTC();
      julianChronology0.hashCode();
      gregorianChronology0.getYear(0L);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      EthiopicChronology.getInstance();
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)ethiopicChronology0.withZone(dateTimeZone0);
      ethiopicChronology1.getDaysInMonthMaxForSet((-75599939L), 61);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology0.getDaysInMonthMax(0L);
      islamicChronology0.getDayOfMonth(29, 927);
      islamicChronology0.getYearDifference(0L, (-1889L));
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      islamicChronology0.getDayOfMonth(29);
      copticChronology0.getDayOfMonth(64L, 22);
      int int0 = CopticChronology.AM;
      copticChronology0.getYearMonthMillis(1, 22);
      copticChronology0.getApproxMillisAtEpochDividedByTwo();
      GregorianChronology.getInstanceUTC();
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      int int1 = (-2906);
      // Undeclared exception!
      try { 
        islamicChronology1.getDayOfMonth(1, (-2141347979), 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -2141347979 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.getDaysInYear(93);
      long long0 = BasicFixedMonthChronology.MILLIS_PER_YEAR;
      gregorianChronology0.getWeekyear(31536000016L);
      gregorianChronology0.getDaysInYear((-2141347979));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      gregorianChronology0.getApproxMillisAtEpochDividedByTwo();
      gregorianChronology0.getDaysInMonthMax(31083597720000L);
      int int0 = 24;
      ethiopicChronology0.getDayOfMonth(31083597720000L, 963, 24);
      EthiopicChronology.getInstance();
      gregorianChronology0.calculateFirstDayOfYearMillis(963);
      // Undeclared exception!
      try { 
        IslamicChronology.getInstance(dateTimeZone0, (IslamicChronology.LeapYearPatternType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      copticChronology0.getFirstWeekOfYearMillis(0);
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      int int0 = CopticChronology.AM;
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
      islamicChronology0.getMillisOfDay((-4493L));
      islamicChronology0.getAverageMillisPerMonth();
      islamicChronology0.withZone(dateTimeZone0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      ethiopicChronology0.getMinYear();
      copticChronology0.getDaysInMonthMax(1606L);
      islamicChronology0.isLeapDay((-24796800000L));
      ethiopicChronology0.calculateFirstDayOfYearMillis(0);
      CopticChronology.getInstanceUTC();
      IslamicChronology.getInstance(dateTimeZone0, islamicChronology0.LEAP_YEAR_INDIAN);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.withUTC();
      ethiopicChronology0.isLeapDay(1656L);
      copticChronology0.getWeekOfWeekyear(1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      ethiopicChronology0.setYear((-9223372036854775808L), 939);
      ethiopicChronology0.isLeapDay((-474L));
      EthiopicChronology ethiopicChronology1 = EthiopicChronology.getInstanceUTC();
      ethiopicChronology0.withUTC();
      ethiopicChronology0.calculateFirstDayOfYearMillis((-6299));
      long long0 = BasicFixedMonthChronology.MILLIS_PER_YEAR;
      ethiopicChronology1.getMaxMonth(415);
      CopticChronology.getInstance();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.getMaxYear();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = islamicChronology0.getDaysInMonthMax(0L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(29, int0);
      
      long long0 = islamicChronology0.getYearDifference(0L, (-1889L));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0L, long0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      int int1 = islamicChronology0.getDayOfMonth(29);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(22, int1);
      assertFalse(int1 == int0);
      
      int int2 = copticChronology0.getDayOfMonth(64L, 22);
      assertEquals(1, CopticChronology.AM);
      assertEquals(29, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = copticChronology0.getDayOfYear(981L);
      assertEquals(1, CopticChronology.AM);
      assertEquals(113, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      long long1 = copticChronology0.getYearMonthMillis(1, 22);
      assertEquals(1, CopticChronology.AM);
      assertEquals((-53129779200000L), long1);
      assertFalse(long1 == long0);
      
      long long2 = copticChronology0.getApproxMillisAtEpochDividedByTwo();
      assertEquals(1, CopticChronology.AM);
      assertEquals(26607895200000L, long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withUTC();
      assertNotNull(islamicChronology1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      
      boolean boolean0 = islamicChronology0.isLeapYear((-2906));
      assertEquals(1, IslamicChronology.AH);
      assertFalse(boolean0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertNotSame(islamicChronology0, islamicChronology1);
      
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology2);
      assertEquals(1, IslamicChronology.AH);
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertNotSame(islamicChronology2, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology0);
      
      gregorianChronology0.getDaysInMonthMax();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      copticChronology0.getFirstWeekOfYearMillis(0);
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getDaysInMonthMax(0);
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
      islamicChronology0.getMillisOfDay((-4493L));
      islamicChronology0.getAverageMillisPerMonth();
      islamicChronology0.withZone(dateTimeZone0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      ethiopicChronology0.getMinYear();
      copticChronology0.getDaysInMonthMax(1583L);
      ethiopicChronology0.calculateFirstDayOfYearMillis(0);
      CopticChronology copticChronology1 = CopticChronology.getInstanceUTC();
      IslamicChronology.getInstance(dateTimeZone0, islamicChronology0.LEAP_YEAR_INDIAN);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.withUTC();
      ethiopicChronology0.isLeapDay(1707L);
      copticChronology1.getDaysInMonthMax();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      ethiopicChronology0.isLeapDay(286L);
      ethiopicChronology0.getDayOfMonth((-1801L));
      ethiopicChronology0.getWeekyear(22);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      gregorianChronology0.withZone(dateTimeZone0);
      EthiopicChronology.getInstance();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      gregorianChronology0.getDayOfMonth(1962);
      gregorianChronology0.getWeekOfWeekyear(9223372036854775807L, 236548278);
      ethiopicChronology0.getDayOfMonth(880L, 236548278, 1);
      islamicChronology0.getTotalMillisByYearMonth(0, 1);
      islamicChronology0.setYear(1962, 0);
      islamicChronology0.add((long) 22, (long) 1962, 0);
      islamicChronology0.getWeekyear(1000L);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      ethiopicChronology0.getMaxMonth();
      ethiopicChronology0.calculateFirstDayOfYearMillis(0);
      copticChronology0.withUTC();
      islamicChronology0.getDaysInYear(13);
      ethiopicChronology0.getZone();
      copticChronology0.getDayOfMonth(0, 1565, (-1));
      GregorianChronology.getInstanceUTC();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      julianChronology0.getDaysInYear((-2139948616));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      copticChronology0.getFirstWeekOfYearMillis(0);
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getDaysInMonthMax(0);
      long long0 = BasicFixedMonthChronology.MILLIS_PER_MONTH;
      islamicChronology0.getMillisOfDay(2592000000L);
      islamicChronology0.getAverageMillisPerMonth();
      islamicChronology0.withZone(dateTimeZone0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      ethiopicChronology0.getMinYear();
      copticChronology0.getDaysInMonthMax(1583L);
      ethiopicChronology0.calculateFirstDayOfYearMillis(0);
      CopticChronology.getInstanceUTC();
      IslamicChronology.getInstance(dateTimeZone0, islamicChronology0.LEAP_YEAR_INDIAN);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.withUTC();
      ethiopicChronology0.isLeapDay(1707L);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      copticChronology0.getFirstWeekOfYearMillis(0);
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getDaysInMonthMax(0);
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
      islamicChronology0.getMillisOfDay((-4493L));
      islamicChronology0.getAverageMillisPerMonth();
      islamicChronology0.withZone(dateTimeZone0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      ethiopicChronology0.getMinYear();
      copticChronology0.getDaysInMonthMax(1583L);
      ethiopicChronology0.calculateFirstDayOfYearMillis(0);
      CopticChronology.getInstanceUTC();
      IslamicChronology.getInstance(dateTimeZone0, islamicChronology0.LEAP_YEAR_INDIAN);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.getDateMidnightMillis((-1344), 1, 1);
      gregorianChronology0.withUTC();
      ethiopicChronology0.isLeapDay(1707L);
      CopticChronology.getInstanceUTC();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      ethiopicChronology0.setYear((-9223372036854775808L), 939);
      ethiopicChronology0.isLeapDay((-474L));
      EthiopicChronology.getInstance();
      ethiopicChronology0.withUTC();
      ethiopicChronology0.getYearMonthDayMillis(51, 60, 15356250);
      ethiopicChronology0.calculateFirstDayOfYearMillis((-6299));
      try { 
        ethiopicChronology0.getDateTimeMillis(0, (-6299), (-6299), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -6299 for monthOfYear must be in the range [1,13]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      ethiopicChronology0.isLeapDay(286L);
      ethiopicChronology0.getDayOfMonth((-1801L));
      ethiopicChronology0.getWeekyear(22);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      gregorianChronology0.withZone(dateTimeZone0);
      EthiopicChronology ethiopicChronology1 = EthiopicChronology.getInstance();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      gregorianChronology0.getDayOfMonth(1962);
      gregorianChronology0.getWeekOfWeekyear(9223372036854775807L, 236548278);
      islamicChronology0.getTotalMillisByYearMonth(0, 1);
      islamicChronology0.setYear(1962, 0);
      islamicChronology0.add((long) 22, (long) 1962, 0);
      islamicChronology0.getWeekyear(1000L);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      ethiopicChronology0.getMaxMonth();
      ethiopicChronology0.calculateFirstDayOfYearMillis(0);
      copticChronology0.withUTC();
      islamicChronology0.getDaysInYear(13);
      ethiopicChronology0.getZone();
      ethiopicChronology1.getYearMonthDayMillis((-1038), 13, 4430);
      copticChronology0.getDayOfMonth(0, 1565, (-1));
      GregorianChronology.getInstanceUTC();
      JulianChronology.getInstanceUTC();
      ethiopicChronology1.getMonthOfYear(1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      julianChronology0.getDaysInMonthMax((-42521587200000L));
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = new IslamicChronology(julianChronology0, julianChronology0, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getMonthOfYear(31, 31);
      int int0 = 11;
      islamicChronology0.getDateTimeMillis(11, 11, 11, 31);
      julianChronology0.getAverageMillisPerYearDividedByTwo();
      int int1 = 0;
      julianChronology0.getDayOfYear(31);
      EthiopicChronology ethiopicChronology0 = null;
      try {
        ethiopicChronology0 = new EthiopicChronology(julianChronology0, "", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      gregorianChronology0.getMonthOfYear(26607895200791L, 849);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getYearMillis(2487);
      islamicChronology0.getLeapYearPatternType();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      julianChronology0.getDateMidnightMillis(1, 1, 1);
      gregorianChronology0.getDayOfWeek((-62135769600000L));
      IslamicChronology.getInstance(dateTimeZone0, islamicChronology0.LEAP_YEAR_INDIAN);
      gregorianChronology0.getMaxYear();
      gregorianChronology0.withUTC();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      copticChronology0.getFirstWeekOfYearMillis(0);
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getDaysInMonthMax(0);
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
      islamicChronology0.getMillisOfDay((-4493L));
      islamicChronology0.getAverageMillisPerMonth();
      islamicChronology0.withZone(dateTimeZone0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      ethiopicChronology0.getMinYear();
      copticChronology0.getDaysInMonthMax(1583L);
      ethiopicChronology0.calculateFirstDayOfYearMillis(0);
      CopticChronology.getInstanceUTC();
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology0.LEAP_YEAR_INDIAN);
      GregorianChronology.getInstanceUTC();
      GregorianChronology.getInstance(dateTimeZone0);
      ethiopicChronology0.isLeapDay(1707L);
      islamicChronology1.toString();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.getAverageMillisPerYear();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.add(9676800434L, 9676800434L, 2110);
      islamicChronology0.getDayOfMonth(31556952000L);
      // Undeclared exception!
      try { 
        islamicChronology0.getDaysInMonthMax(9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -301245869 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0, 1);
      ethiopicChronology0.getWeekyear(561L);
      ethiopicChronology0.getYearDifference(1, 1);
      islamicChronology0.getDayOfMonth(30585600000L, 622);
      ethiopicChronology0.getMaxYear();
      islamicChronology0.getMinimumDaysInFirstWeek();
      ethiopicChronology0.getDayOfMonth(4023L);
      islamicChronology0.getLeapYearPatternType();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      islamicChronology0.equals(copticChronology0);
      // Undeclared exception!
      try { 
        ethiopicChronology0.getDateMidnightMillis(1, 622, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 622 for monthOfYear must be in the range [1,13]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      copticChronology0.getYearMonthMillis(0, 0);
      copticChronology0.setYear(604800L, 1211);
      copticChronology0.getWeekyear(1117L);
      copticChronology0.getFirstWeekOfYearMillis(0);
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      julianChronology0.getWeekOfWeekyear((-42521587200000L), 0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, (Object) null, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getDaysInYearMax();
      try { 
        islamicChronology0.getDateTimeMillis(3600000, 1968, (-2055), (-2055), 3600000, (-167), 355);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2055 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      ethiopicChronology0.isLeapDay(286L);
      ethiopicChronology0.getDayOfMonth((-1801L));
      ethiopicChronology0.getWeekyear(22);
      ethiopicChronology0.getDaysInYear(0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.getDaysInYear((-2615));
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      gregorianChronology0.withZone(dateTimeZone0);
      ethiopicChronology0.withUTC();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      gregorianChronology0.getDayOfMonth(1962);
      islamicChronology0.getTotalMillisByYearMonth(0, 1);
      islamicChronology0.setYear(1962, 0);
      islamicChronology0.add((long) 22, (long) 365, 0);
      islamicChronology0.getWeekyear(1000L);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      ethiopicChronology0.getMaxMonth();
      ethiopicChronology0.calculateFirstDayOfYearMillis(0);
      copticChronology0.withUTC();
      islamicChronology0.getDaysInYear(13);
      DateTimeZone dateTimeZone1 = ethiopicChronology0.getZone();
      copticChronology0.getDayOfMonth(0, 1565, (-1));
      // Undeclared exception!
      try { 
        GregorianChronology.getInstance(dateTimeZone1, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 31
         //
         verifyException("org.joda.time.chrono.GregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      copticChronology0.add((-42521587200000L), (-1520L), 776);
      copticChronology0.getMonthOfYear(1711L, 2281);
      copticChronology0.getDayOfMonth((-2215L), 499);
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      islamicChronology0.calculateFirstDayOfYearMillis(913);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      copticChronology0.equals(julianChronology0);
      julianChronology0.getDayOfMonth(0L);
      copticChronology0.getWeekOfWeekyear(19);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0);
      islamicChronology1.getDaysInYearMonth(19, 3650);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      CopticChronology.getInstance(dateTimeZone0);
      copticChronology0.toString();
      copticChronology0.getZone();
      JulianChronology.adjustYearForSet(1);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = new IslamicChronology(copticChronology0, "CopticChronology[America/Recife]", islamicChronology_LeapYearPatternType0);
      islamicChronology0.getDayOfMonth(1, 1);
      islamicChronology0.isLeapYear(1);
      islamicChronology0.getDaysInYear(1);
      islamicChronology0.getDaysInYearMonth((-201), 1);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      EthiopicChronology.getInstance();
      ethiopicChronology0.getApproxMillisAtEpochDividedByTwo();
      copticChronology0.getDayOfMonth(1);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.getAverageMillisPerYearDividedByTwo();
      // Undeclared exception!
      try { 
        gregorianChronology0.getYearMonthDayMillis(30, (-1554), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1555
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      gregorianChronology0.getDayOfMonth((-42521587200000L), 2197);
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      gregorianChronology0.setYear((-42521587200000L), (-418));
      copticChronology0.setYear(2226L, 2197);
      copticChronology0.getMonthOfYear(1734L);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      julianChronology0.getDayOfYear((-9223372036854775808L));
      // Undeclared exception!
      try { 
        julianChronology0.getDayOfMonth((-1L), 1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      julianChronology0.getFirstWeekOfYearMillis(1024);
      // Undeclared exception!
      try { 
        julianChronology0.getDateMidnightMillis(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      // Undeclared exception!
      try { 
        islamicChronology0.getWeekyear((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -301245869 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      julianChronology0.getWeeksInYear((-1187));
      julianChronology0.getDayOfMonth(2948L, (-1187));
      julianChronology0.getDaysInYear(4);
      DateTimeZone dateTimeZone0 = julianChronology0.getZone();
      EthiopicChronology.getInstance(dateTimeZone0);
      // Undeclared exception!
      try { 
        EthiopicChronology.getInstance(dateTimeZone0, 2615625);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 2615625
         //
         verifyException("org.joda.time.chrono.EthiopicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      int int0 = 0;
      try { 
        ethiopicChronology0.getDateTimeMillis(1, 1, 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,30]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      copticChronology0.getYearMonthDayMillis((-859), 0, 0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      CopticChronology copticChronology0 = new CopticChronology(ethiopicChronology0, ethiopicChronology0, 1);
      copticChronology0.withUTC();
      copticChronology0.getMonthOfYear((-2147483648L), 3600);
      copticChronology0.getDayOfYear(0L);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      julianChronology0.getAverageMillisPerMonth();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.isLeapDay(0L);
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      IslamicChronology.getInstance(dateTimeZone0);
      islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      islamicChronology0.getDayOfMonth((-23299));
      // Undeclared exception!
      try { 
        EthiopicChronology.getInstance(dateTimeZone0, 1542);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1542
         //
         verifyException("org.joda.time.chrono.EthiopicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      islamicChronology0.getDaysInYearMonth(43, 12);
      julianChronology0.getDaysInYear(1);
      julianChronology0.getWeekyear((-42521587200000L));
      try { 
        julianChronology0.getDateMidnightMillis(1, 556, 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 556 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getYear((-265L));
      islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      islamicChronology0.getDaysInYearMax();
      islamicChronology0.getMillisOfDay((-2969L));
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      // Undeclared exception!
      try { 
        JulianChronology.getInstance(dateTimeZone0, (-1799));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -1799
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      copticChronology0.getYear((-42521587200000L));
      copticChronology0.calculateFirstDayOfYearMillis(0);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      julianChronology0.getAverageMillisPerMonth();
      julianChronology0.getWeeksInYear(0);
      DateTimeZone dateTimeZone0 = julianChronology0.getZone();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      ethiopicChronology0.withZone(dateTimeZone0);
      julianChronology0.getDaysInYearMonth(44, 1);
      julianChronology0.getDayOfYear(0);
      try { 
        julianChronology0.getDateMidnightMillis(338, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      gregorianChronology0.getDayOfYear(165L, 0);
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      gregorianChronology0.withZone(dateTimeZone0);
      gregorianChronology0.getYearMillis(0);
      DateTimeZone dateTimeZone1 = gregorianChronology0.getZone();
      GregorianChronology gregorianChronology1 = GregorianChronology.getInstance(dateTimeZone1);
      gregorianChronology1.getDateTimeMillis((-196L), 0, 0, 0, 61);
      gregorianChronology0.getZone();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone1, islamicChronology_LeapYearPatternType0);
      gregorianChronology1.withUTC();
      julianChronology0.hashCode();
      gregorianChronology0.getYear(0L);
      islamicChronology0.getAverageMillisPerYear();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      GregorianChronology.getInstance();
      // Undeclared exception!
      try { 
        gregorianChronology0.getDayOfMonth((-4194L), 0, 1982);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1981
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CopticChronology.getInstanceUTC();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      int int0 = 3236;
      julianChronology0.getDayOfYear(3125L);
      // Undeclared exception!
      try { 
        julianChronology0.getYearMonthMillis(0, 953);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 952
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getWeekOfWeekyear(0L);
      int int0 = (-1109);
      islamicChronology0.getDayOfMonth((-3039L), (-1109), (-1109));
      islamicChronology0.getYearDifference((-3731L), 60000L);
      islamicChronology0.getDaysInMonthMaxForSet((-3039L), 0);
      islamicChronology0.getYearMonthMillis(4372, 841);
      islamicChronology0.getFirstWeekOfYearMillis(4372);
      islamicChronology0.getAverageMillisPerMonth();
      islamicChronology0.getWeekyear(2081L);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = julianChronology0.getZone();
      // Undeclared exception!
      try { 
        JulianChronology.getInstance(dateTimeZone0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      ethiopicChronology0.getDayOfMonth((-9223372036854775808L));
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);
      EthiopicChronology ethiopicChronology1 = new EthiopicChronology(ethiopicChronology0, copticChronology0, 1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      ethiopicChronology0.getDayOfMonth((-2338));
      int int0 = 1024;
      int int1 = 0;
      try { 
        ethiopicChronology0.getDateTimeMillis((-2338), 0, (-2338), 1024, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1024 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotNull(julianChronology0);
      
      long long0 = julianChronology0.getYearDifference(4093L, 4093L);
      assertEquals(0L, long0);
      
      long long1 = julianChronology0.getYearMillis(1475);
      assertEquals((-15619910400000L), long1);
      assertFalse(long1 == long0);
      
      int int0 = julianChronology0.getWeeksInYear(1475);
      assertEquals(52, int0);
      
      int int1 = julianChronology0.getWeekOfWeekyear(4093L);
      assertEquals(51, int1);
      assertFalse(int1 == int0);
      
      int int2 = julianChronology0.getWeekyear(4093L);
      assertEquals(1969, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean0 = julianChronology0.equals((Object) null);
      assertFalse(boolean0);
      
      int int3 = julianChronology0.getDaysInYearMax();
      assertEquals(366, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      long long2 = julianChronology0.getFirstWeekOfYearMillis(1969);
      assertEquals((-30499200000L), long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      int int4 = julianChronology0.getDayOfMonth((-421L));
      assertEquals(18, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      
      long long3 = julianChronology0.getAverageMillisPerYearDividedByTwo();
      assertEquals(15778800000L, long3);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      
      int int5 = julianChronology0.getMonthOfYear(3612L);
      assertEquals(12, int5);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      EthiopicChronology ethiopicChronology1 = EthiopicChronology.getInstance(dateTimeZone0);
      ethiopicChronology1.withUTC();
      ethiopicChronology1.getDaysInMonthMaxForSet(1, 157);
      DateTimeZone dateTimeZone1 = ethiopicChronology1.getZone();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone1);
      gregorianChronology0.getDayOfMonth(157, 3411);
      gregorianChronology0.getMaxYear();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      gregorianChronology0.getMonthOfYear(5L);
      gregorianChronology0.withZone(dateTimeZone0);
      gregorianChronology0.getDaysInYear(27);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
      // Undeclared exception!
      try { 
        JulianChronology.getInstance(dateTimeZone0, 365);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 365
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      copticChronology0.getDayOfMonth((-42521587200000L), (-2183), (-2183));
      copticChronology0.getYearDifference((-513L), (-42521587200000L));
      copticChronology0.getDayOfYear(30L, 20503125);
      copticChronology0.calculateFirstDayOfYearMillis((-404));
      // Undeclared exception!
      try { 
        copticChronology0.getDateMidnightMillis(986637, 0, 986637);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,13]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = new EthiopicChronology((Chronology) null, (Object) null, 7);
      JulianChronology julianChronology0 = null;
      try {
        julianChronology0 = new JulianChronology(ethiopicChronology0, ethiopicChronology0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      julianChronology0.getDaysInMonthMaxForSet((-111L), (-982));
      julianChronology0.getWeekOfWeekyear(1168L, (-1990));
      DateTimeZone dateTimeZone0 = julianChronology0.getZone();
      // Undeclared exception!
      try { 
        EthiopicChronology.getInstance(dateTimeZone0, (-982));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -982
         //
         verifyException("org.joda.time.chrono.EthiopicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      ethiopicChronology0.getDayOfMonth((-9223372036854775808L), 0, 0);
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      IslamicChronology.getInstance(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      gregorianChronology0.getMinYear();
      gregorianChronology0.getAverageMillisPerYear();
      gregorianChronology0.getDayOfMonth(0L, (-292275054));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      julianChronology0.getAverageMillisPerMonth();
      islamicChronology0.getWeekOfWeekyear((-1783L), 17971875);
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      JulianChronology julianChronology1 = JulianChronology.getInstance(dateTimeZone0);
      islamicChronology0.getYearMonthMillis(51, 17971875);
      julianChronology1.getDayOfMonth((-237L));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.getDaysInYear(93);
      gregorianChronology0.getAverageMillisPerYear();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      julianChronology0.getDayOfYear(7L);
      julianChronology0.getAverageMillisPerMonth();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, gregorianChronology0, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getMonthOfYear(30617280288L, 0);
      islamicChronology0.getWeeksInYear(16695);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      // Undeclared exception!
      try { 
        gregorianChronology0.getYearMonthDayMillis((-2675), 0, 2784);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.setYear(216L, 1023);
      EthiopicChronology ethiopicChronology0 = null;
      try {
        ethiopicChronology0 = new EthiopicChronology(gregorianChronology0, gregorianChronology0, 1023);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1023
         //
         verifyException("org.joda.time.chrono.BasicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      DateTimeZone dateTimeZone0 = julianChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      int int0 = islamicChronology0.getWeekyear((-42521587199969L));
      assertEquals(1, IslamicChronology.AH);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1, int0);
      
      int int1 = JulianChronology.adjustYearForSet((-1463));
      assertEquals((-1462), int1);
      assertFalse(int1 == int0);
      
      int int2 = islamicChronology0.getDayOfWeek(21859200000L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(5, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int0 = gregorianChronology0.getWeekyear(1);
      assertEquals(1, CopticChronology.AM);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(1970, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0, 1);
      assertNotNull(gregorianChronology0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      long long0 = gregorianChronology0.getAverageMillisPerYear();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(31556952000L, long0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      JulianChronology julianChronology1 = JulianChronology.getInstance(dateTimeZone0, 1);
      assertNotNull(julianChronology1);
      assertEquals(1, CopticChronology.AM);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertFalse(julianChronology1.equals((Object)julianChronology0));
      assertNotSame(julianChronology1, julianChronology0);
      
      julianChronology0.hashCode();
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertNotSame(julianChronology0, julianChronology1);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = islamicChronology0.getDaysInYearMonth(1, 1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(30, int0);
      
      DateTimeZone dateTimeZone1 = julianChronology1.getZone();
      assertNotNull(dateTimeZone1);
      assertEquals(1, CopticChronology.AM);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertFalse(julianChronology1.equals((Object)julianChronology0));
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(julianChronology1, julianChronology0);
      assertSame(dateTimeZone1, dateTimeZone0);
      
      // Undeclared exception!
      try { 
        GregorianChronology.getInstance((DateTimeZone) null, 114);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 114
         //
         verifyException("org.joda.time.chrono.GregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      int int0 = ethiopicChronology0.getMaxMonth(37);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(13, int0);
      
      long long0 = ethiopicChronology0.getFirstWeekOfYearMillis(37);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals((-60757862400000L), long0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      long long1 = copticChronology0.calculateFirstDayOfYearMillis((-1722));
      assertEquals(1, CopticChronology.AM);
      assertEquals((-107557977600000L), long1);
      assertFalse(long1 == long0);
      
      int int1 = ethiopicChronology0.getMinimumDaysInFirstWeek();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      
      int int2 = ethiopicChronology0.getMaxMonth();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(13, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      CopticChronology copticChronology1 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology1);
      assertEquals(1, CopticChronology.AM);
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      assertNotSame(copticChronology1, copticChronology0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      boolean boolean0 = ethiopicChronology0.isLeapDay(286L);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(boolean0);
      
      int int0 = ethiopicChronology0.getDayOfMonth((-1801L));
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(22, int0);
      
      int int1 = ethiopicChronology0.getWeekyear(22);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1962, int1);
      assertFalse(int1 == int0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Chronology chronology0 = gregorianChronology0.withZone(dateTimeZone0);
      assertNotNull(chronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(gregorianChronology0, chronology0);
      assertSame(chronology0, gregorianChronology0);
      
      EthiopicChronology ethiopicChronology1 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology1);
      assertEquals(1, EthiopicChronology.EE);
      assertFalse(ethiopicChronology1.equals((Object)ethiopicChronology0));
      assertNotSame(ethiopicChronology1, ethiopicChronology0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      int int2 = gregorianChronology0.getDayOfMonth(1962);
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(gregorianChronology0, chronology0);
      
      int int3 = gregorianChronology0.getWeekOfWeekyear(9223372036854775807L, 1);
      assertEquals(1, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertSame(gregorianChronology0, chronology0);
      
      int int4 = ethiopicChronology0.getDayOfMonth(880L, 1, 1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(716368, int4);
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology1));
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
      
      long long0 = islamicChronology0.getTotalMillisByYearMonth(0, 1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(0L, long0);
      
      long long1 = islamicChronology0.setYear(1962, 0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals((-42496790398038L), long1);
      assertFalse(long1 == long0);
      
      long long2 = islamicChronology0.add((long) 22, (long) 1962, 0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(22L, long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      int int5 = islamicChronology0.getWeekyear(1000L);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1389, int5);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(gregorianChronology0, chronology0);
      
      int int6 = ethiopicChronology0.getMaxMonth();
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(13, int6);
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology1));
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
      
      long long3 = ethiopicChronology0.calculateFirstDayOfYearMillis(0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals((-61925644800000L), long3);
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology1));
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withUTC();
      assertNotNull(copticChronology1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertSame(gregorianChronology0, chronology0);
      
      int int7 = islamicChronology0.getDaysInYear(13);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(355, int7);
      assertFalse(int7 == int0);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertFalse(int7 == int3);
      assertFalse(int7 == int2);
      assertFalse(int7 == int5);
      assertFalse(int7 == int4);
      
      DateTimeZone dateTimeZone1 = ethiopicChronology0.getZone();
      assertNotNull(dateTimeZone1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertFalse(ethiopicChronology0.equals((Object)ethiopicChronology1));
      assertNotSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      
      int int8 = copticChronology0.getDayOfMonth(0, 1565, (-1));
      assertEquals(1, CopticChronology.AM);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(44368, int8);
      assertFalse(int8 == int4);
      assertFalse(int8 == int0);
      assertFalse(int8 == int7);
      assertFalse(int8 == int5);
      assertFalse(int8 == int3);
      assertFalse(int8 == int6);
      assertFalse(int8 == int2);
      assertFalse(int8 == int1);
      assertSame(copticChronology0, copticChronology1);
      assertSame(gregorianChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      
      GregorianChronology gregorianChronology1 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology1);
      assertSame(gregorianChronology1, chronology0);
      assertSame(gregorianChronology1, gregorianChronology0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int9 = julianChronology0.getDaysInYear((-2139948616));
      assertEquals(366, int9);
      assertFalse(int9 == int4);
      assertFalse(int9 == int2);
      assertFalse(int9 == int1);
      assertFalse(int9 == int6);
      assertFalse(int9 == int3);
      assertFalse(int9 == int5);
      assertFalse(int9 == int7);
      assertFalse(int9 == int8);
      assertFalse(int9 == int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int0 = copticChronology0.getYear(604800000L);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1686, int0);
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone(dateTimeZone0);
      assertNotNull(copticChronology1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      
      boolean boolean0 = copticChronology0.equals(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertFalse(boolean0);
      assertSame(copticChronology0, copticChronology1);
      
      int int1 = copticChronology0.getDayOfYear(604800000L, 1686);
      assertEquals(1, CopticChronology.AM);
      assertEquals(120, int1);
      assertFalse(int1 == int0);
      assertSame(copticChronology0, copticChronology1);
      
      CopticChronology copticChronology2 = CopticChronology.getInstance(dateTimeZone0);
      assertNotNull(copticChronology2);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology0, copticChronology2);
      assertSame(copticChronology2, copticChronology0);
      assertSame(copticChronology2, copticChronology1);
      
      CopticChronology copticChronology3 = CopticChronology.getInstance(dateTimeZone0);
      assertNotNull(copticChronology3);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology0, copticChronology3);
      assertSame(copticChronology0, copticChronology2);
      assertSame(copticChronology3, copticChronology0);
      assertSame(copticChronology3, copticChronology1);
      assertSame(copticChronology3, copticChronology2);
      
      // Undeclared exception!
      try { 
        GregorianChronology.getInstance(dateTimeZone0, 1686);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1686
         //
         verifyException("org.joda.time.chrono.GregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotNull(julianChronology0);
      
      long long0 = BasicFixedMonthChronology.MILLIS_PER_MONTH;
      assertEquals(2592000000L, long0);
      
      long long1 = julianChronology0.getYearMillis(1475);
      assertEquals((-15619910400000L), long1);
      assertFalse(long1 == long0);
      
      int int0 = julianChronology0.getWeeksInYear(1475);
      assertEquals(52, int0);
      
      int int1 = julianChronology0.getWeekOfWeekyear(4093L);
      assertEquals(51, int1);
      assertFalse(int1 == int0);
      
      int int2 = julianChronology0.getWeekyear(4093L);
      assertEquals(1969, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean0 = julianChronology0.equals((Object) null);
      assertFalse(boolean0);
      
      int int3 = julianChronology0.getDaysInYearMax();
      assertEquals(366, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      long long2 = julianChronology0.getFirstWeekOfYearMillis(1969);
      assertEquals((-30499200000L), long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      int int4 = julianChronology0.getDayOfMonth((-421L));
      assertEquals(18, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      
      long long3 = julianChronology0.getAverageMillisPerYearDividedByTwo();
      assertEquals(15778800000L, long3);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      
      try { 
        julianChronology0.getDateTimeMillis(1475, 51, 1475, 99, 51, 52, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 99 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      ethiopicChronology0.isLeapDay(286L);
      ethiopicChronology0.getDayOfMonth((-1801L));
      ethiopicChronology0.getWeekyear(22);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      gregorianChronology0.withZone(dateTimeZone0);
      EthiopicChronology.getInstance();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      gregorianChronology0.getDayOfMonth(1962);
      gregorianChronology0.getWeekOfWeekyear(9223372036854775807L, 236548278);
      islamicChronology0.getTotalMillisByYearMonth(0, 1);
      islamicChronology0.setYear(1962, 0);
      islamicChronology0.add((long) 22, (long) 1962, 0);
      islamicChronology0.getWeekyear(1000L);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      ethiopicChronology0.getMaxMonth();
      ethiopicChronology0.calculateFirstDayOfYearMillis(0);
      copticChronology0.withUTC();
      islamicChronology0.getDaysInYear(13);
      DateTimeZone dateTimeZone1 = ethiopicChronology0.getZone();
      copticChronology0.getDayOfMonth(0, 1565, (-1));
      // Undeclared exception!
      try { 
        GregorianChronology.getInstance(dateTimeZone1, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 31
         //
         verifyException("org.joda.time.chrono.GregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      ethiopicChronology0.setYear((-9223372036854775808L), 939);
      ethiopicChronology0.isLeapDay((-474L));
      EthiopicChronology.getInstance();
      ethiopicChronology0.withUTC();
      ethiopicChronology0.calculateFirstDayOfYearMillis((-6299));
      try { 
        ethiopicChronology0.getDateTimeMillis(0, (-6299), (-6299), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -6299 for monthOfYear must be in the range [1,13]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      copticChronology0.getFirstWeekOfYearMillis(0);
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      islamicChronology0.getDaysInMonthMax(0);
      islamicChronology0.getAverageMillisPerYearDividedByTwo();
      islamicChronology0.getMillisOfDay((-4493L));
      islamicChronology0.getAverageMillisPerMonth();
      islamicChronology0.withZone(dateTimeZone0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      ethiopicChronology0.getMinYear();
      copticChronology0.getDaysInMonthMax(1583L);
      ethiopicChronology0.calculateFirstDayOfYearMillis(0);
      CopticChronology.getInstanceUTC();
      IslamicChronology.getInstance(dateTimeZone0, islamicChronology0.LEAP_YEAR_INDIAN);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      gregorianChronology0.withUTC();
      boolean boolean0 = ethiopicChronology0.isLeapDay(1707L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      int int0 = BasicFixedMonthChronology.MONTH_LENGTH;
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      gregorianChronology0.withZone(dateTimeZone0);
      gregorianChronology0.getYearMillis(0);
      DateTimeZone dateTimeZone1 = gregorianChronology0.getZone();
      GregorianChronology gregorianChronology1 = GregorianChronology.getInstance(dateTimeZone1);
      gregorianChronology1.getDateTimeMillis((-196L), 0, 0, 0, 61);
      gregorianChronology0.getZone();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone1, islamicChronology_LeapYearPatternType0);
      gregorianChronology1.withUTC();
      julianChronology0.hashCode();
      gregorianChronology0.getYear(0L);
      islamicChronology0.getAverageMillisPerYear();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      EthiopicChronology.getInstance();
      EthiopicChronology ethiopicChronology1 = (EthiopicChronology)ethiopicChronology0.withZone(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      int int0 = gregorianChronology0.getMonthOfYear(1329L);
      assertEquals(1, int0);
      
      gregorianChronology0.getDaysInYear(93);
      long long0 = BasicFixedMonthChronology.MILLIS_PER_YEAR;
      int int1 = gregorianChronology0.getWeekyear(31536000000L);
      assertEquals(1970, int1);
      
      int int2 = gregorianChronology0.getDaysInYear((-2141347979));
      assertEquals(365, int2);
  }
}
