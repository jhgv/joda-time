/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:46:45 GMT 2018
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GJEraDateTimeField;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormatter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GJEraDateTimeField_ESTest extends GJEraDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      islamicChronology0.isLeapDay((-2272L));
      islamicChronology0.getWeekOfWeekyear((-2272L), (-5027));
      gJEraDateTimeField0.roundCeiling(399L);
      islamicChronology0.calculateFirstDayOfYearMillis((-2366));
      islamicChronology0.getDayOfMonth((-60000L));
      Locale locale0 = null;
      gJEraDateTimeField0.getMaximumTextLength((Locale) null);
      gJEraDateTimeField0.roundCeiling(1);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(2, 1);
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      LocalTime localTime1 = localTime0.withHourOfDay(1);
      gJEraDateTimeField0.get(9223372036854775807L);
      localTime0.getMinuteOfHour();
      gJEraDateTimeField0.getMaximumValue((-2272L));
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.getAsText((ReadablePartial) localTime1, (-173), (Locale) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -173
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField((BasicChronology) null);
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.roundHalfEven((-578L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField((BasicChronology) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      gJEraDateTimeField0.getRangeDurationField();
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.roundHalfFloor((-9223372036854775808L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField((BasicChronology) null);
      gJEraDateTimeField0.isLenient();
      gJEraDateTimeField0.getMinimumValue();
      gJEraDateTimeField0.getMinimumValue((long) 0);
      long long0 = 0L;
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.roundFloor(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField((BasicChronology) null);
      long long0 = 0L;
      int int0 = 0;
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.set(0L, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField((BasicChronology) null);
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.roundCeiling((-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(copticChronology0);
      gJEraDateTimeField0.getMaximumValue();
      gJEraDateTimeField0.set(31L, 1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField((BasicChronology) null);
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.get(171L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(copticChronology0);
      Locale locale0 = Locale.UK;
      gJEraDateTimeField0.getAsText(0, locale0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2349));
      DateTime dateTime0 = DateTime.now();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateTime0);
      dateTime0.toString((DateTimeFormatter) null);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone1, islamicChronology_LeapYearPatternType0);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      Locale locale0 = Locale.ITALY;
      gJEraDateTimeField0.getMaximumTextLength(locale0);
      gJEraDateTimeField0.isLenient();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      gJEraDateTimeField0.isLenient();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(ethiopicChronology0);
      long long0 = 3162L;
      gJEraDateTimeField0.getLeapDurationField();
      ethiopicChronology0.getWeekOfWeekyear(3162L);
      gJEraDateTimeField0.roundHalfFloor(3600L);
      gJEraDateTimeField0.roundHalfCeiling(9223372036854775807L);
      int int0 = 1435;
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.set(0L, 1435);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1435 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField((BasicChronology) null);
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.roundHalfCeiling(2069L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(copticChronology0);
      gJEraDateTimeField0.roundHalfCeiling(2345L);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      gJEraDateTimeField0.set((-208L), 0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      julianChronology0.add((long) 0, 0L, 662);
      julianChronology0.getWeekyear(0);
      julianChronology0.getDaysInYear(0);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      julianChronology0.assemble(assembledChronology_Fields0);
      julianChronology0.getWeekyear(2572L);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(julianChronology0);
      gJEraDateTimeField0.getRangeDurationField();
      Locale locale0 = Locale.ENGLISH;
      gJEraDateTimeField0.getDurationField();
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.getAsText(1969, locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1969
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      gJEraDateTimeField0.roundCeiling(1);
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.set(9223372036854775807L, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for era is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      LocalDate localDate0 = dateTime0.toLocalDate();
      Hours hours0 = Hours.hoursBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      ethiopicChronology0.get((ReadablePeriod) hours0, 0L);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(ethiopicChronology0);
      gJEraDateTimeField0.get(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(julianChronology0);
      gJEraDateTimeField0.roundHalfFloor((-1519L));
      julianChronology0.getDayOfYear((-1519L));
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      julianChronology0.assemble(assembledChronology_Fields0);
      gJEraDateTimeField0.getRangeDurationField();
      gJEraDateTimeField0.roundFloor((-9223372036854775808L));
      gJEraDateTimeField0.get(2000L);
      gJEraDateTimeField0.roundFloor(26050L);
      gJEraDateTimeField0.roundHalfEven((-62105356800000L));
      julianChronology0.getDayOfMonth(1L, 0);
      gJEraDateTimeField0.addWrapField(0L, 19);
      gJEraDateTimeField0.get((-1L));
      gJEraDateTimeField0.getMinimumValue();
      gJEraDateTimeField0.roundHalfEven((-62105356800000L));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = Locale.CANADA_FRENCH;
      locale1.getDisplayScript();
      locale1.getDisplayLanguage();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      islamicChronology0.isLeapDay((-2272L));
      islamicChronology0.getWeekOfWeekyear((-2272L), (-5027));
      gJEraDateTimeField0.roundCeiling(399L);
      islamicChronology0.getDayOfMonth((-60000L));
      Locale locale0 = null;
      gJEraDateTimeField0.getMaximumTextLength((Locale) null);
      gJEraDateTimeField0.roundCeiling(1);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(2, 1);
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      LocalTime localTime1 = localTime0.withHourOfDay(1);
      localTime0.getMinuteOfHour();
      gJEraDateTimeField0.getMaximumValue((-2272L));
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.getAsText((ReadablePartial) localTime1, (-173), (Locale) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -173
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.assemble((AssembledChronology.Fields) null);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.set((long) 1, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for era is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      MonthDay.now();
      Locale locale0 = Locale.CANADA;
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LenientChronology.getInstance(buddhistChronology0);
      int int0 = (-1477);
      try { 
        DateTimeZone.forOffsetHoursMinutes((-1477), (-1477));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -1477
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      gJEraDateTimeField0.roundHalfCeiling(1);
      gJEraDateTimeField0.getAsShortText(0L);
      gJEraDateTimeField0.getDurationField();
      gJEraDateTimeField0.roundHalfEven((-42496790400000L));
      islamicChronology0.getDateTimeMillis(1L, 1, 1, 1, 1);
      islamicChronology0.getDaysInMonthMaxForSet(0L, (-768));
      gJEraDateTimeField0.getMinimumValue();
      gJEraDateTimeField0.isLenient();
      gJEraDateTimeField0.getMaximumTextLength((Locale) null);
      gJEraDateTimeField0.getMaximumTextLength((Locale) null);
      gJEraDateTimeField0.setExtended(0L, 1);
      gJEraDateTimeField0.roundFloor(1);
  }
}
