/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:48:04 GMT 2018
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MockPartial;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.field.StrictDateTimeField;
import org.joda.time.field.TestBaseDateTimeField;
import org.joda.time.field.TestOffsetDateTimeField;
import org.joda.time.field.TestPreciseDateTimeField;
import org.joda.time.field.TestPreciseDurationDateTimeField;
import org.joda.time.field.ZeroIsMaxDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZeroIsMaxDateTimeField_ESTest extends ZeroIsMaxDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[5] = 2556;
      intArray0[6] = 2556;
      int[] intArray1 = new int[8];
      intArray1[3] = 3988;
      intArray1[6] = (-1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getMaximumValue((ReadablePartial) null);
      zeroIsMaxDateTimeField0.roundFloor(2556);
      zeroIsMaxDateTimeField0.roundCeiling(2556);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0, (DurationField) null, dateTimeFieldType0, 2453);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0, (DurationField) null, dateTimeFieldType0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfFloor(2453);
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.getDifferenceAsLong(2453, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ISOChronology.getInstance();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)104;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(iSOChronology0, testBaseDateTimeField_MockBaseDateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(skipUndoDateTimeField0, dateTimeFieldType0);
      skipUndoDateTimeField0.roundHalfEven(1);
      dateTimeFieldType0.getField(buddhistChronology0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      zeroIsMaxDateTimeField0.getAsShortText(1, locale0);
      zeroIsMaxDateTimeField0.roundHalfCeiling(2474L);
      zeroIsMaxDateTimeField0.isLeap(2474L);
      zeroIsMaxDateTimeField0.add((-1L), 2474L);
      MonthDay monthDay0 = new MonthDay((long) 1);
      MonthDay monthDay1 = monthDay0.minusMonths(1022);
      // Undeclared exception!
      try { 
        monthDay1.withMonthOfYear(2245);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2245 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      DateTime dateTime0 = new DateTime((long) 1, dateTimeZone0);
      DateTimeZone dateTimeZone1 = dateTime0.getZone();
      IslamicChronology.getInstance(dateTimeZone1, islamicChronology0.LEAP_YEAR_INDIAN);
      dateTimeFieldType0.getField(islamicChronology0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testPreciseDateTimeField_MockPreciseDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getDifference(0L, 0L);
      zeroIsMaxDateTimeField0.add((-1611L), 0L);
      zeroIsMaxDateTimeField0.getMinimumValue();
      zeroIsMaxDateTimeField0.remainder(0L);
      zeroIsMaxDateTimeField0.getDifferenceAsLong((-380L), (-1611L));
      dateTimeFieldType0.getRangeDurationType();
      zeroIsMaxDateTimeField0.getMinimumValue((ReadablePartial) null);
      testPreciseDateTimeField_MockPreciseDateTimeField0.toString();
      int[] intArray0 = new int[6];
      intArray0[0] = 30;
      dateTimeFieldType0.getRangeDurationType();
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1324;
      intArray0[4] = 30;
      intArray0[5] = 1324;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.addWrapField((ReadablePartial) null, 1324, intArray0, 1324);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1324
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0);
      testBaseDateTimeField_MockStandardBaseDateTimeField0.roundHalfEven(1424L);
      LocalDate localDate0 = new LocalDate((-1478L));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      Calendar calendar0 = MockCalendar.getInstance();
      LocalDate.fromCalendarFields(calendar0);
      zeroIsMaxDateTimeField0.getMaximumValue((ReadablePartial) localDate0);
      zeroIsMaxDateTimeField0.add((-3680L), 4001L);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.addWrapField((ReadablePartial) localDate0, 1, intArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 58
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 17887500);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dividedDateTimeField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.add((long) 1, 17887500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 477601858 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldType0.getRangeDurationType();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0);
      dateTimeFieldType0.getDurationType();
      zeroIsMaxDateTimeField0.getAsShortText(1133L);
      zeroIsMaxDateTimeField0.roundCeiling(3210L);
      Object object0 = new Object();
      EthiopicChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        MockGregorianCalendar.from((ZonedDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.util.MockGregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      DateTimeField dateTimeField1 = LenientDateTimeField.getInstance(dateTimeField0, buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField1, dateTimeFieldType0);
      dateTimeFieldType0.getField(buddhistChronology0);
      zeroIsMaxDateTimeField0.getDifferenceAsLong((-4139L), (-4139L));
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) buddhistChronology0);
      zeroIsMaxDateTimeField0.getMaximumValue((ReadablePartial) localDateTime0, (int[]) null);
      zeroIsMaxDateTimeField0.getMinimumValue();
      zeroIsMaxDateTimeField0.getMaximumValue(1180L);
      dateTimeFieldType0.getRangeDurationType();
      zeroIsMaxDateTimeField0.getMaximumValue(1L);
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.addWrapField((ReadablePartial) localDateTime0, 2415, (int[]) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0);
      dateTimeFieldType0.getDurationType();
      int int0 = 738;
      zeroIsMaxDateTimeField0.getAsText(738, (Locale) null);
      zeroIsMaxDateTimeField0.add(0L, 0L);
      zeroIsMaxDateTimeField0.roundHalfCeiling(0L);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(0L);
      dateTime0.withYear(738);
      DateTimeZone dateTimeZone0 = dateTime0.getZone();
      Chronology chronology0 = gregorianChronology0.withZone(dateTimeZone0);
      dateTimeFieldType0.isSupported(chronology0);
      zeroIsMaxDateTimeField0.roundFloor((-2227L));
      zeroIsMaxDateTimeField0.roundCeiling(0L);
      DateTimeZone dateTimeZone1 = DateTimeZone.UTC;
      LocalDate localDate0 = LocalDate.now(dateTimeZone1);
      int[] intArray0 = new int[5];
      intArray0[0] = 738;
      intArray0[1] = 738;
      intArray0[2] = 738;
      intArray0[3] = 738;
      intArray0[4] = 738;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.addWrapField((ReadablePartial) localDate0, 738, intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 738
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      LocalDate localDate0 = new LocalDate((long) 1);
      LocalDate localDate1 = localDate0.withWeekOfWeekyear(1);
      Locale locale0 = Locale.GERMAN;
      zeroIsMaxDateTimeField0.getAsText((ReadablePartial) localDate1, 1, locale0);
      zeroIsMaxDateTimeField0.remainder(1);
      LocalDate localDate2 = new LocalDate(0L);
      int[] intArray0 = new int[6];
      localDate2.plusWeeks(1811);
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      zeroIsMaxDateTimeField0.getMaximumValue((ReadablePartial) localDate2, intArray0);
      zeroIsMaxDateTimeField0.roundFloor(1);
      zeroIsMaxDateTimeField0.roundFloor(1);
      zeroIsMaxDateTimeField0.roundHalfEven(0L);
      LocalTime localTime0 = new LocalTime(1, 1, 1, 0);
      int[] intArray1 = new int[7];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 0;
      intArray1[3] = 1;
      intArray1[4] = 1;
      intArray1[5] = 0;
      intArray1[6] = 0;
      zeroIsMaxDateTimeField0.getMinimumValue((ReadablePartial) localTime0, intArray1);
      zeroIsMaxDateTimeField0.roundHalfEven(3599999L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfHour();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      dateTimeFieldType0.isSupported(buddhistChronology0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      LocalDateTime localDateTime0 = new LocalDateTime((-316L));
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = (-37);
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      intArray0[8] = 1;
      zeroIsMaxDateTimeField0.addWrapField((ReadablePartial) localDateTime0, 1, intArray0, 0);
      zeroIsMaxDateTimeField0.roundHalfCeiling((-2322L));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundFloor(599L);
      zeroIsMaxDateTimeField0.roundFloor(1911L);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[4];
      intArray0[0] = 570;
      intArray0[1] = 2440;
      intArray0[2] = 837;
      intArray0[3] = (-2643);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, julianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
         verifyException("org.joda.time.Partial", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      dateTimeFieldType0.getField(buddhistChronology0);
      dateTimeFieldType0.getDurationType();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.set((long) 1, 1);
      zeroIsMaxDateTimeField0.set((-28799999L), 1);
      int int0 = 0;
      int int1 = (-1);
      try { 
        buddhistChronology0.getDateTimeMillis(0, 0, 0, 0, 0, (-1), 1585);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      dateTimeFieldType0.getDurationType();
      dateTimeFieldType0.getRangeDurationType();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0, dateTimeFieldType0);
      testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getMinimumValue(929L);
      zeroIsMaxDateTimeField0.toString();
      testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.add(404L, 1944);
      zeroIsMaxDateTimeField0.getLeapDurationField();
      zeroIsMaxDateTimeField0.add(0L, 1530);
      testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getLeapAmount(0L);
      Locale locale0 = Locale.ITALY;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale locale1 = Locale.TAIWAN;
      locale0.getDisplayLanguage(locale1);
      testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getMaximumShortTextLength(locale0);
      int int0 = (-893);
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.set(0L, (-893));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -893 for millisOfSecond must be in the range [1,60]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(delegatedDateTimeField0, dateTimeFieldType0);
      LocalDate localDate0 = new LocalDate((long) 1);
      LocalDate localDate1 = localDate0.withDayOfMonth(1);
      LocalDate localDate2 = localDate1.minusDays(1);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      zeroIsMaxDateTimeField0.getMinimumValue((ReadablePartial) localDate2, intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.remainder((-163L));
      zeroIsMaxDateTimeField0.roundHalfFloor((-163L));
      ReadablePartial readablePartial0 = null;
      zeroIsMaxDateTimeField0.roundHalfEven((-163L));
      int int0 = 1;
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 2556;
      intArray0[6] = 2556;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.add((ReadablePartial) null, 2556, intArray0, 3627);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2556
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      buddhistChronology0.add((-763L), (-2510L), 0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      UTCProvider uTCProvider0 = new UTCProvider();
      uTCProvider0.getZone((String) null);
      buddhistChronology0.withZone((DateTimeZone) null);
      zeroIsMaxDateTimeField0.getMaximumValue();
      zeroIsMaxDateTimeField0.getDifferenceAsLong(1, 0L);
      zeroIsMaxDateTimeField0.isLeap((-374L));
      zeroIsMaxDateTimeField0.getMaximumValue();
      zeroIsMaxDateTimeField0.remainder(1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      dateTimeFieldType0.isSupported(buddhistChronology0);
      zeroIsMaxDateTimeField0.add(130L, 1);
      zeroIsMaxDateTimeField0.add(119L, 119L);
      zeroIsMaxDateTimeField0.roundCeiling(0L);
      DateTime dateTime0 = new DateTime(0L);
      DateTime dateTime1 = dateTime0.withPeriodAdded((ReadablePeriod) null, 1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      Calendar calendar0 = dateTime1.toCalendar((Locale) null);
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1923);
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.addWrapField((ReadablePartial) localDate0, 0, intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      int int0 = 2431;
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 2431);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dividedDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfFloor(2431);
      zeroIsMaxDateTimeField0.add((long) 2431, (long) 2431);
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.roundHalfEven(5909763431L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 98494396 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfEven(0L);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfFloor(0L);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testPreciseDateTimeField_MockPreciseDateTimeField0, dateTimeFieldType0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      dateTimeFieldType0.getField(copticChronology0);
      testPreciseDateTimeField_MockPreciseDateTimeField0.add(60L, 0);
      zeroIsMaxDateTimeField0.roundHalfCeiling(0L);
      zeroIsMaxDateTimeField0.get(0L);
      zeroIsMaxDateTimeField0.getDifferenceAsLong(0, 0L);
      zeroIsMaxDateTimeField0.remainder(0L);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      DurationField durationField0 = testPreciseDateTimeField_MockStandardDateTimeField0.getDurationField();
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField(dateTimeFieldType0, durationField0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getDifference(623L, 623L);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getMinimumValue();
      zeroIsMaxDateTimeField0.add(0L, (-3743L));
      zeroIsMaxDateTimeField0.getLeapAmount((-154L));
      zeroIsMaxDateTimeField0.getDifferenceAsLong((-154L), 0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getDifferenceAsLong((-3656L), (-3656L));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds((-1));
      LocalDateTime localDateTime2 = localDateTime1.minusMinutes(1);
      Locale locale0 = Locale.CANADA;
      zeroIsMaxDateTimeField0.getAsText((ReadablePartial) localDateTime2, 1435, locale0);
      zeroIsMaxDateTimeField0.roundFloor((-437L));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0, dateTimeFieldType0);
      Calendar calendar0 = MockCalendar.getInstance();
      MonthDay monthDay0 = MonthDay.fromCalendarFields(calendar0);
      PeriodType periodType0 = PeriodType.hours();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 1, periodType0, (Chronology) copticChronology0);
      MonthDay monthDay1 = monthDay0.minus(mutablePeriod0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2727;
      intArray0[4] = 1;
      intArray0[5] = 2727;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.addWrapField((ReadablePartial) monthDay1, 2727, intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2727
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField((DateTimeField) null, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DecoratedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testOffsetDateTimeField_MockStandardDateTimeField0, dateTimeFieldType0, 6);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dividedDateTimeField0);
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.isLeap(383L);
      int[] intArray0 = new int[1];
      intArray0[0] = 2010;
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.addWrapField((ReadablePartial) null, 2010, intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2010
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      dateTimeFieldType0.getRangeDurationType();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(dateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.roundHalfFloor((-2000L));
      zeroIsMaxDateTimeField0.getMaximumValue();
      buddhistChronology0.getZone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      zeroIsMaxDateTimeField0.roundHalfCeiling(1);
      zeroIsMaxDateTimeField0.getMaximumValue((-2000L));
      zeroIsMaxDateTimeField0.roundCeiling(1209600000L);
      zeroIsMaxDateTimeField0.get(0L);
      zeroIsMaxDateTimeField0.addWrapField((long) 1440, (-1));
      zeroIsMaxDateTimeField0.getMaximumValue();
      zeroIsMaxDateTimeField0.isLeap(0L);
      zeroIsMaxDateTimeField0.getMinimumValue();
      zeroIsMaxDateTimeField0.getDifferenceAsLong(1209600000L, (-58560L));
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[0];
      int[] intArray0 = new int[0];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      zeroIsMaxDateTimeField0.getMinimumValue((ReadablePartial) partial0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testOffsetDateTimeField_MockOffsetDateTimeField0, dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrapped field's minumum value must be zero
         //
         verifyException("org.joda.time.field.ZeroIsMaxDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(strictDateTimeField0, dateTimeFieldType0);
      Locale locale0 = Locale.KOREAN;
      zeroIsMaxDateTimeField0.getMaximumShortTextLength(locale0);
      zeroIsMaxDateTimeField0.getDifference(1, 1);
      strictDateTimeField0.getMinimumValue((ReadablePartial) null, (int[]) null);
      dateTimeFieldType0.getRangeDurationType();
      zeroIsMaxDateTimeField0.addWrapField((long) 5, (-211));
      zeroIsMaxDateTimeField0.getLeapAmount(0L);
      zeroIsMaxDateTimeField0.getMinimumValue((ReadablePartial) null);
      zeroIsMaxDateTimeField0.add(0L, 1023);
      zeroIsMaxDateTimeField0.remainder(0L);
      // Undeclared exception!
      try { 
        zeroIsMaxDateTimeField0.addWrapField((ReadablePartial) null, (-211), (int[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      dateTimeFieldType0.getField(ethiopicChronology0);
      int int0 = (-125);
      int int1 = 0;
      int int2 = (-988);
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime((-125), 0, 1, 3682, 1, 3682, (-988), dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3682 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testPreciseDateTimeField_MockPreciseDateTimeField0, dateTimeFieldType0);
      zeroIsMaxDateTimeField0.getDifference(2294L, 824L);
      zeroIsMaxDateTimeField0.add(2294L, 5678L);
      zeroIsMaxDateTimeField0.get(342974L);
      zeroIsMaxDateTimeField0.getMaximumValue(2587L);
      zeroIsMaxDateTimeField0.addWrapField((long) 60, 16);
      zeroIsMaxDateTimeField0.add(2294L, 16);
      zeroIsMaxDateTimeField0.getLeapAmount((-780L));
      zeroIsMaxDateTimeField0.add(342974L, (long) 16);
      // Undeclared exception!
      try { 
        testPreciseDateTimeField_MockPreciseDateTimeField0.set((long) 30, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value null for secondOfMinute is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      buddhistChronology0.minuteOfDay();
      try { 
        buddhistChronology0.getDateTimeMillis(31449600000L, (-70), (-70), 2295, 2295);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -70 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, (DurationField) null, dateTimeFieldType0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0, dateTimeFieldType0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3946);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      dateTimeFieldType0.getField(ethiopicChronology0);
      dateTimeFieldType0.getDurationType();
      Locale locale0 = new Locale("", "");
      locale0.getDisplayScript();
      zeroIsMaxDateTimeField0.getAsShortText(0, locale0);
      zeroIsMaxDateTimeField0.getMinimumValue(1502L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      Partial partial0 = new Partial(localDateTime0);
      Minutes minutes0 = Minutes.TWO;
      zeroIsMaxDateTimeField0.set(1502L, 1);
      Partial partial1 = partial0.withPeriodAdded(minutes0, 0);
      Partial partial2 = partial1.with(dateTimeFieldType0, 1);
      Partial partial3 = partial2.minus(minutes0);
      Partial partial4 = partial3.plus(minutes0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      zeroIsMaxDateTimeField0.getMaximumValue((ReadablePartial) partial4, intArray0);
      zeroIsMaxDateTimeField0.getMaximumValue((ReadablePartial) partial2, intArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockPartial mockPartial0 = new MockPartial();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField((RemainderDateTimeField) null, dateTimeFieldType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }
}
