/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:47:47 GMT 2018
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.format.DateTimeFormatter;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.field.StrictDateTimeField;
import org.joda.time.field.TestPreciseDateTimeField;
import org.joda.time.field.TestPreciseDurationDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StrictDateTimeField_ESTest extends StrictDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      buddhistChronology0.toString();
      StrictDateTimeField.getInstance(lenientDateTimeField0);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_DATE;
      Locale locale0 = dateTimeFormatter0.getLocale();
      lenientDateTimeField0.getAsShortText(86400, locale0);
      StrictDateTimeField.getInstance(lenientDateTimeField0);
      DateTimeField dateTimeField1 = StrictDateTimeField.getInstance(lenientDateTimeField0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(lenientDateTimeField0);
      strictDateTimeField0.isLenient();
      buddhistChronology0.toString();
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      StrictDateTimeField.getInstance(dateTimeField1);
      strictDateTimeField0.isLenient();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime(2390L, (Chronology) ethiopicChronology0);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = (-3769);
      testPreciseDateTimeField_MockPreciseDateTimeField0.getMinimumValue((ReadablePartial) localDateTime0, intArray0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(testPreciseDateTimeField_MockPreciseDateTimeField0);
      // Undeclared exception!
      try { 
        strictDateTimeField0.set((-634L), 1066);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1066 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      strictDateTimeField0.set(0L, 1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      strictDateTimeField0.set((-1175L), 1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StrictDateTimeField.getInstance((DateTimeField) null);
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0);
      strictDateTimeField0.set(1097L, 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      StrictDateTimeField.getInstance(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      strictDateTimeField0.set((long) 1, 1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      DateTimeField dateTimeField0 = StrictDateTimeField.getInstance(testPreciseDateTimeField_MockStandardDateTimeField0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) null);
      mutableDateTime0.getRoundingField();
      StrictDateTimeField strictDateTimeField0 = null;
      try {
        strictDateTimeField0 = new StrictDateTimeField((DateTimeField) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field must not be null
         //
         verifyException("org.joda.time.field.DelegatedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      strictDateTimeField0.isLenient();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField();
      StrictDateTimeField.getInstance(testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone.forOffsetHoursMinutes(0, 0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 1);
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) null, offsetDateTimeField0);
      skipDateTimeField0.getAsText((-5135L));
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(skipDateTimeField0, (Chronology) null);
      StrictDateTimeField.getInstance(lenientDateTimeField0);
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(offsetDateTimeField0);
      strictDateTimeField0.isLenient();
      strictDateTimeField0.isLenient();
      strictDateTimeField0.set((long) 1, 1);
      // Undeclared exception!
      try { 
        strictDateTimeField0.set((long) 1, (-1621));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1621 for clockhourOfHalfday must be in the range [1,60]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
