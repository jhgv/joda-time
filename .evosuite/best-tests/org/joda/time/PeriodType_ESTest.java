/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:21:42 GMT 2018
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DurationFieldType;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePeriod;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodType_ESTest extends PeriodType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      PeriodType.HOUR_INDEX = (-836);
      periodType0.withSecondsRemoved();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      periodType0.equals(periodType1);
      PeriodType.time();
      PeriodType.days();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType.yearMonthDay();
      PeriodType.standard();
      PeriodType.yearWeekDay();
      PeriodType periodType1 = periodType0.withDaysRemoved();
      PeriodType periodType2 = periodType1.withMonthsRemoved();
      periodType2.withWeeksRemoved();
      PeriodType periodType3 = periodType1.withHoursRemoved();
      periodType0.withMonthsRemoved();
      PeriodType.months();
      periodType0.isSupported((DurationFieldType) null);
      PeriodType.yearDay();
      PeriodType.minutes();
      periodType3.toString();
      PeriodType.standard();
      periodType3.getName();
      periodType2.size();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodType.YEAR_INDEX = 0;
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 60;
      intArray0[2] = 0;
      PeriodType periodType1 = PeriodType.minutes();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals(1, periodType1.size());
      assertEquals("Minutes", periodType1.getName());
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      intArray0[3] = (-1937);
      boolean boolean0 = periodType0.setIndexedField((ReadablePeriod) null, 0, intArray0, 60);
      assertFalse(periodType0.equals((Object)periodType1));
      assertEquals(4, intArray0.length);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotSame(periodType0, periodType1);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {60, 60, 0, (-1937)}, intArray0);
      
      PeriodType periodType2 = periodType0.withMinutesRemoved();
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(7, periodType2.size());
      assertEquals("StandardNoMinutes", periodType2.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
      
      periodType1.getIndexedField((ReadablePeriod) null, 0);
      PeriodType.hours();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      PeriodType.millis();
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = 1000;
      intArray0[5] = 4;
      intArray0[6] = 4;
      periodType0.addIndexedField((ReadablePeriod) null, 7, intArray0, (-865));
      // Undeclared exception!
      try { 
        periodType0.getIndexedField((ReadablePeriod) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = PeriodType.weeks();
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = periodType0.getFieldType(0);
      durationFieldTypeArray0[1] = durationFieldType1;
      DurationFieldType durationFieldType2 = periodType0.getFieldType(0);
      durationFieldTypeArray0[2] = durationFieldType2;
      DurationFieldType durationFieldType3 = periodType0.getFieldType(0);
      durationFieldTypeArray0[3] = durationFieldType3;
      DurationFieldType durationFieldType4 = periodType0.getFieldType(0);
      durationFieldTypeArray0[4] = durationFieldType4;
      durationFieldTypeArray0[5] = durationFieldType0;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [weeks, weeks, weeks, weeks, weeks]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      PeriodType periodType2 = periodType1.withYearsRemoved();
      PeriodType.yearMonthDayTime();
      PeriodType periodType3 = PeriodType.yearMonthDayTime();
      DurationFieldType durationFieldType0 = periodType2.getFieldType(0);
      periodType1.isSupported(durationFieldType0);
      periodType0.withWeeksRemoved();
      PeriodType.weeks();
      PeriodType periodType4 = PeriodType.weeks();
      periodType4.size();
      PeriodType.minutes();
      PeriodType periodType5 = PeriodType.yearDay();
      PeriodType periodType6 = periodType5.withDaysRemoved();
      PeriodType.seconds();
      periodType6.withHoursRemoved();
      DurationFieldType durationFieldType1 = periodType3.getFieldType(1);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      durationFieldTypeArray0[0] = durationFieldType1;
      durationFieldTypeArray0[1] = durationFieldType1;
      durationFieldTypeArray0[2] = durationFieldType0;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [months]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(5, periodType1.size());
      assertEquals("YearDayTimeNoMinutes", periodType1.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = periodType1.withYearsRemoved();
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(5, periodType1.size());
      assertEquals("YearDayTimeNoMinutes", periodType1.getName());
      assertEquals(4, periodType2.size());
      assertEquals("YearDayTimeNoMinutesNoYears", periodType2.getName());
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      
      PeriodType periodType3 = PeriodType.yearMonthDayTime();
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      assertEquals(7, periodType3.size());
      assertEquals("YearMonthDayTime", periodType3.getName());
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType1);
      assertNotNull(periodType3);
      
      PeriodType periodType4 = periodType0.withMonthsRemoved();
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType3));
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType4.size());
      assertEquals("YearDayTime", periodType4.getName());
      assertSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType3);
      assertNotNull(periodType4);
      
      DurationFieldType durationFieldType0 = periodType2.getFieldType(0);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType2.equals((Object)periodType4));
      assertFalse(periodType2.equals((Object)periodType3));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(5, periodType1.size());
      assertEquals("YearDayTimeNoMinutes", periodType1.getName());
      assertEquals(4, periodType2.size());
      assertEquals("YearDayTimeNoMinutesNoYears", periodType2.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType2, periodType4);
      assertNotSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = periodType1.isSupported(durationFieldType0);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType2.equals((Object)periodType4));
      assertFalse(periodType2.equals((Object)periodType3));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(5, periodType1.size());
      assertEquals("YearDayTimeNoMinutes", periodType1.getName());
      assertEquals(4, periodType2.size());
      assertEquals("YearDayTimeNoMinutesNoYears", periodType2.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType2, periodType4);
      assertNotSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertTrue(boolean0);
      
      PeriodType periodType5 = periodType0.withWeeksRemoved();
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType3));
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals("YearDayTime", periodType5.getName());
      assertEquals(6, periodType5.size());
      assertSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType1);
      assertSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType3);
      assertNotNull(periodType5);
      
      PeriodType periodType6 = PeriodType.weeks();
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType3));
      assertEquals(1, periodType6.size());
      assertEquals("Weeks", periodType6.getName());
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType3);
      assertNotNull(periodType6);
      
      int int0 = periodType6.size();
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType3));
      assertEquals(1, periodType6.size());
      assertEquals("Weeks", periodType6.getName());
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType3);
      assertEquals(1, int0);
      
      PeriodType periodType7 = PeriodType.minutes();
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType4));
      assertEquals(1, periodType7.size());
      assertEquals("Minutes", periodType7.getName());
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType4);
      assertNotNull(periodType7);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      // Undeclared exception!
      try { 
        periodType7.setIndexedField((ReadablePeriod) null, 1, intArray0, (-1809));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodType.weeks();
      PeriodType periodType0 = PeriodType.dayTime();
      periodType0.withMonthsRemoved();
      PeriodType.weeks();
      PeriodType.WEEK_INDEX = 2147483645;
      PeriodType periodType1 = PeriodType.minutes();
      PeriodType periodType2 = periodType1.withMinutesRemoved();
      int[] intArray0 = new int[6];
      intArray0[0] = 1336;
      intArray0[1] = 1336;
      intArray0[2] = (-1);
      intArray0[3] = 1336;
      intArray0[4] = 17;
      intArray0[5] = 1336;
      // Undeclared exception!
      try { 
        periodType2.addIndexedField((ReadablePeriod) null, 1336, intArray0, 179);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1336
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      PeriodType periodType2 = periodType1.withYearsRemoved();
      PeriodType.yearMonthDayTime();
      PeriodType periodType3 = PeriodType.yearMonthDayTime();
      DurationFieldType durationFieldType0 = periodType2.getFieldType(0);
      periodType1.isSupported(durationFieldType0);
      periodType0.withWeeksRemoved();
      periodType0.size();
      PeriodType.minutes();
      PeriodType periodType4 = PeriodType.yearDay();
      PeriodType periodType5 = periodType4.withDaysRemoved();
      PeriodType.seconds();
      periodType5.withHoursRemoved();
      DurationFieldType durationFieldType1 = periodType3.getFieldType(6);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      durationFieldTypeArray0[0] = durationFieldType1;
      durationFieldTypeArray0[1] = durationFieldType1;
      durationFieldTypeArray0[2] = durationFieldType0;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [millis]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      PeriodType periodType1 = PeriodType.minutes();
      PeriodType periodType2 = periodType1.withYearsRemoved();
      PeriodType.yearMonthDayTime();
      PeriodType periodType3 = PeriodType.yearMonthDayTime();
      DurationFieldType durationFieldType0 = periodType2.getFieldType(0);
      periodType1.isSupported(durationFieldType0);
      periodType0.withWeeksRemoved();
      PeriodType.weeks();
      PeriodType periodType4 = PeriodType.weeks();
      periodType4.size();
      PeriodType.minutes();
      PeriodType periodType5 = PeriodType.yearDay();
      PeriodType periodType6 = periodType5.withDaysRemoved();
      PeriodType.seconds();
      periodType6.withHoursRemoved();
      DurationFieldType durationFieldType1 = periodType3.getFieldType(1);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      durationFieldTypeArray0[0] = durationFieldType1;
      durationFieldTypeArray0[1] = durationFieldType1;
      durationFieldTypeArray0[2] = durationFieldType0;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [months]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      PeriodType periodType2 = periodType1.withYearsRemoved();
      PeriodType.yearMonthDayTime();
      PeriodType periodType3 = PeriodType.yearMonthDayTime();
      DurationFieldType durationFieldType0 = periodType2.getFieldType(0);
      periodType1.isSupported(durationFieldType0);
      periodType0.withWeeksRemoved();
      PeriodType.weeks();
      periodType2.size();
      PeriodType.minutes();
      PeriodType periodType4 = PeriodType.yearDay();
      PeriodType periodType5 = periodType4.withDaysRemoved();
      PeriodType.seconds();
      periodType5.withHoursRemoved();
      DurationFieldType durationFieldType1 = periodType3.getFieldType(4);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      durationFieldTypeArray0[0] = durationFieldType1;
      durationFieldTypeArray0[1] = durationFieldType1;
      durationFieldTypeArray0[2] = durationFieldType0;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [minutes]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      PeriodType periodType1 = periodType0.withDaysRemoved();
      PeriodType periodType2 = periodType1.withYearsRemoved();
      periodType2.withSecondsRemoved();
      PeriodType.yearMonthDay();
      // Undeclared exception!
      try { 
        periodType2.getFieldType(1376);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1376
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      periodType0.withHoursRemoved();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      DurationFieldType durationFieldType0 = periodType1.getFieldType(2);
      periodType0.isSupported(durationFieldType0);
      PeriodType.years();
      periodType0.toString();
      PeriodType.dayTime();
      PeriodType.YEAR_INDEX = 1111;
      periodType0.size();
      periodType1.indexOf(durationFieldType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      PeriodType periodType1 = PeriodType.years();
      periodType0.equals(periodType1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      PeriodType.weeks();
      PeriodType.WEEK_INDEX = 0;
      periodType0.equals("{iMt]h5T5cD0:nY$[*%_");
      periodType0.withHoursRemoved();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearMonthDay();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals(3, periodType1.size());
      assertEquals("YearMonthDay", periodType1.getName());
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = PeriodType.standard();
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertEquals("Standard", periodType2.getName());
      assertEquals(8, periodType2.size());
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
      
      PeriodType periodType3 = periodType0.withDaysRemoved();
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType3.size());
      assertEquals("Months", periodType3.getName());
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertSame(periodType3, periodType0);
      assertNotNull(periodType3);
      
      PeriodType periodType4 = periodType3.withMonthsRemoved();
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType2));
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType3.size());
      assertEquals("Months", periodType3.getName());
      assertEquals(0, periodType4.size());
      assertEquals("MonthsNoMonths", periodType4.getName());
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType4);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType3, periodType4);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertSame(periodType3, periodType0);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType2);
      assertNotNull(periodType4);
      
      PeriodType periodType5 = periodType4.withWeeksRemoved();
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType4));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType1));
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType3.size());
      assertEquals("Months", periodType3.getName());
      assertEquals(0, periodType4.size());
      assertEquals("MonthsNoMonths", periodType4.getName());
      assertEquals(0, periodType5.size());
      assertEquals("MonthsNoMonths", periodType5.getName());
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType5);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType3, periodType5);
      assertNotSame(periodType3, periodType4);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertSame(periodType3, periodType0);
      assertSame(periodType4, periodType5);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType0);
      assertSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType1);
      assertNotNull(periodType5);
      
      PeriodType periodType6 = periodType3.withHoursRemoved();
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType5));
      assertFalse(periodType3.equals((Object)periodType4));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType4));
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType3.size());
      assertEquals("Months", periodType3.getName());
      assertEquals(1, periodType6.size());
      assertEquals("Months", periodType6.getName());
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType4);
      assertSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType5);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType3, periodType5);
      assertSame(periodType3, periodType6);
      assertNotSame(periodType3, periodType4);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertSame(periodType3, periodType0);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType2);
      assertSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType5);
      assertSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType4);
      assertNotNull(periodType6);
      
      PeriodType periodType7 = periodType0.withMonthsRemoved();
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType3));
      assertTrue(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType6));
      assertTrue(periodType7.equals((Object)periodType4));
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(0, periodType7.size());
      assertEquals("MonthsNoMonths", periodType7.getName());
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType4);
      assertSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType5);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType6);
      assertNotNull(periodType7);
      
      PeriodType periodType8 = PeriodType.months();
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType2));
      assertEquals("Months", periodType8.getName());
      assertEquals(1, periodType8.size());
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType7);
      assertSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType2);
      assertSame(periodType8, periodType6);
      assertSame(periodType8, periodType3);
      assertNotNull(periodType8);
      
      boolean boolean0 = periodType0.isSupported((DurationFieldType) null);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType1));
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType4);
      assertSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType5);
      assertSame(periodType0, periodType8);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType1);
      assertFalse(boolean0);
      
      PeriodType periodType9 = PeriodType.yearDay();
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType5));
      assertEquals(2, periodType9.size());
      assertEquals("YearDay", periodType9.getName());
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType5);
      assertNotNull(periodType9);
      
      PeriodType periodType10 = PeriodType.minutes();
      assertFalse(periodType10.equals((Object)periodType3));
      assertFalse(periodType10.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType8));
      assertFalse(periodType10.equals((Object)periodType9));
      assertFalse(periodType10.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType6));
      assertFalse(periodType10.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType5));
      assertEquals("Minutes", periodType10.getName());
      assertEquals(1, periodType10.size());
      assertNotSame(periodType10, periodType3);
      assertNotSame(periodType10, periodType0);
      assertNotSame(periodType10, periodType8);
      assertNotSame(periodType10, periodType9);
      assertNotSame(periodType10, periodType1);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType6);
      assertNotSame(periodType10, periodType4);
      assertNotSame(periodType10, periodType5);
      assertNotNull(periodType10);
      
      String string0 = periodType6.toString();
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType10));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType9));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType5));
      assertFalse(periodType3.equals((Object)periodType4));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType10));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType9));
      assertFalse(periodType3.equals((Object)periodType7));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType10));
      assertFalse(periodType6.equals((Object)periodType9));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType7));
      assertFalse(periodType6.equals((Object)periodType4));
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType3.size());
      assertEquals("Months", periodType3.getName());
      assertEquals(1, periodType6.size());
      assertEquals("Months", periodType6.getName());
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType10);
      assertNotSame(periodType0, periodType4);
      assertSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType5);
      assertSame(periodType0, periodType8);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType9);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType3, periodType5);
      assertSame(periodType3, periodType6);
      assertNotSame(periodType3, periodType4);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType10);
      assertNotSame(periodType3, periodType1);
      assertSame(periodType3, periodType0);
      assertSame(periodType3, periodType8);
      assertNotSame(periodType3, periodType9);
      assertNotSame(periodType3, periodType7);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType10);
      assertNotSame(periodType6, periodType9);
      assertSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType5);
      assertSame(periodType6, periodType0);
      assertSame(periodType6, periodType8);
      assertNotSame(periodType6, periodType7);
      assertNotSame(periodType6, periodType4);
      assertEquals("PeriodType[Months]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      PeriodType.months();
      PeriodType periodType1 = PeriodType.millis();
      periodType1.toString();
      int[] intArray0 = new int[3];
      intArray0[0] = (-1690);
      intArray0[1] = (-1690);
      intArray0[2] = 86400;
      PeriodType periodType2 = PeriodType.weeks();
      periodType2.withHoursRemoved();
      PeriodType.SECOND_INDEX = (-1690);
      // Undeclared exception!
      try { 
        periodType0.setIndexedField((ReadablePeriod) null, (-1690), intArray0, 449);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1690
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      periodType0.addIndexedField((ReadablePeriod) null, 0, intArray0, 0);
      PeriodType periodType1 = PeriodType.days();
      PeriodType.yearWeekDayTime();
      PeriodType.months();
      PeriodType periodType2 = PeriodType.yearWeekDayTime();
      periodType2.withMonthsRemoved();
      PeriodType periodType3 = PeriodType.yearDayTime();
      PeriodType.yearDay();
      PeriodType.MINUTE_INDEX = 0;
      periodType0.withWeeksRemoved();
      PeriodType periodType4 = periodType1.withSecondsRemoved();
      periodType4.withMonthsRemoved();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = periodType3.getFieldType(0);
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType.forFields(durationFieldTypeArray0);
      PeriodType.months();
      periodType3.hashCode();
      PeriodType periodType5 = PeriodType.years();
      PeriodType periodType6 = PeriodType.standard();
      PeriodType.seconds();
      PeriodType periodType7 = periodType6.withSecondsRemoved();
      periodType5.toString();
      PeriodType periodType8 = PeriodType.days();
      periodType8.withDaysRemoved();
      PeriodType.millis();
      PeriodType.yearMonthDayTime();
      periodType5.size();
      periodType7.equals("T;!XL'zyK;_");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      PeriodType periodType2 = periodType1.withHoursRemoved();
      PeriodType periodType3 = periodType2.withMinutesRemoved();
      PeriodType.YEAR_INDEX = 2279;
      periodType2.withDaysRemoved();
      int int0 = 302;
      PeriodType.YEAR_INDEX = 302;
      PeriodType.WEEK_INDEX = 466;
      periodType2.equals(periodType0);
      PeriodType.yearDay();
      PeriodType.months();
      PeriodType.hours();
      PeriodType.yearWeekDay();
      PeriodType.minutes();
      PeriodType.yearMonthDay();
      periodType3.size();
      periodType2.withMonthsRemoved();
      PeriodType.days();
      PeriodType.hours();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      // Undeclared exception!
      try { 
        periodType0.getFieldType(4085);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4085
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      PeriodType.YEAR_INDEX = (-2160);
      periodType0.withMillisRemoved();
      PeriodType periodType1 = PeriodType.seconds();
      periodType1.withMonthsRemoved();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      // Undeclared exception!
      try { 
        periodType0.getFieldType(11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      PeriodType periodType1 = periodType0.withDaysRemoved();
      periodType1.withYearsRemoved();
      PeriodType.MONTH_INDEX = 1438;
      PeriodType.MILLI_INDEX = (-363);
      PeriodType periodType2 = periodType0.withDaysRemoved();
      periodType2.withMonthsRemoved();
      PeriodType.yearWeekDay();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PeriodType.MINUTE_INDEX = 0;
      int[] intArray0 = new int[9];
      PeriodType.yearMonthDay();
      intArray0[0] = 0;
      intArray0[1] = 1946;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      PeriodType periodType0 = PeriodType.dayTime();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      PeriodType.MINUTE_INDEX = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      PeriodType.yearDay();
      PeriodType periodType2 = PeriodType.yearWeekDayTime();
      DurationFieldType durationFieldType0 = periodType2.getFieldType(0);
      periodType1.isSupported(durationFieldType0);
      PeriodType periodType3 = PeriodType.time();
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 1946;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      // Undeclared exception!
      try { 
        periodType3.addIndexedField((ReadablePeriod) null, 0, intArray1, 2287);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      PeriodType.years();
      PeriodType periodType2 = periodType1.withYearsRemoved();
      PeriodType periodType3 = PeriodType.dayTime();
      PeriodType periodType4 = periodType1.withHoursRemoved();
      periodType4.withHoursRemoved();
      periodType2.withMillisRemoved();
      periodType4.withDaysRemoved();
      PeriodType.WEEK_INDEX = 212;
      PeriodType.months();
      PeriodType.MONTH_INDEX = 212;
      PeriodType periodType5 = PeriodType.days();
      periodType3.withSecondsRemoved();
      periodType4.toString();
      PeriodType periodType6 = PeriodType.yearMonthDay();
      periodType6.withMinutesRemoved();
      PeriodType periodType7 = PeriodType.days();
      PeriodType.yearDayTime();
      PeriodType.standard();
      periodType5.getName();
      periodType0.toString();
      periodType5.withMillisRemoved();
      PeriodType periodType8 = PeriodType.years();
      periodType8.hashCode();
      periodType3.withMinutesRemoved();
      periodType2.withMonthsRemoved();
      PeriodType.standard();
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      // Undeclared exception!
      try { 
        periodType7.getFieldType(212);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 212
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      PeriodType periodType1 = PeriodType.dayTime();
      periodType1.withMonthsRemoved();
      periodType1.withDaysRemoved();
      PeriodType.HOUR_INDEX = (-1);
      PeriodType.days();
      periodType0.withWeeksRemoved();
      PeriodType.years();
      periodType0.isSupported((DurationFieldType) null);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      durationFieldTypeArray0[0] = null;
      durationFieldTypeArray0[1] = null;
      durationFieldTypeArray0[2] = null;
      durationFieldTypeArray0[3] = null;
      durationFieldTypeArray0[4] = null;
      durationFieldTypeArray0[5] = null;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 4694;
      int int0 = 24;
      intArray0[1] = 24;
      intArray0[2] = 1440;
      intArray0[3] = 5;
      intArray0[4] = 0;
      intArray0[5] = 1016;
      intArray0[6] = 7;
      intArray0[7] = (-224);
      PeriodType periodType0 = new PeriodType("", (DurationFieldType[]) null, intArray0);
      PeriodType.seconds();
      PeriodType.MILLI_INDEX = 7;
      PeriodType.years();
      PeriodType.seconds();
      // Undeclared exception!
      try { 
        periodType0.withWeeksRemoved();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = PeriodType.seconds();
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = periodType0.getFieldType(0);
      durationFieldTypeArray0[1] = durationFieldType1;
      DurationFieldType durationFieldType2 = periodType0.getFieldType(0);
      durationFieldTypeArray0[2] = durationFieldType2;
      DurationFieldType durationFieldType3 = periodType0.getFieldType(0);
      durationFieldTypeArray0[3] = durationFieldType3;
      DurationFieldType durationFieldType4 = periodType0.getFieldType(0);
      durationFieldTypeArray0[4] = durationFieldType4;
      DurationFieldType durationFieldType5 = periodType0.getFieldType(0);
      durationFieldTypeArray0[5] = durationFieldType5;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [seconds, seconds, seconds, seconds, seconds]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      PeriodType periodType0 = PeriodType.seconds();
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = periodType0.getFieldType(0);
      durationFieldTypeArray0[1] = durationFieldType1;
      DurationFieldType durationFieldType2 = periodType0.getFieldType(0);
      durationFieldTypeArray0[2] = durationFieldType2;
      DurationFieldType durationFieldType3 = periodType0.getFieldType(0);
      durationFieldTypeArray0[3] = durationFieldType3;
      DurationFieldType durationFieldType4 = periodType0.getFieldType(0);
      durationFieldTypeArray0[4] = durationFieldType4;
      durationFieldTypeArray0[5] = durationFieldType0;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [seconds, seconds, seconds, seconds, seconds]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      PeriodType.minutes();
      PeriodType.dayTime();
      ReadablePeriod readablePeriod0 = null;
      // Undeclared exception!
      try { 
        periodType1.getIndexedField((ReadablePeriod) null, 1305);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1305
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      PeriodType.DAY_INDEX = 604800;
      PeriodType.yearDayTime();
      periodType0.withMillisRemoved();
      PeriodType.MINUTE_INDEX = 604800;
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      periodType0.isSupported(durationFieldType0);
      PeriodType periodType1 = PeriodType.yearDay();
      PeriodType.standard();
      ReadablePeriod readablePeriod0 = null;
      // Undeclared exception!
      try { 
        periodType1.getIndexedField((ReadablePeriod) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearWeekDayTime();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals(7, periodType1.size());
      assertEquals("YearWeekDayTime", periodType1.getName());
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      String string0 = periodType0.toString();
      assertFalse(periodType0.equals((Object)periodType1));
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertNotSame(periodType0, periodType1);
      assertEquals("PeriodType[YearMonthDay]", string0);
      assertNotNull(string0);
      
      PeriodType periodType2 = PeriodType.yearWeekDayTime();
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals(7, periodType2.size());
      assertEquals("YearWeekDayTime", periodType2.getName());
      assertSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      
      PeriodType periodType3 = PeriodType.yearMonthDay();
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertEquals("YearMonthDay", periodType3.getName());
      assertEquals(3, periodType3.size());
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertSame(periodType3, periodType0);
      assertNotNull(periodType3);
      
      PeriodType periodType4 = periodType1.withMinutesRemoved();
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType3));
      assertEquals(7, periodType1.size());
      assertEquals("YearWeekDayTime", periodType1.getName());
      assertEquals("YearWeekDayTimeNoMinutes", periodType4.getName());
      assertEquals(6, periodType4.size());
      assertNotSame(periodType1, periodType4);
      assertSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType3);
      assertNotNull(periodType4);
      
      PeriodType periodType5 = PeriodType.seconds();
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType2));
      assertEquals(1, periodType5.size());
      assertEquals("Seconds", periodType5.getName());
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType2);
      assertNotNull(periodType5);
      
      // Undeclared exception!
      try { 
        periodType1.getFieldType((-2605));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2605
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTimeNoMinutes", periodType1.getName());
      assertEquals(6, periodType1.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = periodType1.withHoursRemoved();
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTimeNoMinutes", periodType1.getName());
      assertEquals(6, periodType1.size());
      assertEquals(5, periodType2.size());
      assertEquals("YearMonthDayTimeNoMinutesNoHours", periodType2.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      
      PeriodType periodType3 = PeriodType.days();
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      assertEquals(1, periodType3.size());
      assertEquals("Days", periodType3.getName());
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertNotNull(periodType3);
      
      PeriodType periodType4 = PeriodType.hours();
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType1));
      assertEquals(1, periodType4.size());
      assertEquals("Hours", periodType4.getName());
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType1);
      assertNotNull(periodType4);
      
      PeriodType periodType5 = PeriodType.yearDayTime();
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType3));
      assertEquals(6, periodType5.size());
      assertEquals("YearDayTime", periodType5.getName());
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType3);
      assertNotNull(periodType5);
      
      PeriodType periodType6 = periodType2.withDaysRemoved();
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType4));
      assertFalse(periodType2.equals((Object)periodType5));
      assertFalse(periodType2.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType4));
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTimeNoMinutes", periodType1.getName());
      assertEquals(6, periodType1.size());
      assertEquals(5, periodType2.size());
      assertEquals("YearMonthDayTimeNoMinutesNoHours", periodType2.getName());
      assertEquals(4, periodType6.size());
      assertEquals("YearMonthDayTimeNoMinutesNoHoursNoDays", periodType6.getName());
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType4);
      assertNotSame(periodType2, periodType5);
      assertNotSame(periodType2, periodType6);
      assertNotSame(periodType2, periodType3);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType4);
      assertNotNull(periodType6);
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = periodType5.getFieldType(0);
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType6));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType3));
      assertEquals(6, periodType5.size());
      assertEquals("YearDayTime", periodType5.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType6);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType3);
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = periodType1.getFieldType(0);
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType5));
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTimeNoMinutes", periodType1.getName());
      assertEquals(6, periodType1.size());
      assertEquals("years", durationFieldType1.getName());
      assertEquals("years", durationFieldType1.toString());
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType5);
      assertSame(durationFieldType1, durationFieldType0);
      assertNotNull(durationFieldType1);
      
      durationFieldTypeArray0[1] = durationFieldType1;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [years]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(4, periodType1.size());
      assertEquals("DayTimeNoDays", periodType1.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType.MONTH_INDEX = 0;
      PeriodType periodType2 = periodType1.withYearsRemoved();
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(4, periodType1.size());
      assertEquals("DayTimeNoDays", periodType1.getName());
      assertEquals(4, periodType2.size());
      assertEquals("DayTimeNoDays", periodType2.getName());
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertSame(periodType1, periodType2);
      assertSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      
      PeriodType periodType3 = PeriodType.dayTime();
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertEquals("DayTime", periodType3.getName());
      assertEquals(5, periodType3.size());
      assertSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotNull(periodType3);
      
      PeriodType periodType4 = PeriodType.standard();
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType2));
      assertEquals("Standard", periodType4.getName());
      assertEquals(8, periodType4.size());
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType2);
      assertNotNull(periodType4);
      
      PeriodType periodType5 = periodType0.withWeeksRemoved();
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType2));
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(5, periodType5.size());
      assertEquals("DayTime", periodType5.getName());
      assertSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType5, periodType4);
      assertSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType2);
      assertSame(periodType5, periodType3);
      assertNotNull(periodType5);
      
      PeriodType periodType6 = PeriodType.millis();
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType5));
      assertEquals(1, periodType6.size());
      assertEquals("Millis", periodType6.getName());
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType5);
      assertNotNull(periodType6);
      
      PeriodType.WEEK_INDEX = 1414;
      PeriodType.MINUTE_INDEX = 224;
      PeriodType periodType7 = PeriodType.yearDayTime();
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType6));
      assertEquals(6, periodType7.size());
      assertEquals("YearDayTime", periodType7.getName());
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType6);
      assertNotNull(periodType7);
      
      PeriodType periodType8 = PeriodType.yearWeekDay();
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType7));
      assertEquals("YearWeekDay", periodType8.getName());
      assertEquals(3, periodType8.size());
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType7);
      assertNotNull(periodType8);
      
      PeriodType periodType9 = PeriodType.yearDayTime();
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType2));
      assertEquals("YearDayTime", periodType9.getName());
      assertEquals(6, periodType9.size());
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType1);
      assertSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType2);
      assertNotNull(periodType9);
      
      PeriodType periodType10 = PeriodType.weeks();
      assertFalse(periodType10.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType3));
      assertFalse(periodType10.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType5));
      assertFalse(periodType10.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType9));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType6));
      assertFalse(periodType10.equals((Object)periodType8));
      assertEquals("Weeks", periodType10.getName());
      assertEquals(1, periodType10.size());
      assertNotSame(periodType10, periodType4);
      assertNotSame(periodType10, periodType3);
      assertNotSame(periodType10, periodType1);
      assertNotSame(periodType10, periodType5);
      assertNotSame(periodType10, periodType0);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType9);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType6);
      assertNotSame(periodType10, periodType8);
      assertNotNull(periodType10);
      
      PeriodType periodType11 = PeriodType.days();
      assertFalse(periodType11.equals((Object)periodType4));
      assertFalse(periodType11.equals((Object)periodType3));
      assertFalse(periodType11.equals((Object)periodType5));
      assertFalse(periodType11.equals((Object)periodType1));
      assertFalse(periodType11.equals((Object)periodType6));
      assertFalse(periodType11.equals((Object)periodType2));
      assertFalse(periodType11.equals((Object)periodType7));
      assertFalse(periodType11.equals((Object)periodType0));
      assertFalse(periodType11.equals((Object)periodType10));
      assertFalse(periodType11.equals((Object)periodType8));
      assertFalse(periodType11.equals((Object)periodType9));
      assertEquals("Days", periodType11.getName());
      assertEquals(1, periodType11.size());
      assertNotSame(periodType11, periodType4);
      assertNotSame(periodType11, periodType3);
      assertNotSame(periodType11, periodType5);
      assertNotSame(periodType11, periodType1);
      assertNotSame(periodType11, periodType6);
      assertNotSame(periodType11, periodType2);
      assertNotSame(periodType11, periodType7);
      assertNotSame(periodType11, periodType0);
      assertNotSame(periodType11, periodType10);
      assertNotSame(periodType11, periodType8);
      assertNotSame(periodType11, periodType9);
      assertNotNull(periodType11);
      
      PeriodType periodType12 = PeriodType.millis();
      assertFalse(periodType12.equals((Object)periodType10));
      assertFalse(periodType12.equals((Object)periodType2));
      assertFalse(periodType12.equals((Object)periodType0));
      assertFalse(periodType12.equals((Object)periodType9));
      assertFalse(periodType12.equals((Object)periodType1));
      assertFalse(periodType12.equals((Object)periodType5));
      assertFalse(periodType12.equals((Object)periodType3));
      assertFalse(periodType12.equals((Object)periodType11));
      assertFalse(periodType12.equals((Object)periodType4));
      assertFalse(periodType12.equals((Object)periodType8));
      assertFalse(periodType12.equals((Object)periodType7));
      assertEquals(1, periodType12.size());
      assertEquals("Millis", periodType12.getName());
      assertNotSame(periodType12, periodType10);
      assertNotSame(periodType12, periodType2);
      assertNotSame(periodType12, periodType0);
      assertNotSame(periodType12, periodType9);
      assertNotSame(periodType12, periodType1);
      assertNotSame(periodType12, periodType5);
      assertNotSame(periodType12, periodType3);
      assertNotSame(periodType12, periodType11);
      assertNotSame(periodType12, periodType4);
      assertNotSame(periodType12, periodType8);
      assertSame(periodType12, periodType6);
      assertNotSame(periodType12, periodType7);
      assertNotNull(periodType12);
      
      PeriodType periodType13 = PeriodType.millis();
      assertFalse(periodType13.equals((Object)periodType1));
      assertFalse(periodType13.equals((Object)periodType5));
      assertFalse(periodType13.equals((Object)periodType11));
      assertFalse(periodType13.equals((Object)periodType2));
      assertFalse(periodType13.equals((Object)periodType3));
      assertFalse(periodType13.equals((Object)periodType9));
      assertFalse(periodType13.equals((Object)periodType0));
      assertFalse(periodType13.equals((Object)periodType8));
      assertFalse(periodType13.equals((Object)periodType4));
      assertFalse(periodType13.equals((Object)periodType10));
      assertFalse(periodType13.equals((Object)periodType7));
      assertEquals(1, periodType13.size());
      assertEquals("Millis", periodType13.getName());
      assertNotSame(periodType13, periodType1);
      assertNotSame(periodType13, periodType5);
      assertNotSame(periodType13, periodType9);
      assertNotSame(periodType13, periodType8);
      assertNotSame(periodType13, periodType11);
      assertSame(periodType13, periodType12);
      assertNotSame(periodType13, periodType3);
      assertNotSame(periodType13, periodType2);
      assertNotSame(periodType13, periodType0);
      assertNotSame(periodType13, periodType4);
      assertNotSame(periodType13, periodType10);
      assertSame(periodType13, periodType6);
      assertNotSame(periodType13, periodType7);
      assertNotNull(periodType13);
      
      PeriodType periodType14 = periodType10.withYearsRemoved();
      assertFalse(periodType14.equals((Object)periodType12));
      assertFalse(periodType14.equals((Object)periodType11));
      assertFalse(periodType14.equals((Object)periodType13));
      assertFalse(periodType14.equals((Object)periodType3));
      assertFalse(periodType14.equals((Object)periodType5));
      assertFalse(periodType14.equals((Object)periodType9));
      assertFalse(periodType14.equals((Object)periodType8));
      assertFalse(periodType14.equals((Object)periodType2));
      assertFalse(periodType14.equals((Object)periodType6));
      assertFalse(periodType14.equals((Object)periodType1));
      assertFalse(periodType14.equals((Object)periodType0));
      assertFalse(periodType14.equals((Object)periodType7));
      assertFalse(periodType14.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType5));
      assertFalse(periodType10.equals((Object)periodType9));
      assertFalse(periodType10.equals((Object)periodType8));
      assertFalse(periodType10.equals((Object)periodType12));
      assertFalse(periodType10.equals((Object)periodType11));
      assertFalse(periodType10.equals((Object)periodType3));
      assertFalse(periodType10.equals((Object)periodType13));
      assertFalse(periodType10.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType6));
      assertEquals(1, periodType14.size());
      assertEquals("Weeks", periodType14.getName());
      assertEquals("Weeks", periodType10.getName());
      assertEquals(1, periodType10.size());
      assertNotSame(periodType14, periodType12);
      assertNotSame(periodType14, periodType11);
      assertNotSame(periodType14, periodType13);
      assertNotSame(periodType14, periodType3);
      assertSame(periodType14, periodType10);
      assertNotSame(periodType14, periodType5);
      assertNotSame(periodType14, periodType9);
      assertNotSame(periodType14, periodType8);
      assertNotSame(periodType14, periodType2);
      assertNotSame(periodType14, periodType6);
      assertNotSame(periodType14, periodType1);
      assertNotSame(periodType14, periodType0);
      assertNotSame(periodType14, periodType7);
      assertNotSame(periodType14, periodType4);
      assertNotSame(periodType10, periodType4);
      assertNotSame(periodType10, periodType1);
      assertNotSame(periodType10, periodType5);
      assertNotSame(periodType10, periodType9);
      assertSame(periodType10, periodType14);
      assertNotSame(periodType10, periodType8);
      assertNotSame(periodType10, periodType12);
      assertNotSame(periodType10, periodType11);
      assertNotSame(periodType10, periodType3);
      assertNotSame(periodType10, periodType13);
      assertNotSame(periodType10, periodType0);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType6);
      assertNotNull(periodType14);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(6, periodType1.size());
      assertEquals("YearMonthDayTimeNoSeconds", periodType1.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = periodType0.withDaysRemoved();
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(6, periodType2.size());
      assertEquals("YearMonthDayTimeNoDays", periodType2.getName());
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      
      PeriodType periodType3 = PeriodType.dayTime();
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      assertEquals("DayTime", periodType3.getName());
      assertEquals(5, periodType3.size());
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertNotNull(periodType3);
      
      PeriodType periodType4 = PeriodType.yearWeekDayTime();
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType1));
      assertEquals("YearWeekDayTime", periodType4.getName());
      assertEquals(7, periodType4.size());
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType1);
      assertNotNull(periodType4);
      
      PeriodType periodType5 = PeriodType.yearMonthDayTime();
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType4));
      assertEquals(7, periodType5.size());
      assertEquals("YearMonthDayTime", periodType5.getName());
      assertSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType4);
      assertNotNull(periodType5);
      
      PeriodType.MINUTE_INDEX = (-3233);
      PeriodType periodType6 = periodType3.withHoursRemoved();
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType5));
      assertFalse(periodType3.equals((Object)periodType4));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType5));
      assertEquals("DayTime", periodType3.getName());
      assertEquals(5, periodType3.size());
      assertEquals(4, periodType6.size());
      assertEquals("DayTimeNoHours", periodType6.getName());
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType5);
      assertNotSame(periodType3, periodType4);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType6);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType5);
      assertNotNull(periodType6);
      
      periodType6.hashCode();
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType5));
      assertFalse(periodType3.equals((Object)periodType4));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType6));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType5));
      assertEquals("DayTime", periodType3.getName());
      assertEquals(5, periodType3.size());
      assertEquals(4, periodType6.size());
      assertEquals("DayTimeNoHours", periodType6.getName());
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType5);
      assertNotSame(periodType3, periodType4);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType6);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType5);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals(0, int0);
      
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = PeriodType.hours();
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertEquals("Hours", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[5];
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldType0;
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldType0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      PeriodType periodType3 = new PeriodType("TF2.n<a", durationFieldTypeArray0, intArray0);
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertEquals(5, durationFieldTypeArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals("TF2.n<a", periodType3.getName());
      assertEquals(5, periodType3.size());
      assertNotNull(periodType3);
      assertArrayEquals(new int[] {0}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType3.withMonthsRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearWeekDay();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("YearWeekDay", periodType1.getName());
      assertEquals(3, periodType1.size());
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = PeriodType.weeks();
      assertFalse(periodType2.equals((Object)periodType1));
      assertEquals("Weeks", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertNotSame(periodType2, periodType1);
      assertSame(periodType2, periodType0);
      assertNotNull(periodType2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.hours();
      assertEquals(1, periodType1.size());
      assertEquals("Hours", periodType1.getName());
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = periodType0.withHoursRemoved();
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals("HoursNoHours", periodType2.getName());
      assertEquals(0, periodType2.size());
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
      
      PeriodType periodType3 = periodType0.withDaysRemoved();
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType2));
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType3.size());
      assertEquals("Hours", periodType3.getName());
      assertSame(periodType0, periodType1);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType3, periodType2);
      assertSame(periodType3, periodType1);
      assertSame(periodType3, periodType0);
      assertNotNull(periodType3);
      
      PeriodType periodType4 = periodType1.withMinutesRemoved();
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType2));
      assertEquals(1, periodType1.size());
      assertEquals("Hours", periodType1.getName());
      assertEquals("Hours", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertSame(periodType1, periodType4);
      assertSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType2);
      assertSame(periodType1, periodType0);
      assertSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType2);
      assertSame(periodType4, periodType3);
      assertSame(periodType4, periodType0);
      assertNotNull(periodType4);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(2, periodType1.size());
      assertEquals("YearMonthDayNoMonths", periodType1.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertNotSame(periodType0, periodType1);
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertNotSame(periodType0, periodType1);
      assertTrue(boolean0);
      
      PeriodType periodType2 = PeriodType.years();
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals(1, periodType2.size());
      assertEquals("Years", periodType2.getName());
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      
      PeriodType periodType3 = PeriodType.minutes();
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      assertEquals(1, periodType3.size());
      assertEquals("Minutes", periodType3.getName());
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertNotNull(periodType3);
      
      PeriodType periodType4 = PeriodType.years();
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType3));
      assertEquals("Years", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType0);
      assertSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType3);
      assertNotNull(periodType4);
      
      int int0 = periodType3.size();
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType4));
      assertEquals(1, periodType3.size());
      assertEquals("Minutes", periodType3.getName());
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType4);
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        periodType1.getFieldType(4571);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4571
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertNotNull(periodType0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 587;
      intArray0[1] = 587;
      intArray0[2] = 587;
      intArray0[3] = 587;
      // Undeclared exception!
      try { 
        periodType0.setIndexedField((ReadablePeriod) null, 587, intArray0, 587);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 587
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType.MONTH_INDEX = 0;
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Days", periodType1.getName());
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = PeriodType.days();
      assertEquals("Days", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertSame(periodType2, periodType1);
      assertSame(periodType2, periodType0);
      assertNotNull(periodType2);
      
      PeriodType periodType3 = PeriodType.time();
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      assertEquals("Time", periodType3.getName());
      assertEquals(4, periodType3.size());
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertNotNull(periodType3);
      
      // Undeclared exception!
      try { 
        periodType0.getFieldType(86400);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 86400
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        PeriodType.forFields((DurationFieldType[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = null;
      int[] intArray0 = new int[0];
      PeriodType periodType0 = new PeriodType("~4!g aC!@algN", (DurationFieldType[]) null, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("~4!g aC!@algN", periodType0.getName());
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        periodType0.withSecondsRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = periodType0.getFieldType(0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals("years", durationFieldType1.toString());
      assertEquals("years", durationFieldType1.getName());
      assertSame(durationFieldType1, durationFieldType0);
      assertNotNull(durationFieldType1);
      
      durationFieldTypeArray0[1] = durationFieldType1;
      PeriodType periodType1 = PeriodType.years();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("Years", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      DurationFieldType durationFieldType2 = periodType1.getFieldType(0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("Years", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals("years", durationFieldType2.toString());
      assertEquals("years", durationFieldType2.getName());
      assertNotSame(periodType1, periodType0);
      assertSame(durationFieldType2, durationFieldType0);
      assertSame(durationFieldType2, durationFieldType1);
      assertNotNull(durationFieldType2);
      
      durationFieldTypeArray0[2] = durationFieldType2;
      DurationFieldType durationFieldType3 = periodType1.getFieldType(0);
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("Years", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals("years", durationFieldType3.toString());
      assertEquals("years", durationFieldType3.getName());
      assertNotSame(periodType1, periodType0);
      assertSame(durationFieldType3, durationFieldType0);
      assertSame(durationFieldType3, durationFieldType1);
      assertSame(durationFieldType3, durationFieldType2);
      assertNotNull(durationFieldType3);
      
      durationFieldTypeArray0[3] = durationFieldType3;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      PeriodType periodType2 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertEquals(4, durationFieldTypeArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(4, periodType2.size());
      assertNull(periodType2.getName());
      assertNotNull(periodType2);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      ReadablePeriod readablePeriod0 = null;
      PeriodType periodType1 = PeriodType.minutes();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals(1, periodType1.size());
      assertEquals("Minutes", periodType1.getName());
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      String string0 = periodType1.toString();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals(1, periodType1.size());
      assertEquals("Minutes", periodType1.getName());
      assertNotSame(periodType1, periodType0);
      assertEquals("PeriodType[Minutes]", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 9;
      PeriodType periodType2 = PeriodType.yearWeekDayTime();
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals(7, periodType2.size());
      assertEquals("YearWeekDayTime", periodType2.getName());
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      
      intArray0[1] = 9;
      intArray0[2] = 9;
      // Undeclared exception!
      try { 
        periodType0.addIndexedField((ReadablePeriod) null, 9, intArray0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      ReadablePeriod readablePeriod0 = null;
      int int0 = 1070;
      int[] intArray0 = new int[2];
      String string0 = periodType0.toString();
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertSame(periodType0, periodType1);
      assertEquals("PeriodType[YearWeekDayTime]", string0);
      assertNotNull(string0);
      
      PeriodType periodType2 = PeriodType.yearMonthDayTime();
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertEquals(7, periodType2.size());
      assertEquals("YearMonthDayTime", periodType2.getName());
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
      
      PeriodType.MILLI_INDEX = (-1345);
      PeriodType periodType3 = periodType2.withMinutesRemoved();
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      assertEquals(7, periodType2.size());
      assertEquals("YearMonthDayTime", periodType2.getName());
      assertEquals("YearMonthDayTimeNoMinutes", periodType3.getName());
      assertEquals(6, periodType3.size());
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertNotNull(periodType3);
      
      PeriodType periodType4 = PeriodType.yearDayTime();
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType0));
      assertEquals("YearDayTime", periodType4.getName());
      assertEquals(6, periodType4.size());
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType0);
      assertNotNull(periodType4);
      
      PeriodType periodType5 = PeriodType.yearDay();
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType0));
      assertEquals(2, periodType5.size());
      assertEquals("YearDay", periodType5.getName());
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType0);
      assertNotNull(periodType5);
      
      intArray0[0] = 1070;
      intArray0[1] = 1070;
      // Undeclared exception!
      try { 
        periodType1.addIndexedField((ReadablePeriod) null, 1070, intArray0, 1070);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1070
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      boolean boolean0 = periodType0.addIndexedField((ReadablePeriod) null, 0, intArray0, 0);
      assertEquals(7, intArray0.length);
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      PeriodType periodType1 = PeriodType.months();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals(1, periodType1.size());
      assertEquals("Months", periodType1.getName());
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertNotSame(periodType0, periodType1);
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = periodType0.getFieldType(0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals("hours", durationFieldType1.toString());
      assertEquals("hours", durationFieldType1.getName());
      assertNotSame(periodType0, periodType1);
      assertSame(durationFieldType1, durationFieldType0);
      assertNotNull(durationFieldType1);
      
      durationFieldTypeArray0[1] = durationFieldType1;
      PeriodType.HOUR_INDEX = 1440;
      // Undeclared exception!
      try { 
        periodType0.getFieldType((-997));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -997
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(7, periodType1.size());
      assertEquals("StandardNoHours", periodType1.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = periodType1.withMinutesRemoved();
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(7, periodType1.size());
      assertEquals("StandardNoHours", periodType1.getName());
      assertEquals("StandardNoHoursNoMinutes", periodType2.getName());
      assertEquals(6, periodType2.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
      
      PeriodType periodType3 = periodType2.withHoursRemoved();
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(7, periodType1.size());
      assertEquals("StandardNoHours", periodType1.getName());
      assertEquals("StandardNoHoursNoMinutes", periodType2.getName());
      assertEquals(6, periodType2.size());
      assertEquals(6, periodType3.size());
      assertEquals("StandardNoHoursNoMinutes", periodType3.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertSame(periodType2, periodType3);
      assertSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertNotNull(periodType3);
      
      PeriodType periodType4 = periodType2.withHoursRemoved();
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType0));
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(7, periodType1.size());
      assertEquals("StandardNoHours", periodType1.getName());
      assertEquals("StandardNoHoursNoMinutes", periodType2.getName());
      assertEquals(6, periodType2.size());
      assertEquals(6, periodType4.size());
      assertEquals("StandardNoHoursNoMinutes", periodType4.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType2, periodType0);
      assertSame(periodType2, periodType4);
      assertNotSame(periodType2, periodType1);
      assertSame(periodType2, periodType3);
      assertNotSame(periodType4, periodType1);
      assertSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType0);
      assertSame(periodType4, periodType3);
      assertNotNull(periodType4);
      
      PeriodType periodType5 = PeriodType.months();
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType1));
      assertEquals("Months", periodType5.getName());
      assertEquals(1, periodType5.size());
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType1);
      assertNotNull(periodType5);
      
      DurationFieldType durationFieldType0 = periodType4.getFieldType(2);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType0));
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(7, periodType1.size());
      assertEquals("StandardNoHours", periodType1.getName());
      assertEquals("StandardNoHoursNoMinutes", periodType2.getName());
      assertEquals(6, periodType2.size());
      assertEquals(6, periodType4.size());
      assertEquals("StandardNoHoursNoMinutes", periodType4.getName());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType2, periodType0);
      assertSame(periodType2, periodType4);
      assertNotSame(periodType2, periodType1);
      assertSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType5);
      assertNotSame(periodType4, periodType1);
      assertSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType5);
      assertNotSame(periodType4, periodType0);
      assertSame(periodType4, periodType3);
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = periodType2.isSupported(durationFieldType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType0));
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(7, periodType1.size());
      assertEquals("StandardNoHours", periodType1.getName());
      assertEquals("StandardNoHoursNoMinutes", periodType2.getName());
      assertEquals(6, periodType2.size());
      assertEquals(6, periodType4.size());
      assertEquals("StandardNoHoursNoMinutes", periodType4.getName());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType2, periodType0);
      assertSame(periodType2, periodType4);
      assertNotSame(periodType2, periodType1);
      assertSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType5);
      assertNotSame(periodType4, periodType1);
      assertSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType5);
      assertNotSame(periodType4, periodType0);
      assertSame(periodType4, periodType3);
      assertTrue(boolean0);
      
      PeriodType periodType6 = PeriodType.years();
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType1));
      assertEquals("Years", periodType6.getName());
      assertEquals(1, periodType6.size());
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType1);
      assertNotNull(periodType6);
      
      String string0 = periodType1.toString();
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType5));
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(7, periodType1.size());
      assertEquals("StandardNoHours", periodType1.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType5);
      assertEquals("PeriodType[StandardNoHours]", string0);
      assertNotNull(string0);
      
      PeriodType periodType7 = PeriodType.dayTime();
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType1));
      assertEquals(5, periodType7.size());
      assertEquals("DayTime", periodType7.getName());
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType1);
      assertNotNull(periodType7);
      
      PeriodType.YEAR_INDEX = 1111;
      int int0 = periodType5.size();
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType7));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType6));
      assertFalse(periodType5.equals((Object)periodType1));
      assertEquals("Months", periodType5.getName());
      assertEquals(1, periodType5.size());
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType7);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType6);
      assertNotSame(periodType5, periodType1);
      assertEquals(1, int0);
      
      int int1 = periodType5.indexOf(durationFieldType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType6));
      assertFalse(periodType2.equals((Object)periodType7));
      assertFalse(periodType2.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType7));
      assertFalse(periodType4.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType6));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType7));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType6));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(int1 == int0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(7, periodType1.size());
      assertEquals("StandardNoHours", periodType1.getName());
      assertEquals("StandardNoHoursNoMinutes", periodType2.getName());
      assertEquals(6, periodType2.size());
      assertEquals(6, periodType4.size());
      assertEquals("StandardNoHoursNoMinutes", periodType4.getName());
      assertEquals("Months", periodType5.getName());
      assertEquals(1, periodType5.size());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType7);
      assertSame(periodType2, periodType4);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType6);
      assertSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType7);
      assertNotSame(periodType2, periodType5);
      assertNotSame(periodType4, periodType1);
      assertSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType7);
      assertNotSame(periodType4, periodType5);
      assertNotSame(periodType4, periodType0);
      assertSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType6);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType7);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType6);
      assertNotSame(periodType5, periodType1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearWeekDay();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("YearWeekDay", periodType1.getName());
      assertEquals(3, periodType1.size());
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      String string0 = periodType0.getName();
      assertFalse(periodType0.equals((Object)periodType1));
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotSame(periodType0, periodType1);
      assertEquals("Standard", string0);
      assertNotNull(string0);
      
      String string1 = periodType0.getName();
      assertFalse(periodType0.equals((Object)periodType1));
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotSame(periodType0, periodType1);
      assertEquals("Standard", string1);
      assertNotNull(string1);
      
      PeriodType periodType2 = PeriodType.yearMonthDayTime();
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals("YearMonthDayTime", periodType2.getName());
      assertEquals(7, periodType2.size());
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      
      String string2 = periodType0.toString();
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertEquals("PeriodType[Standard]", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals("StandardNoMonths", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType.DAY_INDEX = 0;
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      DurationFieldType durationFieldType0 = periodType1.getFieldType(4);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals("StandardNoMonths", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType2 = PeriodType.standard();
      assertFalse(periodType2.equals((Object)periodType1));
      assertEquals(8, periodType2.size());
      assertEquals("Standard", periodType2.getName());
      assertSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
      
      // Undeclared exception!
      try { 
        periodType2.getFieldType(1566);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1566
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = periodType1.withYearsRemoved();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Months", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertSame(periodType0, periodType2);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertSame(periodType1, periodType2);
      assertSame(periodType2, periodType0);
      assertSame(periodType2, periodType1);
      assertNotNull(periodType2);
      
      PeriodType periodType3 = periodType0.withYearsRemoved();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType3.getName());
      assertEquals(1, periodType3.size());
      assertSame(periodType0, periodType2);
      assertSame(periodType0, periodType3);
      assertSame(periodType0, periodType1);
      assertSame(periodType3, periodType1);
      assertSame(periodType3, periodType2);
      assertSame(periodType3, periodType0);
      assertNotNull(periodType3);
      
      PeriodType periodType4 = periodType2.withDaysRemoved();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Months", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertEquals(1, periodType4.size());
      assertEquals("Months", periodType4.getName());
      assertSame(periodType0, periodType4);
      assertSame(periodType0, periodType2);
      assertSame(periodType0, periodType3);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertSame(periodType1, periodType4);
      assertSame(periodType1, periodType2);
      assertSame(periodType1, periodType3);
      assertSame(periodType2, periodType3);
      assertSame(periodType2, periodType0);
      assertSame(periodType2, periodType1);
      assertSame(periodType2, periodType4);
      assertSame(periodType4, periodType1);
      assertSame(periodType4, periodType2);
      assertSame(periodType4, periodType3);
      assertSame(periodType4, periodType0);
      assertNotNull(periodType4);
      
      String string0 = periodType4.getName();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Months", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertEquals(1, periodType4.size());
      assertEquals("Months", periodType4.getName());
      assertSame(periodType0, periodType4);
      assertSame(periodType0, periodType2);
      assertSame(periodType0, periodType3);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertSame(periodType1, periodType4);
      assertSame(periodType1, periodType2);
      assertSame(periodType1, periodType3);
      assertSame(periodType2, periodType3);
      assertSame(periodType2, periodType0);
      assertSame(periodType2, periodType1);
      assertSame(periodType2, periodType4);
      assertSame(periodType4, periodType1);
      assertSame(periodType4, periodType2);
      assertSame(periodType4, periodType3);
      assertSame(periodType4, periodType0);
      assertEquals("Months", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.months();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals(1, periodType1.size());
      assertEquals("Months", periodType1.getName());
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = PeriodType.years();
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertEquals(1, periodType2.size());
      assertEquals("Years", periodType2.getName());
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearWeekDay();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("YearWeekDay", periodType1.getName());
      assertEquals(3, periodType1.size());
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = periodType0.withWeeksRemoved();
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, periodType2.size());
      assertEquals("WeeksNoWeeks", periodType2.getName());
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
      
      int int0 = (-4959);
      PeriodType.SECOND_INDEX = (-4959);
      PeriodType periodType3 = PeriodType.yearDayTime();
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertEquals(6, periodType3.size());
      assertEquals("YearDayTime", periodType3.getName());
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertNotNull(periodType3);
      
      PeriodType periodType4 = PeriodType.minutes();
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType1));
      assertEquals("Minutes", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType1);
      assertNotNull(periodType4);
      
      PeriodType periodType5 = periodType4.withWeeksRemoved();
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType3));
      assertEquals("Minutes", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertEquals("Minutes", periodType5.getName());
      assertEquals(1, periodType5.size());
      assertNotSame(periodType4, periodType3);
      assertSame(periodType4, periodType5);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType5, periodType0);
      assertSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType3);
      assertNotNull(periodType5);
      
      PeriodType periodType6 = PeriodType.seconds();
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType2));
      assertEquals(1, periodType6.size());
      assertEquals("Seconds", periodType6.getName());
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType2);
      assertNotNull(periodType6);
      
      PeriodType periodType7 = PeriodType.time();
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType0));
      assertEquals("Time", periodType7.getName());
      assertEquals(4, periodType7.size());
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType0);
      assertNotNull(periodType7);
      
      PeriodType periodType8 = PeriodType.minutes();
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType2));
      assertEquals(1, periodType8.size());
      assertEquals("Minutes", periodType8.getName());
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType6);
      assertSame(periodType8, periodType4);
      assertSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType2);
      assertNotNull(periodType8);
      
      PeriodType periodType9 = periodType8.withSecondsRemoved();
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType0));
      assertEquals(1, periodType8.size());
      assertEquals("Minutes", periodType8.getName());
      assertEquals("Minutes", periodType9.getName());
      assertEquals(1, periodType9.size());
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType6);
      assertSame(periodType8, periodType4);
      assertSame(periodType8, periodType5);
      assertSame(periodType8, periodType9);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType6);
      assertSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType7);
      assertSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType1);
      assertSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType0);
      assertNotNull(periodType9);
      
      PeriodType periodType10 = PeriodType.seconds();
      assertFalse(periodType10.equals((Object)periodType8));
      assertFalse(periodType10.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType3));
      assertFalse(periodType10.equals((Object)periodType5));
      assertFalse(periodType10.equals((Object)periodType9));
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType4));
      assertEquals("Seconds", periodType10.getName());
      assertEquals(1, periodType10.size());
      assertSame(periodType10, periodType6);
      assertNotSame(periodType10, periodType8);
      assertNotSame(periodType10, periodType1);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType3);
      assertNotSame(periodType10, periodType5);
      assertNotSame(periodType10, periodType9);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType0);
      assertNotSame(periodType10, periodType4);
      assertNotNull(periodType10);
      
      PeriodType periodType11 = PeriodType.hours();
      assertFalse(periodType11.equals((Object)periodType0));
      assertFalse(periodType11.equals((Object)periodType8));
      assertFalse(periodType11.equals((Object)periodType4));
      assertFalse(periodType11.equals((Object)periodType10));
      assertFalse(periodType11.equals((Object)periodType2));
      assertFalse(periodType11.equals((Object)periodType6));
      assertFalse(periodType11.equals((Object)periodType1));
      assertFalse(periodType11.equals((Object)periodType3));
      assertFalse(periodType11.equals((Object)periodType7));
      assertFalse(periodType11.equals((Object)periodType5));
      assertFalse(periodType11.equals((Object)periodType9));
      assertEquals("Hours", periodType11.getName());
      assertEquals(1, periodType11.size());
      assertNotSame(periodType11, periodType0);
      assertNotSame(periodType11, periodType8);
      assertNotSame(periodType11, periodType4);
      assertNotSame(periodType11, periodType10);
      assertNotSame(periodType11, periodType2);
      assertNotSame(periodType11, periodType6);
      assertNotSame(periodType11, periodType1);
      assertNotSame(periodType11, periodType3);
      assertNotSame(periodType11, periodType7);
      assertNotSame(periodType11, periodType5);
      assertNotSame(periodType11, periodType9);
      assertNotNull(periodType11);
      
      PeriodType periodType12 = PeriodType.time();
      assertFalse(periodType12.equals((Object)periodType2));
      assertFalse(periodType12.equals((Object)periodType3));
      assertFalse(periodType12.equals((Object)periodType8));
      assertFalse(periodType12.equals((Object)periodType11));
      assertFalse(periodType12.equals((Object)periodType4));
      assertFalse(periodType12.equals((Object)periodType10));
      assertFalse(periodType12.equals((Object)periodType5));
      assertFalse(periodType12.equals((Object)periodType9));
      assertFalse(periodType12.equals((Object)periodType0));
      assertFalse(periodType12.equals((Object)periodType6));
      assertFalse(periodType12.equals((Object)periodType1));
      assertEquals(4, periodType12.size());
      assertEquals("Time", periodType12.getName());
      assertNotSame(periodType12, periodType2);
      assertSame(periodType12, periodType7);
      assertNotSame(periodType12, periodType3);
      assertNotSame(periodType12, periodType8);
      assertNotSame(periodType12, periodType11);
      assertNotSame(periodType12, periodType4);
      assertNotSame(periodType12, periodType10);
      assertNotSame(periodType12, periodType5);
      assertNotSame(periodType12, periodType9);
      assertNotSame(periodType12, periodType0);
      assertNotSame(periodType12, periodType6);
      assertNotSame(periodType12, periodType1);
      assertNotNull(periodType12);
      
      PeriodType periodType13 = PeriodType.standard();
      assertFalse(periodType13.equals((Object)periodType7));
      assertFalse(periodType13.equals((Object)periodType11));
      assertFalse(periodType13.equals((Object)periodType4));
      assertFalse(periodType13.equals((Object)periodType1));
      assertFalse(periodType13.equals((Object)periodType6));
      assertFalse(periodType13.equals((Object)periodType10));
      assertFalse(periodType13.equals((Object)periodType8));
      assertFalse(periodType13.equals((Object)periodType0));
      assertFalse(periodType13.equals((Object)periodType5));
      assertFalse(periodType13.equals((Object)periodType9));
      assertFalse(periodType13.equals((Object)periodType2));
      assertFalse(periodType13.equals((Object)periodType12));
      assertFalse(periodType13.equals((Object)periodType3));
      assertEquals(8, periodType13.size());
      assertEquals("Standard", periodType13.getName());
      assertNotSame(periodType13, periodType7);
      assertNotSame(periodType13, periodType11);
      assertNotSame(periodType13, periodType4);
      assertNotSame(periodType13, periodType1);
      assertNotSame(periodType13, periodType6);
      assertNotSame(periodType13, periodType10);
      assertNotSame(periodType13, periodType8);
      assertNotSame(periodType13, periodType0);
      assertNotSame(periodType13, periodType5);
      assertNotSame(periodType13, periodType9);
      assertNotSame(periodType13, periodType2);
      assertNotSame(periodType13, periodType12);
      assertNotSame(periodType13, periodType3);
      assertNotNull(periodType13);
      
      String string0 = periodType0.toString();
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType8));
      assertFalse(periodType0.equals((Object)periodType9));
      assertFalse(periodType0.equals((Object)periodType13));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType11));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType12));
      assertFalse(periodType0.equals((Object)periodType10));
      assertFalse(periodType0.equals((Object)periodType1));
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType8);
      assertNotSame(periodType0, periodType9);
      assertNotSame(periodType0, periodType13);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType11);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType12);
      assertNotSame(periodType0, periodType10);
      assertNotSame(periodType0, periodType1);
      assertEquals("PeriodType[Weeks]", string0);
      assertNotNull(string0);
      
      boolean boolean0 = periodType1.equals("PeriodType[Weeks]");
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType10));
      assertFalse(periodType1.equals((Object)periodType13));
      assertFalse(periodType1.equals((Object)periodType8));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType12));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType11));
      assertFalse(periodType1.equals((Object)periodType9));
      assertEquals("YearWeekDay", periodType1.getName());
      assertEquals(3, periodType1.size());
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType10);
      assertNotSame(periodType1, periodType13);
      assertNotSame(periodType1, periodType8);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType12);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType11);
      assertNotSame(periodType1, periodType9);
      assertFalse(boolean0);
      
      PeriodType periodType14 = periodType2.withSecondsRemoved();
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType8));
      assertFalse(periodType0.equals((Object)periodType9));
      assertFalse(periodType0.equals((Object)periodType13));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType11));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType12));
      assertFalse(periodType0.equals((Object)periodType10));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType14.equals((Object)periodType10));
      assertFalse(periodType14.equals((Object)periodType13));
      assertFalse(periodType14.equals((Object)periodType6));
      assertFalse(periodType14.equals((Object)periodType5));
      assertFalse(periodType14.equals((Object)periodType9));
      assertFalse(periodType14.equals((Object)periodType7));
      assertFalse(periodType14.equals((Object)periodType1));
      assertFalse(periodType14.equals((Object)periodType3));
      assertFalse(periodType14.equals((Object)periodType12));
      assertFalse(periodType14.equals((Object)periodType0));
      assertFalse(periodType14.equals((Object)periodType11));
      assertFalse(periodType14.equals((Object)periodType4));
      assertFalse(periodType14.equals((Object)periodType8));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType8));
      assertFalse(periodType2.equals((Object)periodType12));
      assertFalse(periodType2.equals((Object)periodType5));
      assertFalse(periodType2.equals((Object)periodType9));
      assertFalse(periodType2.equals((Object)periodType3));
      assertFalse(periodType2.equals((Object)periodType13));
      assertFalse(periodType2.equals((Object)periodType11));
      assertFalse(periodType2.equals((Object)periodType7));
      assertFalse(periodType2.equals((Object)periodType6));
      assertFalse(periodType2.equals((Object)periodType10));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType4));
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("WeeksNoWeeks", periodType14.getName());
      assertEquals(0, periodType14.size());
      assertEquals(0, periodType2.size());
      assertEquals("WeeksNoWeeks", periodType2.getName());
      assertNotSame(periodType0, periodType14);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType8);
      assertNotSame(periodType0, periodType9);
      assertNotSame(periodType0, periodType13);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType11);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType12);
      assertNotSame(periodType0, periodType10);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType14, periodType10);
      assertNotSame(periodType14, periodType13);
      assertNotSame(periodType14, periodType6);
      assertNotSame(periodType14, periodType5);
      assertNotSame(periodType14, periodType9);
      assertNotSame(periodType14, periodType7);
      assertSame(periodType14, periodType2);
      assertNotSame(periodType14, periodType1);
      assertNotSame(periodType14, periodType3);
      assertNotSame(periodType14, periodType12);
      assertNotSame(periodType14, periodType0);
      assertNotSame(periodType14, periodType11);
      assertNotSame(periodType14, periodType4);
      assertNotSame(periodType14, periodType8);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType8);
      assertNotSame(periodType2, periodType12);
      assertNotSame(periodType2, periodType5);
      assertNotSame(periodType2, periodType9);
      assertNotSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType13);
      assertSame(periodType2, periodType14);
      assertNotSame(periodType2, periodType11);
      assertNotSame(periodType2, periodType7);
      assertNotSame(periodType2, periodType6);
      assertNotSame(periodType2, periodType10);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType4);
      assertNotNull(periodType14);
      
      PeriodType periodType15 = PeriodType.time();
      assertFalse(periodType15.equals((Object)periodType2));
      assertFalse(periodType15.equals((Object)periodType10));
      assertFalse(periodType15.equals((Object)periodType6));
      assertFalse(periodType15.equals((Object)periodType5));
      assertFalse(periodType15.equals((Object)periodType13));
      assertFalse(periodType15.equals((Object)periodType14));
      assertFalse(periodType15.equals((Object)periodType3));
      assertFalse(periodType15.equals((Object)periodType1));
      assertFalse(periodType15.equals((Object)periodType0));
      assertFalse(periodType15.equals((Object)periodType11));
      assertFalse(periodType15.equals((Object)periodType4));
      assertFalse(periodType15.equals((Object)periodType9));
      assertFalse(periodType15.equals((Object)periodType8));
      assertEquals("Time", periodType15.getName());
      assertEquals(4, periodType15.size());
      assertNotSame(periodType15, periodType2);
      assertSame(periodType15, periodType7);
      assertNotSame(periodType15, periodType10);
      assertNotSame(periodType15, periodType6);
      assertNotSame(periodType15, periodType5);
      assertNotSame(periodType15, periodType13);
      assertNotSame(periodType15, periodType14);
      assertNotSame(periodType15, periodType3);
      assertSame(periodType15, periodType12);
      assertNotSame(periodType15, periodType1);
      assertNotSame(periodType15, periodType0);
      assertNotSame(periodType15, periodType11);
      assertNotSame(periodType15, periodType4);
      assertNotSame(periodType15, periodType9);
      assertNotSame(periodType15, periodType8);
      assertNotNull(periodType15);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 477;
      // Undeclared exception!
      try { 
        periodType4.setIndexedField((ReadablePeriod) null, (-4959), intArray0, (-4959));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4959
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.dayTime();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals(5, periodType1.size());
      assertEquals("DayTime", periodType1.getName());
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      // Undeclared exception!
      try { 
        periodType0.setIndexedField((ReadablePeriod) null, 5, (int[]) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      periodType0.hashCode();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertEquals(0, periodType1.size());
      assertEquals("MillisNoMillis", periodType1.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      boolean boolean0 = periodType1.equals(periodType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertEquals(0, periodType1.size());
      assertEquals("MillisNoMillis", periodType1.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearDay();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("YearDay", periodType1.getName());
      assertEquals(2, periodType1.size());
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = PeriodType.dayTime();
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals(5, periodType2.size());
      assertEquals("DayTime", periodType2.getName());
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      
      PeriodType periodType3 = PeriodType.yearDay();
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      assertEquals("YearDay", periodType3.getName());
      assertEquals(2, periodType3.size());
      assertSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertNotNull(periodType3);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.standard();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("Standard", periodType1.getName());
      assertEquals(8, periodType1.size());
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = periodType0.withWeeksRemoved();
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals("YearWeekDayTimeNoWeeks", periodType2.getName());
      assertEquals(6, periodType2.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      
      PeriodType.WEEK_INDEX = 0;
      DurationFieldType durationFieldType0 = periodType2.getFieldType(0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals("YearWeekDayTimeNoWeeks", periodType2.getName());
      assertEquals(6, periodType2.size());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals("YearWeekDayTimeNoWeeks", periodType2.getName());
      assertEquals(6, periodType2.size());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertTrue(boolean0);
      
      PeriodType periodType3 = periodType2.withMonthsRemoved();
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals("YearWeekDayTimeNoWeeks", periodType2.getName());
      assertEquals(6, periodType2.size());
      assertEquals(6, periodType3.size());
      assertEquals("YearWeekDayTimeNoWeeks", periodType3.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertSame(periodType2, periodType3);
      assertSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertNotNull(periodType3);
      
      PeriodType periodType4 = periodType3.withDaysRemoved();
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType0));
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals("YearWeekDayTimeNoWeeks", periodType2.getName());
      assertEquals(6, periodType2.size());
      assertEquals(6, periodType3.size());
      assertEquals("YearWeekDayTimeNoWeeks", periodType3.getName());
      assertEquals("YearWeekDayTimeNoWeeksNoDays", periodType4.getName());
      assertEquals(5, periodType4.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType4);
      assertSame(periodType2, periodType3);
      assertSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType4);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType0);
      assertNotNull(periodType4);
      
      PeriodType periodType5 = PeriodType.months();
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType3));
      assertEquals(1, periodType5.size());
      assertEquals("Months", periodType5.getName());
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType3);
      assertNotNull(periodType5);
      
      PeriodType periodType6 = PeriodType.months();
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType2));
      assertEquals("Months", periodType6.getName());
      assertEquals(1, periodType6.size());
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType2);
      assertSame(periodType6, periodType5);
      assertNotNull(periodType6);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withWeeksRemoved();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = periodType1.withYearsRemoved();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals(1, periodType2.size());
      assertEquals("Seconds", periodType2.getName());
      assertSame(periodType0, periodType1);
      assertSame(periodType0, periodType2);
      assertSame(periodType1, periodType2);
      assertSame(periodType1, periodType0);
      assertSame(periodType2, periodType1);
      assertSame(periodType2, periodType0);
      assertNotNull(periodType2);
      
      int int0 = 4;
      // Undeclared exception!
      try { 
        periodType2.getFieldType(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, periodType1.size());
      assertEquals("Hours", periodType1.getName());
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = periodType1.withYearsRemoved();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, periodType1.size());
      assertEquals("Hours", periodType1.getName());
      assertEquals(1, periodType2.size());
      assertEquals("Hours", periodType2.getName());
      assertSame(periodType0, periodType1);
      assertSame(periodType0, periodType2);
      assertSame(periodType1, periodType0);
      assertSame(periodType1, periodType2);
      assertSame(periodType2, periodType1);
      assertSame(periodType2, periodType0);
      assertNotNull(periodType2);
      
      boolean boolean0 = periodType0.equals("{t]h5t5cD0:nY$[_%_");
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertSame(periodType0, periodType1);
      assertSame(periodType0, periodType2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      String string0 = periodType1.toString();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertEquals("PeriodType[Seconds]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "n";
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertNotNull(periodType0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      boolean boolean0 = periodType0.addIndexedField((ReadablePeriod) null, 0, intArray0, 0);
      assertEquals(4, intArray0.length);
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      PeriodType periodType1 = PeriodType.days();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("Days", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = PeriodType.yearWeekDayTime();
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals(7, periodType2.size());
      assertEquals("YearWeekDayTime", periodType2.getName());
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      
      PeriodType periodType3 = PeriodType.months();
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertEquals(1, periodType3.size());
      assertEquals("Months", periodType3.getName());
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotNull(periodType3);
      
      PeriodType periodType4 = PeriodType.yearWeekDayTime();
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType3));
      assertEquals("YearWeekDayTime", periodType4.getName());
      assertEquals(7, periodType4.size());
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType3);
      assertSame(periodType4, periodType2);
      assertNotNull(periodType4);
      
      PeriodType periodType5 = PeriodType.yearDayTime();
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType0));
      assertEquals("YearDayTime", periodType5.getName());
      assertEquals(6, periodType5.size());
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType0);
      assertNotNull(periodType5);
      
      PeriodType periodType6 = PeriodType.yearDay();
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType3));
      assertEquals(2, periodType6.size());
      assertEquals("YearDay", periodType6.getName());
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType3);
      assertNotNull(periodType6);
      
      PeriodType.MINUTE_INDEX = 0;
      PeriodType periodType7 = periodType0.withWeeksRemoved();
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType1));
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType7.getName());
      assertEquals(3, periodType7.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType5);
      assertSame(periodType0, periodType7);
      assertNotSame(periodType7, periodType5);
      assertSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType1);
      assertNotNull(periodType7);
      
      PeriodType periodType8 = periodType1.withSecondsRemoved();
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType6));
      assertEquals("Days", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals(1, periodType8.size());
      assertEquals("Days", periodType8.getName());
      assertSame(periodType1, periodType8);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType3);
      assertSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType6);
      assertNotNull(periodType8);
      
      PeriodType periodType9 = periodType8.withMonthsRemoved();
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType6));
      assertEquals(1, periodType9.size());
      assertEquals("Days", periodType9.getName());
      assertEquals("Days", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals(1, periodType8.size());
      assertEquals("Days", periodType8.getName());
      assertSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType6);
      assertSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType4);
      assertSame(periodType1, periodType8);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType6);
      assertSame(periodType1, periodType9);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType3);
      assertSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType2);
      assertSame(periodType8, periodType9);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType6);
      assertNotNull(periodType9);
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = periodType5.getFieldType(0);
      assertFalse(periodType5.equals((Object)periodType6));
      assertFalse(periodType5.equals((Object)periodType7));
      assertFalse(periodType5.equals((Object)periodType9));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType8));
      assertFalse(periodType5.equals((Object)periodType0));
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("YearDayTime", periodType5.getName());
      assertEquals(6, periodType5.size());
      assertNotSame(periodType5, periodType6);
      assertNotSame(periodType5, periodType7);
      assertNotSame(periodType5, periodType9);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType8);
      assertNotSame(periodType5, periodType0);
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType10 = PeriodType.forFields(durationFieldTypeArray0);
      assertFalse(periodType10.equals((Object)periodType5));
      assertFalse(periodType10.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType6));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType3));
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType9));
      assertFalse(periodType10.equals((Object)periodType8));
      assertEquals(1, durationFieldTypeArray0.length);
      assertEquals("Years", periodType10.getName());
      assertEquals(1, periodType10.size());
      assertNotSame(periodType10, periodType5);
      assertNotSame(periodType10, periodType0);
      assertNotSame(periodType10, periodType6);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType1);
      assertNotSame(periodType10, periodType4);
      assertNotSame(periodType10, periodType3);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType9);
      assertNotSame(periodType10, periodType8);
      assertNotNull(periodType10);
      
      PeriodType periodType11 = PeriodType.months();
      assertFalse(periodType11.equals((Object)periodType8));
      assertFalse(periodType11.equals((Object)periodType5));
      assertFalse(periodType11.equals((Object)periodType0));
      assertFalse(periodType11.equals((Object)periodType2));
      assertFalse(periodType11.equals((Object)periodType1));
      assertFalse(periodType11.equals((Object)periodType10));
      assertFalse(periodType11.equals((Object)periodType4));
      assertFalse(periodType11.equals((Object)periodType6));
      assertFalse(periodType11.equals((Object)periodType7));
      assertFalse(periodType11.equals((Object)periodType9));
      assertEquals("Months", periodType11.getName());
      assertEquals(1, periodType11.size());
      assertNotSame(periodType11, periodType8);
      assertNotSame(periodType11, periodType5);
      assertNotSame(periodType11, periodType0);
      assertNotSame(periodType11, periodType2);
      assertNotSame(periodType11, periodType1);
      assertNotSame(periodType11, periodType10);
      assertNotSame(periodType11, periodType4);
      assertNotSame(periodType11, periodType6);
      assertNotSame(periodType11, periodType7);
      assertNotSame(periodType11, periodType9);
      assertSame(periodType11, periodType3);
      assertNotNull(periodType11);
      
      periodType5.hashCode();
      assertFalse(periodType5.equals((Object)periodType11));
      assertFalse(periodType5.equals((Object)periodType6));
      assertFalse(periodType5.equals((Object)periodType7));
      assertFalse(periodType5.equals((Object)periodType9));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType10));
      assertFalse(periodType5.equals((Object)periodType8));
      assertFalse(periodType5.equals((Object)periodType0));
      assertEquals("YearDayTime", periodType5.getName());
      assertEquals(6, periodType5.size());
      assertNotSame(periodType5, periodType11);
      assertNotSame(periodType5, periodType6);
      assertNotSame(periodType5, periodType7);
      assertNotSame(periodType5, periodType9);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType10);
      assertNotSame(periodType5, periodType8);
      assertNotSame(periodType5, periodType0);
      
      PeriodType periodType12 = PeriodType.years();
      assertFalse(periodType12.equals((Object)periodType7));
      assertFalse(periodType12.equals((Object)periodType6));
      assertFalse(periodType12.equals((Object)periodType5));
      assertFalse(periodType12.equals((Object)periodType9));
      assertFalse(periodType12.equals((Object)periodType2));
      assertFalse(periodType12.equals((Object)periodType3));
      assertFalse(periodType12.equals((Object)periodType0));
      assertFalse(periodType12.equals((Object)periodType4));
      assertFalse(periodType12.equals((Object)periodType8));
      assertFalse(periodType12.equals((Object)periodType11));
      assertFalse(periodType12.equals((Object)periodType1));
      assertEquals(1, periodType12.size());
      assertEquals("Years", periodType12.getName());
      assertSame(periodType12, periodType10);
      assertNotSame(periodType12, periodType7);
      assertNotSame(periodType12, periodType6);
      assertNotSame(periodType12, periodType5);
      assertNotSame(periodType12, periodType9);
      assertNotSame(periodType12, periodType2);
      assertNotSame(periodType12, periodType3);
      assertNotSame(periodType12, periodType0);
      assertNotSame(periodType12, periodType8);
      assertNotSame(periodType12, periodType4);
      assertNotSame(periodType12, periodType11);
      assertNotSame(periodType12, periodType1);
      assertNotNull(periodType12);
      
      PeriodType periodType13 = PeriodType.standard();
      assertFalse(periodType13.equals((Object)periodType12));
      assertFalse(periodType13.equals((Object)periodType11));
      assertFalse(periodType13.equals((Object)periodType2));
      assertFalse(periodType13.equals((Object)periodType0));
      assertFalse(periodType13.equals((Object)periodType5));
      assertFalse(periodType13.equals((Object)periodType3));
      assertFalse(periodType13.equals((Object)periodType8));
      assertFalse(periodType13.equals((Object)periodType10));
      assertFalse(periodType13.equals((Object)periodType1));
      assertFalse(periodType13.equals((Object)periodType9));
      assertFalse(periodType13.equals((Object)periodType6));
      assertFalse(periodType13.equals((Object)periodType4));
      assertFalse(periodType13.equals((Object)periodType7));
      assertEquals(8, periodType13.size());
      assertEquals("Standard", periodType13.getName());
      assertNotSame(periodType13, periodType12);
      assertNotSame(periodType13, periodType11);
      assertNotSame(periodType13, periodType2);
      assertNotSame(periodType13, periodType0);
      assertNotSame(periodType13, periodType5);
      assertNotSame(periodType13, periodType3);
      assertNotSame(periodType13, periodType8);
      assertNotSame(periodType13, periodType10);
      assertNotSame(periodType13, periodType1);
      assertNotSame(periodType13, periodType9);
      assertNotSame(periodType13, periodType6);
      assertNotSame(periodType13, periodType4);
      assertNotSame(periodType13, periodType7);
      assertNotNull(periodType13);
      
      PeriodType periodType14 = PeriodType.seconds();
      assertFalse(periodType14.equals((Object)periodType8));
      assertFalse(periodType14.equals((Object)periodType7));
      assertFalse(periodType14.equals((Object)periodType9));
      assertFalse(periodType14.equals((Object)periodType4));
      assertFalse(periodType14.equals((Object)periodType3));
      assertFalse(periodType14.equals((Object)periodType1));
      assertFalse(periodType14.equals((Object)periodType12));
      assertFalse(periodType14.equals((Object)periodType11));
      assertFalse(periodType14.equals((Object)periodType0));
      assertFalse(periodType14.equals((Object)periodType6));
      assertFalse(periodType14.equals((Object)periodType10));
      assertFalse(periodType14.equals((Object)periodType13));
      assertFalse(periodType14.equals((Object)periodType2));
      assertFalse(periodType14.equals((Object)periodType5));
      assertEquals(1, periodType14.size());
      assertEquals("Seconds", periodType14.getName());
      assertNotSame(periodType14, periodType8);
      assertNotSame(periodType14, periodType7);
      assertNotSame(periodType14, periodType9);
      assertNotSame(periodType14, periodType4);
      assertNotSame(periodType14, periodType3);
      assertNotSame(periodType14, periodType1);
      assertNotSame(periodType14, periodType12);
      assertNotSame(periodType14, periodType11);
      assertNotSame(periodType14, periodType0);
      assertNotSame(periodType14, periodType6);
      assertNotSame(periodType14, periodType10);
      assertNotSame(periodType14, periodType13);
      assertNotSame(periodType14, periodType2);
      assertNotSame(periodType14, periodType5);
      assertNotNull(periodType14);
      
      PeriodType periodType15 = periodType13.withSecondsRemoved();
      assertFalse(periodType13.equals((Object)periodType12));
      assertFalse(periodType13.equals((Object)periodType11));
      assertFalse(periodType13.equals((Object)periodType2));
      assertFalse(periodType13.equals((Object)periodType0));
      assertFalse(periodType13.equals((Object)periodType5));
      assertFalse(periodType13.equals((Object)periodType3));
      assertFalse(periodType13.equals((Object)periodType14));
      assertFalse(periodType13.equals((Object)periodType8));
      assertFalse(periodType13.equals((Object)periodType10));
      assertFalse(periodType13.equals((Object)periodType1));
      assertFalse(periodType13.equals((Object)periodType9));
      assertFalse(periodType13.equals((Object)periodType6));
      assertFalse(periodType13.equals((Object)periodType4));
      assertFalse(periodType13.equals((Object)periodType7));
      assertFalse(periodType15.equals((Object)periodType9));
      assertFalse(periodType15.equals((Object)periodType6));
      assertFalse(periodType15.equals((Object)periodType5));
      assertFalse(periodType15.equals((Object)periodType2));
      assertFalse(periodType15.equals((Object)periodType4));
      assertFalse(periodType15.equals((Object)periodType7));
      assertFalse(periodType15.equals((Object)periodType13));
      assertFalse(periodType15.equals((Object)periodType12));
      assertFalse(periodType15.equals((Object)periodType1));
      assertFalse(periodType15.equals((Object)periodType0));
      assertFalse(periodType15.equals((Object)periodType8));
      assertFalse(periodType15.equals((Object)periodType11));
      assertFalse(periodType15.equals((Object)periodType3));
      assertFalse(periodType15.equals((Object)periodType10));
      assertFalse(periodType15.equals((Object)periodType14));
      assertEquals(8, periodType13.size());
      assertEquals("Standard", periodType13.getName());
      assertEquals("StandardNoSeconds", periodType15.getName());
      assertEquals(7, periodType15.size());
      assertNotSame(periodType13, periodType12);
      assertNotSame(periodType13, periodType11);
      assertNotSame(periodType13, periodType2);
      assertNotSame(periodType13, periodType0);
      assertNotSame(periodType13, periodType5);
      assertNotSame(periodType13, periodType3);
      assertNotSame(periodType13, periodType14);
      assertNotSame(periodType13, periodType8);
      assertNotSame(periodType13, periodType10);
      assertNotSame(periodType13, periodType1);
      assertNotSame(periodType13, periodType9);
      assertNotSame(periodType13, periodType6);
      assertNotSame(periodType13, periodType15);
      assertNotSame(periodType13, periodType4);
      assertNotSame(periodType13, periodType7);
      assertNotSame(periodType15, periodType9);
      assertNotSame(periodType15, periodType6);
      assertNotSame(periodType15, periodType5);
      assertNotSame(periodType15, periodType2);
      assertNotSame(periodType15, periodType4);
      assertNotSame(periodType15, periodType7);
      assertNotSame(periodType15, periodType13);
      assertNotSame(periodType15, periodType12);
      assertNotSame(periodType15, periodType1);
      assertNotSame(periodType15, periodType0);
      assertNotSame(periodType15, periodType8);
      assertNotSame(periodType15, periodType11);
      assertNotSame(periodType15, periodType3);
      assertNotSame(periodType15, periodType10);
      assertNotSame(periodType15, periodType14);
      assertNotNull(periodType15);
      
      String string0 = periodType12.toString();
      assertFalse(periodType12.equals((Object)periodType13));
      assertFalse(periodType12.equals((Object)periodType2));
      assertFalse(periodType12.equals((Object)periodType4));
      assertFalse(periodType12.equals((Object)periodType15));
      assertFalse(periodType12.equals((Object)periodType7));
      assertFalse(periodType12.equals((Object)periodType6));
      assertFalse(periodType12.equals((Object)periodType5));
      assertFalse(periodType12.equals((Object)periodType9));
      assertFalse(periodType12.equals((Object)periodType3));
      assertFalse(periodType12.equals((Object)periodType14));
      assertFalse(periodType12.equals((Object)periodType0));
      assertFalse(periodType12.equals((Object)periodType8));
      assertFalse(periodType12.equals((Object)periodType11));
      assertFalse(periodType12.equals((Object)periodType1));
      assertEquals(1, periodType12.size());
      assertEquals("Years", periodType12.getName());
      assertSame(periodType12, periodType10);
      assertNotSame(periodType12, periodType13);
      assertNotSame(periodType12, periodType2);
      assertNotSame(periodType12, periodType4);
      assertNotSame(periodType12, periodType15);
      assertNotSame(periodType12, periodType7);
      assertNotSame(periodType12, periodType6);
      assertNotSame(periodType12, periodType5);
      assertNotSame(periodType12, periodType9);
      assertNotSame(periodType12, periodType3);
      assertNotSame(periodType12, periodType14);
      assertNotSame(periodType12, periodType0);
      assertNotSame(periodType12, periodType8);
      assertNotSame(periodType12, periodType11);
      assertNotSame(periodType12, periodType1);
      assertEquals("PeriodType[Years]", string0);
      assertNotNull(string0);
      
      PeriodType periodType16 = PeriodType.days();
      assertFalse(periodType16.equals((Object)periodType7));
      assertFalse(periodType16.equals((Object)periodType6));
      assertFalse(periodType16.equals((Object)periodType12));
      assertFalse(periodType16.equals((Object)periodType4));
      assertFalse(periodType16.equals((Object)periodType0));
      assertFalse(periodType16.equals((Object)periodType5));
      assertFalse(periodType16.equals((Object)periodType3));
      assertFalse(periodType16.equals((Object)periodType14));
      assertFalse(periodType16.equals((Object)periodType15));
      assertFalse(periodType16.equals((Object)periodType2));
      assertFalse(periodType16.equals((Object)periodType11));
      assertFalse(periodType16.equals((Object)periodType10));
      assertFalse(periodType16.equals((Object)periodType13));
      assertEquals("Days", periodType16.getName());
      assertEquals(1, periodType16.size());
      assertNotSame(periodType16, periodType7);
      assertNotSame(periodType16, periodType6);
      assertNotSame(periodType16, periodType12);
      assertNotSame(periodType16, periodType4);
      assertNotSame(periodType16, periodType0);
      assertNotSame(periodType16, periodType5);
      assertNotSame(periodType16, periodType3);
      assertNotSame(periodType16, periodType14);
      assertNotSame(periodType16, periodType15);
      assertSame(periodType16, periodType9);
      assertNotSame(periodType16, periodType2);
      assertNotSame(periodType16, periodType11);
      assertSame(periodType16, periodType8);
      assertNotSame(periodType16, periodType10);
      assertSame(periodType16, periodType1);
      assertNotSame(periodType16, periodType13);
      assertNotNull(periodType16);
      
      PeriodType periodType17 = periodType16.withDaysRemoved();
      assertFalse(periodType16.equals((Object)periodType7));
      assertFalse(periodType16.equals((Object)periodType6));
      assertFalse(periodType16.equals((Object)periodType12));
      assertFalse(periodType16.equals((Object)periodType4));
      assertFalse(periodType16.equals((Object)periodType0));
      assertFalse(periodType16.equals((Object)periodType5));
      assertFalse(periodType16.equals((Object)periodType3));
      assertFalse(periodType16.equals((Object)periodType14));
      assertFalse(periodType16.equals((Object)periodType15));
      assertFalse(periodType16.equals((Object)periodType2));
      assertFalse(periodType16.equals((Object)periodType11));
      assertFalse(periodType16.equals((Object)periodType10));
      assertFalse(periodType16.equals((Object)periodType13));
      assertFalse(periodType17.equals((Object)periodType10));
      assertFalse(periodType17.equals((Object)periodType13));
      assertFalse(periodType17.equals((Object)periodType2));
      assertFalse(periodType17.equals((Object)periodType5));
      assertFalse(periodType17.equals((Object)periodType15));
      assertFalse(periodType17.equals((Object)periodType7));
      assertFalse(periodType17.equals((Object)periodType9));
      assertFalse(periodType17.equals((Object)periodType8));
      assertFalse(periodType17.equals((Object)periodType4));
      assertFalse(periodType17.equals((Object)periodType16));
      assertFalse(periodType17.equals((Object)periodType3));
      assertFalse(periodType17.equals((Object)periodType14));
      assertFalse(periodType17.equals((Object)periodType1));
      assertFalse(periodType17.equals((Object)periodType12));
      assertFalse(periodType17.equals((Object)periodType11));
      assertFalse(periodType17.equals((Object)periodType0));
      assertFalse(periodType17.equals((Object)periodType6));
      assertEquals("Days", periodType16.getName());
      assertEquals(1, periodType16.size());
      assertEquals("DaysNoDays", periodType17.getName());
      assertEquals(0, periodType17.size());
      assertNotSame(periodType16, periodType7);
      assertNotSame(periodType16, periodType6);
      assertNotSame(periodType16, periodType12);
      assertNotSame(periodType16, periodType4);
      assertNotSame(periodType16, periodType0);
      assertNotSame(periodType16, periodType5);
      assertNotSame(periodType16, periodType3);
      assertNotSame(periodType16, periodType14);
      assertNotSame(periodType16, periodType15);
      assertSame(periodType16, periodType9);
      assertNotSame(periodType16, periodType2);
      assertNotSame(periodType16, periodType11);
      assertSame(periodType16, periodType8);
      assertNotSame(periodType16, periodType10);
      assertNotSame(periodType16, periodType17);
      assertSame(periodType16, periodType1);
      assertNotSame(periodType16, periodType13);
      assertNotSame(periodType17, periodType10);
      assertNotSame(periodType17, periodType13);
      assertNotSame(periodType17, periodType2);
      assertNotSame(periodType17, periodType5);
      assertNotSame(periodType17, periodType15);
      assertNotSame(periodType17, periodType7);
      assertNotSame(periodType17, periodType9);
      assertNotSame(periodType17, periodType8);
      assertNotSame(periodType17, periodType4);
      assertNotSame(periodType17, periodType16);
      assertNotSame(periodType17, periodType3);
      assertNotSame(periodType17, periodType14);
      assertNotSame(periodType17, periodType1);
      assertNotSame(periodType17, periodType12);
      assertNotSame(periodType17, periodType11);
      assertNotSame(periodType17, periodType0);
      assertNotSame(periodType17, periodType6);
      assertNotNull(periodType17);
      
      PeriodType periodType18 = PeriodType.millis();
      assertFalse(periodType18.equals((Object)periodType16));
      assertFalse(periodType18.equals((Object)periodType1));
      assertFalse(periodType18.equals((Object)periodType13));
      assertFalse(periodType18.equals((Object)periodType7));
      assertFalse(periodType18.equals((Object)periodType4));
      assertFalse(periodType18.equals((Object)periodType5));
      assertFalse(periodType18.equals((Object)periodType3));
      assertFalse(periodType18.equals((Object)periodType14));
      assertFalse(periodType18.equals((Object)periodType0));
      assertFalse(periodType18.equals((Object)periodType2));
      assertFalse(periodType18.equals((Object)periodType15));
      assertFalse(periodType18.equals((Object)periodType10));
      assertFalse(periodType18.equals((Object)periodType17));
      assertFalse(periodType18.equals((Object)periodType8));
      assertFalse(periodType18.equals((Object)periodType9));
      assertFalse(periodType18.equals((Object)periodType11));
      assertFalse(periodType18.equals((Object)periodType12));
      assertFalse(periodType18.equals((Object)periodType6));
      assertEquals("Millis", periodType18.getName());
      assertEquals(1, periodType18.size());
      assertNotSame(periodType18, periodType16);
      assertNotSame(periodType18, periodType1);
      assertNotSame(periodType18, periodType13);
      assertNotSame(periodType18, periodType7);
      assertNotSame(periodType18, periodType4);
      assertNotSame(periodType18, periodType5);
      assertNotSame(periodType18, periodType3);
      assertNotSame(periodType18, periodType14);
      assertNotSame(periodType18, periodType0);
      assertNotSame(periodType18, periodType2);
      assertNotSame(periodType18, periodType15);
      assertNotSame(periodType18, periodType10);
      assertNotSame(periodType18, periodType17);
      assertNotSame(periodType18, periodType8);
      assertNotSame(periodType18, periodType9);
      assertNotSame(periodType18, periodType11);
      assertNotSame(periodType18, periodType12);
      assertNotSame(periodType18, periodType6);
      assertNotNull(periodType18);
      
      PeriodType periodType19 = PeriodType.yearMonthDayTime();
      assertFalse(periodType19.equals((Object)periodType1));
      assertFalse(periodType19.equals((Object)periodType4));
      assertFalse(periodType19.equals((Object)periodType9));
      assertFalse(periodType19.equals((Object)periodType7));
      assertFalse(periodType19.equals((Object)periodType18));
      assertFalse(periodType19.equals((Object)periodType16));
      assertFalse(periodType19.equals((Object)periodType0));
      assertFalse(periodType19.equals((Object)periodType6));
      assertFalse(periodType19.equals((Object)periodType12));
      assertFalse(periodType19.equals((Object)periodType10));
      assertFalse(periodType19.equals((Object)periodType2));
      assertFalse(periodType19.equals((Object)periodType11));
      assertFalse(periodType19.equals((Object)periodType8));
      assertFalse(periodType19.equals((Object)periodType3));
      assertFalse(periodType19.equals((Object)periodType14));
      assertFalse(periodType19.equals((Object)periodType15));
      assertFalse(periodType19.equals((Object)periodType17));
      assertFalse(periodType19.equals((Object)periodType13));
      assertFalse(periodType19.equals((Object)periodType5));
      assertEquals(7, periodType19.size());
      assertEquals("YearMonthDayTime", periodType19.getName());
      assertNotSame(periodType19, periodType1);
      assertNotSame(periodType19, periodType4);
      assertNotSame(periodType19, periodType9);
      assertNotSame(periodType19, periodType7);
      assertNotSame(periodType19, periodType18);
      assertNotSame(periodType19, periodType16);
      assertNotSame(periodType19, periodType0);
      assertNotSame(periodType19, periodType6);
      assertNotSame(periodType19, periodType12);
      assertNotSame(periodType19, periodType10);
      assertNotSame(periodType19, periodType2);
      assertNotSame(periodType19, periodType11);
      assertNotSame(periodType19, periodType8);
      assertNotSame(periodType19, periodType3);
      assertNotSame(periodType19, periodType14);
      assertNotSame(periodType19, periodType15);
      assertNotSame(periodType19, periodType17);
      assertNotSame(periodType19, periodType13);
      assertNotSame(periodType19, periodType5);
      assertNotNull(periodType19);
      
      int int0 = periodType12.size();
      assertFalse(periodType12.equals((Object)periodType13));
      assertFalse(periodType12.equals((Object)periodType2));
      assertFalse(periodType12.equals((Object)periodType4));
      assertFalse(periodType12.equals((Object)periodType19));
      assertFalse(periodType12.equals((Object)periodType15));
      assertFalse(periodType12.equals((Object)periodType7));
      assertFalse(periodType12.equals((Object)periodType18));
      assertFalse(periodType12.equals((Object)periodType6));
      assertFalse(periodType12.equals((Object)periodType5));
      assertFalse(periodType12.equals((Object)periodType17));
      assertFalse(periodType12.equals((Object)periodType9));
      assertFalse(periodType12.equals((Object)periodType16));
      assertFalse(periodType12.equals((Object)periodType3));
      assertFalse(periodType12.equals((Object)periodType14));
      assertFalse(periodType12.equals((Object)periodType0));
      assertFalse(periodType12.equals((Object)periodType8));
      assertFalse(periodType12.equals((Object)periodType11));
      assertFalse(periodType12.equals((Object)periodType1));
      assertEquals(1, periodType12.size());
      assertEquals("Years", periodType12.getName());
      assertSame(periodType12, periodType10);
      assertNotSame(periodType12, periodType13);
      assertNotSame(periodType12, periodType2);
      assertNotSame(periodType12, periodType4);
      assertNotSame(periodType12, periodType19);
      assertNotSame(periodType12, periodType15);
      assertNotSame(periodType12, periodType7);
      assertNotSame(periodType12, periodType18);
      assertNotSame(periodType12, periodType6);
      assertNotSame(periodType12, periodType5);
      assertNotSame(periodType12, periodType17);
      assertNotSame(periodType12, periodType9);
      assertNotSame(periodType12, periodType16);
      assertNotSame(periodType12, periodType3);
      assertNotSame(periodType12, periodType14);
      assertNotSame(periodType12, periodType0);
      assertNotSame(periodType12, periodType8);
      assertNotSame(periodType12, periodType11);
      assertNotSame(periodType12, periodType1);
      assertEquals(1, int0);
      
      boolean boolean1 = periodType15.equals("T;!XL'zyK;_");
      assertTrue(boolean1 == boolean0);
      assertFalse(periodType13.equals((Object)periodType12));
      assertFalse(periodType13.equals((Object)periodType11));
      assertFalse(periodType13.equals((Object)periodType2));
      assertFalse(periodType13.equals((Object)periodType0));
      assertFalse(periodType13.equals((Object)periodType5));
      assertFalse(periodType13.equals((Object)periodType17));
      assertFalse(periodType13.equals((Object)periodType3));
      assertFalse(periodType13.equals((Object)periodType14));
      assertFalse(periodType13.equals((Object)periodType16));
      assertFalse(periodType13.equals((Object)periodType18));
      assertFalse(periodType13.equals((Object)periodType8));
      assertFalse(periodType13.equals((Object)periodType10));
      assertFalse(periodType13.equals((Object)periodType1));
      assertFalse(periodType13.equals((Object)periodType9));
      assertFalse(periodType13.equals((Object)periodType6));
      assertFalse(periodType13.equals((Object)periodType15));
      assertFalse(periodType13.equals((Object)periodType19));
      assertFalse(periodType13.equals((Object)periodType4));
      assertFalse(periodType13.equals((Object)periodType7));
      assertFalse(periodType15.equals((Object)periodType19));
      assertFalse(periodType15.equals((Object)periodType17));
      assertFalse(periodType15.equals((Object)periodType9));
      assertFalse(periodType15.equals((Object)periodType18));
      assertFalse(periodType15.equals((Object)periodType6));
      assertFalse(periodType15.equals((Object)periodType5));
      assertFalse(periodType15.equals((Object)periodType2));
      assertFalse(periodType15.equals((Object)periodType4));
      assertFalse(periodType15.equals((Object)periodType7));
      assertFalse(periodType15.equals((Object)periodType13));
      assertFalse(periodType15.equals((Object)periodType12));
      assertFalse(periodType15.equals((Object)periodType1));
      assertFalse(periodType15.equals((Object)periodType0));
      assertFalse(periodType15.equals((Object)periodType8));
      assertFalse(periodType15.equals((Object)periodType11));
      assertFalse(periodType15.equals((Object)periodType3));
      assertFalse(periodType15.equals((Object)periodType10));
      assertFalse(periodType15.equals((Object)periodType14));
      assertFalse(periodType15.equals((Object)periodType16));
      assertEquals(8, periodType13.size());
      assertEquals("Standard", periodType13.getName());
      assertEquals("StandardNoSeconds", periodType15.getName());
      assertEquals(7, periodType15.size());
      assertNotSame(periodType13, periodType12);
      assertNotSame(periodType13, periodType11);
      assertNotSame(periodType13, periodType2);
      assertNotSame(periodType13, periodType0);
      assertNotSame(periodType13, periodType5);
      assertNotSame(periodType13, periodType17);
      assertNotSame(periodType13, periodType3);
      assertNotSame(periodType13, periodType14);
      assertNotSame(periodType13, periodType16);
      assertNotSame(periodType13, periodType18);
      assertNotSame(periodType13, periodType8);
      assertNotSame(periodType13, periodType10);
      assertNotSame(periodType13, periodType1);
      assertNotSame(periodType13, periodType9);
      assertNotSame(periodType13, periodType6);
      assertNotSame(periodType13, periodType15);
      assertNotSame(periodType13, periodType19);
      assertNotSame(periodType13, periodType4);
      assertNotSame(periodType13, periodType7);
      assertNotSame(periodType15, periodType19);
      assertNotSame(periodType15, periodType17);
      assertNotSame(periodType15, periodType9);
      assertNotSame(periodType15, periodType18);
      assertNotSame(periodType15, periodType6);
      assertNotSame(periodType15, periodType5);
      assertNotSame(periodType15, periodType2);
      assertNotSame(periodType15, periodType4);
      assertNotSame(periodType15, periodType7);
      assertNotSame(periodType15, periodType13);
      assertNotSame(periodType15, periodType12);
      assertNotSame(periodType15, periodType1);
      assertNotSame(periodType15, periodType0);
      assertNotSame(periodType15, periodType8);
      assertNotSame(periodType15, periodType11);
      assertNotSame(periodType15, periodType3);
      assertNotSame(periodType15, periodType10);
      assertNotSame(periodType15, periodType14);
      assertNotSame(periodType15, periodType16);
      assertFalse(boolean1);
      
      PeriodType periodType20 = periodType6.withDaysRemoved();
      assertTrue(periodType20.equals((Object)periodType10));
      assertTrue(periodType20.equals((Object)periodType12));
      assertFalse(periodType20.equals((Object)periodType13));
      assertFalse(periodType20.equals((Object)periodType4));
      assertFalse(periodType20.equals((Object)periodType2));
      assertFalse(periodType20.equals((Object)periodType15));
      assertFalse(periodType20.equals((Object)periodType7));
      assertFalse(periodType20.equals((Object)periodType19));
      assertFalse(periodType20.equals((Object)periodType17));
      assertFalse(periodType20.equals((Object)periodType9));
      assertFalse(periodType20.equals((Object)periodType18));
      assertFalse(periodType20.equals((Object)periodType6));
      assertFalse(periodType20.equals((Object)periodType5));
      assertFalse(periodType20.equals((Object)periodType1));
      assertFalse(periodType20.equals((Object)periodType0));
      assertFalse(periodType20.equals((Object)periodType8));
      assertFalse(periodType20.equals((Object)periodType11));
      assertFalse(periodType20.equals((Object)periodType3));
      assertFalse(periodType20.equals((Object)periodType14));
      assertFalse(periodType20.equals((Object)periodType16));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType16));
      assertFalse(periodType6.equals((Object)periodType15));
      assertFalse(periodType6.equals((Object)periodType19));
      assertFalse(periodType6.equals((Object)periodType9));
      assertFalse(periodType6.equals((Object)periodType7));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType11));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType12));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType13));
      assertFalse(periodType6.equals((Object)periodType17));
      assertFalse(periodType6.equals((Object)periodType8));
      assertFalse(periodType6.equals((Object)periodType18));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType14));
      assertFalse(periodType6.equals((Object)periodType10));
      assertEquals(1, periodType20.size());
      assertEquals("YearDayNoDays", periodType20.getName());
      assertEquals(2, periodType6.size());
      assertEquals("YearDay", periodType6.getName());
      assertNotSame(periodType20, periodType13);
      assertNotSame(periodType20, periodType12);
      assertNotSame(periodType20, periodType4);
      assertNotSame(periodType20, periodType2);
      assertNotSame(periodType20, periodType15);
      assertNotSame(periodType20, periodType7);
      assertNotSame(periodType20, periodType19);
      assertNotSame(periodType20, periodType17);
      assertNotSame(periodType20, periodType9);
      assertNotSame(periodType20, periodType18);
      assertNotSame(periodType20, periodType6);
      assertNotSame(periodType20, periodType5);
      assertNotSame(periodType20, periodType1);
      assertNotSame(periodType20, periodType0);
      assertNotSame(periodType20, periodType8);
      assertNotSame(periodType20, periodType11);
      assertNotSame(periodType20, periodType3);
      assertNotSame(periodType20, periodType14);
      assertNotSame(periodType20, periodType10);
      assertNotSame(periodType20, periodType16);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType16);
      assertNotSame(periodType6, periodType15);
      assertNotSame(periodType6, periodType19);
      assertNotSame(periodType6, periodType9);
      assertNotSame(periodType6, periodType7);
      assertNotSame(periodType6, periodType20);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType11);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType12);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType13);
      assertNotSame(periodType6, periodType17);
      assertNotSame(periodType6, periodType8);
      assertNotSame(periodType6, periodType18);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType14);
      assertNotSame(periodType6, periodType10);
      assertNotNull(periodType20);
      
      PeriodType periodType21 = PeriodType.yearMonthDay();
      assertFalse(periodType21.equals((Object)periodType9));
      assertFalse(periodType21.equals((Object)periodType4));
      assertFalse(periodType21.equals((Object)periodType18));
      assertFalse(periodType21.equals((Object)periodType6));
      assertFalse(periodType21.equals((Object)periodType19));
      assertFalse(periodType21.equals((Object)periodType1));
      assertFalse(periodType21.equals((Object)periodType16));
      assertFalse(periodType21.equals((Object)periodType20));
      assertFalse(periodType21.equals((Object)periodType12));
      assertFalse(periodType21.equals((Object)periodType10));
      assertFalse(periodType21.equals((Object)periodType11));
      assertFalse(periodType21.equals((Object)periodType3));
      assertFalse(periodType21.equals((Object)periodType14));
      assertFalse(periodType21.equals((Object)periodType2));
      assertFalse(periodType21.equals((Object)periodType17));
      assertFalse(periodType21.equals((Object)periodType15));
      assertFalse(periodType21.equals((Object)periodType5));
      assertFalse(periodType21.equals((Object)periodType8));
      assertFalse(periodType21.equals((Object)periodType13));
      assertEquals(3, periodType21.size());
      assertEquals("YearMonthDay", periodType21.getName());
      assertNotSame(periodType21, periodType9);
      assertNotSame(periodType21, periodType4);
      assertNotSame(periodType21, periodType18);
      assertNotSame(periodType21, periodType6);
      assertNotSame(periodType21, periodType19);
      assertNotSame(periodType21, periodType1);
      assertNotSame(periodType21, periodType16);
      assertNotSame(periodType21, periodType20);
      assertSame(periodType21, periodType7);
      assertNotSame(periodType21, periodType12);
      assertSame(periodType21, periodType0);
      assertNotSame(periodType21, periodType10);
      assertNotSame(periodType21, periodType11);
      assertNotSame(periodType21, periodType3);
      assertNotSame(periodType21, periodType14);
      assertNotSame(periodType21, periodType2);
      assertNotSame(periodType21, periodType17);
      assertNotSame(periodType21, periodType15);
      assertNotSame(periodType21, periodType5);
      assertNotSame(periodType21, periodType8);
      assertNotSame(periodType21, periodType13);
      assertNotNull(periodType21);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTimeNoMillis", periodType1.getName());
      assertEquals(6, periodType1.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      // Undeclared exception!
      try { 
        PeriodType.forFields((DurationFieldType[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.millis();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      int[] intArray0 = new int[20];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = 1000;
      intArray0[5] = 4;
      intArray0[6] = 4;
      boolean boolean0 = periodType0.addIndexedField((ReadablePeriod) null, 7, intArray0, (-865));
      assertFalse(periodType0.equals((Object)periodType1));
      assertEquals(20, intArray0.length);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertNotSame(periodType0, periodType1);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        periodType0.getIndexedField((ReadablePeriod) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearMonthDay();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("YearMonthDay", periodType1.getName());
      assertEquals(3, periodType1.size());
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = periodType1.withDaysRemoved();
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertEquals("YearMonthDay", periodType1.getName());
      assertEquals(3, periodType1.size());
      assertEquals(2, periodType2.size());
      assertEquals("YearMonthDayNoDays", periodType2.getName());
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotNull(periodType2);
      
      PeriodType periodType3 = PeriodType.standard();
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertEquals(8, periodType3.size());
      assertEquals("Standard", periodType3.getName());
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotNull(periodType3);
      
      PeriodType periodType4 = periodType0.withDaysRemoved();
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType1));
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType4, periodType3);
      assertSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType1);
      assertNotNull(periodType4);
      
      PeriodType periodType5 = periodType4.withHoursRemoved();
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType3));
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertEquals("Months", periodType5.getName());
      assertEquals(1, periodType5.size());
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType4, periodType5);
      assertNotSame(periodType4, periodType3);
      assertSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType1);
      assertSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType3);
      assertSame(periodType5, periodType4);
      assertNotNull(periodType5);
      
      PeriodType periodType6 = periodType0.withMonthsRemoved();
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType2));
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("MonthsNoMonths", periodType6.getName());
      assertEquals(0, periodType6.size());
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType2);
      assertNotNull(periodType6);
      
      boolean boolean0 = periodType0.isSupported((DurationFieldType) null);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType6));
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType6);
      assertFalse(boolean0);
      
      PeriodType periodType7 = PeriodType.yearDay();
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType3));
      assertEquals("YearDay", periodType7.getName());
      assertEquals(2, periodType7.size());
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType3);
      assertNotNull(periodType7);
      
      String string0 = periodType5.toString();
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType6));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType7));
      assertFalse(periodType5.equals((Object)periodType6));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType7));
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertEquals("Months", periodType5.getName());
      assertEquals(1, periodType5.size());
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType7);
      assertSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType6);
      assertSame(periodType4, periodType5);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType6);
      assertSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType7);
      assertSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType6);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType7);
      assertSame(periodType5, periodType4);
      assertEquals("PeriodType[Months]", string0);
      assertNotNull(string0);
      
      PeriodType periodType8 = PeriodType.weeks();
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType7));
      assertEquals(1, periodType8.size());
      assertEquals("Weeks", periodType8.getName());
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType7);
      assertNotNull(periodType8);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals(5, periodType1.size());
      assertEquals("YearDayTimeNoMinutes", periodType1.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      
      PeriodType periodType2 = periodType1.withYearsRemoved();
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals(5, periodType1.size());
      assertEquals("YearDayTimeNoMinutes", periodType1.getName());
      assertEquals("YearDayTimeNoMinutesNoYears", periodType2.getName());
      assertEquals(4, periodType2.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      
      PeriodType periodType3 = PeriodType.yearMonthDayTime();
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertEquals(7, periodType3.size());
      assertEquals("YearMonthDayTime", periodType3.getName());
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotNull(periodType3);
      
      PeriodType periodType4 = periodType1.withDaysRemoved();
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType3));
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals(5, periodType1.size());
      assertEquals("YearDayTimeNoMinutes", periodType1.getName());
      assertEquals("YearDayTimeNoMinutesNoDays", periodType4.getName());
      assertEquals(4, periodType4.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType3);
      assertNotNull(periodType4);
      
      DurationFieldType durationFieldType0 = periodType2.getFieldType(3);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType2.equals((Object)periodType3));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType4));
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals(5, periodType1.size());
      assertEquals("YearDayTimeNoMinutes", periodType1.getName());
      assertEquals("YearDayTimeNoMinutesNoYears", periodType2.getName());
      assertEquals(4, periodType2.size());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType4);
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = periodType1.isSupported(durationFieldType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType2.equals((Object)periodType3));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType4));
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals(5, periodType1.size());
      assertEquals("YearDayTimeNoMinutes", periodType1.getName());
      assertEquals("YearDayTimeNoMinutesNoYears", periodType2.getName());
      assertEquals(4, periodType2.size());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType4);
      assertTrue(boolean0);
      
      PeriodType periodType5 = periodType0.withWeeksRemoved();
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType3));
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals(6, periodType5.size());
      assertEquals("YearDayTime", periodType5.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType5);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType3);
      assertSame(periodType5, periodType0);
      assertNotNull(periodType5);
      
      PeriodType periodType6 = PeriodType.weeks();
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType3));
      assertEquals("Weeks", periodType6.getName());
      assertEquals(1, periodType6.size());
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType3);
      assertNotNull(periodType6);
      
      int int0 = periodType6.size();
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType3));
      assertEquals("Weeks", periodType6.getName());
      assertEquals(1, periodType6.size());
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType3);
      assertEquals(1, int0);
      
      PeriodType periodType7 = PeriodType.minutes();
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType0));
      assertEquals("Minutes", periodType7.getName());
      assertEquals(1, periodType7.size());
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType0);
      assertNotNull(periodType7);
      
      PeriodType periodType8 = PeriodType.yearDay();
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType2));
      assertEquals(2, periodType8.size());
      assertEquals("YearDay", periodType8.getName());
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType2);
      assertNotNull(periodType8);
      
      PeriodType periodType9 = periodType8.withDaysRemoved();
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType4));
      assertEquals(2, periodType8.size());
      assertEquals("YearDay", periodType8.getName());
      assertEquals(1, periodType9.size());
      assertEquals("YearDayNoDays", periodType9.getName());
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType9);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType4);
      assertNotNull(periodType9);
      
      PeriodType periodType10 = PeriodType.seconds();
      assertFalse(periodType10.equals((Object)periodType6));
      assertFalse(periodType10.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType8));
      assertFalse(periodType10.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType9));
      assertFalse(periodType10.equals((Object)periodType5));
      assertFalse(periodType10.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType3));
      assertEquals("Seconds", periodType10.getName());
      assertEquals(1, periodType10.size());
      assertNotSame(periodType10, periodType6);
      assertNotSame(periodType10, periodType0);
      assertNotSame(periodType10, periodType8);
      assertNotSame(periodType10, periodType4);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType9);
      assertNotSame(periodType10, periodType5);
      assertNotSame(periodType10, periodType1);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType3);
      assertNotNull(periodType10);
      
      PeriodType periodType11 = periodType9.withHoursRemoved();
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType10));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType9));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType10));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType11.equals((Object)periodType1));
      assertFalse(periodType11.equals((Object)periodType10));
      assertFalse(periodType11.equals((Object)periodType2));
      assertFalse(periodType11.equals((Object)periodType6));
      assertFalse(periodType11.equals((Object)periodType0));
      assertFalse(periodType11.equals((Object)periodType8));
      assertFalse(periodType11.equals((Object)periodType3));
      assertFalse(periodType11.equals((Object)periodType7));
      assertFalse(periodType11.equals((Object)periodType4));
      assertFalse(periodType11.equals((Object)periodType5));
      assertEquals(2, periodType8.size());
      assertEquals("YearDay", periodType8.getName());
      assertEquals(1, periodType9.size());
      assertEquals("YearDayNoDays", periodType9.getName());
      assertEquals(1, periodType11.size());
      assertEquals("YearDayNoDays", periodType11.getName());
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType10);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType9);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType11);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType10);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType5);
      assertSame(periodType9, periodType11);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType11, periodType1);
      assertNotSame(periodType11, periodType10);
      assertNotSame(periodType11, periodType2);
      assertNotSame(periodType11, periodType6);
      assertNotSame(periodType11, periodType0);
      assertNotSame(periodType11, periodType8);
      assertNotSame(periodType11, periodType3);
      assertSame(periodType11, periodType9);
      assertNotSame(periodType11, periodType7);
      assertNotSame(periodType11, periodType4);
      assertNotSame(periodType11, periodType5);
      assertNotNull(periodType11);
      
      DurationFieldType durationFieldType1 = periodType4.getFieldType(1);
      assertFalse(periodType0.equals((Object)periodType11));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType8));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType9));
      assertFalse(periodType0.equals((Object)periodType10));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType8));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType11));
      assertFalse(periodType1.equals((Object)periodType9));
      assertFalse(periodType1.equals((Object)periodType10));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType8));
      assertFalse(periodType4.equals((Object)periodType6));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType10));
      assertFalse(periodType4.equals((Object)periodType11));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType9));
      assertFalse(periodType4.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType7));
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals(5, periodType1.size());
      assertEquals("YearDayTimeNoMinutes", periodType1.getName());
      assertEquals("YearDayTimeNoMinutesNoDays", periodType4.getName());
      assertEquals(4, periodType4.size());
      assertEquals("hours", durationFieldType1.toString());
      assertEquals("hours", durationFieldType1.getName());
      assertNotSame(periodType0, periodType11);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType8);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType9);
      assertNotSame(periodType0, periodType10);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType5);
      assertNotSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType8);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType11);
      assertNotSame(periodType1, periodType9);
      assertNotSame(periodType1, periodType10);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType8);
      assertNotSame(periodType4, periodType6);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType10);
      assertNotSame(periodType4, periodType11);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType9);
      assertNotSame(periodType4, periodType5);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType7);
      assertNotSame(durationFieldType1, durationFieldType0);
      assertNotNull(durationFieldType1);
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      durationFieldTypeArray0[0] = durationFieldType1;
      durationFieldTypeArray0[1] = durationFieldType1;
      durationFieldTypeArray0[2] = durationFieldType0;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [hours]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      PeriodType periodType2 = periodType1.withYearsRemoved();
      PeriodType.yearMonthDayTime();
      PeriodType periodType3 = PeriodType.yearMonthDayTime();
      DurationFieldType durationFieldType0 = periodType2.getFieldType(0);
      periodType1.isSupported(durationFieldType0);
      periodType0.withWeeksRemoved();
      PeriodType periodType4 = PeriodType.weeks();
      periodType4.size();
      PeriodType.minutes();
      PeriodType periodType5 = PeriodType.yearDay();
      PeriodType periodType6 = periodType5.withDaysRemoved();
      PeriodType.seconds();
      periodType6.withHoursRemoved();
      DurationFieldType durationFieldType1 = periodType3.getFieldType(1);
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      durationFieldTypeArray0[0] = durationFieldType1;
      durationFieldTypeArray0[1] = durationFieldType1;
      durationFieldTypeArray0[2] = durationFieldType0;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [months]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      periodType0.withMonthsRemoved();
      PeriodType.WEEK_INDEX = 2147483645;
      PeriodType.minutes();
      PeriodType.yearWeekDayTime();
      int[] intArray0 = new int[6];
      intArray0[0] = 1336;
      intArray0[1] = 1336;
      intArray0[2] = (-1);
      intArray0[3] = 1336;
      intArray0[4] = 15;
      intArray0[5] = 1336;
  }
}
