/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:31:39 GMT 2018
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Interval;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Interval_ESTest extends Interval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Interval interval0 = new Interval((-302L), 1L);
      DateTime dateTime0 = interval0.getEnd();
      Interval interval1 = interval0.withStart(dateTime0);
      Interval interval2 = interval1.withEnd(dateTime0);
      Duration duration0 = interval0.toDuration();
      Interval interval3 = interval2.withDurationAfterStart(duration0);
      assertEquals(304L, interval3.getEndMillis());
      assertSame(interval2, interval1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Interval interval0 = new Interval(1L, 1L);
      Period period0 = interval0.toPeriod();
      Interval interval1 = new Interval(period0, (ReadableInstant) null);
      boolean boolean0 = interval0.abuts(interval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Interval interval0 = new Interval(1L, 1L);
      Period period0 = interval0.toPeriod();
      Interval interval1 = new Interval(period0, (ReadableInstant) null);
      Interval interval2 = interval1.withStartMillis(1L);
      interval2.gap(interval2);
      assertEquals(1L, interval2.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Interval interval1 = interval0.withStartMillis(0L);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = interval0.withStart(dateTime0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Interval interval0 = new Interval((-1823L), 0L);
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = interval0.withStart(dateTime0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Interval interval0 = new Interval((-6L), (-6L));
      Interval interval1 = interval0.withPeriodBeforeEnd((ReadablePeriod) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Interval interval1 = interval0.withPeriodAfterStart((ReadablePeriod) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Interval interval0 = new Interval((-2463L), (-2463L), (Chronology) null);
      Interval interval1 = interval0.withPeriodAfterStart((ReadablePeriod) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Interval interval1 = interval0.withEndMillis(0L);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Interval interval0 = new Interval((-1823L), 0L);
      Interval interval1 = interval0.withEndMillis((-1L));
      assertEquals((-1L), interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = interval0.withEnd(dateTime0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Interval interval0 = new Interval((-839L), (-839L), (DateTimeZone) null);
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = interval0.withEnd(dateTime0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Interval interval1 = interval0.withDurationBeforeEnd((ReadableDuration) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Interval interval0 = new Interval((Object) null);
      Interval interval1 = interval0.withStartMillis((-3866L));
      Period period0 = interval1.toPeriod();
      DateTime dateTime0 = interval1.getStart();
      Interval interval2 = new Interval(period0, dateTime0);
      Duration duration0 = interval2.toDuration();
      Interval interval3 = interval2.withDurationBeforeEnd(duration0);
      assertSame(interval3, interval2);
      assertEquals((-3866L), interval3.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Duration duration0 = interval0.toDuration();
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Interval interval1 = interval0.withChronology((Chronology) null);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Interval interval0 = new Interval((-1823L), 0L);
      Interval interval1 = interval0.withChronology((Chronology) null);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Interval interval1 = interval0.toInterval();
      assertEquals(0L, interval1.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Interval interval0 = new Interval((-45L), (-8L));
      Interval interval1 = interval0.toInterval();
      assertSame(interval0, interval1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      Interval interval0 = Interval.parse((String) null);
      assertEquals((-1L), interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Interval interval0 = new Interval((-1579L), 2780L);
      Interval interval1 = interval0.overlap(interval0);
      assertEquals((-1579L), interval1.getStartMillis());
      assertNotNull(interval1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Interval interval0 = new Interval((-889L), (-889L));
      Interval interval1 = interval0.gap((ReadableInterval) null);
      assertEquals((-889L), interval1.getStartMillis());
      assertNotNull(interval1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Interval interval0 = new Interval((-2775L), (-2775L));
      // Undeclared exception!
      try { 
        interval0.withStartMillis(918518400000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Interval interval0 = new Interval(1L, 1L);
      Period period0 = interval0.toPeriod();
      Interval interval1 = new Interval(period0, (ReadableInstant) null);
      DateTimeUtils.setCurrentMillisFixed(2170L);
      // Undeclared exception!
      try { 
        interval1.withEnd((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Interval interval0 = null;
      try {
        interval0 = new Interval(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No interval converter found for type: org.joda.time.PeriodType
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Interval interval0 = null;
      try {
        interval0 = new Interval(1213L, 0L, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Interval interval0 = null;
      try {
        interval0 = new Interval(240L, (-1L), (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Interval interval0 = null;
      try {
        interval0 = new Interval(1804L, (-1983L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Interval interval0 = new Interval(1L, 1L);
      Interval interval1 = interval0.withEndMillis(1L);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Interval interval0 = new Interval((-1L), (-1L));
      Interval interval1 = interval0.withStartMillis((-1L));
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Interval interval0 = new Interval((Object) null, (Chronology) null);
      // Undeclared exception!
      try { 
        interval0.withEndMillis((-2154L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Interval interval0 = new Interval(659L, 659L);
      Interval interval1 = interval0.withPeriodBeforeEnd((ReadablePeriod) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Interval interval0 = new Interval(1L, 1L);
      Period period0 = interval0.toPeriod();
      Interval interval1 = interval0.withPeriodBeforeEnd(period0);
      assertEquals(1L, interval1.getStartMillis());
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Interval interval0 = new Interval(1930L, 1930L, (Chronology) null);
      Interval interval1 = interval0.withPeriodAfterStart((ReadablePeriod) null);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Interval interval0 = new Interval(1L, 1L);
      Period period0 = interval0.toPeriod();
      Interval interval1 = interval0.withPeriodAfterStart(period0);
      assertEquals(1L, interval1.getStartMillis());
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Interval interval0 = new Interval(1L, 1L);
      Duration duration0 = interval0.toDuration();
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      assertSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Interval interval0 = new Interval(1L, 1L);
      Period period0 = interval0.toPeriod();
      Interval interval1 = new Interval(period0, (ReadableInstant) null);
      Interval interval2 = interval1.withStartMillis(1L);
      Duration duration0 = interval1.toDuration();
      Interval interval3 = interval2.withDurationBeforeEnd(duration0);
      assertEquals(1392409281320L, interval3.getStartMillis());
      assertEquals(1L, interval2.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Interval interval0 = new Interval(1L, 1L);
      Interval interval1 = interval0.withStartMillis((-1L));
      Interval interval2 = interval1.withDurationAfterStart((ReadableDuration) null);
      assertEquals((-1L), interval2.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Interval interval0 = new Interval(1L, 1L);
      Interval interval1 = interval0.withChronology((Chronology) null);
      assertNotSame(interval1, interval0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Interval interval0 = Interval.parse((String) null);
      DateTimeUtils.setCurrentMillisFixed(0L);
      boolean boolean0 = interval0.abuts((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Interval interval0 = new Interval((Object) null);
      boolean boolean0 = interval0.abuts((ReadableInterval) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Interval interval0 = new Interval(1L, 1L);
      boolean boolean0 = interval0.abuts(interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Interval interval0 = new Interval(659L, 659L);
      Interval interval1 = interval0.gap((ReadableInterval) null);
      boolean boolean0 = interval0.abuts(interval1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Interval interval0 = new Interval((Object) null);
      Interval interval1 = interval0.gap(interval0);
      assertNull(interval1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Interval interval0 = new Interval(64L, 64L);
      Interval interval1 = interval0.overlap(interval0);
      assertNull(interval1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Interval interval0 = new Interval(0L, 9L);
      Interval interval1 = interval0.overlap(interval0);
      assertTrue(interval1.equals((Object)interval0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("TuKJr<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: TuKJr<
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Interval interval0 = null;
      try {
        interval0 = new Interval("E;REEF^RGAY", (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: E;REEF^RGAY
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Interval interval0 = new Interval(1L, 1L);
      // Undeclared exception!
      try { 
        interval0.withStart((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Interval interval0 = new Interval((-839L), (-839L), (DateTimeZone) null);
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = new Interval(dateTime0, (ReadableDuration) null);
      assertEquals((-839L), interval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Interval interval0 = new Interval(10000000000000L, 10000000000000L, (Chronology) null);
      DateTime dateTime0 = interval0.getStart();
      Period period0 = interval0.toPeriod();
      Interval interval1 = new Interval(dateTime0, period0);
      assertTrue(interval1.equals((Object)interval0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Interval interval0 = new Interval(1577L, 1577L);
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = new Interval(dateTime0, dateTime0);
      assertTrue(interval1.equals((Object)interval0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Interval interval0 = new Interval((Object) null);
      Interval interval1 = interval0.toInterval();
      assertSame(interval0, interval1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Interval interval0 = new Interval((-839L), (-839L), (DateTimeZone) null);
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = new Interval((ReadableDuration) null, dateTime0);
      assertTrue(interval1.equals((Object)interval0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Interval interval0 = new Interval(1L, 1L);
      Period period0 = interval0.toPeriod();
      Interval interval1 = new Interval(period0, (ReadableInstant) null);
      boolean boolean0 = interval1.abuts(interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        Interval.parse("iH^B<7;!`X#Gc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: iH^B<7;!`X#Gc
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Interval interval0 = new Interval(1L, 1L);
      Interval interval1 = interval0.withEnd((ReadableInstant) null);
      assertEquals(1392409281320L, interval1.getEndMillis());
  }
}
