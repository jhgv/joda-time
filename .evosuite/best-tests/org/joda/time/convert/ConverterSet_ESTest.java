/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:26:50 GMT 2018
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.convert.CalendarConverter;
import org.joda.time.convert.Converter;
import org.joda.time.convert.ConverterSet;
import org.joda.time.convert.LongConverter;
import org.joda.time.convert.MockZeroNullIntegerConverter;
import org.joda.time.convert.NullConverter;
import org.joda.time.convert.ReadableDurationConverter;
import org.joda.time.convert.ReadableInstantConverter;
import org.joda.time.convert.ReadableIntervalConverter;
import org.joda.time.convert.ReadablePartialConverter;
import org.joda.time.convert.StringConverter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConverterSet_ESTest extends ConverterSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      Converter[] converterArray1 = new Converter[8];
      // Undeclared exception!
      try { 
        converterSet0.remove(0, converterArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<ConverterSet.Entry> class0 = ConverterSet.Entry.class;
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      ConverterSet.Entry converterSet_Entry0 = new ConverterSet.Entry(class0, nullConverter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      int int0 = converterSet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConverterSet converterSet0 = new ConverterSet((Converter[]) null);
      // Undeclared exception!
      try { 
        converterSet0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReadableIntervalConverter readableIntervalConverter0 = new ReadableIntervalConverter();
      Converter[] converterArray0 = new Converter[1];
      converterArray0[0] = (Converter) readableIntervalConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.add(converterArray0[0], converterArray0);
      // Undeclared exception!
      try { 
        converterSet1.remove(converterArray0[0], converterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      CalendarConverter calendarConverter0 = new CalendarConverter();
      // Undeclared exception!
      try { 
        converterSet0.remove(calendarConverter0, converterArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConverterSet converterSet0 = new ConverterSet((Converter[]) null);
      // Undeclared exception!
      try { 
        converterSet0.remove((-149), (Converter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.remove((-565), converterArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -565
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Converter[] converterArray0 = new Converter[9];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      Converter[] converterArray1 = new Converter[4];
      // Undeclared exception!
      try { 
        converterSet0.copyInto(converterArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockZeroNullIntegerConverter mockZeroNullIntegerConverter0 = (MockZeroNullIntegerConverter)MockZeroNullIntegerConverter.INSTANCE;
      ConverterSet converterSet0 = new ConverterSet((Converter[]) null);
      // Undeclared exception!
      try { 
        converterSet0.add(mockZeroNullIntegerConverter0, (Converter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      // Undeclared exception!
      try { 
        converterSet0.add(readableInstantConverter0, converterArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Converter[] converterArray0 = new Converter[2];
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      converterArray0[1] = (Converter) readablePartialConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.select((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Converter[] converterArray0 = new Converter[2];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.remove(1988, converterArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Converter[] converterArray0 = new Converter[9];
      CalendarConverter calendarConverter0 = new CalendarConverter();
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.remove(calendarConverter0, (Converter[]) null);
      assertSame(converterSet1, converterSet0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Converter[] converterArray0 = new Converter[9];
      ReadableIntervalConverter readableIntervalConverter0 = ReadableIntervalConverter.INSTANCE;
      converterArray0[0] = (Converter) readableIntervalConverter0;
      ReadableIntervalConverter readableIntervalConverter1 = new ReadableIntervalConverter();
      converterArray0[1] = (Converter) readableIntervalConverter1;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.remove(readableIntervalConverter0, converterArray0);
      assertNotSame(converterSet1, converterSet0);
      
      ConverterSet converterSet2 = converterSet1.add(readableIntervalConverter0, converterArray0);
      assertNotSame(converterSet2, converterSet1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Converter[] converterArray0 = new Converter[9];
      CalendarConverter calendarConverter0 = new CalendarConverter();
      converterArray0[0] = (Converter) calendarConverter0;
      LongConverter longConverter0 = LongConverter.INSTANCE;
      converterArray0[1] = (Converter) longConverter0;
      converterArray0[2] = (Converter) calendarConverter0;
      converterArray0[3] = (Converter) calendarConverter0;
      MockZeroNullIntegerConverter mockZeroNullIntegerConverter0 = (MockZeroNullIntegerConverter)MockZeroNullIntegerConverter.INSTANCE;
      converterArray0[4] = (Converter) mockZeroNullIntegerConverter0;
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      converterArray0[5] = (Converter) stringConverter0;
      StringConverter stringConverter1 = new StringConverter();
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.add(stringConverter1, (Converter[]) null);
      assertNotSame(converterSet1, converterSet0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Converter[] converterArray0 = new Converter[9];
      CalendarConverter calendarConverter0 = new CalendarConverter();
      converterArray0[0] = (Converter) calendarConverter0;
      LongConverter longConverter0 = LongConverter.INSTANCE;
      converterArray0[1] = (Converter) longConverter0;
      converterArray0[2] = (Converter) calendarConverter0;
      converterArray0[3] = (Converter) calendarConverter0;
      MockZeroNullIntegerConverter mockZeroNullIntegerConverter0 = (MockZeroNullIntegerConverter)MockZeroNullIntegerConverter.INSTANCE;
      converterArray0[4] = (Converter) mockZeroNullIntegerConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.add(mockZeroNullIntegerConverter0, (Converter[]) null);
      assertSame(converterSet1, converterSet0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Converter[] converterArray0 = new Converter[4];
      ReadableInstantConverter readableInstantConverter0 = ReadableInstantConverter.INSTANCE;
      converterArray0[0] = (Converter) readableInstantConverter0;
      MockZeroNullIntegerConverter mockZeroNullIntegerConverter0 = new MockZeroNullIntegerConverter();
      converterArray0[1] = (Converter) mockZeroNullIntegerConverter0;
      LongConverter longConverter0 = LongConverter.INSTANCE;
      converterArray0[2] = (Converter) longConverter0;
      converterArray0[3] = (Converter) readableInstantConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      StringConverter stringConverter0 = new StringConverter();
      ConverterSet converterSet1 = converterSet0.add(stringConverter0, converterArray0);
      assertNotSame(converterSet1, converterSet0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Converter[] converterArray0 = new Converter[4];
      ReadableInstantConverter readableInstantConverter0 = ReadableInstantConverter.INSTANCE;
      MockZeroNullIntegerConverter mockZeroNullIntegerConverter0 = new MockZeroNullIntegerConverter();
      converterArray0[1] = (Converter) mockZeroNullIntegerConverter0;
      LongConverter longConverter0 = LongConverter.INSTANCE;
      converterArray0[2] = (Converter) longConverter0;
      converterArray0[3] = (Converter) readableInstantConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      Class<Integer> class0 = Integer.class;
      converterSet0.select(class0);
      StringConverter stringConverter0 = new StringConverter();
      converterSet0.remove(readableInstantConverter0, converterArray0);
      Class<String> class1 = String.class;
      converterSet0.select(class1);
      ConverterSet converterSet1 = converterSet0.remove(0, converterArray0);
      Class<Object> class2 = Object.class;
      Converter converter0 = converterSet1.select(class2);
      assertNull(converter0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Converter[] converterArray0 = new Converter[5];
      ReadableInstantConverter readableInstantConverter0 = ReadableInstantConverter.INSTANCE;
      converterArray0[0] = (Converter) readableInstantConverter0;
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      converterArray0[1] = (Converter) stringConverter0;
      NullConverter nullConverter0 = NullConverter.INSTANCE;
      converterArray0[2] = (Converter) nullConverter0;
      converterArray0[3] = (Converter) nullConverter0;
      ReadableDurationConverter readableDurationConverter0 = ReadableDurationConverter.INSTANCE;
      converterArray0[4] = (Converter) readableDurationConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      Class<ConverterSet.Entry> class0 = ConverterSet.Entry.class;
      converterSet0.select(class0);
      Converter converter0 = converterSet0.select(class0);
      assertNull(converter0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Converter[] converterArray0 = new Converter[3];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      int int0 = converterSet0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Converter[] converterArray0 = new Converter[5];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      converterSet0.copyInto(converterArray0);
      assertEquals(5, converterArray0.length);
  }
}
