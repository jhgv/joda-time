/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:32:06 GMT 2018
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.MutableInterval;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.chrono.EthiopicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeUtils_ESTest extends DateTimeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset((-843L));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeUtils.OffsetMillisProvider dateTimeUtils_OffsetMillisProvider0 = new DateTimeUtils.OffsetMillisProvider(1392409281320L);
      long long0 = dateTimeUtils_OffsetMillisProvider0.getMillis();
      assertEquals(2784818562640L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeUtils.FixedMillisProvider dateTimeUtils_FixedMillisProvider0 = new DateTimeUtils.FixedMillisProvider((-9223372036854775808L));
      long long0 = dateTimeUtils_FixedMillisProvider0.getMillis();
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = DateTimeUtils.toJulianDayNumber((-9223372036854775808L));
      assertEquals((-106749550580L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = DateTimeUtils.toJulianDay(1209600000L);
      assertEquals(2440601.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      PeriodType periodType2 = DateTimeUtils.getPeriodType(periodType1);
      assertEquals("MillisNoMillis", periodType2.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Days days0 = Days.days(0);
      Days days1 = Days.MAX_VALUE;
      Days days2 = days0.minus(days1);
      Duration duration0 = days2.toStandardDuration();
      long long0 = DateTimeUtils.getDurationMillis(duration0);
      assertEquals((-185542587100800000L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = DateTimeUtils.fromJulianDay(2440601.5);
      assertEquals(1209600000L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeUtils.setCurrentMillisFixed(0L);
      long long0 = DateTimeUtils.currentTimeMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis((-733L));
      long long0 = DateTimeUtils.currentTimeMillis();
      assertEquals((-733L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.getDateFormatSymbols((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getChronology((Chronology) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = DateTimeUtils.toJulianDay((-211315422666285L));
      assertEquals((-5192.8549338541925), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeUtils.OffsetMillisProvider dateTimeUtils_OffsetMillisProvider0 = new DateTimeUtils.OffsetMillisProvider((-1048L));
      long long0 = DateTimeUtils.toJulianDayNumber((-1048L));
      assertEquals(2440587L, long0);
      
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_OffsetMillisProvider0);
      assertEquals(1392409280272L, dateTimeUtils_OffsetMillisProvider0.getMillis());
      
      DateTimeUtils.getZone((DateTimeZone) null);
      DateTimeZone dateTimeZone0 = DateTimeUtils.getZone((DateTimeZone) null);
      assertNotNull(dateTimeZone0);
      
      Duration duration0 = Duration.millis(1L);
      Duration duration1 = duration0.withDurationAdded(0L, 80);
      Duration duration2 = duration1.negated();
      Duration duration3 = duration2.plus((ReadableDuration) duration1);
      duration2.toStandardDays();
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      Duration duration4 = duration3.dividedBy((-1435L), roundingMode0);
      DateTimeUtils.getDurationMillis(duration4);
      DateTimeUtils.SystemMillisProvider dateTimeUtils_SystemMillisProvider0 = new DateTimeUtils.SystemMillisProvider();
      dateTimeUtils_SystemMillisProvider0.getMillis();
      long long1 = DateTimeUtils.fromJulianDay((-1048L));
      assertEquals((-210957307200000L), long1);
      
      DateTimeUtils.setCurrentMillisFixed(1933L);
      DateTimeUtils.fromJulianDay(2440587.5);
      Map<String, DateTimeZone> map0 = DateTimeUtils.getDefaultTimeZoneNames();
      assertNotNull(map0);
      assertEquals(11, map0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.isContiguous((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Partial must not be null
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = DateTimeUtils.getDurationMillis((ReadableDuration) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      Duration duration0 = minutes0.toStandardDuration();
      long long0 = DateTimeUtils.getDurationMillis(duration0);
      assertEquals(128849018820000L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeriodType periodType0 = DateTimeUtils.getPeriodType((PeriodType) null);
      assertEquals("Standard", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1825));
      DateTimeZone dateTimeZone1 = DateTimeUtils.getZone(dateTimeZone0);
      assertTrue(dateTimeZone1.isFixed());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInterval) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getIntervalChronology((ReadableInstant) null, (ReadableInstant) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Chronology chronology0 = DateTimeUtils.getInstantChronology((ReadableInstant) null);
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = DateTimeUtils.getInstantMillis((ReadableInstant) null);
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Instant instant0 = new Instant((-238L));
      String string0 = instant0.toString();
      assertEquals("1969-12-31T23:59:59.762Z", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeUtils.setCurrentMillisProvider((DateTimeUtils.MillisProvider) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The MillisProvider must not be null
         //
         verifyException("org.joda.time.DateTimeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset(0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeUtils.setCurrentMillisOffset(1282L);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeUtils.OffsetMillisProvider dateTimeUtils_OffsetMillisProvider0 = new DateTimeUtils.OffsetMillisProvider((-1048L));
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_OffsetMillisProvider0);
      long long0 = DateTimeUtils.currentTimeMillis();
      assertEquals(1392409280272L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeUtils.FixedMillisProvider dateTimeUtils_FixedMillisProvider0 = new DateTimeUtils.FixedMillisProvider(0L);
      long long0 = dateTimeUtils_FixedMillisProvider0.getMillis();
      Locale locale0 = Locale.GERMAN;
      DateTimeUtils.getDateFormatSymbols(locale0);
      DateTimeUtils dateTimeUtils0 = new DateTimeUtils();
      Map<String, DateTimeZone> map0 = DateTimeUtils.getDefaultTimeZoneNames();
      DateTimeUtils.setDefaultTimeZoneNames(map0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(long0, (Chronology) ethiopicChronology0);
      Seconds seconds0 = Seconds.MAX_VALUE;
      DateTime dateTime1 = dateTime0.plus((ReadablePeriod) seconds0);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime1, seconds0);
      DateTimeUtils.getIntervalChronology((ReadableInterval) mutableInterval0);
      assertEquals(2147483647000L, mutableInterval0.getStartMillis());
      assertEquals(4294967294000L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeUtils.setCurrentMillisSystem();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeUtils.FixedMillisProvider dateTimeUtils_FixedMillisProvider0 = new DateTimeUtils.FixedMillisProvider((-4555L));
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_FixedMillisProvider0);
      ReadableInterval readableInterval0 = DateTimeUtils.getReadableInterval((ReadableInterval) null);
      assertNotNull(readableInterval0);
      assertEquals((-4555L), readableInterval0.getEndMillis());
  }
}
