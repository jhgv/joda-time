/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 24 23:28:30 GMT 2018
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DurationFieldType;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.format.ISOPeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Months_ESTest extends Months_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      
      int int0 = months0.TWELVE.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(1, int0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      
      boolean boolean0 = months0.EIGHT.equals("");
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      
      boolean boolean1 = months0.isGreaterThan((Months) null);
      assertTrue(boolean1);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertFalse(boolean1 == boolean0);
      
      Months months1 = Months.parseMonths((String) null);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      boolean boolean2 = months0.isLessThan((Months) null);
      assertNotSame(months0, months1);
      assertFalse(boolean2);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      assertNotNull(months0);
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      
      int int0 = months0.TWELVE.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(1, int0);
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      
      boolean boolean0 = months0.EIGHT.equals("");
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      
      boolean boolean1 = months0.isGreaterThan((Months) null);
      assertFalse(boolean1);
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertTrue(boolean1 == boolean0);
      
      Months months1 = Months.parseMonths((String) null);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      boolean boolean2 = months1.isGreaterThan((Months) null);
      assertNotSame(months1, months0);
      assertFalse(boolean2);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      assertNotNull(months0);
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      
      int int0 = months0.TWELVE.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(1, int0);
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = months0.MIN_VALUE.dividedBy(1);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertNotNull(months1);
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months1.getMonths());
      assertEquals(1, months1.size());
      
      boolean boolean0 = months0.EIGHT.equals("");
      assertSame(months0, months1);
      assertFalse(boolean0);
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      
      boolean boolean1 = months0.isGreaterThan((Months) null);
      assertSame(months0, months1);
      assertFalse(boolean1);
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertTrue(boolean1 == boolean0);
      
      Months months2 = Months.parseMonths((String) null);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals(1, months2.size());
      assertEquals(0, months2.getMonths());
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Months months0 = Months.TEN;
      assertNotNull(months0);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      
      int int0 = months0.TWELVE.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(1, int0);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      
      boolean boolean0 = months0.EIGHT.equals("$");
      assertFalse(boolean0);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      
      boolean boolean1 = months0.isGreaterThan((Months) null);
      assertTrue(boolean1);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      assertFalse(boolean1 == boolean0);
      
      Months months1 = Months.parseMonths((String) null);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      
      int int0 = 5;
      Months months1 = Months.months(5);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(5, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months1.EIGHT.negated();
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(5, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals((-8), months2.getMonths());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      Months months3 = Months.TWELVE;
      assertNotSame(months3, months1);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotNull(months3);
      assertEquals(12, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      
      int int1 = months1.ONE.compareTo((BaseSingleFieldPeriod) months0);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months3);
      assertEquals((-1), int1);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(5, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months3));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        months0.SEVEN.getValue(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Months months0 = Months.months(10);
      assertNotNull(months0);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      
      String string0 = months0.toString();
      assertNotNull(string0);
      assertEquals("P10M", string0);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 8;
      Months months0 = Months.months(8);
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      
      // Undeclared exception!
      try { 
        months0.MAX_VALUE.plus(8);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 8
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      
      Months months1 = Months.months(11);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months1.size());
      assertEquals(11, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months0.minus(months0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotNull(periodType0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      
      Months months3 = months0.multipliedBy(11);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertNotNull(months3);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months3.size());
      assertEquals(77, months3.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      
      Months months4 = months0.plus(11);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months0);
      assertNotSame(months4, months3);
      assertNotNull(months4);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(18, months4.getMonths());
      assertEquals(1, months4.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      
      boolean boolean0 = months0.isLessThan(months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months2, months4);
      assertNotSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertFalse(boolean0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      
      boolean boolean1 = months2.isGreaterThan(months0);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months2, months4);
      assertNotSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertFalse(boolean1);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      
      Months months1 = months0.minus(12);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-5), months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      DurationFieldType durationFieldType0 = months1.getFieldType();
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(durationFieldType0);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-5), months1.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = Months.months(12);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals(12, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      
      Months months3 = months0.minus(months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertSame(months3, months2);
      assertNotSame(months3, months1);
      assertNotSame(months3, months0);
      assertNotNull(months3);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-5), months1.getMonths());
      assertEquals(1, months3.size());
      assertEquals(12, months3.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotNull(periodType0);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      
      Months months4 = months1.multipliedBy(12);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertNotNull(months4);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-5), months1.getMonths());
      assertEquals((-60), months4.getMonths());
      assertEquals(1, months4.size());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      
      String string0 = months2.toString();
      assertSame(months2, months3);
      assertNotSame(months2, months4);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(string0);
      assertEquals("P12M", string0);
      assertEquals(12, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      
      Months months5 = months0.plus(12);
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months5, months4);
      assertNotSame(months5, months1);
      assertNotSame(months5, months0);
      assertNotSame(months5, months3);
      assertNotSame(months5, months2);
      assertNotNull(months5);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(1, months5.size());
      assertEquals(19, months5.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months2));
      
      boolean boolean0 = months0.isLessThan(months3);
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months5);
      assertNotSame(months1, months4);
      assertNotSame(months1, months2);
      assertSame(months3, months2);
      assertNotSame(months3, months5);
      assertNotSame(months3, months1);
      assertNotSame(months3, months0);
      assertNotSame(months3, months4);
      assertTrue(boolean0);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-5), months1.getMonths());
      assertEquals(1, months3.size());
      assertEquals(12, months3.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months5));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months4));
      
      boolean boolean1 = months3.isGreaterThan(months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months5);
      assertNotSame(months1, months4);
      assertNotSame(months1, months2);
      assertSame(months3, months2);
      assertNotSame(months3, months5);
      assertNotSame(months3, months1);
      assertNotSame(months3, months0);
      assertNotSame(months3, months4);
      assertTrue(boolean1);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-5), months1.getMonths());
      assertEquals(1, months3.size());
      assertEquals(12, months3.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months5));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months4));
      assertTrue(boolean1 == boolean0);
      
      Months months6 = months3.plus(0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months6);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months5);
      assertNotSame(months1, months4);
      assertNotSame(months1, months6);
      assertNotSame(months1, months2);
      assertSame(months3, months2);
      assertSame(months3, months6);
      assertNotSame(months3, months5);
      assertNotSame(months3, months1);
      assertNotSame(months3, months0);
      assertNotSame(months3, months4);
      assertNotSame(months6, months1);
      assertSame(months6, months2);
      assertNotSame(months6, months4);
      assertNotSame(months6, months5);
      assertSame(months6, months3);
      assertNotSame(months6, months0);
      assertNotNull(months6);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-5), months1.getMonths());
      assertEquals(1, months3.size());
      assertEquals(12, months3.getMonths());
      assertEquals(1, months6.size());
      assertEquals(12, months6.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months5));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months0));
      
      Months months7 = months0.minus(157);
      assertNotSame(months0, months7);
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months6);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months7, months3);
      assertNotSame(months7, months4);
      assertNotSame(months7, months6);
      assertNotSame(months7, months5);
      assertNotSame(months7, months1);
      assertNotSame(months7, months0);
      assertNotSame(months7, months2);
      assertNotNull(months7);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals((-150), months7.getMonths());
      assertEquals(1, months7.size());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months7.equals((Object)months3));
      assertFalse(months7.equals((Object)months4));
      assertFalse(months7.equals((Object)months6));
      assertFalse(months7.equals((Object)months5));
      assertFalse(months7.equals((Object)months1));
      assertFalse(months7.equals((Object)months0));
      assertFalse(months7.equals((Object)months2));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Months months0 = Months.months(2);
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      
      String string0 = months0.SEVEN.toString();
      assertNotNull(string0);
      assertEquals("P7M", string0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      
      Months months1 = Months.months(2);
      assertSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months1.size());
      assertEquals(2, months1.getMonths());
      
      // Undeclared exception!
      try { 
        months0.SIX.getFieldType(999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 999
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Months months0 = Months.TWELVE;
      assertNotNull(months0);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = months0.minus(months0);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      int int0 = months1.getMonths();
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(0, int0);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      int int0 = months0.getMonths();
      assertEquals(6, int0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      
      Months months1 = months0.plus(6);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = Months.ELEVEN;
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals(11, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      
      int int1 = (-2653);
      Months months3 = months1.NINE.minus((-2653));
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertNotSame(months3, months0);
      assertNotNull(months3);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(2662, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      
      Months months4 = months1.FIVE.dividedBy((-2653));
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months1, months4);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months4, months1);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months2);
      assertNotNull(months4);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(0, months4.getMonths());
      assertEquals(1, months4.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      int int2 = months2.TWELVE.get((DurationFieldType) null);
      assertNotSame(months2, months0);
      assertNotSame(months2, months4);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertEquals(0, int2);
      assertEquals(11, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Months months5 = Months.months((-2653));
      assertNotSame(months5, months0);
      assertNotSame(months5, months3);
      assertNotSame(months5, months2);
      assertNotSame(months5, months4);
      assertNotSame(months5, months1);
      assertNotNull(months5);
      assertEquals(1, months5.size());
      assertEquals((-2653), months5.getMonths());
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months1));
      
      Months months6 = Months.SEVEN;
      assertNotSame(months6, months4);
      assertNotSame(months6, months0);
      assertNotSame(months6, months2);
      assertNotSame(months6, months3);
      assertNotSame(months6, months5);
      assertNotSame(months6, months1);
      assertNotNull(months6);
      assertEquals(1, months6.size());
      assertEquals(7, months6.getMonths());
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months1));
      
      boolean boolean0 = months6.SEVEN.equals(months3);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months0, months6);
      assertNotSame(months0, months5);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months1, months4);
      assertNotSame(months1, months5);
      assertNotSame(months1, months6);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months3, months4);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertNotSame(months3, months5);
      assertNotSame(months3, months0);
      assertNotSame(months3, months6);
      assertNotSame(months6, months4);
      assertNotSame(months6, months0);
      assertNotSame(months6, months2);
      assertNotSame(months6, months3);
      assertNotSame(months6, months5);
      assertNotSame(months6, months1);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(2662, months3.getMonths());
      assertEquals(1, months3.size());
      assertEquals(1, months6.size());
      assertEquals(7, months6.getMonths());
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months5));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months6));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months1));
      
      boolean boolean1 = months0.isLessThan(months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months0, months6);
      assertNotSame(months0, months5);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months5);
      assertNotSame(months2, months4);
      assertNotSame(months2, months1);
      assertNotSame(months2, months6);
      assertNotSame(months2, months3);
      assertTrue(boolean1);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(11, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months3));
      assertFalse(boolean1 == boolean0);
      
      Months months7 = months0.EIGHT.multipliedBy((-2653));
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months0, months6);
      assertNotSame(months0, months5);
      assertNotSame(months0, months7);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months7, months5);
      assertNotSame(months7, months4);
      assertNotSame(months7, months1);
      assertNotSame(months7, months2);
      assertNotSame(months7, months3);
      assertNotSame(months7, months6);
      assertNotSame(months7, months0);
      assertNotNull(months7);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals((-21224), months7.getMonths());
      assertEquals(1, months7.size());
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months7.equals((Object)months5));
      assertFalse(months7.equals((Object)months4));
      assertFalse(months7.equals((Object)months1));
      assertFalse(months7.equals((Object)months2));
      assertFalse(months7.equals((Object)months3));
      assertFalse(months7.equals((Object)months6));
      assertFalse(months7.equals((Object)months0));
      
      Months months8 = Months.MAX_VALUE;
      assertNotSame(months8, months5);
      assertNotSame(months8, months4);
      assertNotSame(months8, months1);
      assertNotSame(months8, months2);
      assertNotSame(months8, months7);
      assertNotSame(months8, months3);
      assertNotSame(months8, months6);
      assertNotSame(months8, months0);
      assertNotNull(months8);
      assertEquals(Integer.MAX_VALUE, months8.getMonths());
      assertEquals(1, months8.size());
      assertFalse(months8.equals((Object)months5));
      assertFalse(months8.equals((Object)months4));
      assertFalse(months8.equals((Object)months1));
      assertFalse(months8.equals((Object)months2));
      assertFalse(months8.equals((Object)months7));
      assertFalse(months8.equals((Object)months3));
      assertFalse(months8.equals((Object)months6));
      assertFalse(months8.equals((Object)months0));
      
      // Undeclared exception!
      try { 
        months8.SEVEN.getValue(4517);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 4517
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      
      Months months1 = Months.months(7);
      assertSame(months1, months0);
      assertNotNull(months1);
      assertEquals(7, months1.getMonths());
      assertEquals(1, months1.size());
      
      Months months2 = months0.minus(months0);
      assertNotSame(months0, months2);
      assertSame(months0, months1);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotSame(months0, months2);
      assertSame(months0, months1);
      assertNotNull(periodType0);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(months0.equals((Object)months2));
      
      Months months3 = months0.multipliedBy(7);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertSame(months0, months1);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertNotNull(months3);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(1, months3.size());
      assertEquals(49, months3.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      
      String string0 = months1.toString();
      assertSame(months1, months0);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotNull(string0);
      assertEquals("P7M", string0);
      assertEquals(7, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      
      Months months4 = months0.plus(7);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertSame(months0, months1);
      assertNotSame(months4, months0);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertNotNull(months4);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(14, months4.getMonths());
      assertEquals(1, months4.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      
      boolean boolean0 = months0.isLessThan(months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertSame(months0, months1);
      assertNotSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months4);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months4));
      
      boolean boolean1 = months2.isGreaterThan(months0);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertSame(months0, months1);
      assertNotSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months4);
      assertFalse(boolean1);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months4));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Months months0 = Months.ONE;
      assertNotNull(months0);
      assertEquals(1, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = Months.ONE;
      assertSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months1.getMonths());
      assertEquals(1, months1.size());
      
      String string0 = months0.ELEVEN.toString();
      assertSame(months0, months1);
      assertNotNull(string0);
      assertEquals("P11M", string0);
      assertEquals(1, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months2 = months0.plus(months1);
      assertNotSame(months0, months2);
      assertSame(months0, months1);
      assertNotSame(months1, months2);
      assertSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(1, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(2, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      Months months3 = Months.months(3);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotNull(months3);
      assertEquals(3, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      
      Months months4 = months3.EIGHT.plus(months2);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months4);
      assertSame(months0, months1);
      assertNotSame(months1, months2);
      assertSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months3);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotSame(months2, months4);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months4);
      assertNotSame(months3, months2);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months3);
      assertNotSame(months4, months2);
      assertNotNull(months4);
      assertEquals(1, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(2, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(3, months3.getMonths());
      assertEquals(1, months3.size());
      assertEquals(10, months4.getMonths());
      assertEquals(1, months4.size());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      
      // Undeclared exception!
      try { 
        months1.MIN_VALUE.minus(months0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = Months.FIVE;
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(5, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      DurationFieldType durationFieldType0 = months1.getFieldType();
      assertNotSame(months1, months0);
      assertNotNull(durationFieldType0);
      assertEquals(5, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = Months.months(7);
      assertSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals(7, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months2.equals((Object)months1));
      
      Months months3 = months0.minus(months1);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertSame(months0, months2);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotNull(months3);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(5, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months3.size());
      assertEquals(2, months3.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertSame(months0, months2);
      assertNotNull(periodType0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      
      Months months4 = months1.multipliedBy(7);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months4);
      assertNotSame(months1, months0);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotNull(months4);
      assertEquals(5, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(35, months4.getMonths());
      assertEquals(1, months4.size());
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      
      String string0 = months4.toString();
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months4);
      assertNotSame(months1, months0);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotNull(string0);
      assertEquals("P35M", string0);
      assertEquals(5, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(35, months4.getMonths());
      assertEquals(1, months4.size());
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      
      Months months5 = months0.plus(7);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months0, months5);
      assertSame(months0, months2);
      assertNotSame(months5, months4);
      assertNotSame(months5, months2);
      assertNotSame(months5, months0);
      assertNotSame(months5, months3);
      assertNotSame(months5, months1);
      assertNotNull(months5);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(14, months5.getMonths());
      assertEquals(1, months5.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months1));
      
      boolean boolean0 = months0.isLessThan(months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months0, months5);
      assertSame(months0, months2);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months4);
      assertNotSame(months1, months5);
      assertNotSame(months1, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months4);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months5);
      assertFalse(boolean0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(5, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months3.size());
      assertEquals(2, months3.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months5));
      
      boolean boolean1 = months3.isGreaterThan(months1);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months0, months5);
      assertSame(months0, months2);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months4);
      assertNotSame(months1, months5);
      assertNotSame(months1, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months4);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months5);
      assertFalse(boolean1);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(5, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months3.size());
      assertEquals(2, months3.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months5));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      
      Months months1 = months0.minus(7);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      DurationFieldType durationFieldType0 = months1.getFieldType();
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(durationFieldType0);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = Months.months(7);
      assertNotSame(months2, months1);
      assertSame(months2, months0);
      assertNotNull(months2);
      assertEquals(1, months2.size());
      assertEquals(7, months2.getMonths());
      assertFalse(months2.equals((Object)months1));
      
      Months months3 = months2.TEN.minus(7);
      assertNotSame(months2, months1);
      assertSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotNull(months3);
      assertEquals(1, months2.size());
      assertEquals(7, months2.getMonths());
      assertEquals(1, months3.size());
      assertEquals(3, months3.getMonths());
      assertFalse(months2.equals((Object)months1));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      
      Months months4 = Months.months(45);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotNull(months4);
      assertEquals(1, months4.size());
      assertEquals(45, months4.getMonths());
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotSame(months0, months4);
      assertSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotNull(periodType0);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      
      Months months5 = months1.multipliedBy(7);
      assertNotSame(months0, months4);
      assertSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months5);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertSame(months1, months5);
      assertNotSame(months1, months4);
      assertNotSame(months5, months2);
      assertNotSame(months5, months4);
      assertNotSame(months5, months3);
      assertNotSame(months5, months0);
      assertSame(months5, months1);
      assertNotNull(months5);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months5.size());
      assertEquals(0, months5.getMonths());
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months0));
      
      String string0 = months1.toString();
      assertNotSame(months0, months4);
      assertSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months5);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertSame(months1, months5);
      assertNotSame(months1, months4);
      assertNotNull(string0);
      assertEquals("P0M", string0);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months4));
      
      Months months6 = Months.THREE;
      assertSame(months6, months3);
      assertNotSame(months6, months4);
      assertNotSame(months6, months1);
      assertNotSame(months6, months0);
      assertNotSame(months6, months2);
      assertNotSame(months6, months5);
      assertNotNull(months6);
      assertEquals(3, months6.getMonths());
      assertEquals(1, months6.size());
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months5));
      
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertNotSame(months0, months4);
      assertNotSame(months0, months6);
      assertNotSame(months0, months3);
      assertSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months1);
      assertNotSame(months1, months6);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertSame(months1, months5);
      assertNotSame(months1, months4);
      assertTrue(boolean0);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months4));
      
      boolean boolean1 = months1.isGreaterThan(months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months6);
      assertNotSame(months0, months3);
      assertSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months1);
      assertNotSame(months1, months6);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertSame(months1, months5);
      assertNotSame(months1, months4);
      assertFalse(boolean1);
      assertEquals(1, months0.size());
      assertEquals(7, months0.getMonths());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months4));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      assertNotNull(months0);
      assertEquals(11, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = months0.dividedBy((-3426));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(11, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months1.MIN_VALUE.minus((-2766));
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(11, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-2147480882), months2.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      Months months3 = months1.plus(0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months1, months0);
      assertSame(months1, months3);
      assertNotSame(months1, months2);
      assertSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotNull(months3);
      assertEquals(11, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months3.size());
      assertEquals(0, months3.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      
      Months months4 = months1.plus(months0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertSame(months0, months4);
      assertNotSame(months1, months4);
      assertNotSame(months1, months0);
      assertSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months4, months3);
      assertSame(months4, months0);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotNull(months4);
      assertEquals(11, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months4.size());
      assertEquals(11, months4.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      
      Months months5 = months3.negated();
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertSame(months0, months4);
      assertNotSame(months1, months4);
      assertSame(months1, months5);
      assertNotSame(months1, months0);
      assertSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months3, months4);
      assertSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertSame(months3, months5);
      assertSame(months5, months3);
      assertSame(months5, months1);
      assertNotSame(months5, months2);
      assertNotSame(months5, months0);
      assertNotSame(months5, months4);
      assertNotNull(months5);
      assertEquals(11, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months3.size());
      assertEquals(0, months3.getMonths());
      assertEquals(1, months5.size());
      assertEquals(0, months5.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months4));
      
      Months months6 = months2.negated();
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months6);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertSame(months0, months4);
      assertNotSame(months1, months4);
      assertSame(months1, months5);
      assertNotSame(months1, months6);
      assertNotSame(months1, months0);
      assertSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months2, months6);
      assertNotSame(months2, months4);
      assertNotSame(months2, months5);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotSame(months2, months3);
      assertNotSame(months6, months4);
      assertNotSame(months6, months2);
      assertNotSame(months6, months5);
      assertNotSame(months6, months1);
      assertNotSame(months6, months3);
      assertNotSame(months6, months0);
      assertNotNull(months6);
      assertEquals(11, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-2147480882), months2.getMonths());
      assertEquals(1, months6.size());
      assertEquals(2147480882, months6.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      int int0 = months0.getMonths();
      assertEquals(6, int0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = months0.plus(6);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(12, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months1.negated();
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(12, months1.getMonths());
      assertEquals((-12), months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      
      int int1 = (-2653);
      Months months3 = months1.NINE.minus((-2653));
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotNull(months3);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(12, months1.getMonths());
      assertEquals(2662, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      
      Months months4 = months1.FIVE.dividedBy((-2653));
      assertNotSame(months0, months3);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months2);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotNull(months4);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months4.size());
      assertEquals(0, months4.getMonths());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      
      int int2 = 4510;
      Months months5 = Months.months(6);
      assertNotSame(months5, months3);
      assertNotSame(months5, months2);
      assertNotSame(months5, months4);
      assertSame(months5, months0);
      assertNotSame(months5, months1);
      assertNotNull(months5);
      assertEquals(1, months5.size());
      assertEquals(6, months5.getMonths());
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months1));
      
      boolean boolean0 = months0.FOUR.equals((Object) null);
      assertNotSame(months0, months3);
      assertSame(months0, months5);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertFalse(boolean0);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      
      Months months6 = Months.FIVE;
      assertNotSame(months6, months4);
      assertNotSame(months6, months5);
      assertNotSame(months6, months2);
      assertNotSame(months6, months0);
      assertNotSame(months6, months3);
      assertNotSame(months6, months1);
      assertNotNull(months6);
      assertEquals(5, months6.getMonths());
      assertEquals(1, months6.size());
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months1));
      
      boolean boolean1 = months6.SEVEN.equals(months3);
      assertNotSame(months0, months3);
      assertNotSame(months0, months6);
      assertSame(months0, months5);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months6);
      assertNotSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months3);
      assertNotSame(months1, months5);
      assertNotSame(months1, months2);
      assertNotSame(months3, months5);
      assertNotSame(months3, months4);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months6);
      assertNotSame(months6, months4);
      assertNotSame(months6, months5);
      assertNotSame(months6, months2);
      assertNotSame(months6, months0);
      assertNotSame(months6, months3);
      assertNotSame(months6, months1);
      assertFalse(boolean1);
      assertEquals(6, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(12, months1.getMonths());
      assertEquals(2662, months3.getMonths());
      assertEquals(1, months3.size());
      assertEquals(5, months6.getMonths());
      assertEquals(1, months6.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months5));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months6));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months1));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Months.parseMonths("j\n~6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"j
         // ~6\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      assertNotNull(months0);
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      int int0 = months0.getMonths();
      assertEquals(Integer.MIN_VALUE, int0);
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      
      // Undeclared exception!
      try { 
        months0.plus(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      
      boolean boolean0 = months0.NINE.equals("");
      assertFalse(boolean0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = months0.minus(7);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      DurationFieldType durationFieldType0 = months1.getFieldType();
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(durationFieldType0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = Months.months(7);
      assertSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals(7, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months2.equals((Object)months1));
      
      Months months3 = months0.minus(months1);
      assertSame(months0, months3);
      assertNotSame(months0, months1);
      assertSame(months0, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months3, months1);
      assertSame(months3, months2);
      assertSame(months3, months0);
      assertNotNull(months3);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months3.size());
      assertEquals(7, months3.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      
      PeriodType periodType0 = months0.getPeriodType();
      assertSame(months0, months3);
      assertNotSame(months0, months1);
      assertSame(months0, months2);
      assertNotNull(periodType0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertFalse(months0.equals((Object)months1));
      
      Months months4 = months1.multipliedBy(7);
      assertNotSame(months0, months4);
      assertSame(months0, months3);
      assertNotSame(months0, months1);
      assertSame(months0, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertSame(months1, months4);
      assertNotSame(months4, months0);
      assertSame(months4, months1);
      assertNotSame(months4, months3);
      assertNotSame(months4, months2);
      assertNotNull(months4);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months4.size());
      assertEquals(0, months4.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      
      String string0 = months2.toString();
      assertSame(months2, months0);
      assertNotSame(months2, months1);
      assertSame(months2, months3);
      assertNotSame(months2, months4);
      assertNotNull(string0);
      assertEquals("P7M", string0);
      assertEquals(7, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months4));
      
      Months months5 = months0.plus(7);
      assertNotSame(months0, months4);
      assertSame(months0, months3);
      assertNotSame(months0, months1);
      assertSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months5, months3);
      assertNotSame(months5, months1);
      assertNotSame(months5, months0);
      assertNotSame(months5, months2);
      assertNotSame(months5, months4);
      assertNotNull(months5);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(14, months5.getMonths());
      assertEquals(1, months5.size());
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months4));
      
      boolean boolean1 = months0.isLessThan(months3);
      assertNotSame(months0, months4);
      assertSame(months0, months3);
      assertNotSame(months0, months1);
      assertSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months1, months5);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertSame(months1, months4);
      assertNotSame(months3, months1);
      assertNotSame(months3, months4);
      assertSame(months3, months2);
      assertNotSame(months3, months5);
      assertSame(months3, months0);
      assertFalse(boolean1);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months3.size());
      assertEquals(7, months3.getMonths());
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months3.equals((Object)months5));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      assertNotNull(months0);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      
      int int0 = 0;
      Months months1 = Months.months(0);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months1.EIGHT.negated();
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals((-8), months2.getMonths());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      
      Months months3 = months1.TWELVE.minus(0);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotNull(months3);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(12, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      
      boolean boolean0 = months1.MIN_VALUE.equals(months0);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      
      int int1 = months1.ONE.compareTo((BaseSingleFieldPeriod) months0);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertEquals((-1), int1);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(int1 == int0);
      
      int int2 = months0.SEVEN.getValue(0);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertEquals(7, int2);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Months months4 = months0.negated();
      assertNotSame(months0, months3);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months4, months2);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months3);
      assertNotNull(months4);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals((-2147483647), months4.getMonths());
      assertEquals(1, months4.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      
      Months months5 = months4.dividedBy((-1));
      assertNotSame(months0, months3);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertSame(months0, months5);
      assertNotSame(months4, months2);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months5);
      assertNotSame(months4, months3);
      assertNotSame(months5, months1);
      assertNotSame(months5, months4);
      assertSame(months5, months0);
      assertNotSame(months5, months2);
      assertNotSame(months5, months3);
      assertNotNull(months5);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals((-2147483647), months4.getMonths());
      assertEquals(1, months4.size());
      assertEquals(Integer.MAX_VALUE, months5.getMonths());
      assertEquals(1, months5.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months3));
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      // Undeclared exception!
      try { 
        Months.parseMonths("UulWu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"UulWu\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      
      Months months1 = Months.TWO;
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months1.size());
      assertEquals(2, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      int int0 = months0.NINE.compareTo((BaseSingleFieldPeriod) months1);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, int0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(2, months1.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months0.TWO.multipliedBy(6);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(12, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      Months months3 = Months.NINE;
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertNotNull(months3);
      assertEquals(9, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      PeriodType periodType1 = months3.MAX_VALUE.getPeriodType();
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(9, months3.getMonths());
      assertEquals(1, months3.size());
      assertEquals(1, periodType1.size());
      assertEquals("Months", periodType1.getName());
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      
      Months months4 = Months.months(1);
      assertNotSame(months4, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months0);
      assertNotSame(months4, months3);
      assertNotNull(months4);
      assertEquals(1, months4.size());
      assertEquals(1, months4.getMonths());
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months3));
      
      int int1 = months0.EIGHT.compareTo((BaseSingleFieldPeriod) months3);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months3, months0);
      assertNotSame(months3, months4);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertEquals((-1), int1);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(9, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(int1 == int0);
      
      Months months5 = months3.dividedBy((-1052));
      assertNotSame(months3, months5);
      assertNotSame(months3, months0);
      assertNotSame(months3, months4);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertNotSame(months5, months0);
      assertNotSame(months5, months2);
      assertNotSame(months5, months1);
      assertNotSame(months5, months4);
      assertNotSame(months5, months3);
      assertNotNull(months5);
      assertEquals(9, months3.getMonths());
      assertEquals(1, months3.size());
      assertEquals(1, months5.size());
      assertEquals(0, months5.getMonths());
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months3));
      
      Months months6 = Months.months((-761));
      assertNotSame(months6, months2);
      assertNotSame(months6, months3);
      assertNotSame(months6, months4);
      assertNotSame(months6, months5);
      assertNotSame(months6, months0);
      assertNotSame(months6, months1);
      assertNotNull(months6);
      assertEquals((-761), months6.getMonths());
      assertEquals(1, months6.size());
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Months months0 = Months.NINE;
      assertNotNull(months0);
      assertEquals(9, months0.getMonths());
      assertEquals(1, months0.size());
      
      int int0 = 12;
      Months months1 = months0.TWELVE.minus(12);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(9, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months0.ELEVEN.minus(months1);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals(9, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(11, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      
      // Undeclared exception!
      try { 
        months2.NINE.getValue(12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 0;
      Months months0 = Months.months(0);
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      
      String string0 = months0.NINE.toString();
      assertNotNull(string0);
      assertEquals("P9M", string0);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      
      Months months1 = months0.plus((Months) null);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      
      // Undeclared exception!
      try { 
        Months.parseMonths("o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"o\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Months months0 = Months.TWO;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      
      Months months1 = Months.months(0);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      boolean boolean0 = months0.ONE.equals(months1);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months1.EIGHT.negated();
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-8), months2.getMonths());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      Months months3 = months1.TWELVE.minus(0);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertNotSame(months3, months0);
      assertNotNull(months3);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(12, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      
      boolean boolean1 = months1.MIN_VALUE.equals(months0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertFalse(boolean1);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertTrue(boolean1 == boolean0);
      
      int int0 = months1.ONE.compareTo((BaseSingleFieldPeriod) months0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertEquals((-1), int0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      
      Months months4 = months0.negated();
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertNotSame(months4, months0);
      assertNotNull(months4);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals((-2), months4.getMonths());
      assertEquals(1, months4.size());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Months months5 = months4.minus(0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months5);
      assertSame(months4, months5);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertNotSame(months4, months0);
      assertNotSame(months5, months0);
      assertSame(months5, months4);
      assertNotSame(months5, months3);
      assertNotSame(months5, months1);
      assertNotSame(months5, months2);
      assertNotNull(months5);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals((-2), months4.getMonths());
      assertEquals(1, months4.size());
      assertEquals((-2), months5.getMonths());
      assertEquals(1, months5.size());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months2));
      
      DurationFieldType durationFieldType0 = months5.getFieldType(0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months5);
      assertSame(months4, months5);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertNotSame(months4, months0);
      assertNotSame(months5, months0);
      assertSame(months5, months4);
      assertNotSame(months5, months3);
      assertNotSame(months5, months1);
      assertNotSame(months5, months2);
      assertNotNull(durationFieldType0);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals((-2), months4.getMonths());
      assertEquals(1, months4.size());
      assertEquals((-2), months5.getMonths());
      assertEquals(1, months5.size());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months2));
      
      int int1 = months5.THREE.get(durationFieldType0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months5);
      assertSame(months4, months5);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertNotSame(months4, months0);
      assertNotSame(months5, months0);
      assertSame(months5, months4);
      assertNotSame(months5, months3);
      assertNotSame(months5, months1);
      assertNotSame(months5, months2);
      assertEquals(3, int1);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals((-2), months4.getMonths());
      assertEquals(1, months4.size());
      assertEquals((-2), months5.getMonths());
      assertEquals(1, months5.size());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months2));
      assertFalse(int1 == int0);
      
      Months months6 = Months.months(3);
      assertNotSame(months6, months1);
      assertNotSame(months6, months0);
      assertNotSame(months6, months5);
      assertNotSame(months6, months3);
      assertNotSame(months6, months2);
      assertNotSame(months6, months4);
      assertNotNull(months6);
      assertEquals(1, months6.size());
      assertEquals(3, months6.getMonths());
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months4));
      
      boolean boolean2 = months4.isGreaterThan(months6);
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months6);
      assertNotSame(months0, months5);
      assertSame(months4, months5);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertNotSame(months4, months0);
      assertNotSame(months4, months6);
      assertNotSame(months6, months1);
      assertNotSame(months6, months0);
      assertNotSame(months6, months5);
      assertNotSame(months6, months3);
      assertNotSame(months6, months2);
      assertNotSame(months6, months4);
      assertFalse(boolean2);
      assertEquals(1, months0.size());
      assertEquals(2, months0.getMonths());
      assertEquals((-2), months4.getMonths());
      assertEquals(1, months4.size());
      assertEquals(1, months6.size());
      assertEquals(3, months6.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months6));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months4));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Months months7 = Months.months(2104);
      assertNotSame(months7, months6);
      assertNotSame(months7, months0);
      assertNotSame(months7, months5);
      assertNotSame(months7, months2);
      assertNotSame(months7, months4);
      assertNotSame(months7, months1);
      assertNotSame(months7, months3);
      assertNotNull(months7);
      assertEquals(2104, months7.getMonths());
      assertEquals(1, months7.size());
      assertFalse(months7.equals((Object)months6));
      assertFalse(months7.equals((Object)months0));
      assertFalse(months7.equals((Object)months5));
      assertFalse(months7.equals((Object)months2));
      assertFalse(months7.equals((Object)months4));
      assertFalse(months7.equals((Object)months1));
      assertFalse(months7.equals((Object)months3));
      
      Months months8 = months7.ONE.minus(months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months6);
      assertNotSame(months1, months7);
      assertNotSame(months1, months4);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months8);
      assertNotSame(months1, months5);
      assertNotSame(months2, months1);
      assertNotSame(months2, months4);
      assertNotSame(months2, months8);
      assertNotSame(months2, months3);
      assertNotSame(months2, months5);
      assertNotSame(months2, months0);
      assertNotSame(months2, months7);
      assertNotSame(months2, months6);
      assertNotSame(months7, months6);
      assertNotSame(months7, months0);
      assertNotSame(months7, months5);
      assertNotSame(months7, months8);
      assertNotSame(months7, months2);
      assertNotSame(months7, months4);
      assertNotSame(months7, months1);
      assertNotSame(months7, months3);
      assertNotSame(months8, months5);
      assertNotSame(months8, months7);
      assertNotSame(months8, months6);
      assertNotSame(months8, months2);
      assertNotSame(months8, months1);
      assertNotSame(months8, months4);
      assertNotSame(months8, months3);
      assertNotSame(months8, months0);
      assertNotNull(months8);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-8), months2.getMonths());
      assertEquals(2104, months7.getMonths());
      assertEquals(1, months7.size());
      assertEquals(1, months8.size());
      assertEquals(9, months8.getMonths());
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months7));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months7));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months7.equals((Object)months6));
      assertFalse(months7.equals((Object)months0));
      assertFalse(months7.equals((Object)months5));
      assertFalse(months7.equals((Object)months2));
      assertFalse(months7.equals((Object)months4));
      assertFalse(months7.equals((Object)months1));
      assertFalse(months7.equals((Object)months3));
      assertFalse(months8.equals((Object)months5));
      assertFalse(months8.equals((Object)months7));
      assertFalse(months8.equals((Object)months6));
      assertFalse(months8.equals((Object)months2));
      assertFalse(months8.equals((Object)months1));
      assertFalse(months8.equals((Object)months4));
      assertFalse(months8.equals((Object)months3));
      assertFalse(months8.equals((Object)months0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      
      Months months1 = Months.months(0);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months1.EIGHT.negated();
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals((-8), months2.getMonths());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      
      Months months3 = months1.TWELVE.minus(0);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotNull(months3);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(12, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      
      boolean boolean0 = months1.MIN_VALUE.equals(months0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      
      int int0 = months1.ONE.compareTo((BaseSingleFieldPeriod) months0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertEquals((-1), int0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      
      int int1 = months0.SEVEN.getValue(0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertEquals(7, int1);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(int1 == int0);
      
      Months months4 = months0.negated();
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months4);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotNull(months4);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals((-2147483647), months4.getMonths());
      assertEquals(1, months4.size());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Months months5 = months4.minus(0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months4);
      assertNotSame(months0, months5);
      assertSame(months4, months5);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months5, months2);
      assertSame(months5, months4);
      assertNotSame(months5, months1);
      assertNotSame(months5, months3);
      assertNotSame(months5, months0);
      assertNotNull(months5);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals((-2147483647), months4.getMonths());
      assertEquals(1, months4.size());
      assertEquals(1, months5.size());
      assertEquals((-2147483647), months5.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months0));
      
      boolean boolean1 = months0.isGreaterThan(months5);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months4);
      assertNotSame(months0, months5);
      assertSame(months4, months5);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months5, months2);
      assertSame(months5, months4);
      assertNotSame(months5, months1);
      assertNotSame(months5, months3);
      assertNotSame(months5, months0);
      assertTrue(boolean1);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals((-2147483647), months4.getMonths());
      assertEquals(1, months4.size());
      assertEquals(1, months5.size());
      assertEquals((-2147483647), months5.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months0));
      assertFalse(boolean1 == boolean0);
      
      Months months6 = Months.months(2104);
      assertNotSame(months6, months1);
      assertNotSame(months6, months3);
      assertNotSame(months6, months4);
      assertNotSame(months6, months5);
      assertNotSame(months6, months0);
      assertNotSame(months6, months2);
      assertNotNull(months6);
      assertEquals(2104, months6.getMonths());
      assertEquals(1, months6.size());
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months2));
      
      Months months7 = months6.ONE.minus(months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months7);
      assertNotSame(months1, months6);
      assertNotSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months1, months3);
      assertNotSame(months1, months4);
      assertNotSame(months2, months7);
      assertNotSame(months2, months0);
      assertNotSame(months2, months6);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months4);
      assertNotSame(months2, months5);
      assertNotSame(months6, months1);
      assertNotSame(months6, months3);
      assertNotSame(months6, months4);
      assertNotSame(months6, months5);
      assertNotSame(months6, months0);
      assertNotSame(months6, months7);
      assertNotSame(months6, months2);
      assertNotSame(months7, months5);
      assertNotSame(months7, months6);
      assertNotSame(months7, months2);
      assertNotSame(months7, months0);
      assertNotSame(months7, months3);
      assertNotSame(months7, months4);
      assertNotSame(months7, months1);
      assertNotNull(months7);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals((-8), months2.getMonths());
      assertEquals(2104, months6.getMonths());
      assertEquals(1, months6.size());
      assertEquals(9, months7.getMonths());
      assertEquals(1, months7.size());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months7.equals((Object)months5));
      assertFalse(months7.equals((Object)months6));
      assertFalse(months7.equals((Object)months2));
      assertFalse(months7.equals((Object)months0));
      assertFalse(months7.equals((Object)months3));
      assertFalse(months7.equals((Object)months4));
      assertFalse(months7.equals((Object)months1));
      
      Months months8 = months2.plus(7);
      assertNotSame(months1, months0);
      assertNotSame(months1, months7);
      assertNotSame(months1, months6);
      assertNotSame(months1, months2);
      assertNotSame(months1, months5);
      assertNotSame(months1, months3);
      assertNotSame(months1, months8);
      assertNotSame(months1, months4);
      assertNotSame(months2, months7);
      assertNotSame(months2, months8);
      assertNotSame(months2, months0);
      assertNotSame(months2, months6);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months4);
      assertNotSame(months2, months5);
      assertNotSame(months8, months4);
      assertNotSame(months8, months3);
      assertNotSame(months8, months5);
      assertNotSame(months8, months7);
      assertNotSame(months8, months0);
      assertNotSame(months8, months6);
      assertNotSame(months8, months2);
      assertNotSame(months8, months1);
      assertNotNull(months8);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals((-8), months2.getMonths());
      assertEquals((-1), months8.getMonths());
      assertEquals(1, months8.size());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months7));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months2.equals((Object)months7));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months8.equals((Object)months4));
      assertFalse(months8.equals((Object)months3));
      assertFalse(months8.equals((Object)months5));
      assertFalse(months8.equals((Object)months7));
      assertFalse(months8.equals((Object)months0));
      assertFalse(months8.equals((Object)months6));
      assertFalse(months8.equals((Object)months2));
      assertFalse(months8.equals((Object)months1));
      
      DurationFieldType durationFieldType0 = months4.getFieldType();
      assertNotSame(months0, months7);
      assertNotSame(months0, months6);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months8);
      assertNotSame(months0, months3);
      assertNotSame(months0, months4);
      assertNotSame(months0, months5);
      assertNotSame(months4, months7);
      assertSame(months4, months5);
      assertNotSame(months4, months6);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months8);
      assertNotSame(months4, months1);
      assertNotNull(durationFieldType0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals((-2147483647), months4.getMonths());
      assertEquals(1, months4.size());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertFalse(months0.equals((Object)months7));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months8));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months4.equals((Object)months7));
      assertFalse(months4.equals((Object)months6));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months8));
      assertFalse(months4.equals((Object)months1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      Months months1 = months0.EIGHT.negated();
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals((-8), months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months0.SEVEN.plus(months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals((-8), months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-1), months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      Months months3 = months0.ONE.minus(months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotNull(months3);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals((-8), months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(9, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotNull(durationFieldType0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      
      int int0 = (-1);
      // Undeclared exception!
      try { 
        months0.plus((-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -1
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      
      int int0 = 0;
      Months months1 = Months.months(0);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months1.EIGHT.negated();
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-8), months2.getMonths());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      Months months3 = months2.SIX.plus(months1);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotNull(months3);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-8), months2.getMonths());
      assertEquals(6, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      
      Months months4 = months1.TWELVE.minus(0);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months4);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotNull(months4);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(12, months4.getMonths());
      assertEquals(1, months4.size());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      
      boolean boolean0 = months1.MIN_VALUE.equals(months0);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months4);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months4));
      
      int int1 = months1.ONE.compareTo((BaseSingleFieldPeriod) months0);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months4);
      assertEquals((-1), int1);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months4));
      assertFalse(int1 == int0);
      
      int int2 = months0.SEVEN.getValue(0);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertEquals(7, int2);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Months months5 = months0.negated();
      assertNotSame(months0, months5);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months5, months0);
      assertNotSame(months5, months4);
      assertNotSame(months5, months3);
      assertNotSame(months5, months1);
      assertNotSame(months5, months2);
      assertNotNull(months5);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months5.size());
      assertEquals((-2147483647), months5.getMonths());
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months2));
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Months months6 = months4.multipliedBy(2662);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months5);
      assertNotSame(months1, months4);
      assertNotSame(months1, months6);
      assertNotSame(months4, months5);
      assertNotSame(months4, months2);
      assertNotSame(months4, months6);
      assertNotSame(months4, months1);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months6, months5);
      assertNotSame(months6, months0);
      assertNotSame(months6, months2);
      assertNotSame(months6, months1);
      assertNotSame(months6, months3);
      assertNotSame(months6, months4);
      assertNotNull(months6);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(12, months4.getMonths());
      assertEquals(1, months4.size());
      assertEquals(31944, months6.getMonths());
      assertEquals(1, months6.size());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months4.equals((Object)months5));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months4));
      
      // Undeclared exception!
      try { 
        Months.parseMonths("UulWu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"UulWu\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Months months0 = Months.FIVE;
      assertNotNull(months0);
      assertEquals(5, months0.getMonths());
      assertEquals(1, months0.size());
      
      int int0 = months0.getMonths();
      assertEquals(5, int0);
      assertEquals(5, months0.getMonths());
      assertEquals(1, months0.size());
      
      String string0 = "{h@K{6VZ^=hU>'C";
      Months months1 = months0.THREE.plus(5);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(5, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(8, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      MutablePeriod mutablePeriod0 = months1.toMutablePeriod();
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(mutablePeriod0);
      assertEquals(5, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(8, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      
      // Undeclared exception!
      try { 
        Months.parseMonths(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"{h@K{6VZ^=hU>'C\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      
      Months months1 = Months.months(0);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months1.EIGHT.negated();
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-8), months2.getMonths());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      Months months3 = months1.TWELVE.minus(0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months3);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotNull(months3);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months3.size());
      assertEquals(12, months3.getMonths());
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      
      boolean boolean0 = months1.MIN_VALUE.equals(months0);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months3);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months3));
      
      int int0 = months1.ONE.compareTo((BaseSingleFieldPeriod) months0);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months3);
      assertEquals((-1), int0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months3));
      
      int int1 = months0.SEVEN.getValue(0);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertEquals(7, int1);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(int1 == int0);
      
      Months months4 = months0.negated();
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotNull(months4);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months4.size());
      assertEquals((-2147483647), months4.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      Months months5 = Months.TWELVE;
      assertSame(months5, months3);
      assertNotSame(months5, months4);
      assertNotSame(months5, months1);
      assertNotSame(months5, months2);
      assertNotSame(months5, months0);
      assertNotNull(months5);
      assertEquals(12, months5.getMonths());
      assertEquals(1, months5.size());
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months0));
      
      Months months6 = months4.minus(0);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months0, months5);
      assertNotSame(months0, months6);
      assertSame(months4, months6);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months5);
      assertNotSame(months6, months3);
      assertNotSame(months6, months0);
      assertNotSame(months6, months1);
      assertNotSame(months6, months2);
      assertSame(months6, months4);
      assertNotSame(months6, months5);
      assertNotNull(months6);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months4.size());
      assertEquals((-2147483647), months4.getMonths());
      assertEquals((-2147483647), months6.getMonths());
      assertEquals(1, months6.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months5));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months5));
      
      Months months7 = Months.months(2104);
      assertNotSame(months7, months0);
      assertNotSame(months7, months5);
      assertNotSame(months7, months6);
      assertNotSame(months7, months4);
      assertNotSame(months7, months1);
      assertNotSame(months7, months2);
      assertNotSame(months7, months3);
      assertNotNull(months7);
      assertEquals(2104, months7.getMonths());
      assertEquals(1, months7.size());
      assertFalse(months7.equals((Object)months0));
      assertFalse(months7.equals((Object)months5));
      assertFalse(months7.equals((Object)months6));
      assertFalse(months7.equals((Object)months4));
      assertFalse(months7.equals((Object)months1));
      assertFalse(months7.equals((Object)months2));
      assertFalse(months7.equals((Object)months3));
      
      Months months8 = months7.ONE.minus(months2);
      assertNotSame(months1, months2);
      assertNotSame(months1, months4);
      assertNotSame(months1, months8);
      assertNotSame(months1, months7);
      assertNotSame(months1, months0);
      assertNotSame(months1, months5);
      assertNotSame(months1, months6);
      assertNotSame(months1, months3);
      assertNotSame(months2, months7);
      assertNotSame(months2, months6);
      assertNotSame(months2, months3);
      assertNotSame(months2, months8);
      assertNotSame(months2, months4);
      assertNotSame(months2, months1);
      assertNotSame(months2, months5);
      assertNotSame(months2, months0);
      assertNotSame(months7, months0);
      assertNotSame(months7, months5);
      assertNotSame(months7, months8);
      assertNotSame(months7, months6);
      assertNotSame(months7, months4);
      assertNotSame(months7, months1);
      assertNotSame(months7, months2);
      assertNotSame(months7, months3);
      assertNotSame(months8, months6);
      assertNotSame(months8, months7);
      assertNotSame(months8, months2);
      assertNotSame(months8, months1);
      assertNotSame(months8, months4);
      assertNotSame(months8, months0);
      assertNotSame(months8, months5);
      assertNotSame(months8, months3);
      assertNotNull(months8);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-8), months2.getMonths());
      assertEquals(2104, months7.getMonths());
      assertEquals(1, months7.size());
      assertEquals(1, months8.size());
      assertEquals(9, months8.getMonths());
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months7));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months2.equals((Object)months7));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months7.equals((Object)months0));
      assertFalse(months7.equals((Object)months5));
      assertFalse(months7.equals((Object)months6));
      assertFalse(months7.equals((Object)months4));
      assertFalse(months7.equals((Object)months1));
      assertFalse(months7.equals((Object)months2));
      assertFalse(months7.equals((Object)months3));
      assertFalse(months8.equals((Object)months6));
      assertFalse(months8.equals((Object)months7));
      assertFalse(months8.equals((Object)months2));
      assertFalse(months8.equals((Object)months1));
      assertFalse(months8.equals((Object)months4));
      assertFalse(months8.equals((Object)months0));
      assertFalse(months8.equals((Object)months5));
      assertFalse(months8.equals((Object)months3));
      
      Months months9 = months5.plus(7);
      assertNotSame(months5, months7);
      assertNotSame(months5, months9);
      assertSame(months5, months3);
      assertNotSame(months5, months6);
      assertNotSame(months5, months4);
      assertNotSame(months5, months1);
      assertNotSame(months5, months8);
      assertNotSame(months5, months2);
      assertNotSame(months5, months0);
      assertNotSame(months9, months1);
      assertNotSame(months9, months4);
      assertNotSame(months9, months0);
      assertNotSame(months9, months3);
      assertNotSame(months9, months5);
      assertNotSame(months9, months6);
      assertNotSame(months9, months7);
      assertNotSame(months9, months2);
      assertNotSame(months9, months8);
      assertNotNull(months9);
      assertEquals(12, months5.getMonths());
      assertEquals(1, months5.size());
      assertEquals(19, months9.getMonths());
      assertEquals(1, months9.size());
      assertFalse(months5.equals((Object)months7));
      assertFalse(months5.equals((Object)months6));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months8));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months9.equals((Object)months1));
      assertFalse(months9.equals((Object)months4));
      assertFalse(months9.equals((Object)months0));
      assertFalse(months9.equals((Object)months3));
      assertFalse(months9.equals((Object)months5));
      assertFalse(months9.equals((Object)months6));
      assertFalse(months9.equals((Object)months7));
      assertFalse(months9.equals((Object)months2));
      assertFalse(months9.equals((Object)months8));
      
      DurationFieldType durationFieldType0 = months5.getFieldType();
      assertNotSame(months5, months7);
      assertNotSame(months5, months9);
      assertSame(months5, months3);
      assertNotSame(months5, months6);
      assertNotSame(months5, months4);
      assertNotSame(months5, months1);
      assertNotSame(months5, months8);
      assertNotSame(months5, months2);
      assertNotSame(months5, months0);
      assertNotNull(durationFieldType0);
      assertEquals(12, months5.getMonths());
      assertEquals(1, months5.size());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertFalse(months5.equals((Object)months7));
      assertFalse(months5.equals((Object)months9));
      assertFalse(months5.equals((Object)months6));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months8));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      
      Months months1 = Months.months(0);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months1.EIGHT.negated();
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals((-8), months2.getMonths());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      Months months3 = months1.TWELVE.minus(0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotNull(months3);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(12, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      
      boolean boolean0 = months1.MIN_VALUE.equals(months0);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      
      int int0 = months1.ONE.compareTo((BaseSingleFieldPeriod) months0);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertEquals((-1), int0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      
      int int1 = months0.SEVEN.getValue(0);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertEquals(7, int1);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(int1 == int0);
      
      Months months4 = months0.negated();
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertNotSame(months4, months0);
      assertNotNull(months4);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals((-2147483647), months4.getMonths());
      assertEquals(1, months4.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Months months5 = months4.minus(0);
      assertNotSame(months0, months5);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertSame(months4, months5);
      assertNotSame(months4, months1);
      assertNotSame(months4, months0);
      assertNotSame(months5, months1);
      assertNotSame(months5, months0);
      assertNotSame(months5, months2);
      assertSame(months5, months4);
      assertNotSame(months5, months3);
      assertNotNull(months5);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals((-2147483647), months4.getMonths());
      assertEquals(1, months4.size());
      assertEquals((-2147483647), months5.getMonths());
      assertEquals(1, months5.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months3));
      
      Months months6 = Months.months(2104);
      assertNotSame(months6, months5);
      assertNotSame(months6, months4);
      assertNotSame(months6, months3);
      assertNotSame(months6, months1);
      assertNotSame(months6, months0);
      assertNotSame(months6, months2);
      assertNotNull(months6);
      assertEquals(2104, months6.getMonths());
      assertEquals(1, months6.size());
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months2));
      
      Months months7 = months6.ONE.minus(months2);
      assertNotSame(months1, months4);
      assertNotSame(months1, months5);
      assertNotSame(months1, months6);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months7);
      assertNotSame(months2, months1);
      assertNotSame(months2, months6);
      assertNotSame(months2, months3);
      assertNotSame(months2, months4);
      assertNotSame(months2, months5);
      assertNotSame(months2, months0);
      assertNotSame(months2, months7);
      assertNotSame(months6, months5);
      assertNotSame(months6, months4);
      assertNotSame(months6, months3);
      assertNotSame(months6, months7);
      assertNotSame(months6, months1);
      assertNotSame(months6, months0);
      assertNotSame(months6, months2);
      assertNotSame(months7, months0);
      assertNotSame(months7, months1);
      assertNotSame(months7, months4);
      assertNotSame(months7, months6);
      assertNotSame(months7, months5);
      assertNotSame(months7, months3);
      assertNotSame(months7, months2);
      assertNotNull(months7);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals((-8), months2.getMonths());
      assertEquals(2104, months6.getMonths());
      assertEquals(1, months6.size());
      assertEquals(9, months7.getMonths());
      assertEquals(1, months7.size());
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months7.equals((Object)months0));
      assertFalse(months7.equals((Object)months1));
      assertFalse(months7.equals((Object)months4));
      assertFalse(months7.equals((Object)months6));
      assertFalse(months7.equals((Object)months5));
      assertFalse(months7.equals((Object)months3));
      assertFalse(months7.equals((Object)months2));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Months months0 = Months.TEN;
      assertNotNull(months0);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = months0.MIN_VALUE.dividedBy((-3230));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(664855, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months0.negated();
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months2.size());
      assertEquals((-10), months2.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      Months months3 = months2.EIGHT.multipliedBy((-3230));
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertNotSame(months3, months0);
      assertNotNull(months3);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months2.size());
      assertEquals((-10), months2.getMonths());
      assertEquals(1, months3.size());
      assertEquals((-25840), months3.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      
      String string0 = months1.toString();
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotNull(string0);
      assertEquals("P664855M", string0);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(664855, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Months months0 = Months.ONE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(1, months0.getMonths());
      
      String string0 = months0.toString();
      assertNotNull(string0);
      assertEquals("P1M", string0);
      assertEquals(1, months0.size());
      assertEquals(1, months0.getMonths());
      
      Months months1 = Months.TWO;
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(2, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = Months.parseMonths((String) null);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        months1.FOUR.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Months", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      assertNotNull(months0);
      assertEquals(11, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = months0.minus(Integer.MAX_VALUE);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(11, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals((-2147483636), months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Months months0 = Months.FOUR;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals(1, months0.size());
      assertEquals(4, months0.getMonths());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Months months0 = Months.EIGHT;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      
      int int0 = 2;
      Months months1 = months0.FIVE.minus(2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(3, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      Period period0 = months0.EIGHT.toPeriod();
      assertNotSame(months0, months1);
      assertNotNull(period0);
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertFalse(months0.equals((Object)months1));
      
      Months months2 = Months.months(int0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(1, months2.size());
      assertEquals(2, months2.getMonths());
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      PeriodType periodType0 = months1.FOUR.getPeriodType();
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotNull(periodType0);
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(3, months1.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      
      Months months3 = months0.FOUR.plus(int0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertNotNull(months3);
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertEquals(6, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      
      Months months4 = months3.ELEVEN.minus(months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months1, months4);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months4);
      assertNotSame(months3, months1);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotNull(months4);
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(3, months1.getMonths());
      assertEquals(6, months3.getMonths());
      assertEquals(1, months3.size());
      assertEquals(8, months4.getMonths());
      assertEquals(1, months4.size());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      
      PeriodType periodType1 = PeriodType.months();
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Months", periodType1.getName());
      assertEquals(1, periodType1.size());
      
      int int1 = (-1273);
      int int2 = 20503125;
      Months months5 = months2.TEN.minus(int2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months2, months5);
      assertNotSame(months2, months4);
      assertNotSame(months5, months4);
      assertNotSame(months5, months1);
      assertNotSame(months5, months3);
      assertNotSame(months5, months0);
      assertNotSame(months5, months2);
      assertNotNull(months5);
      assertEquals(1, months2.size());
      assertEquals(2, months2.getMonths());
      assertEquals((-20503115), months5.getMonths());
      assertEquals(1, months5.size());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months4));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months2));
      
      Months months6 = months2.EIGHT.plus(int1);
      assertNotSame(months2, months6);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months2, months5);
      assertNotSame(months2, months4);
      assertNotSame(months6, months0);
      assertNotSame(months6, months3);
      assertNotSame(months6, months5);
      assertNotSame(months6, months2);
      assertNotSame(months6, months4);
      assertNotSame(months6, months1);
      assertNotNull(months6);
      assertEquals(1, months2.size());
      assertEquals(2, months2.getMonths());
      assertEquals(1, months6.size());
      assertEquals((-1265), months6.getMonths());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months4));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months1));
      
      boolean boolean0 = months0.isLessThan(months2);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months6);
      assertSame(months0, months4);
      assertNotSame(months0, months5);
      assertNotSame(months0, months3);
      assertNotSame(months2, months6);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months2, months5);
      assertNotSame(months2, months4);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertEquals(1, months2.size());
      assertEquals(2, months2.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months3));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months4));
      
      boolean boolean1 = months0.isLessThan(months2);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months6);
      assertSame(months0, months4);
      assertNotSame(months0, months5);
      assertNotSame(months0, months3);
      assertNotSame(months2, months6);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months2, months5);
      assertNotSame(months2, months4);
      assertFalse(boolean1);
      assertEquals(1, months0.size());
      assertEquals(8, months0.getMonths());
      assertEquals(1, months2.size());
      assertEquals(2, months2.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months3));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months4));
      assertTrue(boolean1 == boolean0);
      
      int int3 = 0;
      Months months7 = months2.multipliedBy(int3);
      assertNotSame(months7, months2);
      assertNotSame(months7, months5);
      assertNotSame(months7, months4);
      assertNotSame(months7, months3);
      assertNotSame(months7, months6);
      assertNotSame(months7, months1);
      assertNotSame(months7, months0);
      assertNotSame(months2, months6);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertNotSame(months2, months7);
      assertNotSame(months2, months0);
      assertNotSame(months2, months5);
      assertNotSame(months2, months4);
      assertNotNull(months7);
      assertEquals(1, months7.size());
      assertEquals(0, months7.getMonths());
      assertEquals(1, months2.size());
      assertEquals(2, months2.getMonths());
      assertFalse(months7.equals((Object)months2));
      assertFalse(months7.equals((Object)months5));
      assertFalse(months7.equals((Object)months4));
      assertFalse(months7.equals((Object)months3));
      assertFalse(months7.equals((Object)months6));
      assertFalse(months7.equals((Object)months1));
      assertFalse(months7.equals((Object)months0));
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months4));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      DurationFieldType durationFieldType0 = months2.getFieldType();
      assertNotSame(months2, months6);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertNotSame(months2, months7);
      assertNotSame(months2, months0);
      assertNotSame(months2, months5);
      assertNotSame(months2, months4);
      assertNotNull(durationFieldType0);
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(1, months2.size());
      assertEquals(2, months2.getMonths());
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months7));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months4));
      
      String string0 = "%3 :}u`,%";
      // Undeclared exception!
      try { 
        Months.parseMonths(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"%3 :}u`,%\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      
      Months months1 = Months.SIX;
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(6, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      boolean boolean0 = months1.TWO.equals(months0);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(6, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months0.SEVEN.minus(months1);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(6, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals(1, months2.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      PeriodType periodType0 = months0.TWO.getPeriodType();
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotNull(periodType0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      
      Months months3 = months0.TWELVE.minus(months1);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertSame(months1, months3);
      assertNotSame(months3, months2);
      assertSame(months3, months1);
      assertNotSame(months3, months0);
      assertNotNull(months3);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(6, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(6, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      
      // Undeclared exception!
      try { 
        months0.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      
      PeriodType periodType0 = months0.FIVE.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Months months1 = months0.dividedBy((-505));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-4252442), months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      int int0 = months1.FIVE.getValue(0);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(5, int0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-4252442), months1.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      
      boolean boolean0 = months1.isLessThan(months0);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertTrue(boolean0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-4252442), months1.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      
      String string0 = months0.toString();
      assertNotSame(months0, months1);
      assertNotNull(string0);
      assertEquals("P2147483647M", string0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertFalse(months0.equals((Object)months1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Months months0 = Months.months(Integer.MIN_VALUE);
      assertNotNull(months0);
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      
      // Undeclared exception!
      try { 
        months0.MIN_VALUE.minus(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      
      int int0 = 4;
      Months months1 = Months.months(4);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      // Undeclared exception!
      try { 
        months0.MIN_VALUE.minus(months1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -4
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Months months0 = Months.ZERO;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      
      Months months1 = Months.MIN_VALUE;
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months1.size());
      assertEquals(Integer.MIN_VALUE, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      DurationFieldType durationFieldType0 = months1.getFieldType();
      assertNotSame(months1, months0);
      assertNotNull(durationFieldType0);
      assertEquals(1, months1.size());
      assertEquals(Integer.MIN_VALUE, months1.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertFalse(months1.equals((Object)months0));
      
      int int0 = months1.FIVE.get(durationFieldType0);
      assertNotSame(months1, months0);
      assertEquals(5, int0);
      assertEquals(1, months1.size());
      assertEquals(Integer.MIN_VALUE, months1.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months0.plus(months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months0);
      assertSame(months2, months1);
      assertNotNull(months2);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(Integer.MIN_VALUE, months1.getMonths());
      assertEquals(Integer.MIN_VALUE, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      
      int int1 = months0.SIX.get(durationFieldType0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertSame(months1, months2);
      assertNotSame(months1, months0);
      assertEquals(6, int1);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(Integer.MIN_VALUE, months1.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        months2.plus(months1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 922;
      Months months0 = Months.months(922);
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(922, months0.getMonths());
      
      // Undeclared exception!
      try { 
        months0.EIGHT.getFieldType(922);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 922
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = Months.FOUR;
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months0.plus(months1);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals(11, months2.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      String string0 = months2.toString();
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(string0);
      assertEquals("P11M", string0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals(11, months2.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      int int0 = 1293;
      Months months3 = months1.multipliedBy(1293);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotNull(months3);
      assertEquals(4, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(5172, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      
      int int1 = 28181250;
      // Undeclared exception!
      try { 
        months3.MIN_VALUE.getValue(28181250);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 28181250
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      
      int int0 = months0.getMonths();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        months0.THREE.plus(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 3 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Months months0 = Months.TEN;
      assertNotNull(months0);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      
      int int0 = 0;
      Months months1 = months0.TWELVE.minus(0);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(12, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months0.ELEVEN.minus(months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-1), months2.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      int int1 = months2.NINE.getValue(0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertEquals(9, int1);
      assertEquals(10, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-1), months2.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        months0.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Months", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      int int0 = months0.getMonths();
      assertEquals(6, int0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      
      Months months1 = months0.plus(6);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(12, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months1.negated();
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-12), months2.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      
      int int1 = (-2653);
      Months months3 = months1.NINE.minus((-2653));
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertNotSame(months3, months0);
      assertNotNull(months3);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(12, months1.getMonths());
      assertEquals(2662, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      
      Months months4 = months1.FIVE.dividedBy((-2653));
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months4);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotNull(months4);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(12, months1.getMonths());
      assertEquals(0, months4.getMonths());
      assertEquals(1, months4.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      
      int int2 = 4510;
      Months months5 = Months.months((-2653));
      assertNotSame(months5, months3);
      assertNotSame(months5, months1);
      assertNotSame(months5, months2);
      assertNotSame(months5, months4);
      assertNotSame(months5, months0);
      assertNotNull(months5);
      assertEquals(1, months5.size());
      assertEquals((-2653), months5.getMonths());
      assertFalse(months5.equals((Object)months3));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months0));
      
      boolean boolean0 = months0.FOUR.equals((Object) null);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months5);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months5));
      
      Months months6 = months2.NINE.plus(4510);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months6);
      assertNotSame(months0, months5);
      assertNotSame(months1, months0);
      assertNotSame(months1, months6);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months4);
      assertNotSame(months1, months5);
      assertNotSame(months2, months3);
      assertNotSame(months2, months4);
      assertNotSame(months2, months6);
      assertNotSame(months2, months5);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotSame(months6, months2);
      assertNotSame(months6, months3);
      assertNotSame(months6, months5);
      assertNotSame(months6, months1);
      assertNotSame(months6, months4);
      assertNotSame(months6, months0);
      assertNotNull(months6);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-12), months2.getMonths());
      assertEquals(4519, months6.getMonths());
      assertEquals(1, months6.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months0));
      
      boolean boolean1 = months6.SEVEN.equals(months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months6);
      assertNotSame(months0, months5);
      assertNotSame(months1, months0);
      assertNotSame(months1, months6);
      assertNotSame(months1, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months4);
      assertNotSame(months1, months5);
      assertNotSame(months2, months3);
      assertNotSame(months2, months4);
      assertNotSame(months2, months6);
      assertNotSame(months2, months5);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotSame(months3, months4);
      assertNotSame(months3, months6);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertNotSame(months3, months0);
      assertNotSame(months3, months5);
      assertNotSame(months6, months2);
      assertNotSame(months6, months3);
      assertNotSame(months6, months5);
      assertNotSame(months6, months1);
      assertNotSame(months6, months4);
      assertNotSame(months6, months0);
      assertFalse(boolean1);
      assertEquals(1, months0.size());
      assertEquals(6, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(12, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals((-12), months2.getMonths());
      assertEquals(2662, months3.getMonths());
      assertEquals(1, months3.size());
      assertEquals(4519, months6.getMonths());
      assertEquals(1, months6.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months6));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months6));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months5));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months6));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months3.equals((Object)months6));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months5));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months5));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months0));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        Months.parseMonths("j\n~6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"j
         // ~6\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      
      int int0 = 157;
      Months months1 = months0.MIN_VALUE.dividedBy(157);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals((-13678239), months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months1.ELEVEN.dividedBy((-398));
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals((-13678239), months1.getMonths());
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      
      Period period0 = months2.ONE.toPeriod();
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(period0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals((-13678239), months1.getMonths());
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      
      Months months3 = months0.dividedBy(int0);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months3, months1);
      assertSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotNull(months3);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months3.size());
      assertEquals(0, months3.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      
      Months months4 = months0.plus(int0);
      assertNotSame(months0, months3);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months4, months1);
      assertNotSame(months4, months3);
      assertNotSame(months4, months2);
      assertNotSame(months4, months0);
      assertNotNull(months4);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(164, months4.getMonths());
      assertEquals(1, months4.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months0));
      
      // Undeclared exception!
      try { 
        months3.TEN.getFieldType(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 157
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      assertNotNull(months0);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      
      int int0 = 0;
      Months months1 = Months.months(0);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months1.EIGHT.negated();
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-8), months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      
      Months months3 = months1.TWELVE.minus(0);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotNull(months3);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(12, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      
      boolean boolean0 = months1.MIN_VALUE.equals(months0);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      
      int int1 = months1.ONE.compareTo((BaseSingleFieldPeriod) months0);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months1, months0);
      assertEquals((-1), int1);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(int1 == int0);
      
      int int2 = months0.SEVEN.getValue(0);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertEquals(7, int2);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Months months4 = months0.negated();
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months1);
      assertNotSame(months4, months0);
      assertNotNull(months4);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months4.size());
      assertEquals((-2147483647), months4.getMonths());
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      // Undeclared exception!
      try { 
        Months.parseMonths("UulWu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"UulWu\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Months months0 = Months.parseMonths((String) null);
      assertNotNull(months0);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      
      PeriodFormatter periodFormatter0 = ISOPeriodFormat.standard();
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      // Undeclared exception!
      try { 
        months0.MAX_VALUE.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Months months0 = Months.FOUR;
      assertNotNull(months0);
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
      
      int int0 = months0.getMonths();
      assertEquals(4, int0);
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Months months0 = Months.months(1051);
      assertNotNull(months0);
      assertEquals(1051, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = Months.FOUR;
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months1.size());
      assertEquals(4, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months0.THREE.plus(months1);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals(1051, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(4, months1.getMonths());
      assertEquals(7, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      
      Months months3 = months0.TEN.dividedBy(1051);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months3, months2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotNull(months3);
      assertEquals(1051, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      
      PeriodType periodType0 = months2.TWELVE.getPeriodType();
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months3);
      assertNotSame(months1, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months3);
      assertNotNull(periodType0);
      assertEquals(1051, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(4, months1.getMonths());
      assertEquals(7, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months3));
      
      String string0 = months0.toString();
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotNull(string0);
      assertEquals("P1051M", string0);
      assertEquals(1051, months0.getMonths());
      assertEquals(1, months0.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      
      Months months4 = months1.dividedBy(1051);
      assertNotSame(months1, months0);
      assertNotSame(months1, months3);
      assertNotSame(months1, months4);
      assertNotSame(months1, months2);
      assertNotSame(months4, months1);
      assertSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months2);
      assertNotNull(months4);
      assertEquals(1, months1.size());
      assertEquals(4, months1.getMonths());
      assertEquals(1, months4.size());
      assertEquals(0, months4.getMonths());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months2));
      
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Months months0 = Months.monthsIn((ReadableInterval) null);
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Months months1 = Months.FIVE;
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(5, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months0.minus(months1);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals(5, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals((-5), months2.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      DurationFieldType durationFieldType0 = months1.getFieldType();
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotNull(durationFieldType0);
      assertEquals(5, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      
      Months months3 = months0.negated();
      assertNotSame(months0, months1);
      assertSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertSame(months3, months0);
      assertNotNull(months3);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals(0, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      
      // Undeclared exception!
      try { 
        months1.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Months", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      PeriodType periodType1 = months0.getPeriodType();
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("Months", periodType1.getName());
      assertEquals(1, periodType1.size());
      
      Months months1 = months0.multipliedBy((-1024));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals((-7168), months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = Months.monthsIn((ReadableInterval) null);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals(0, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      
      String string0 = months0.toString();
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotNull(string0);
      assertEquals("P7M", string0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Months months0 = Months.months((-2743));
      assertNotNull(months0);
      assertEquals((-2743), months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = months0.TWELVE.negated();
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals((-2743), months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals((-12), months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months0.dividedBy((-2743));
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals((-2743), months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      
      int int0 = months2.NINE.compareTo((BaseSingleFieldPeriod) months0);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertEquals(1, int0);
      assertEquals((-2743), months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      
      Months months3 = months0.ONE.dividedBy(1637);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertNotSame(months3, months0);
      assertNotNull(months3);
      assertEquals((-2743), months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotNull(periodType0);
      assertEquals((-2743), months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      
      Months months4 = months2.multipliedBy(1734);
      assertNotSame(months0, months1);
      assertNotSame(months0, months4);
      assertNotSame(months0, months3);
      assertNotSame(months0, months2);
      assertNotSame(months2, months3);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotSame(months2, months4);
      assertNotSame(months4, months3);
      assertNotSame(months4, months2);
      assertNotSame(months4, months1);
      assertNotSame(months4, months0);
      assertNotNull(months4);
      assertEquals((-2743), months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1734, months4.getMonths());
      assertEquals(1, months4.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Months months0 = Months.TWELVE;
      assertNotNull(months0);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = months0.dividedBy((-3426));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months1.MIN_VALUE.minus((-2766));
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-2147480882), months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      
      Months months3 = months1.plus(0);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertSame(months3, months1);
      assertNotNull(months3);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months3.size());
      assertEquals(0, months3.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      
      Months months4 = months1.plus(months0);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertSame(months0, months4);
      assertNotSame(months0, months3);
      assertSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months4);
      assertNotSame(months1, months2);
      assertNotSame(months4, months2);
      assertSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months4, months3);
      assertNotNull(months4);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(12, months4.getMonths());
      assertEquals(1, months4.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months4.equals((Object)months3));
      
      Months months5 = months3.negated();
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertSame(months0, months4);
      assertNotSame(months0, months5);
      assertNotSame(months0, months3);
      assertSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months4);
      assertSame(months1, months5);
      assertNotSame(months1, months2);
      assertSame(months3, months5);
      assertNotSame(months3, months0);
      assertNotSame(months3, months4);
      assertNotSame(months3, months2);
      assertSame(months3, months1);
      assertSame(months5, months3);
      assertSame(months5, months1);
      assertNotSame(months5, months2);
      assertNotSame(months5, months0);
      assertNotSame(months5, months4);
      assertNotNull(months5);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months3.size());
      assertEquals(0, months3.getMonths());
      assertEquals(0, months5.getMonths());
      assertEquals(1, months5.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months4));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months0));
      assertFalse(months5.equals((Object)months4));
      
      Months months6 = months2.negated();
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months0, months6);
      assertSame(months0, months4);
      assertNotSame(months0, months5);
      assertNotSame(months0, months3);
      assertSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months6);
      assertNotSame(months1, months4);
      assertSame(months1, months5);
      assertNotSame(months1, months2);
      assertNotSame(months2, months0);
      assertNotSame(months2, months6);
      assertNotSame(months2, months3);
      assertNotSame(months2, months1);
      assertNotSame(months2, months4);
      assertNotSame(months2, months5);
      assertNotSame(months6, months4);
      assertNotSame(months6, months3);
      assertNotSame(months6, months0);
      assertNotSame(months6, months1);
      assertNotSame(months6, months2);
      assertNotSame(months6, months5);
      assertNotNull(months6);
      assertEquals(12, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-2147480882), months2.getMonths());
      assertEquals(1, months2.size());
      assertEquals(1, months6.size());
      assertEquals(2147480882, months6.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months5));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months4));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months3));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months4));
      assertFalse(months2.equals((Object)months5));
      assertFalse(months6.equals((Object)months4));
      assertFalse(months6.equals((Object)months3));
      assertFalse(months6.equals((Object)months0));
      assertFalse(months6.equals((Object)months1));
      assertFalse(months6.equals((Object)months2));
      assertFalse(months6.equals((Object)months5));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Months months0 = Months.months(3600000);
      assertNotNull(months0);
      assertEquals(3600000, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = months0.TWELVE.multipliedBy(3600000);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(3600000, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(43200000, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months1.SIX.minus(months0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(3600000, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(43200000, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals((-3599994), months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      Months months3 = months0.plus(3600000);
      assertNotSame(months0, months2);
      assertNotSame(months0, months3);
      assertNotSame(months0, months1);
      assertNotSame(months3, months0);
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertNotNull(months3);
      assertEquals(3600000, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(7200000, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      
      Months months1 = Months.THREE;
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(3, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months0.TWO.plus(months1);
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertEquals(3, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(1, months2.size());
      assertEquals(5, months2.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      Months months3 = Months.MIN_VALUE;
      assertNotSame(months3, months2);
      assertNotSame(months3, months1);
      assertSame(months3, months0);
      assertNotNull(months3);
      assertEquals(Integer.MIN_VALUE, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months3.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      
      int int0 = 1520;
      // Undeclared exception!
      try { 
        months3.ONE.getFieldType(1520);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1520
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Months months0 = Months.THREE;
      assertNotNull(months0);
      assertEquals(3, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = Months.TWO;
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months1.size());
      assertEquals(2, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      boolean boolean0 = months0.isLessThan(months1);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertFalse(boolean0);
      assertEquals(3, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(2, months1.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = Months.months(0);
      assertNotSame(months2, months0);
      assertNotSame(months2, months1);
      assertNotNull(months2);
      assertEquals(1, months2.size());
      assertEquals(0, months2.getMonths());
      assertFalse(months2.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Months months0 = Months.TWELVE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(12, months0.getMonths());
      
      Months months1 = Months.SEVEN;
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months1.size());
      assertEquals(7, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      boolean boolean0 = months0.isLessThan(months1);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(12, months0.getMonths());
      assertEquals(1, months1.size());
      assertEquals(7, months1.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Months months0 = Months.months(28265625);
      assertNotNull(months0);
      assertEquals(28265625, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = months0.dividedBy((-2074));
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(28265625, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals((-13628), months1.getMonths());
      assertFalse(months1.equals((Object)months0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
      
      String string0 = months0.toString();
      assertNotNull(string0);
      assertEquals("P11M", string0);
      assertEquals(1, months0.size());
      assertEquals(11, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(7, months0.getMonths());
      assertEquals(1, months0.size());
      
      // Undeclared exception!
      try { 
        months0.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Months", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Months months0 = Months.months(3600000);
      assertNotNull(months0);
      assertEquals(3600000, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = months0.plus(3600000);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(3600000, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(7200000, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Months months0 = Months.FIVE;
      assertNotNull(months0);
      assertEquals(5, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = Months.ONE;
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months1.size());
      assertEquals(1, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      int int0 = (-3473);
      // Undeclared exception!
      try { 
        months1.MAX_VALUE.multipliedBy((-3473));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483647 * -3473
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = (-637);
      Months months0 = Months.months((-637));
      assertNotNull(months0);
      assertEquals((-637), months0.getMonths());
      assertEquals(1, months0.size());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        Months.parseMonths("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      assertNotNull(months0);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = months0.negated();
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals((-2147483647), months1.getMonths());
      assertFalse(months1.equals((Object)months0));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        Months.parseMonths("/F3#=86F^z1#+2_?G&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"/F3#=86F^z1#+2_?G&\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Months months0 = Months.ZERO;
      assertNotNull(months0);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = months0.multipliedBy(99);
      assertSame(months0, months1);
      assertSame(months1, months0);
      assertNotNull(months1);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      
      Months months2 = months1.plus(0);
      assertSame(months0, months1);
      assertSame(months0, months2);
      assertSame(months1, months0);
      assertSame(months1, months2);
      assertSame(months2, months0);
      assertSame(months2, months1);
      assertNotNull(months2);
      assertEquals(0, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months2.size());
      assertEquals(0, months2.getMonths());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Months months0 = Months.months(477);
      assertNotNull(months0);
      assertEquals(477, months0.getMonths());
      assertEquals(1, months0.size());
      
      Months months1 = months0.minus(477);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(477, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      
      int int0 = months0.TWELVE.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(1, int0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      
      boolean boolean0 = months0.EIGHT.equals("");
      assertFalse(boolean0);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      
      boolean boolean1 = months0.isGreaterThan((Months) null);
      assertFalse(boolean1);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertTrue(boolean1 == boolean0);
      
      Months months1 = Months.parseMonths((String) null);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(0, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      boolean boolean2 = months0.isLessThan((Months) null);
      assertNotSame(months0, months1);
      assertTrue(boolean2);
      assertEquals(1, months0.size());
      assertEquals(Integer.MIN_VALUE, months0.getMonths());
      assertFalse(months0.equals((Object)months1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      assertNotNull(months0);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      
      int int0 = 0;
      Months months1 = Months.months(0);
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months1.EIGHT.negated();
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals((-8), months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months1));
      assertFalse(months2.equals((Object)months0));
      
      Months months3 = months1.TWELVE.minus(0);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertNotSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotNull(months3);
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertEquals(1, months3.size());
      assertEquals(12, months3.getMonths());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(months3.equals((Object)months0));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      
      int int1 = months1.ONE.compareTo((BaseSingleFieldPeriod) months0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months1, months3);
      assertNotSame(months1, months0);
      assertNotSame(months1, months2);
      assertEquals((-1), int1);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertEquals(0, months1.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months1.equals((Object)months3));
      assertFalse(months1.equals((Object)months0));
      assertFalse(months1.equals((Object)months2));
      assertFalse(int1 == int0);
      
      int int2 = months0.SEVEN.getValue(0);
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertEquals(7, int2);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Months months4 = months0.negated();
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotNull(months4);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months4.size());
      assertEquals((-2147483647), months4.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      
      Months months5 = months4.dividedBy((-1));
      assertNotSame(months0, months2);
      assertNotSame(months0, months4);
      assertSame(months0, months5);
      assertNotSame(months0, months1);
      assertNotSame(months0, months3);
      assertNotSame(months4, months2);
      assertNotSame(months4, months3);
      assertNotSame(months4, months5);
      assertNotSame(months4, months0);
      assertNotSame(months4, months1);
      assertNotSame(months5, months4);
      assertSame(months5, months0);
      assertNotSame(months5, months2);
      assertNotSame(months5, months1);
      assertNotSame(months5, months3);
      assertNotNull(months5);
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
      assertEquals(1, months4.size());
      assertEquals((-2147483647), months4.getMonths());
      assertEquals(1, months5.size());
      assertEquals(Integer.MAX_VALUE, months5.getMonths());
      assertFalse(months0.equals((Object)months2));
      assertFalse(months0.equals((Object)months4));
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months3));
      assertFalse(months4.equals((Object)months2));
      assertFalse(months4.equals((Object)months3));
      assertFalse(months4.equals((Object)months0));
      assertFalse(months4.equals((Object)months1));
      assertFalse(months5.equals((Object)months4));
      assertFalse(months5.equals((Object)months2));
      assertFalse(months5.equals((Object)months1));
      assertFalse(months5.equals((Object)months3));
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      // Undeclared exception!
      try { 
        Months.parseMonths("UulWu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"UulWu\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Months months0 = Months.monthsIn((ReadableInterval) null);
      assertNotNull(months0);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Months months1 = Months.FIVE;
      assertNotSame(months1, months0);
      assertNotNull(months1);
      assertEquals(5, months1.getMonths());
      assertEquals(1, months1.size());
      assertFalse(months1.equals((Object)months0));
      
      Months months2 = months1.minus((Months) null);
      assertNotSame(months1, months0);
      assertSame(months1, months2);
      assertSame(months2, months1);
      assertNotSame(months2, months0);
      assertNotNull(months2);
      assertEquals(5, months1.getMonths());
      assertEquals(1, months1.size());
      assertEquals(5, months2.getMonths());
      assertEquals(1, months2.size());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months2.equals((Object)months0));
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertNotSame(months0, months1);
      assertNotSame(months0, months2);
      assertNotNull(durationFieldType0);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      
      Months months3 = months0.negated();
      assertNotSame(months0, months2);
      assertNotSame(months0, months1);
      assertSame(months0, months3);
      assertSame(months3, months0);
      assertNotSame(months3, months1);
      assertNotSame(months3, months2);
      assertNotNull(months3);
      assertEquals(1, months0.size());
      assertEquals(0, months0.getMonths());
      assertEquals(0, months3.getMonths());
      assertEquals(1, months3.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months0.equals((Object)months2));
      assertFalse(months3.equals((Object)months1));
      assertFalse(months3.equals((Object)months2));
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        months1.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Months", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Months months0 = Months.SEVEN;
      Months months1 = months0.minus(7);
      months1.getFieldType();
      Months months2 = Months.months(7);
      Months months3 = months0.minus(months1);
      months0.getPeriodType();
      Months months4 = months1.multipliedBy(7);
      months4.TEN.minus(7);
      String string0 = months2.toString();
      assertEquals("P7M", string0);
      
      Months months5 = months0.plus(7);
      assertEquals(14, months5.getMonths());
      
      boolean boolean0 = months0.isLessThan(months3);
      boolean boolean1 = months3.isGreaterThan(months1);
      assertTrue(boolean1);
      
      boolean boolean2 = months1.isLessThan(months0);
      assertFalse(boolean2 == boolean0);
      assertSame(months0, months2);
      assertEquals(0, months1.getMonths());
      
      Months months6 = Months.months((-740));
      assertEquals((-740), months6.getMonths());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Months months0 = Months.TWELVE;
      Months months1 = months0.minus(7);
      Months months2 = Months.months(7);
      Months months3 = months0.minus(months1);
      Months months4 = months1.multipliedBy(7);
      months0.plus(7);
      Months months5 = months3.ONE.plus(7);
      boolean boolean0 = months0.isLessThan(months3);
      assertFalse(boolean0);
      
      boolean boolean1 = months5.isLessThan(months5);
      assertFalse(boolean1);
      
      Months months6 = months2.dividedBy(7);
      months4.getPeriodType();
      assertEquals(35, months4.getMonths());
      
      months6.getFieldType();
      assertEquals(1, months6.getMonths());
      
      Months months7 = months0.plus(months2);
      assertNotSame(months7, months0);
      assertSame(months2, months3);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Months months0 = Months.SIX;
      ISOPeriodFormat.standard();
      months0.getMonths();
      Months months1 = months0.plus(6);
      Months months2 = Months.EIGHT;
      int int0 = (-2653);
      months1.NINE.minus((-2653));
      Months months3 = months1.FIVE.dividedBy((-2653));
      months3.multipliedBy((-2653));
      months2.THREE.plus(months0);
      PeriodType.months();
      Months months4 = Months.months((-2653));
      Months months5 = Months.SEVEN;
      months4.isGreaterThan(months2);
      months0.EIGHT.multipliedBy((-2653));
      Months months6 = Months.MAX_VALUE;
      Months.months(6);
      // Undeclared exception!
      try { 
        months6.SEVEN.getValue(4517);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 4517
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }
}
