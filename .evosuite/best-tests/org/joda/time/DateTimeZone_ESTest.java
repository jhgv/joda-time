/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:22:16 GMT 2018
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.MockZone;
import org.joda.time.ReadableInstant;
import org.joda.time.TestDateTimeZone;
import org.joda.time.TestDateTime_Basics;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("America/Recife", cachedDateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.getID());
      
      long long0 = cachedDateTimeZone0.adjustOffset(0L, true);
      assertEquals("America/Recife", cachedDateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.getID());
      assertEquals(0L, long0);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      String string0 = cachedDateTimeZone0.getName(0L, locale0);
      assertNotNull(string0);
      assertEquals("America/Recife", cachedDateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("Brasilianische Zeit", string0);
      
      String string1 = cachedDateTimeZone0.getID();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("America/Recife", cachedDateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.getID());
      assertEquals("America/Recife", string1);
      
      Object object0 = ((DateTimeZone)cachedDateTimeZone0).writeReplace();
      assertNotNull(object0);
      assertEquals("America/Recife", cachedDateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        DateTimeZone.forID("MockZone");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'MockZone' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockZone mockZone0 = new MockZone(0L, 528, 1381);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      
      // Undeclared exception!
      try { 
        mockZone0.convertLocalToUTC((long) 528, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal instant due to time zone offset transition (daylight savings time 'gap'): 1970-01-01T00:00:00.528 (MockZone)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("SB3k{7Ri#(");
      assertNotNull(testDateTimeZone_MockDateTimeZone0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("SB3k{7Ri#(", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("SB3k{7Ri#(", testDateTimeZone_MockDateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = testDateTimeZone_MockDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("SB3k{7Ri#(", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("SB3k{7Ri#(", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86399999);
      assertNotNull(dateTimeZone0);
      assertEquals("+23:59:59.999", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+23:59:59.999", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-86399999));
      assertNotNull(dateTimeZone0);
      assertEquals("-23:59:59.999", dateTimeZone0.toString());
      assertEquals("-23:59:59.999", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(5, (-587053079));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -587053079
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(23);
      assertNotNull(dateTimeZone0);
      assertEquals("+23:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+23:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1234567890L, 0, 0);
      assertNotNull(mockZone0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      
      int int0 = mockZone0.UTC.getStandardOffset((-256L));
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(0, int0);
      
      DateTimeUtils.setCurrentMillisFixed((-256L));
      long long0 = mockZone0.convertLocalToUTC((-907L), false, (long) 0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals((-907L), long0);
      
      long long1 = mockZone0.nextTransition(1234567890L);
      assertFalse(long1 == long0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(16786567890L, long1);
      
      long long2 = mockZone0.convertLocalToUTC((-2163L), false);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals((-2163L), long2);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
      
      long long3 = dateTimeZone0.previousTransition(1234567890L);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals((-57967200001L), long3);
      
      TimeZone timeZone0 = mockZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("GMT", timeZone0.getID());
      
      String string0 = mockZone0.getShortName(1323L);
      assertNotNull(string0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", string0);
      
      TimeZone timeZone1 = mockZone0.toTimeZone();
      assertNotNull(timeZone1);
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("GMT", timeZone1.getID());
      assertNotSame(timeZone1, timeZone0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2615625);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:43:35.625", dateTimeZone0.getID());
      assertEquals("+00:43:35.625", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.previousTransition(2615625);
      assertEquals("+00:43:35.625", dateTimeZone0.getID());
      assertEquals("+00:43:35.625", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(2615625L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockZone mockZone0 = new MockZone(804L, 1291, (-1678));
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      
      boolean boolean0 = mockZone0.isFixed();
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1707L, 1700, 1700);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      
      int int0 = mockZone0.getStandardOffset(1700L);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals(1700, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1707L, 1700, 1700);
      assertNotNull(mockZone0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      int int0 = mockZone0.getOffset((ReadableInstant) dateTime0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1701700, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffset(948L);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals((-10800000), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockZone mockZone0 = new MockZone(0L, (-20), 353);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      
      String string0 = mockZone0.getNameKey(9223372036854775807L);
      assertNull(string0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      assertNotNull(testDateTimeZone_MockDateTimeZone0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("", testDateTimeZone_MockDateTimeZone0.toString());
      
      String string0 = testDateTimeZone_MockDateTimeZone0.getName(100L);
      assertNotNull(string0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      assertNotNull(testDateTimeZone_MockDateTimeZone0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("", testDateTimeZone_MockDateTimeZone0.toString());
      
      TimeZone timeZone0 = testDateTimeZone_MockDateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone0, 0L);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockZone mockZone0 = new MockZone(0L, 0, 0);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      
      long long0 = mockZone0.convertUTCToLocal(0L);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockZone mockZone0 = new MockZone(0L, (-20), 353);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      
      long long0 = mockZone0.UTC.convertUTCToLocal(38898367008L);
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(38898367008L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2003);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:02.003", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.003", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) 2003, false, (long) 2003);
      assertEquals("+00:00:02.003", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:02.003", dateTimeZone0.toString());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockZone mockZone0 = new MockZone(3758L, 1943, 1943);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      
      long long0 = mockZone0.convertLocalToUTC(0L, false);
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals((-1943L), long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours(1943);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 1943
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("America/Recife", cachedDateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.getID());
      
      long long0 = cachedDateTimeZone0.adjustOffset(0L, true);
      assertEquals("America/Recife", cachedDateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.getID());
      assertEquals(0L, long0);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      
      String string0 = cachedDateTimeZone0.getName(0L, locale0);
      assertNotNull(string0);
      assertEquals("America/Recife", cachedDateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("Brasilianische Zeit", string0);
      
      String string1 = cachedDateTimeZone0.getID();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("America/Recife", cachedDateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.getID());
      assertEquals("America/Recife", string1);
      
      Object object0 = ((DateTimeZone)cachedDateTimeZone0).writeReplace();
      assertNotNull(object0);
      assertEquals("America/Recife", cachedDateTimeZone0.toString());
      assertEquals("America/Recife", cachedDateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        DateTimeZone.forID("MockZone");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'MockZone' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertLocalToUTC(0L, false);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(10800000L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertLocalToUTC((-4390L), false, 2865L);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(10795610L, long0);
      
      MockZone mockZone0 = new MockZone((-1123L), 3, 3);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetHoursMinutes(0, 3);
      assertNotNull(dateTimeZone1);
      assertEquals("+00:03", dateTimeZone1.toString());
      assertEquals("+00:03", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      String string0 = dateTimeZone0.getName((-1123L), locale0);
      assertNotNull(string0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("\u5DF4\u897F\u5229\u4E9A\u65F6\u95F4", string0);
      
      String string1 = dateTimeZone1.getName((-1123L), locale0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("+00:03", dateTimeZone1.toString());
      assertEquals("+00:03", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("+00:03", string1);
      
      boolean boolean0 = dateTimeZone0.UTC.equals(mockZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertFalse(boolean0);
      
      int int0 = dateTimeZone0.getStandardOffset((-1L));
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals((-10800000), int0);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      boolean boolean1 = uTCDateTimeZone0.UTC.isFixed();
      assertFalse(boolean1 == boolean0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(boolean1);
      
      long long1 = uTCDateTimeZone0.adjustOffset(3, false);
      assertFalse(long1 == long0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(3L, long1);
      
      boolean boolean2 = uTCDateTimeZone0.isFixed();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(boolean2);
      
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("+00:03");
      assertNotNull(testDateTimeZone_MockDateTimeZone0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("+00:03", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("+00:03", testDateTimeZone_MockDateTimeZone0.toString());
      
      String string2 = testDateTimeZone_MockDateTimeZone0.UTC.getNameKey(0L);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("+00:03", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("+00:03", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("UTC", string2);
      
      long long2 = testDateTimeZone_MockDateTimeZone0.previousTransition((-1L));
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("+00:03", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("+00:03", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals(0L, long2);
      
      boolean boolean3 = mockZone0.equals("\u5DF4\u897F\u5229\u4E9A\u65F6\u95F4");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertFalse(boolean3);
      
      DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis(3);
      assertNotNull(dateTimeZone2);
      assertFalse(dateTimeZone2.equals((Object)dateTimeZone1));
      assertEquals("+00:00:00.003", dateTimeZone2.getID());
      assertEquals("+00:00:00.003", dateTimeZone2.toString());
      assertTrue(dateTimeZone2.isFixed());
      assertNotSame(dateTimeZone2, dateTimeZone1);
      
      long long3 = testDateTimeZone_MockDateTimeZone0.previousTransition(1L);
      assertFalse(long3 == long1);
      assertTrue(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("+00:03", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("+00:03", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals(0L, long3);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.convertUTCToLocal((-1419L));
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals((-10801419L), long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("u");
      assertNotNull(testDateTimeZone_MockDateTimeZone0);
      assertEquals("u", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("u", testDateTimeZone_MockDateTimeZone0.getID());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      
      int int0 = testDateTimeZone_MockDateTimeZone0.getOffsetFromLocal((-1222L));
      assertEquals("u", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("u", testDateTimeZone_MockDateTimeZone0.getID());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1707L, 1700, 1700);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      
      int int0 = mockZone0.getOffsetFromLocal(0L);
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals(1700, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockZone mockZone0 = new MockZone(0L, (-20), 353);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      
      boolean boolean0 = mockZone0.isStandardOffset(4140L);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-4), (-4));
      assertNotNull(dateTimeZone0);
      assertEquals("-04:04", dateTimeZone0.toString());
      assertEquals("-04:04", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      String string0 = dateTimeZone0.getName((-1655L), (Locale) null);
      assertNotNull(string0);
      assertEquals("-04:04", dateTimeZone0.toString());
      assertEquals("-04:04", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-04:04", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockZone mockZone0 = new MockZone(3758L, 1943, 1943);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = mockZone0.getShortName(0L, locale0);
      assertNotNull(string0);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("MockZone", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      String string0 = uTCDateTimeZone0.getShortName((-917L), (Locale) null);
      assertNotNull(string0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("UTC", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
      
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      
      String string0 = dateTimeZone0.getShortName(32400000L);
      assertNotNull(string0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("BRT", string0);
      
      long long0 = dateTimeZone0.UTC.getMillisKeepLocal(uTCDateTimeZone0, 67L);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(67L, long0);
      
      DateTimeZone.setNameProvider(nameProvider0);
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      boolean boolean0 = uTCDateTimeZone0.equals(uTCProvider0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertFalse(boolean0);
      
      String string1 = uTCDateTimeZone0.getName(32400000L);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals("Coordinated Universal Time", string1);
      
      NameProvider nameProvider1 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider1);
      assertSame(nameProvider1, nameProvider0);
      
      int int0 = uTCDateTimeZone0.getOffsetFromLocal(32400000L);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, int0);
      
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("Eb3TbRi\"//iqb]|z");
      assertNotNull(testDateTimeZone_MockDateTimeZone0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("Eb3TbRi\"//iqb]|z", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("Eb3TbRi\"//iqb]|z", testDateTimeZone_MockDateTimeZone0.toString());
      
      DateTimeUtils.setCurrentMillisOffset(67L);
      boolean boolean1 = testDateTimeZone_MockDateTimeZone0.isFixed();
      assertTrue(boolean1 == boolean0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("Eb3TbRi\"//iqb]|z", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("Eb3TbRi\"//iqb]|z", testDateTimeZone_MockDateTimeZone0.toString());
      assertFalse(boolean1);
      
      String string2 = testDateTimeZone_MockDateTimeZone0.getShortName((long) 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("Eb3TbRi\"//iqb]|z", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("Eb3TbRi\"//iqb]|z", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("Eb3TbRi\"//iqb]|z", string2);
      
      DateTimeZone.setNameProvider(nameProvider1);
      assertSame(nameProvider1, nameProvider0);
      
      int int1 = testDateTimeZone_MockDateTimeZone0.getOffset(67L);
      assertTrue(int1 == int0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("Eb3TbRi\"//iqb]|z", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("Eb3TbRi\"//iqb]|z", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals(0, int1);
      
      long long1 = testDateTimeZone_MockDateTimeZone0.nextTransition(1548L);
      assertFalse(long1 == long0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("Eb3TbRi\"//iqb]|z", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("Eb3TbRi\"//iqb]|z", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals(0L, long1);
      
      boolean boolean2 = testDateTimeZone_MockDateTimeZone0.isFixed();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("Eb3TbRi\"//iqb]|z", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("Eb3TbRi\"//iqb]|z", testDateTimeZone_MockDateTimeZone0.toString());
      assertFalse(boolean2);
      
      long long2 = dateTimeZone0.nextTransition(67L);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(499748400000L, long2);
      
      long long3 = dateTimeZone0.convertUTCToLocal(4900L);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals((-10795100L), long3);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, (-59));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:59", dateTimeZone0.toString());
      assertEquals("-00:59", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-59), true, (long) (-59));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:59", dateTimeZone0.toString());
      assertEquals("-00:59", dateTimeZone0.getID());
      assertEquals(3539941L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Europe/Berlin");
      assertNotNull(dateTimeZone0);
      assertEquals("Europe/Berlin", dateTimeZone0.getID());
      assertEquals("Europe/Berlin", dateTimeZone0.toString());
      
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("");
      assertNotNull(testDateTimeZone_MockDateTimeZone0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("", testDateTimeZone_MockDateTimeZone0.toString());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string0 = testDateTimeZone_MockDateTimeZone0.getName(0L, locale0);
      assertNotNull(string0);
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("", testDateTimeZone_MockDateTimeZone0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("No printer supplied");
      assertNotNull(testDateTimeZone_MockDateTimeZone0);
      assertEquals("No printer supplied", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("No printer supplied", testDateTimeZone_MockDateTimeZone0.toString());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      
      testDateTimeZone_MockDateTimeZone0.hashCode();
      assertEquals("No printer supplied", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals("No printer supplied", testDateTimeZone_MockDateTimeZone0.toString());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(588, set0.size());
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", timeZone0.getID());
      
      dateTimeZone0.hashCode();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
      
      DateTimeZone.setProvider(provider0);
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone0);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      
      int int0 = uTCDateTimeZone0.getOffset(0L);
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-4), (-4));
      assertNotNull(dateTimeZone0);
      assertEquals("-04:04", dateTimeZone0.toString());
      assertEquals("-04:04", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.adjustOffset((-14640000), true);
      assertEquals("-04:04", dateTimeZone0.toString());
      assertEquals("-04:04", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals((-14640000L), long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1200L, (-86399999), (-86399999));
      assertNotNull(mockZone0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      
      long long0 = mockZone0.adjustOffset((-1426L), false);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals((-1426L), long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      
      TestDateTime_Basics testDateTime_Basics0 = new TestDateTime_Basics("gHf");
      assertNotNull(testDateTime_Basics0);
      
      TestDateTime_Basics.MockInstant testDateTime_Basics_MockInstant0 = testDateTime_Basics0.new MockInstant();
      assertNotNull(testDateTime_Basics_MockInstant0);
      assertEquals(1018009440000L, testDateTime_Basics_MockInstant0.getMillis());
      assertNull(testDateTime_Basics_MockInstant0.toString());
      
      Chronology chronology0 = testDateTime_Basics_MockInstant0.getChronology();
      assertNotNull(chronology0);
      assertEquals(1018009440000L, testDateTime_Basics_MockInstant0.getMillis());
      assertNull(testDateTime_Basics_MockInstant0.toString());
      
      LocalDateTime localDateTime0 = LocalDateTime.now(chronology0);
      assertNotNull(localDateTime0);
      assertEquals(1018009440000L, testDateTime_Basics_MockInstant0.getMillis());
      assertNull(testDateTime_Basics_MockInstant0.toString());
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = uTCDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals(1018009440000L, testDateTime_Basics_MockInstant0.getMillis());
      assertNull(testDateTime_Basics_MockInstant0.toString());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1962L, (-3197), (-1684));
      assertNotNull(mockZone0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      
      long long0 = mockZone0.convertLocalToUTC(782L, true);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(1687979L, long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockZone mockZone0 = new MockZone(0L, (-2867), 48);
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      
      long long0 = mockZone0.convertLocalToUTC((long) (-2867), false);
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      MockZone mockZone0 = new MockZone(1735L, 0, (-1416));
      assertNotNull(mockZone0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      
      TimeZone timeZone0 = dateTimeZone0.UTC.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals("UTC", timeZone0.getID());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals(0, timeZone0.getRawOffset());
      
      mockZone0.transition = 2778L;
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      
      String string0 = mockZone0.UTC.getShortName((-4061L));
      assertNotNull(string0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals("UTC", string0);
      
      long long0 = mockZone0.nextTransition(0);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals(2778L, long0);
      
      int int0 = dateTimeZone0.getOffset(0L);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(0, int0);
      
      boolean boolean0 = mockZone0.isStandardOffset(0L);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertTrue(boolean0);
      
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      assertNotNull(uTCDateTimeZone0);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      
      TimeZone timeZone1 = uTCDateTimeZone0.toTimeZone();
      assertNotNull(timeZone1);
      assertTrue(timeZone1.equals((Object)timeZone0));
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertEquals("UTC", timeZone1.getID());
      assertFalse(timeZone1.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone1.toString());
      assertEquals(0, timeZone1.getRawOffset());
      assertEquals(0, timeZone1.getDSTSavings());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertNotSame(timeZone1, timeZone0);
      
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      assertNotNull(defaultNameProvider0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      String string1 = defaultNameProvider0.getName(locale1, "UTC", "UTC");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("Coordinated Universal Time", string1);
      
      DateTimeZone.setNameProvider(defaultNameProvider0);
      long long1 = dateTimeZone0.getMillisKeepLocal(uTCDateTimeZone0, 9223372036854775807L);
      assertFalse(long1 == long0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertEquals(9223372036854775807L, long1);
      
      int int1 = dateTimeZone0.getOffset(9223372036854775807L);
      assertTrue(int1 == int0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertSame(dateTimeZone0, uTCDateTimeZone0);
      assertEquals(0, int1);
      
      long long2 = uTCDateTimeZone0.convertLocalToUTC(10800000L, true);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals("UTC", uTCDateTimeZone0.getID());
      assertTrue(uTCDateTimeZone0.isFixed());
      assertEquals("UTC", uTCDateTimeZone0.toString());
      assertSame(uTCDateTimeZone0, dateTimeZone0);
      assertEquals(10800000L, long2);
      
      UTCDateTimeZone uTCDateTimeZone1 = new UTCDateTimeZone();
      assertNotNull(uTCDateTimeZone1);
      assertTrue(uTCDateTimeZone1.equals((Object)dateTimeZone0));
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertTrue(uTCDateTimeZone1.isFixed());
      
      int int2 = uTCDateTimeZone1.getOffset((long) (-1416));
      assertTrue(uTCDateTimeZone1.equals((Object)dateTimeZone0));
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertTrue(uTCDateTimeZone1.isFixed());
      assertNotSame(uTCDateTimeZone1, uTCDateTimeZone0);
      assertNotSame(uTCDateTimeZone1, dateTimeZone0);
      assertEquals(0, int2);
      
      long long3 = mockZone0.previousTransition(2063L);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertFalse(mockZone0.isFixed());
      assertEquals((-15551997222L), long3);
      
      boolean boolean1 = uTCDateTimeZone1.isFixed();
      assertTrue(uTCDateTimeZone1.equals((Object)dateTimeZone0));
      assertTrue(uTCDateTimeZone1.equals((Object)uTCDateTimeZone0));
      assertTrue(boolean1 == boolean0);
      assertEquals("UTC", uTCDateTimeZone1.toString());
      assertEquals("UTC", uTCDateTimeZone1.getID());
      assertTrue(uTCDateTimeZone1.isFixed());
      assertNotSame(uTCDateTimeZone1, uTCDateTimeZone0);
      assertNotSame(uTCDateTimeZone1, dateTimeZone0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-726L), 58, 1821);
      assertNotNull(mockZone0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("ls>fl?4`$/`PIN&;gQV");
      assertNotNull(testDateTimeZone_MockDateTimeZone0);
      assertEquals("ls>fl?4`$/`PIN&;gQV", testDateTimeZone_MockDateTimeZone0.toString());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("ls>fl?4`$/`PIN&;gQV", testDateTimeZone_MockDateTimeZone0.getID());
      
      DateTime dateTime0 = new DateTime((-726L), (DateTimeZone) mockZone0);
      assertNotNull(dateTime0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals((-726L), dateTime0.getMillis());
      
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      assertNotNull(localDateTime0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals((-726L), dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = testDateTimeZone_MockDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(mockZone0.isFixed());
      assertEquals("MockZone", mockZone0.getID());
      assertEquals("MockZone", mockZone0.toString());
      assertEquals("ls>fl?4`$/`PIN&;gQV", testDateTimeZone_MockDateTimeZone0.toString());
      assertFalse(testDateTimeZone_MockDateTimeZone0.isFixed());
      assertEquals("ls>fl?4`$/`PIN&;gQV", testDateTimeZone_MockDateTimeZone0.getID());
      assertEquals((-726L), dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      uTCDateTimeZone0.isStandardOffset(1912L);
      uTCDateTimeZone0.UTC.writeReplace();
      uTCDateTimeZone0.getOffsetFromLocal((-1708L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTCDateTimeZone0.hashCode();
      DateTime dateTime0 = new DateTime((-1443L), dateTimeZone0);
      uTCDateTimeZone0.getOffset((ReadableInstant) dateTime0);
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      mockNullZoneChronology0.getZone();
      uTCDateTimeZone0.getMillisKeepLocal((DateTimeZone) null, 1L);
      dateTimeZone0.getOffsetFromLocal(0L);
      uTCDateTimeZone0.toTimeZone();
      dateTimeZone0.getMillisKeepLocal(uTCDateTimeZone0, 0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      MockZone mockZone0 = new MockZone(2344L, 0, 0);
      mockZone0.isFixed();
      uTCDateTimeZone0.getShortName((long) 0);
      mockZone0.getName((-1708L));
      try { 
        DateTimeZone.forOffsetHoursMinutes(5, 181);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 181
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockZone mockZone0 = new MockZone(0L, (-2867), 48);
      int int0 = mockZone0.getOffsetFromLocal(0L);
      assertEquals((-2867), int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockZone mockZone0 = new MockZone(1962L, (-3197), 50);
      int int0 = mockZone0.getOffsetFromLocal(1196L);
      assertEquals((-3197), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockZone mockZone0 = new MockZone(0L, (-1671), (-1671));
      int int0 = mockZone0.getOffset((ReadableInstant) null);
      assertEquals((-1672671), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = null;
      try {
        testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Id must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
      assertEquals("+00:00:01", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      DateTimeZone.getProvider();
      TestDateTimeZone.MockDateTimeZone testDateTimeZone_MockDateTimeZone0 = new TestDateTimeZone.MockDateTimeZone("Y");
      Locale locale0 = Locale.JAPANESE;
      testDateTimeZone_MockDateTimeZone0.UTC.getName(9223372036854775807L, locale0);
      testDateTimeZone_MockDateTimeZone0.UTC.getOffsetFromLocal(0L);
      uTCDateTimeZone0.equals(testDateTimeZone_MockDateTimeZone0);
      UTCDateTimeZone uTCDateTimeZone1 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertSame(dateTimeZone0, uTCDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3990, "eras");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'eras' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      TimeZone timeZone0 = uTCDateTimeZone0.toTimeZone();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertSame(uTCDateTimeZone0, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis(2147483645);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: 2147483645
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis((-1793332255));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: -1793332255
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(3);
      dateTimeZone0.nextTransition((-2711L));
      assertEquals("+03:00", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(525, (-1036));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 525
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-100722684), (-100722684));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -100722684
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertEquals("UTC", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("-00:00:00.167");
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.167", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("+PT-12.345S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+PT-12.345S\" is malformed at \"PT-12.345S\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DateTimeZone.LazyInit dateTimeZone_LazyInit0 = new DateTimeZone.LazyInit();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      String string0 = dateTimeZone0.toString();
      assertEquals("America/Recife", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertEquals("+18:00", dateTimeZone0.getID());
  }
}
