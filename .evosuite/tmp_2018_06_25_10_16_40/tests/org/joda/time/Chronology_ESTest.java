/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:52:35 GMT 2018
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.MockNullZoneChronology;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Chronology_ESTest extends Chronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DurationField durationField0 = mockNullZoneChronology0.years();
      assertEquals("years", durationField0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.yearOfEra();
      assertFalse(dateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.yearOfCentury();
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.year();
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withZone((DateTimeZone) null);
      assertSame(mockNullZoneChronology0, chronology0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      Chronology chronology0 = mockNullZoneChronology0.withUTC();
      assertSame(mockNullZoneChronology0, chronology0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DurationField durationField0 = mockNullZoneChronology0.weekyears();
      assertEquals("weekyears", durationField0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.weekyearOfCentury();
      assertFalse(dateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.weekyear();
      assertFalse(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DurationField durationField0 = mockNullZoneChronology0.weeks();
      assertTrue(durationField0.isPrecise());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.weekOfWeekyear();
      assertFalse(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      String string0 = mockNullZoneChronology0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DurationField durationField0 = mockNullZoneChronology0.seconds();
      assertEquals("seconds", durationField0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.secondOfMinute();
      assertFalse(dateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.secondOfDay();
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DurationField durationField0 = mockNullZoneChronology0.months();
      assertTrue(durationField0.isPrecise());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.monthOfYear();
      assertFalse(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DurationField durationField0 = mockNullZoneChronology0.minutes();
      assertEquals(0L, durationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.minuteOfDay();
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.millisOfSecond();
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.millisOfDay();
      assertEquals("millisOfDay", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DurationField durationField0 = mockNullZoneChronology0.millis();
      assertEquals("millis", durationField0.getName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DurationField durationField0 = mockNullZoneChronology0.hours();
      assertEquals(0L, durationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.hourOfDay();
      assertFalse(dateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DurationField durationField0 = mockNullZoneChronology0.halfdays();
      assertTrue(durationField0.isPrecise());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.halfdayOfDay();
      assertFalse(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeZone dateTimeZone0 = mockNullZoneChronology0.getZone();
      assertNull(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DurationField durationField0 = mockNullZoneChronology0.eras();
      assertFalse(durationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.era();
      assertFalse(dateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DurationField durationField0 = mockNullZoneChronology0.days();
      assertFalse(durationField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.dayOfYear();
      assertEquals("UnsupportedDateTimeField", dateTimeField0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.dayOfMonth();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.clockhourOfDay();
      assertEquals("clockhourOfDay", dateTimeField0.getName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DateTimeField dateTimeField0 = mockNullZoneChronology0.centuryOfEra();
      assertFalse(dateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      DurationField durationField0 = mockNullZoneChronology0.centuries();
      assertEquals("centuries", durationField0.getName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      long long0 = mockNullZoneChronology0.add((ReadablePeriod) null, (-1854L), 0);
      assertEquals((-1854L), long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      long long0 = mockNullZoneChronology0.add(0L, 0L, 129);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      long long0 = mockNullZoneChronology0.add(10800030L, 10800030L, 0);
      assertEquals(10800030L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      long long0 = mockNullZoneChronology0.add((-1822L), (-263L), 1878);
      assertEquals((-495736L), long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      // Undeclared exception!
      try { 
        mockNullZoneChronology0.validate((ReadablePartial) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      // Undeclared exception!
      try { 
        mockNullZoneChronology0.set((ReadablePartial) null, 2560L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      // Undeclared exception!
      try { 
        mockNullZoneChronology0.getDateTimeMillis(2687L, 0, (-2355), (-769), 14);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hourOfDay field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      // Undeclared exception!
      try { 
        mockNullZoneChronology0.getDateTimeMillis((-2858), 1, 0, 0, (-773), 1, (-2858));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      // Undeclared exception!
      try { 
        mockNullZoneChronology0.getDateTimeMillis(1081, 4195, 0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // year field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      // Undeclared exception!
      try { 
        mockNullZoneChronology0.get((ReadablePeriod) null, (-491791L), 3018L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      // Undeclared exception!
      try { 
        mockNullZoneChronology0.get((ReadablePeriod) null, 2147483647L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockNullZoneChronology mockNullZoneChronology0 = new MockNullZoneChronology();
      // Undeclared exception!
      try { 
        mockNullZoneChronology0.get((ReadablePartial) null, (-3032L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }
}
