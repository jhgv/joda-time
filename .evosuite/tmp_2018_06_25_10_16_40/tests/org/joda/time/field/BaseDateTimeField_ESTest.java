/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:28:07 GMT 2018
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.format.DateTimeFormatter;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MockPartial;
import org.joda.time.MockZone;
import org.joda.time.MonthDay;
import org.joda.time.Partial;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.field.TestBaseDateTimeField;
import org.joda.time.field.TestOffsetDateTimeField;
import org.joda.time.field.TestPreciseDateTimeField;
import org.joda.time.field.TestPreciseDurationDateTimeField;
import org.joda.time.field.ZeroIsMaxDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseDateTimeField_ESTest extends BaseDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      testPreciseDateTimeField_MockStandardDateTimeField0.roundHalfCeiling((-1L));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      testOffsetDateTimeField_MockOffsetDateTimeField0.roundHalfFloor(0L);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      Locale locale0 = Locale.GERMAN;
      testBaseDateTimeField_MockStandardBaseDateTimeField0.set((-2612L), "16", locale0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      testBaseDateTimeField_MockBaseDateTimeField0.set(2695L, 2695);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      testPreciseDateTimeField_MockStandardDateTimeField0.roundHalfFloor(1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      testOffsetDateTimeField_MockOffsetDateTimeField0.roundHalfFloor(2858L);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.roundHalfCeiling((-781L));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      testBaseDateTimeField_MockBaseDateTimeField0.roundFloor((-2741L));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.remainder(0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      testPreciseDateTimeField_MockPreciseDateTimeField0.remainder(27L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      testOffsetDateTimeField_MockStandardDateTimeField0.getRangeDurationField();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4054), 0, 0, (-4054), 0, 23);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      int[] intArray0 = new int[3];
      testOffsetDateTimeField_MockStandardDateTimeField0.getMinimumValue((ReadablePartial) localTime0, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      LocalTime localTime0 = new LocalTime((DateTimeZone) null);
      testBaseDateTimeField_MockBaseDateTimeField0.getMinimumValue((ReadablePartial) localTime0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      testPreciseDateTimeField_MockPreciseDateTimeField0.getMinimumValue((-421L));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      testOffsetDateTimeField_MockOffsetDateTimeField0.getMinimumValue(0L);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      testBaseDateTimeField_MockBaseDateTimeField0.getMinimumValue();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      testOffsetDateTimeField_MockStandardDateTimeField0.getMinimumValue();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      testOffsetDateTimeField_MockOffsetDateTimeField0.getMaximumValue();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      testPreciseDateTimeField_MockStandardDateTimeField0.getDurationField();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      testBaseDateTimeField_MockBaseDateTimeField0.getDifferenceAsLong((-2270L), (-999L));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-2410));
      offsetDateTimeField0.getDifferenceAsLong((-2410), (-1L));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getDifference(665L, (-1053L));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);
      Locale locale0 = Locale.ENGLISH;
      testBaseDateTimeField_MockBaseDateTimeField0.getAsText((ReadablePartial) localTime0, locale0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField();
      testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.get(0L);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      testOffsetDateTimeField_MockStandardDateTimeField0.get((-27525L));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      testBaseDateTimeField_MockBaseDateTimeField0.addWrapField((long) 0, 0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      testOffsetDateTimeField_MockStandardDateTimeField0.addWrapField((-525L), 2673);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.add((-2L), (-2L));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      Locale locale0 = Locale.KOREAN;
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockBaseDateTimeField0.set((ReadablePartial) null, 4420, intArray0, "0", locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4420
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 10);
      MockPartial mockPartial0 = new MockPartial();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        dividedDateTimeField0.set((ReadablePartial) mockPartial0, (-1711), intArray0, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 10 for secondOfMinute must be in the range [0,5]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockBaseDateTimeField0.set(0L, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for weekOfWeekyear is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      // Undeclared exception!
      try { 
        testOffsetDateTimeField_MockStandardDateTimeField0.set(26050L, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for secondOfMinute must be in the range [3,62]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      Locale locale0 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.getAsShortText((ReadablePartial) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, dateTimeFieldType0, 10);
      YearMonth yearMonth0 = YearMonth.now((Chronology) gJChronology0);
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        dividedDateTimeField0.getAsShortText((ReadablePartial) yearMonth0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_DATE_TIME;
      Locale locale0 = dateTimeFormatter0.getLocale();
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockBaseDateTimeField0.convertText("m{M_=7v%;X1zH]", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"m{M_=7v%;X1zH]\" for minuteOfDay is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      DateTime dateTime0 = new DateTime();
      LocalDate localDate0 = dateTime0.toLocalDate();
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockStandardBaseDateTimeField0.addWrapField((ReadablePartial) localDate0, (-2288), intArray0, (-2288));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2288
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      testBaseDateTimeField_MockBaseDateTimeField0.roundHalfEven(2695);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      testBaseDateTimeField_MockBaseDateTimeField0.roundHalfEven((-1371L));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.roundHalfCeiling(2041L);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.roundCeiling((-1L));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      LocalTime localTime0 = new LocalTime(321L, (DateTimeZone) null);
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        testOffsetDateTimeField_MockStandardDateTimeField0.add((ReadablePartial) localTime0, 168, intArray0, 168);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 168
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getType();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.remainder((-246L));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      Locale locale0 = Locale.PRC;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2272, 2272, 17);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((long) 1, "2002-06-09T05:00:00.000+01:00", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"2002-06-09T05:00:00.000+01:00\" for yearOfEra is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      testBaseDateTimeField_MockBaseDateTimeField0.isLeap((-319L));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.isSupported();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      int[] intArray0 = new int[2];
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getMaximumValue((ReadablePartial) null, intArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DurationField durationField0 = buddhistChronology0.millis();
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField(dateTimeFieldType0, durationField0);
      testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getDifference(1, 1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      testOffsetDateTimeField_MockStandardDateTimeField0.getMaximumValue((-361L));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DurationField durationField0 = buddhistChronology0.millis();
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField(dateTimeFieldType0, durationField0);
      testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.addWrapField(0L, 0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      Locale locale0 = Locale.forLanguageTag("");
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getAsText(0, locale0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      testPreciseDateTimeField_MockPreciseDateTimeField0.getMaximumValue((ReadablePartial) null);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      testBaseDateTimeField_MockBaseDateTimeField0.add((long) 2695, (long) 2695);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      testOffsetDateTimeField_MockOffsetDateTimeField0.getName();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      LocalDateTime localDateTime0 = new LocalDateTime();
      testOffsetDateTimeField_MockOffsetDateTimeField0.getMinimumValue((ReadablePartial) localDateTime0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      Partial partial0 = new Partial();
      Locale locale0 = Locale.forLanguageTag("bB@z#ctm");
      testBaseDateTimeField_MockStandardBaseDateTimeField0.getAsShortText((ReadablePartial) partial0, (-2288), locale0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      DurationField durationField0 = testBaseDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField(dateTimeFieldType0, durationField0);
      testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getMinimumValue((ReadablePartial) null, (int[]) null);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.getMinimumValue(1761L);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.roundHalfEven(0L);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 2272, 2272, 17);
      offsetDateTimeField0.roundHalfEven(0L);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      testBaseDateTimeField_MockBaseDateTimeField0.roundHalfCeiling(0L);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      testBaseDateTimeField_MockBaseDateTimeField0.roundCeiling(9223372036854775807L);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(testPreciseDateTimeField_MockPreciseDateTimeField0, dateTimeFieldType0, 2141501799, 999999, 510);
      Locale locale0 = Locale.TAIWAN;
      offsetDateTimeField0.getMaximumTextLength(locale0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_ORDINAL_DATE;
      Locale locale0 = dateTimeFormatter0.getLocale();
      testOffsetDateTimeField_MockStandardDateTimeField0.getMaximumTextLength(locale0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      MockZone mockZone0 = new MockZone((-4292L), (-2143800141), (-2143800141));
      LocalDate localDate0 = new LocalDate((-4292L), (DateTimeZone) mockZone0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockStandardBaseDateTimeField0.addWrapPartial(localDate0, (-2530), intArray0, (-2530));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2530
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      LocalTime localTime0 = LocalTime.now();
      int[] intArray0 = new int[1];
      testOffsetDateTimeField_MockStandardDateTimeField0.addWrapPartial(localTime0, 100, intArray0, 0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) iSOChronology0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        testOffsetDateTimeField_MockOffsetDateTimeField0.addWrapPartial(localDateTime0, 418, intArray0, 218);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 418
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      monthDay0.plusDays(618);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(1761L);
      LocalDate localDate0 = yearMonth0.toLocalDate(1);
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      testBaseDateTimeField_MockStandardBaseDateTimeField0.add((ReadablePartial) localDate0, 1, (int[]) null, 0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = null;
      try {
        zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testPreciseDateTimeField_MockStandardDateTimeField0, (DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      DurationField durationField0 = testBaseDateTimeField_MockStandardBaseDateTimeField0.getRangeDurationField();
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField(dateTimeFieldType0, durationField0);
      Locale locale0 = Locale.ROOT;
      testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getAsText((ReadablePartial) null, 1821, locale0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      YearMonth yearMonth0 = new YearMonth();
      int[] intArray0 = new int[4];
      int[] intArray1 = testOffsetDateTimeField_MockStandardDateTimeField0.addWrapField((ReadablePartial) yearMonth0, 0, intArray0, 0);
      assertArrayEquals(new int[] {60, 1, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      DurationField durationField0 = testPreciseDateTimeField_MockStandardDateTimeField0.getLeapDurationField();
      assertNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      String string0 = testOffsetDateTimeField_MockOffsetDateTimeField0.getAsShortText(0L);
      assertEquals("3", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      int[] intArray0 = new int[6];
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockBaseDateTimeField0.set((ReadablePartial) null, (-2907), intArray0, "org.joda.time.chrono.BasicSingleEraDateTimeField", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org.joda.time.chrono.BasicSingleEraDateTimeField\" for secondOfMinute is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        testBaseDateTimeField_MockBaseDateTimeField0.add((ReadablePartial) null, (-1), (int[]) null, (-2092419963));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      long long0 = offsetDateTimeField0.getDifferenceAsLong(1, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TestOffsetDateTimeField.MockOffsetDateTimeField testOffsetDateTimeField_MockOffsetDateTimeField0 = new TestOffsetDateTimeField.MockOffsetDateTimeField();
      // Undeclared exception!
      try { 
        testOffsetDateTimeField_MockOffsetDateTimeField0.add(3421L, 185542587187200000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 185542587187200000 * 1000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      Locale locale0 = Locale.FRANCE;
      ZeroIsMaxDateTimeField zeroIsMaxDateTimeField0 = new ZeroIsMaxDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, dateTimeFieldType0);
      String string0 = zeroIsMaxDateTimeField0.getAsShortText(0L, locale0);
      assertEquals("60", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      long long0 = testBaseDateTimeField_MockBaseDateTimeField0.roundHalfFloor((-398L));
      assertEquals((-360L), long0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      String string0 = testPreciseDateTimeField_MockStandardDateTimeField0.getAsText(1679L);
      assertEquals("27", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, dateTimeFieldType0, 1563);
      String string0 = remainderDateTimeField0.getAsText(38898367008L, (Locale) null);
      assertEquals("287", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testOffsetDateTimeField_MockStandardDateTimeField0, (DurationField) null, dateTimeFieldType0, 1745);
      Locale locale0 = Locale.FRANCE;
      int int0 = remainderDateTimeField0.getMaximumShortTextLength(locale0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DurationField durationField0 = buddhistChronology0.millis();
      TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0 = new TestPreciseDurationDateTimeField.MockPreciseDurationDateTimeField(dateTimeFieldType0, durationField0);
      LocalDateTime localDateTime0 = new LocalDateTime((-2929L), (DateTimeZone) null);
      String string0 = testPreciseDurationDateTimeField_MockPreciseDurationDateTimeField0.getAsShortText((ReadablePartial) localDateTime0, (Locale) null);
      assertEquals("1970", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField(dateTimeFieldType0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, dateTimeFieldType0, 1563);
      int int0 = remainderDateTimeField0.getLeapAmount(0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      long long0 = testPreciseDateTimeField_MockStandardDateTimeField0.set(2599L, "0");
      assertEquals(19L, long0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      MonthDay monthDay0 = MonthDay.now((Chronology) lenientChronology0);
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        testOffsetDateTimeField_MockStandardDateTimeField0.getAsText((ReadablePartial) monthDay0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'secondOfMinute' is not supported
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      String string0 = offsetDateTimeField0.getAsShortText(1, (Locale) null);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      String string0 = testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0.toString();
      assertEquals("DateTimeField[secondOfMinute]", string0);
  }
}
