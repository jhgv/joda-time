/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:41:08 GMT 2018
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDate;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.RemainderDateTimeField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.field.TestBaseDateTimeField;
import org.joda.time.field.TestOffsetDateTimeField;
import org.joda.time.field.TestPreciseDateTimeField;
import org.joda.time.field.TestPreciseDurationDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DividedDateTimeField_ESTest extends DividedDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2467);
      dividedDateTimeField0.roundHalfCeiling(2467);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2467);
      dividedDateTimeField0.setExtended(2467, 355);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) null, testPreciseDateTimeField_MockStandardDateTimeField0);
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      DurationField durationField0 = testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(skipDateTimeField0, durationField0, dateTimeFieldType0, 505);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      dividedDateTimeField0.getDifferenceAsLong((-2389L), 505);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(testPreciseDateTimeField_MockStandardDateTimeField0, dateTimeFieldType0, 93);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(offsetDateTimeField0, dateTimeFieldType0, 412);
      dividedDateTimeField0.getDifference(93, 2354L);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DurationField durationField0 = buddhistChronology0.weeks();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testPreciseDateTimeField_MockPreciseDateTimeField0, durationField0, dateTimeFieldType0, 4645);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, durationField0, dateTimeFieldType0);
      dividedDateTimeField0.roundFloor(0L);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      DurationField durationField0 = testBaseDateTimeField_MockBaseDateTimeField0.getDurationField();
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = yearMonth0.getFieldType(1);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 2014);
      dividedDateTimeField0.remainder(172L);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 1455);
      dividedDateTimeField0.getMinimumValue();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      TestPreciseDurationDateTimeField.MockZeroDurationField testPreciseDurationDateTimeField_MockZeroDurationField0 = new TestPreciseDurationDateTimeField.MockZeroDurationField(durationFieldType0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 412);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, testPreciseDurationDateTimeField_MockZeroDurationField0, dateTimeFieldType0);
      dividedDateTimeField0.getMaximumValue();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testPreciseDateTimeField_MockStandardDateTimeField0, dateTimeFieldType0, 2);
      dividedDateTimeField0.get(0L);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(julianChronology0);
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(julianChronology0, dateTimeField0, 2);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(skipUndoDateTimeField0, dateTimeFieldType0, 2);
      dividedDateTimeField0.add((-2836L), (-2836L));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testPreciseDateTimeField_MockPreciseDateTimeField0, dateTimeFieldType0, 2109);
      dividedDateTimeField0.add((-1065L), 2109);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      DateTimeField dateTimeField0 = localDate0.getField(1);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(ethiopicChronology0, dateTimeField0);
      DurationField durationField0 = skipDateTimeField0.getLeapDurationField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 528);
      dividedDateTimeField0.add((-1L), (-1267));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) null, testPreciseDateTimeField_MockStandardDateTimeField0);
      TestBaseDateTimeField.MockStandardBaseDateTimeField testBaseDateTimeField_MockStandardBaseDateTimeField0 = new TestBaseDateTimeField.MockStandardBaseDateTimeField();
      DurationField durationField0 = testBaseDateTimeField_MockStandardBaseDateTimeField0.getDurationField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(skipDateTimeField0, durationField0, dateTimeFieldType0, 505);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.set((long) 505, 505);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 505 for secondOfMinute must be in the range [0,0]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2467);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.add(27559254240002467L, (-695L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      TestPreciseDurationDateTimeField.MockImpreciseDurationField testPreciseDurationDateTimeField_MockImpreciseDurationField0 = new TestPreciseDurationDateTimeField.MockImpreciseDurationField(durationFieldType0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField((RemainderDateTimeField) null, testPreciseDurationDateTimeField_MockImpreciseDurationField0, dateTimeFieldType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField((RemainderDateTimeField) null, dateTimeFieldType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField((DateTimeField) null, dateTimeFieldType0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2467);
      dividedDateTimeField0.get(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 1205);
      dividedDateTimeField0.getRangeDurationField();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestBaseDateTimeField.MockBaseDateTimeField testBaseDateTimeField_MockBaseDateTimeField0 = new TestBaseDateTimeField.MockBaseDateTimeField();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(iSOChronology0, testBaseDateTimeField_MockBaseDateTimeField0, 45);
      DurationField durationField0 = skipUndoDateTimeField0.getDurationField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testBaseDateTimeField_MockBaseDateTimeField0, durationField0, dateTimeFieldType0, 45);
      dividedDateTimeField0.roundFloor(0L);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestPreciseDateTimeField.MockPreciseDateTimeField testPreciseDateTimeField_MockPreciseDateTimeField0 = new TestPreciseDateTimeField.MockPreciseDateTimeField();
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = testOffsetDateTimeField_MockStandardDateTimeField0.getType();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(testPreciseDateTimeField_MockPreciseDateTimeField0, (DurationField) null, dateTimeFieldType0, (-1004));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      DurationField durationField0 = buddhistChronology0.years();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, durationField0, dateTimeFieldType0, 4);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      dividedDateTimeField0.set(0L, 0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2467);
      dividedDateTimeField0.getMaximumValue();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0 = new TestPreciseDurationDateTimeField.MockStandardBaseDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(testPreciseDurationDateTimeField_MockStandardBaseDateTimeField0, dateTimeFieldType0, 1654);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.addWrapField((-292L), 1654);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2467);
      dividedDateTimeField0.getRangeDurationField();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestOffsetDateTimeField.MockStandardDateTimeField testOffsetDateTimeField_MockStandardDateTimeField0 = new TestOffsetDateTimeField.MockStandardDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DividedDateTimeField dividedDateTimeField0 = null;
      try {
        dividedDateTimeField0 = new DividedDateTimeField(testOffsetDateTimeField_MockStandardDateTimeField0, dateTimeFieldType0, (-798));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The divisor must be at least 2
         //
         verifyException("org.joda.time.field.DividedDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      TestPreciseDurationDateTimeField.MockZeroDurationField testPreciseDurationDateTimeField_MockZeroDurationField0 = new TestPreciseDurationDateTimeField.MockZeroDurationField(durationFieldType0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 412);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, testPreciseDurationDateTimeField_MockZeroDurationField0, dateTimeFieldType0);
      dividedDateTimeField0.getDivisor();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2467);
      dividedDateTimeField0.getDurationField();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestPreciseDateTimeField.MockStandardDateTimeField testPreciseDateTimeField_MockStandardDateTimeField0 = new TestPreciseDateTimeField.MockStandardDateTimeField();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(testPreciseDateTimeField_MockStandardDateTimeField0, dateTimeFieldType0, 2);
      dividedDateTimeField0.remainder(0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, 2467);
      dividedDateTimeField0.getMinimumValue();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      TestPreciseDurationDateTimeField.MockZeroDurationField testPreciseDurationDateTimeField_MockZeroDurationField0 = new TestPreciseDurationDateTimeField.MockZeroDurationField(durationFieldType0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 412);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, testPreciseDurationDateTimeField_MockZeroDurationField0, dateTimeFieldType0);
      dividedDateTimeField0.add((long) 412, 520L);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfMonth();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      TestPreciseDateTimeField.MockZeroDurationField testPreciseDateTimeField_MockZeroDurationField0 = new TestPreciseDateTimeField.MockZeroDurationField(durationFieldType0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, testPreciseDateTimeField_MockZeroDurationField0, dateTimeFieldType0, 190);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, dateTimeFieldType0);
      // Undeclared exception!
      try { 
        dividedDateTimeField0.roundFloor(2992L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,31]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      TestPreciseDurationDateTimeField.MockZeroDurationField testPreciseDurationDateTimeField_MockZeroDurationField0 = new TestPreciseDurationDateTimeField.MockZeroDurationField(durationFieldType0);
      RemainderDateTimeField remainderDateTimeField0 = new RemainderDateTimeField(dateTimeField0, dateTimeFieldType0, 412);
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(remainderDateTimeField0, testPreciseDurationDateTimeField_MockZeroDurationField0, dateTimeFieldType0);
      dividedDateTimeField0.add((long) 0, 0);
  }
}
