/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:39:31 GMT 2018
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MockZone;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractReadableInstantFieldProperty_ESTest extends AbstractReadableInstantFieldProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Instant instant0 = new Instant((-2583L));
      Chronology chronology0 = instant0.getChronology();
      LocalDateTime localDateTime0 = new LocalDateTime((-2583L), chronology0);
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfDay();
      localDateTime_Property0.remainder();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(246L);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      mutableDateTime_Property0.isLeap();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      localTime_Property0.getMinimumValueOverall();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L, (DateTimeZone) null);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      localTime_Property0.getMinimumValue();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      localDate_Property0.getField();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      LocalDate localDate0 = LocalDate.now((Chronology) lenientChronology0);
      LocalDate localDate1 = localDate0.minusMonths(1119);
      LocalDate.Property localDate_Property0 = localDate1.dayOfYear();
      DateTime dateTime0 = DateTime.now();
      localDate_Property0.getDifferenceAsLong(dateTime0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(3120L, (Chronology) null);
      MockZone mockZone0 = new MockZone((-1067L), 17, 4);
      DateTime dateTime0 = DateTime.now((DateTimeZone) mockZone0);
      DateTime.Property dateTime_Property0 = dateTime0.weekyear();
      dateTime_Property0.getDifference(mutableDateTime0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-1067L), 17, 4);
      DateTime dateTime0 = DateTime.now((DateTimeZone) mockZone0);
      DateTime.Property dateTime_Property0 = dateTime0.weekyear();
      DateTime dateTime1 = dateTime_Property0.withMaximumValue();
      dateTime_Property0.getDifference(dateTime1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      localTime_Property0.getFieldType();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = LocalDate.now((Chronology) ethiopicChronology0);
      LocalDate.Property localDate_Property0 = localDate0.year();
      Locale locale0 = Locale.JAPAN;
      localDate_Property0.getAsShortText(locale0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LimitChronology limitChronology0 = LimitChronology.getInstance(copticChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      LocalTime localTime0 = new LocalTime((Chronology) limitChronology0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      localTime_Property0.get();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(3120L, (Chronology) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
      mutableDateTime_Property0.getName();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(3120L, (Chronology) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
      mutableDateTime_Property0.equals(mutableDateTime0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      localDateTime_Property0.compareTo((ReadablePartial) localDateTime0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      DateTime dateTime0 = new DateTime();
      localDateTime_Property0.compareTo((ReadableInstant) dateTime0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfSecond();
      Instant instant0 = new Instant((-672L));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTime dateTime0 = instant0.toDateTime(dateTimeZone0);
      localDateTime_Property0.compareTo((ReadableInstant) dateTime0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfEra();
      // Undeclared exception!
      try { 
        localDateTime_Property0.compareTo((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant must not be null
         //
         verifyException("org.joda.time.field.AbstractReadableInstantFieldProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      Instant instant0 = new Instant((-672L));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTime dateTime0 = instant0.toDateTime(dateTimeZone0);
      localDateTime_Property0.compareTo((ReadableInstant) dateTime0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();
      mutableDateTime_Property0.getDifferenceAsLong(mutableDateTime0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-1067L), 17, 4);
      DateTime dateTime0 = DateTime.now((DateTimeZone) mockZone0);
      DateTime.Property dateTime_Property0 = dateTime0.weekyear();
      dateTime_Property0.getDifference(dateTime0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockZone mockZone0 = new MockZone((-1067L), 17, 4);
      DateTime dateTime0 = DateTime.now((DateTimeZone) mockZone0);
      DateTime.Property dateTime_Property0 = dateTime0.weekyear();
      dateTime_Property0.getMinimumValue();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Instant instant0 = new Instant((-28L));
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
      mutableDateTime_Property0.getRangeDurationField();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime(778, 17, (-1), 17, (-1), 1807, 61234, lenientChronology0);
      DateTime.Property dateTime_Property0 = dateTime0.weekOfWeekyear();
      dateTime_Property0.remainder();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      localDate_Property0.getAsText((Locale) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();
      mutableDateTime_Property0.getLeapDurationField();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(974L, (Chronology) iSOChronology0);
      DateTime dateTime0 = localDate0.toDateTime(localTime0, dateTimeZone0);
      DateTime.Property dateTime_Property0 = dateTime0.millisOfDay();
      dateTime_Property0.toInterval();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      localDateTime_Property0.getMaximumValueOverall();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      DateTime dateTime0 = new DateTime(778, 17, (-1), 17, (-1), 1807, 61234, lenientChronology0);
      DateTime.Property dateTime_Property0 = dateTime0.weekOfWeekyear();
      dateTime_Property0.getAsString();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(3120L, (Chronology) null);
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
      mutableDateTime_Property0.getAsShortText();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate(0L, (Chronology) copticChronology0);
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      Locale locale0 = Locale.CANADA_FRENCH;
      localDate_Property0.getMaximumShortTextLength(locale0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      LocalDate localDate0 = LocalDate.now((Chronology) lenientChronology0);
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      localDate_Property0.getMinimumValueOverall();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L, (DateTimeZone) null);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      localTime_Property0.getDurationField();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      LocalDate localDate0 = LocalDate.now((Chronology) lenientChronology0);
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      Locale locale0 = Locale.JAPAN;
      localDate_Property0.getMaximumTextLength(locale0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      localDateTime_Property0.getLeapAmount();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      localDateTime_Property0.toString();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      localDateTime_Property0.hashCode();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      localDateTime_Property0.isLeap();
  }
}
