/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:33:17 GMT 2018
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Interval;
import org.joda.time.MutableInterval;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractInterval_ESTest extends AbstractInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Interval interval0 = new Interval((-1L), 0L);
      DateTime dateTime0 = interval0.getEnd();
      Interval interval1 = interval0.withEnd(dateTime0);
      DateTime dateTime1 = interval1.getEnd();
      Period period0 = interval1.toPeriod();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime1, period0);
      mutableInterval0.contains((ReadableInstant) dateTime1);
      MutableInterval mutableInterval1 = mutableInterval0.toMutableInterval();
      Duration duration0 = mutableInterval1.toDuration();
      mutableInterval1.setStart(dateTime1);
      interval0.isAfter((ReadableInstant) dateTime0);
      mutableInterval1.setDurationAfterStart((ReadableDuration) duration0);
      interval0.gap(mutableInterval0);
      interval1.getStart();
      mutableInterval0.getEnd();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(31L, 31L);
      Interval interval0 = mutableInterval0.toInterval();
      interval0.equals(mutableInterval0);
      Period period0 = mutableInterval0.toPeriod();
      mutableInterval0.setPeriodAfterStart(period0);
      DateTime dateTime0 = interval0.getEnd();
      mutableInterval0.setStartMillis(31L);
      interval0.isEqual(mutableInterval0);
      interval0.toString();
      mutableInterval0.setDurationAfterStart((ReadableDuration) null);
      mutableInterval0.toPeriod();
      Interval interval1 = interval0.toInterval();
      interval0.isBefore(31L);
      mutableInterval0.isAfter((ReadableInstant) dateTime0);
      interval0.getStart();
      MutableInterval mutableInterval1 = new MutableInterval(dateTime0, period0);
      interval1.toPeriod((PeriodType) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Interval interval0 = new Interval(914L, 914L);
      DateTime dateTime0 = interval0.getEnd();
      interval0.isBefore((ReadableInterval) interval0);
      Interval interval1 = new Interval((ReadableDuration) null, dateTime0);
      MutableInterval mutableInterval0 = new MutableInterval(interval1);
      interval0.isBefore((ReadableInstant) dateTime0);
      interval1.overlap(interval0);
      interval1.contains(0L);
      interval0.toString();
      mutableInterval0.isBefore((ReadableInterval) interval0);
      interval0.overlaps((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(31L, 31L);
      Interval interval0 = mutableInterval0.toInterval();
      boolean boolean0 = interval0.equals(mutableInterval0);
      DateTime dateTime0 = interval0.getEnd();
      Interval interval1 = interval0.withEnd(dateTime0);
      interval0.contains((ReadableInterval) interval1);
      Period period0 = mutableInterval0.toPeriod();
      mutableInterval0.setPeriodAfterStart(period0);
      boolean boolean1 = interval1.isAfter((ReadableInstant) dateTime0);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      DateTime dateTime1 = interval0.getEnd();
      interval1.toString();
      mutableInterval0.setStartMillis(31L);
      boolean boolean2 = interval0.isEqual(mutableInterval0);
      boolean boolean3 = interval1.contains((ReadableInterval) interval0);
      assertFalse(boolean3 == boolean0);
      
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime1);
      Interval interval2 = interval1.withDurationBeforeEnd((ReadableDuration) null);
      String string0 = interval0.toString();
      assertEquals("1969-12-31T21:00:00.031-03:00/1969-12-31T21:00:00.031-03:00", string0);
      
      interval0.equals(dateTime0);
      mutableInterval0.setDurationAfterStart((ReadableDuration) null);
      Period period1 = mutableInterval0.toPeriod();
      interval1.hashCode();
      interval1.isBefore((ReadableInterval) mutableInterval0);
      interval1.withPeriodBeforeEnd(period1);
      interval0.toInterval();
      boolean boolean4 = interval0.isBefore(31L);
      assertTrue(boolean4);
      
      mutableInterval0.setDurationBeforeEnd(31L);
      boolean boolean5 = mutableInterval0.isAfter((ReadableInstant) dateTime1);
      assertFalse(boolean5 == boolean2);
      
      interval0.getStart();
      boolean boolean6 = interval2.isBeforeNow();
      assertFalse(boolean6 == boolean1);
      
      MutableInterval mutableInterval1 = new MutableInterval(dateTime1, period0);
      boolean boolean7 = interval2.equals(mutableInterval1);
      assertFalse(mutableInterval0.equals((Object)mutableInterval1));
      assertFalse(mutableInterval1.equals((Object)mutableInterval0));
      assertTrue(boolean7);
      
      mutableInterval0.contains(0L);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Interval interval0 = new Interval((-1395L), (-1L));
      interval0.isAfterNow();
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = interval0.withEnd(dateTime0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval0);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.overlaps(mutableInterval0);
      interval0.containsNow();
      interval0.isAfter(2461L);
      Period period0 = interval0.toPeriod();
      Interval interval2 = interval0.withPeriodAfterStart(period0);
      interval2.toDuration();
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      interval0.withPeriodBeforeEnd(period0);
      interval1.isAfter((-2289L));
      mutableInterval0.toDuration();
      DateTime dateTime1 = interval1.getStart();
      interval0.isBefore((ReadableInstant) dateTime1);
      mutableInterval0.setInterval((ReadableInterval) interval0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.isAfterNow();
      mutableInterval0.setPeriodBeforeEnd(period0);
      interval0.contains((ReadableInterval) mutableInterval0);
      interval0.toDurationMillis();
      interval1.isBeforeNow();
      interval0.withDurationAfterStart(duration0);
      interval0.overlaps(interval2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Interval interval0 = new Interval((-1386L), (-1L));
      interval0.isAfterNow();
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = new Interval(duration0, dateTime0);
      Interval interval2 = interval0.withEnd(dateTime0);
      MutableInterval mutableInterval0 = interval2.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval1);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.containsNow();
      interval0.isAfter(2461L);
      Period period0 = interval1.toPeriod();
      interval1.withPeriodAfterStart(period0);
      interval1.toDuration();
      interval1.withPeriodAfterStart(period0);
      Interval interval3 = interval2.withStartMillis((-1386L));
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      interval3.getEnd();
      interval2.isAfter((-2289L));
      Duration duration1 = mutableInterval0.toDuration();
      DateTime dateTime1 = interval2.getStart();
      interval1.isBefore((ReadableInstant) dateTime1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.setPeriodBeforeEnd(period0);
      interval3.contains((ReadableInterval) mutableInterval0);
      interval2.withEndMillis(1961L);
      interval1.toDurationMillis();
      interval2.isBeforeNow();
      interval1.toMutableInterval();
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Interval interval0 = new Interval((-1395L), (-1L));
      interval0.isAfterNow();
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = interval0.withEnd(dateTime0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval0);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.overlaps(mutableInterval0);
      interval0.containsNow();
      interval0.isAfter(2461L);
      Period period0 = interval0.toPeriod();
      interval0.withPeriodAfterStart(period0);
      interval0.toDuration();
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      Interval interval2 = interval0.withPeriodBeforeEnd(period0);
      mutableInterval0.getStart();
      interval1.isAfter((-2289L));
      mutableInterval0.toDuration();
      DateTime dateTime1 = interval1.getStart();
      interval0.isBefore((ReadableInstant) dateTime1);
      mutableInterval0.setInterval((ReadableInterval) interval0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.isAfterNow();
      mutableInterval0.setPeriodBeforeEnd(period0);
      interval0.contains((ReadableInterval) mutableInterval0);
      interval1.withEndMillis(1961L);
      interval0.toDurationMillis();
      interval1.isBeforeNow();
      interval1.overlaps(interval2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Interval interval0 = new Interval((-1386L), (-1L));
      interval0.isAfterNow();
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = new Interval(duration0, dateTime0);
      Interval interval2 = interval0.withEnd(dateTime0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval1);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.containsNow();
      interval0.isAfter(2461L);
      Period period0 = interval1.toPeriod();
      interval1.withPeriodAfterStart(period0);
      interval1.toDuration();
      Interval interval3 = interval1.toInterval();
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      interval2.isAfter((-2289L));
      Duration duration1 = mutableInterval0.toDuration();
      DateTime dateTime1 = interval2.getStart();
      interval1.isBefore((ReadableInstant) dateTime1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.isAfterNow();
      mutableInterval0.setPeriodBeforeEnd(period0);
      interval3.contains((ReadableInterval) mutableInterval0);
      Interval interval4 = interval2.withEndMillis(1961L);
      interval1.toDurationMillis();
      interval2.isBeforeNow();
      mutableInterval0.setEndMillis(190L);
      interval2.withDurationBeforeEnd(duration1);
      mutableInterval0.contains((ReadableInterval) interval4);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Interval interval0 = new Interval((-1386L), (-1L));
      interval0.isAfterNow();
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = new Interval(duration0, dateTime0);
      Interval interval2 = interval0.withEnd(dateTime0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval1);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.containsNow();
      interval0.isAfter(2461L);
      Period period0 = interval1.toPeriod();
      interval1.withPeriodAfterStart(period0);
      interval1.toDuration();
      Interval interval3 = interval1.toInterval();
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      interval2.isAfter((-2289L));
      Duration duration1 = mutableInterval0.toDuration();
      DateTime dateTime1 = interval2.getStart();
      interval1.isBefore((ReadableInstant) dateTime1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.isAfterNow();
      mutableInterval0.setPeriodBeforeEnd(period0);
      interval3.contains((ReadableInterval) mutableInterval0);
      Interval interval4 = interval2.withEndMillis(1961L);
      interval1.toDurationMillis();
      interval2.isBeforeNow();
      mutableInterval0.setEndMillis(190L);
      interval2.withDurationBeforeEnd(duration1);
      mutableInterval0.contains((ReadableInterval) interval4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Interval interval0 = new Interval((-1386L), (-1L));
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = new Interval(duration0, dateTime0);
      Interval interval2 = interval0.withEnd(dateTime0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval1);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.containsNow();
      interval0.isAfter(2461L);
      Period period0 = interval1.toPeriod();
      interval1.withPeriodAfterStart(period0);
      interval1.toDuration();
      Interval interval3 = interval1.toInterval();
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      interval2.isAfter((-2289L));
      Duration duration1 = mutableInterval0.toDuration();
      DateTime dateTime1 = interval2.getStart();
      interval1.isBefore((ReadableInstant) dateTime1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.isAfterNow();
      mutableInterval0.setPeriodBeforeEnd(period0);
      interval3.contains((ReadableInterval) mutableInterval0);
      Interval interval4 = interval2.withEndMillis((-1386L));
      interval1.toDurationMillis();
      interval2.isBeforeNow();
      mutableInterval0.setEndMillis(190L);
      interval2.withDurationBeforeEnd(duration1);
      interval1.overlap(interval4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Interval interval0 = new Interval(914L, 914L);
      Interval interval1 = interval0.withDurationBeforeEnd((ReadableDuration) null);
      DateTime dateTime0 = interval1.getEnd();
      interval1.isBefore((ReadableInterval) interval0);
      Interval interval2 = new Interval((ReadableDuration) null, dateTime0);
      MutableInterval mutableInterval0 = new MutableInterval(interval2);
      interval2.overlap(interval1);
      mutableInterval0.isBefore((ReadableInterval) null);
      interval2.contains(0L);
      interval1.toString();
      mutableInterval0.isBefore((ReadableInterval) interval1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Interval interval0 = new Interval((-1395L), (-1L));
      interval0.isAfterNow();
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = interval0.withEnd(dateTime0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval0);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.overlaps(mutableInterval0);
      interval0.containsNow();
      interval0.isAfter(2461L);
      Period period0 = interval0.toPeriod();
      Interval interval2 = interval0.withPeriodAfterStart(period0);
      interval0.toDuration();
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      interval0.withPeriodBeforeEnd(period0);
      interval1.isAfter((-2289L));
      mutableInterval0.toDuration();
      DateTime dateTime1 = interval1.getStart();
      interval0.isBefore((ReadableInstant) dateTime1);
      mutableInterval0.setInterval((ReadableInterval) interval0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.isAfterNow();
      mutableInterval0.setPeriodBeforeEnd(period0);
      interval0.contains((ReadableInterval) mutableInterval0);
      interval1.withEndMillis(1961L);
      interval0.toDurationMillis();
      interval1.isBeforeNow();
      interval2.getEnd();
      mutableInterval0.setInterval((-955L), (-954L));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Interval interval0 = new Interval((-1386L), (-1L));
      interval0.isAfterNow();
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = new Interval(duration0, dateTime0);
      Interval interval2 = interval0.withEnd(dateTime0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval1);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.containsNow();
      interval0.isAfter(2461L);
      Period period0 = interval1.toPeriod();
      interval1.withPeriodAfterStart(period0);
      interval1.toDuration();
      Interval interval3 = interval1.toInterval();
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      interval2.isAfter((-2289L));
      mutableInterval0.toDuration();
      DateTime dateTime1 = interval2.getStart();
      interval1.isBefore((ReadableInstant) dateTime1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.isAfterNow();
      mutableInterval0.setPeriodBeforeEnd(period0);
      interval3.contains((ReadableInterval) mutableInterval0);
      interval2.withEndMillis(1961L);
      interval1.toDurationMillis();
      interval2.isBeforeNow();
      mutableInterval0.hashCode();
      mutableInterval0.setDurationAfterStart(2378L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(2642L, 2642L);
      mutableInterval0.toMutableInterval();
      Interval interval0 = null;
      try {
        interval0 = new Interval(2642L, 508L, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Interval interval0 = new Interval((-1386L), (-1L));
      interval0.isAfterNow();
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = interval0.withStartMillis((-1386L));
      Interval interval2 = interval0.withEnd(dateTime0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval1);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.containsNow();
      interval0.isAfter(2468L);
      Period period0 = interval1.toPeriod();
      Interval interval3 = interval1.withPeriodAfterStart(period0);
      interval1.toDuration();
      Interval interval4 = interval1.toInterval();
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      interval2.isAfter((-2289L));
      mutableInterval0.toDuration();
      DateTime dateTime1 = interval2.getStart();
      interval1.isBefore((ReadableInstant) dateTime1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.isAfterNow();
      mutableInterval0.setPeriodBeforeEnd(period0);
      interval4.contains((ReadableInterval) mutableInterval0);
      interval2.withEndMillis(1961L);
      interval1.toDurationMillis();
      interval2.isBeforeNow();
      interval3.toDuration();
      interval4.contains((ReadableInstant) dateTime1);
      interval0.isBefore((ReadableInterval) interval3);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Interval interval0 = new Interval((-1386L), (-1L));
      interval0.isAfterNow();
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = interval0.withStartMillis((-1386L));
      Interval interval2 = interval0.withEnd(dateTime0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval1);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.containsNow();
      interval0.isAfter(2461L);
      Period period0 = interval1.toPeriod();
      interval1.withPeriodAfterStart(period0);
      interval1.toDuration();
      Interval interval3 = interval1.toInterval();
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      interval2.isAfter((-2289L));
      mutableInterval0.toDuration();
      DateTime dateTime1 = interval2.getStart();
      interval1.isBefore((ReadableInstant) dateTime1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.isAfterNow();
      mutableInterval0.setPeriodBeforeEnd(period0);
      interval3.contains((ReadableInterval) mutableInterval0);
      interval2.withEndMillis(1961L);
      interval1.toDurationMillis();
      interval2.isBeforeNow();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Interval interval0 = new Interval(1392409281320L, 1392409281320L);
      DateTime dateTime0 = interval0.getStart();
      Duration duration0 = interval0.toDuration();
      Interval interval1 = new Interval(dateTime0, duration0);
      interval0.isBefore((ReadableInstant) null);
      Period period0 = interval1.toPeriod((PeriodType) null);
      Interval interval2 = new Interval((ReadableInstant) null, period0);
      DateTime dateTime1 = interval1.getStart();
      Interval interval3 = interval2.withEnd(dateTime1);
      DateTime dateTime2 = interval3.getEnd();
      MutableInterval mutableInterval0 = new MutableInterval(dateTime2, period0);
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      interval0.contains(1392409281320L);
      interval2.withStart(dateTime0);
      interval2.isAfter(106L);
      mutableInterval0.copy();
      interval2.contains((ReadableInterval) interval0);
      Duration duration1 = interval3.toDuration();
      interval3.abuts(mutableInterval0);
      interval3.withDurationAfterStart(duration1);
      interval2.isAfter((ReadableInterval) interval1);
      interval0.withPeriodAfterStart((ReadablePeriod) null);
      interval3.withPeriodAfterStart((ReadablePeriod) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Interval interval0 = new Interval((-2170L), 12053L, (Chronology) null);
      Duration duration0 = interval0.toDuration();
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      Interval interval2 = interval1.withEndMillis(12053L);
      Interval interval3 = interval2.toInterval();
      interval3.contains((ReadableInterval) interval1);
      MutableInterval mutableInterval0 = interval1.toMutableInterval();
      mutableInterval0.setDurationAfterStart((ReadableDuration) duration0);
      mutableInterval0.hashCode();
      mutableInterval0.setChronology((Chronology) null);
      // Undeclared exception!
      try { 
        Interval.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: 
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Interval interval0 = new Interval((-1386L), (-1L));
      interval0.isAfterNow();
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = new Interval(duration0, dateTime0);
      Interval interval2 = interval0.withEnd(dateTime0);
      interval2.toMutableInterval();
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval1);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.containsNow();
      interval0.isAfter(2461L);
      Period period0 = interval1.toPeriod();
      interval1.withPeriodAfterStart(period0);
      interval1.toDuration();
      Interval interval3 = interval2.withStartMillis((-1386L));
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      interval2.isAfter((-2289L));
      mutableInterval0.toDuration();
      DateTime dateTime1 = interval2.getStart();
      interval1.isBefore((ReadableInstant) dateTime1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.isAfterNow();
      mutableInterval0.setPeriodBeforeEnd(period0);
      interval3.contains((ReadableInterval) mutableInterval0);
      interval2.withEndMillis(1961L);
      interval1.toDurationMillis();
      interval2.isBeforeNow();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = mutableInterval0.toInterval();
      mutableInterval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      ReadableInstant readableInstant0 = null;
      // Undeclared exception!
      try { 
        mutableInterval0.isEqual((ReadableInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-63L), (-63L));
      Interval interval0 = mutableInterval0.toInterval();
      interval0.contains((-2407L));
      interval0.withPeriodAfterStart((ReadablePeriod) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Interval interval0 = new Interval((-1386L), (-1L));
      interval0.isAfterNow();
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = new Interval(duration0, dateTime0);
      Interval interval2 = interval0.withEnd(dateTime0);
      MutableInterval mutableInterval0 = interval1.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval1);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.containsNow();
      interval0.isAfter(2461L);
      interval0.isEqual(interval2);
      Period period0 = interval1.toPeriod();
      Interval interval3 = mutableInterval0.toInterval();
      interval1.toDuration();
      Interval interval4 = interval3.toInterval();
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      interval2.isAfter((-2289L));
      mutableInterval0.toDuration();
      DateTime dateTime1 = interval2.getStart();
      interval1.isBefore((ReadableInstant) dateTime1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.isAfterNow();
      mutableInterval0.setPeriodBeforeEnd(period0);
      interval4.contains((ReadableInterval) mutableInterval0);
      interval2.withEndMillis(1961L);
      interval1.toDurationMillis();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Interval interval0 = new Interval((-1395L), (-1L));
      interval0.isAfterNow();
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = new Interval(duration0, dateTime0);
      Interval interval2 = interval0.withEnd(dateTime0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval1);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.overlaps(mutableInterval0);
      interval0.containsNow();
      interval0.isAfter(2461L);
      Period period0 = interval1.toPeriod();
      interval1.withPeriodAfterStart(period0);
      interval1.toDuration();
      // Undeclared exception!
      try { 
        interval2.withStartMillis(21260793600000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(2650L, 2650L);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) null);
      mutableInterval0.isBeforeNow();
      Interval interval0 = mutableInterval0.toInterval();
      mutableInterval0.getEnd();
      mutableInterval0.clone();
      interval0.containsNow();
      interval0.isBefore(374L);
      interval0.overlap((ReadableInterval) null);
      // Undeclared exception!
      try { 
        interval0.withEndMillis(157L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(31L, 31L);
      Interval interval0 = mutableInterval0.toInterval();
      interval0.equals(mutableInterval0);
      DateTime dateTime0 = interval0.getEnd();
      Interval interval1 = interval0.withEnd(dateTime0);
      interval0.contains((ReadableInterval) interval1);
      Period period0 = mutableInterval0.toPeriod();
      mutableInterval0.setPeriodAfterStart(period0);
      interval1.isAfter((ReadableInstant) dateTime0);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      DateTime dateTime1 = interval0.getEnd();
      interval1.toString();
      mutableInterval0.setStartMillis(31L);
      interval0.isEqual(mutableInterval0);
      interval1.contains((ReadableInterval) interval0);
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime1);
      Interval interval2 = interval1.withDurationBeforeEnd((ReadableDuration) null);
      interval0.equals(dateTime0);
      mutableInterval0.setDurationAfterStart((ReadableDuration) null);
      Period period1 = mutableInterval0.toPeriod();
      interval1.hashCode();
      interval1.isBefore((ReadableInterval) mutableInterval0);
      interval1.withPeriodBeforeEnd(period1);
      interval0.toInterval();
      interval0.isBefore(31L);
      mutableInterval0.isAfter((ReadableInstant) dateTime1);
      interval0.getStart();
      mutableInterval0.setStartMillis((-568L));
      DateTime dateTime2 = mutableInterval0.getStart();
      mutableInterval0.setPeriodAfterStart(period1);
      interval1.isAfter((ReadableInstant) dateTime2);
      interval2.getEnd();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      mutableInterval0.containsNow();
      DateTime dateTime0 = mutableInterval0.getEnd();
      mutableInterval0.contains((ReadableInstant) dateTime0);
      mutableInterval0.isAfterNow();
      mutableInterval0.setEndMillis(38898367008L);
      mutableInterval0.setEnd(dateTime0);
      mutableInterval0.isAfter((-858L));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Interval interval0 = new Interval(1908L, 1908L, (Chronology) null);
      Interval interval1 = interval0.withStartMillis((-2L));
      Interval interval2 = new Interval((-541L), 1654L, (Chronology) null);
      Interval interval3 = interval2.withStartMillis((-522L));
      Interval interval4 = new Interval(interval3);
      interval0.overlap(interval4);
      MutableInterval mutableInterval0 = interval1.toMutableInterval();
      mutableInterval0.clone();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Interval interval0 = new Interval((-1386L), (-1L));
      interval0.isAfterNow();
      interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = new Interval((-1386L), (-1386L));
      DateTime dateTime1 = interval1.getStart();
      Interval interval2 = interval0.withEnd(dateTime1);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval1);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.containsNow();
      interval0.isAfter(2461L);
      Period period0 = interval1.toPeriod();
      interval1.withPeriodAfterStart(period0);
      interval1.toDuration();
      // Undeclared exception!
      try { 
        interval2.withStartMillis(21260793600000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Interval interval0 = new Interval((-1386L), (-1L));
      Duration duration0 = interval0.toDuration();
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.containsNow();
      interval0.isAfter(2461L);
      mutableInterval0.toDuration();
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.isAfterNow();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(33L, 33L);
      Interval interval0 = mutableInterval0.toInterval();
      interval0.equals(mutableInterval0);
      DateTime dateTime0 = interval0.getEnd();
      Interval interval1 = mutableInterval0.toInterval();
      interval0.contains((ReadableInterval) interval1);
      Period period0 = mutableInterval0.toPeriod();
      mutableInterval0.setPeriodAfterStart(period0);
      interval1.isAfter((ReadableInstant) dateTime0);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      DateTime dateTime1 = interval0.getEnd();
      interval1.toString();
      mutableInterval0.setStartMillis(33L);
      interval0.isEqual(mutableInterval0);
      interval1.contains((ReadableInterval) interval0);
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime1);
      interval1.withDurationBeforeEnd((ReadableDuration) null);
      interval0.equals(dateTime0);
      mutableInterval0.setDurationAfterStart((ReadableDuration) null);
      Period period1 = mutableInterval0.toPeriod();
      interval1.hashCode();
      interval1.isBefore((ReadableInterval) mutableInterval0);
      Interval interval2 = interval1.withPeriodBeforeEnd(period1);
      interval0.toInterval();
      interval0.isBefore(33L);
      mutableInterval0.isAfter((ReadableInstant) dateTime1);
      interval0.getStart();
      interval2.toDurationMillis();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      MutableInterval mutableInterval1 = MutableInterval.parse((String) null);
      mutableInterval0.isAfterNow();
      mutableInterval0.getEnd();
      mutableInterval1.isBefore(2L);
      long long0 = (-3713L);
      // Undeclared exception!
      try { 
        mutableInterval1.setDurationAfterStart((-3713L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = mutableInterval0.toInterval();
      interval0.contains((ReadableInterval) mutableInterval0);
      Duration duration0 = interval0.toDuration();
      interval0.withDurationAfterStart(duration0);
      Interval interval1 = mutableInterval0.toInterval();
      interval0.overlaps(mutableInterval0);
      mutableInterval0.containsNow();
      interval0.contains((-595L));
      mutableInterval0.copy();
      interval0.toString();
      interval0.gap(mutableInterval0);
      MutableInterval mutableInterval1 = (MutableInterval)mutableInterval0.clone();
      interval1.isAfterNow();
      mutableInterval0.overlaps(mutableInterval1);
      interval1.contains((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Interval interval0 = new Interval((-1386L), (-1L));
      interval0.isAfterNow();
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = new Interval(duration0, dateTime0);
      Interval interval2 = interval0.withEnd(dateTime0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval1);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.containsNow();
      interval0.isAfter(2461L);
      Period period0 = interval1.toPeriod();
      interval1.withPeriodAfterStart(period0);
      interval1.toDuration();
      // Undeclared exception!
      try { 
        interval2.withStartMillis(21260793600000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 1L);
      Interval interval0 = mutableInterval0.toInterval();
      mutableInterval0.containsNow();
      Interval interval1 = interval0.withEndMillis(0L);
      mutableInterval0.contains((ReadableInterval) interval1);
      mutableInterval0.toString();
      Interval interval2 = interval1.withStartMillis(0L);
      Duration duration0 = interval1.toDuration();
      Interval interval3 = interval2.withDurationAfterStart(duration0);
      Interval interval4 = mutableInterval0.toInterval();
      Period period0 = interval4.toPeriod();
      mutableInterval0.getChronology();
      Interval interval5 = interval2.withPeriodAfterStart(period0);
      Duration duration1 = interval2.toDuration();
      interval4.isBefore((ReadableInstant) null);
      Period period1 = interval3.toPeriod();
      interval4.withDurationAfterStart(duration0);
      interval1.withDurationBeforeEnd(duration1);
      mutableInterval0.setPeriodBeforeEnd(period0);
      interval5.withPeriodBeforeEnd(period1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Interval interval0 = new Interval((-1386L), (-1L));
      interval0.isAfterNow();
      interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      DateTime dateTime1 = interval0.getStart();
      Interval interval1 = interval0.withEnd(dateTime1);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval0);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.containsNow();
      interval0.isAfter(2461L);
      Period period0 = interval0.toPeriod();
      interval0.withPeriodAfterStart(period0);
      interval0.toDuration();
      // Undeclared exception!
      try { 
        interval1.withStartMillis(21260793600000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = mutableInterval0.toInterval();
      mutableInterval0.isEqual(interval0);
      interval0.isAfter((ReadableInterval) mutableInterval0);
      // Undeclared exception!
      try { 
        Interval.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: 
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      Duration duration0 = mutableInterval0.toDuration();
      DateTime dateTime0 = mutableInterval0.getEnd();
      Interval interval0 = new Interval(duration0, dateTime0);
      Period period0 = interval0.toPeriod();
      mutableInterval0.setPeriodAfterStart(period0);
      mutableInterval0.toPeriod();
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      mutableInterval1.equals("VIPdR?u");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-32L), 1L);
      Interval interval0 = mutableInterval0.toInterval();
      mutableInterval0.containsNow();
      mutableInterval0.toString();
      Interval interval1 = interval0.withStartMillis((-32L));
      Duration duration0 = interval0.toDuration();
      Interval interval2 = interval1.withDurationAfterStart(duration0);
      Interval interval3 = mutableInterval0.toInterval();
      Period period0 = interval3.toPeriod();
      mutableInterval0.getChronology();
      interval1.withPeriodAfterStart(period0);
      Duration duration1 = interval1.toDuration();
      interval3.isBefore((ReadableInstant) null);
      interval2.toPeriod();
      interval3.withDurationAfterStart(duration0);
      interval0.withDurationBeforeEnd(duration1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Interval interval0 = new Interval((-26L), 0L);
      Duration duration0 = interval0.toDuration();
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      Period period0 = interval1.toPeriod();
      Interval interval2 = interval1.withPeriodBeforeEnd(period0);
      // Undeclared exception!
      try { 
        interval2.withStart((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Interval interval0 = new Interval((-467L), (-467L));
      DateTime dateTime0 = interval0.getStart();
      interval0.isAfter((ReadableInstant) dateTime0);
      interval0.isBefore((-467L));
      interval0.toDurationMillis();
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval((-1L), (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 1L);
      Interval interval0 = mutableInterval0.toInterval();
      mutableInterval0.containsNow();
      Interval interval1 = interval0.withEndMillis(0L);
      mutableInterval0.toString();
      Interval interval2 = interval1.withStartMillis(0L);
      Duration duration0 = interval1.toDuration();
      Interval interval3 = interval2.withDurationAfterStart(duration0);
      Interval interval4 = mutableInterval0.toInterval();
      Period period0 = interval4.toPeriod();
      mutableInterval0.getChronology();
      interval2.withPeriodAfterStart(period0);
      Duration duration1 = interval2.toDuration();
      interval4.isBefore((ReadableInstant) null);
      interval3.toPeriod();
      interval4.withDurationAfterStart(duration0);
      interval1.withDurationBeforeEnd(duration1);
      interval2.getStart();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Interval interval0 = new Interval((-1386L), (-1L));
      interval0.isAfterNow();
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = new Interval(duration0, dateTime0);
      DateTime dateTime1 = interval1.getStart();
      // Undeclared exception!
      try { 
        interval0.withEnd(dateTime1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MutableInterval mutableInterval0 = MutableInterval.parse((String) null);
      mutableInterval0.isBefore((-1L));
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      mutableInterval1.getChronology();
      mutableInterval1.clone();
      MutableInterval mutableInterval2 = mutableInterval1.copy();
      Interval interval0 = mutableInterval2.toInterval();
      Duration duration0 = mutableInterval1.toDuration();
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      Interval interval2 = interval1.toInterval();
      interval2.abuts(mutableInterval2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Duration duration0 = mutableInterval0.toDuration();
      DateTime dateTime0 = mutableInterval0.getEnd();
      Interval interval0 = new Interval(duration0, dateTime0);
      mutableInterval0.isEqual(interval0);
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      interval0.isBefore((ReadableInstant) dateTime0);
      Interval interval2 = new Interval(interval1);
      DateTime dateTime1 = interval2.getStart();
      MutableInterval mutableInterval1 = new MutableInterval(dateTime1, dateTime0);
      mutableInterval1.isBefore((ReadableInstant) dateTime1);
      interval1.toDuration();
      interval1.withStart(dateTime0);
      interval1.toDuration();
      // Undeclared exception!
      try { 
        mutableInterval0.setStartMillis(3308L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      DateTime dateTime0 = mutableInterval0.getEnd();
      Period period0 = mutableInterval0.toPeriod();
      Interval interval0 = new Interval(dateTime0, period0);
      Duration duration0 = interval0.toDuration();
      Interval interval1 = new Interval(dateTime0, duration0);
      DateTime dateTime1 = interval1.getStart();
      Interval interval2 = new Interval(dateTime1, dateTime1);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      interval1.contains(0L);
      MutableInterval mutableInterval1 = interval0.toMutableInterval();
      DateTime dateTime2 = interval0.getEnd();
      Interval interval3 = interval0.withStart(dateTime2);
      interval0.overlap(interval3);
      interval2.getEnd();
      mutableInterval0.setPeriodAfterStart(period0);
      interval2.gap(interval3);
      mutableInterval1.setInterval(321L, 321L);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Interval interval0 = new Interval(914L, 914L);
      Interval interval1 = interval0.withDurationBeforeEnd((ReadableDuration) null);
      DateTime dateTime0 = interval1.getEnd();
      Interval interval2 = new Interval((ReadableDuration) null, dateTime0);
      MutableInterval mutableInterval0 = new MutableInterval(interval2);
      interval2.overlap(interval1);
      interval2.contains(0L);
      // Undeclared exception!
      try { 
        Interval.parseWithOffset("KE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: KE
         //
         verifyException("org.joda.time.Interval", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 1L);
      Interval interval0 = mutableInterval0.toInterval();
      mutableInterval0.containsNow();
      Interval interval1 = interval0.withEndMillis(0L);
      mutableInterval0.toString();
      Interval interval2 = interval1.withStartMillis(0L);
      Duration duration0 = interval1.toDuration();
      Interval interval3 = interval2.withDurationAfterStart(duration0);
      Interval interval4 = mutableInterval0.toInterval();
      Period period0 = interval4.toPeriod();
      mutableInterval0.getChronology();
      interval2.withPeriodAfterStart(period0);
      Duration duration1 = interval2.toDuration();
      interval2.contains((ReadableInstant) null);
      interval3.toPeriod();
      interval4.withDurationAfterStart(duration0);
      interval1.withDurationBeforeEnd(duration1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutableInterval mutableInterval0 = MutableInterval.parse((String) null);
      DateTime dateTime0 = mutableInterval0.getEnd();
      long long0 = 2000L;
      Interval interval0 = new Interval(2000L, 2000L);
      Duration duration0 = interval0.toDuration();
      MutableInterval mutableInterval1 = new MutableInterval(dateTime0, duration0);
      Interval interval1 = mutableInterval1.toInterval();
      long long1 = (-2697L);
      Period period0 = interval0.toPeriod();
      Interval interval2 = interval1.withPeriodBeforeEnd(period0);
      mutableInterval1.isAfter((-2697L));
      interval1.withDurationBeforeEnd(duration0);
      interval2.isAfter((ReadableInterval) interval0);
      // Undeclared exception!
      try { 
        mutableInterval1.setEndMillis(2000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Interval interval0 = new Interval(1684L, 1684L, (DateTimeZone) null);
      DateTime dateTime0 = interval0.getEnd();
      Interval interval1 = new Interval((ReadablePeriod) null, dateTime0);
      Period period0 = interval1.toPeriod();
      MutableInterval mutableInterval0 = new MutableInterval(period0, (ReadableInstant) null);
      mutableInterval0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      mutableInterval0.containsNow();
      DateTime dateTime0 = mutableInterval0.getEnd();
      mutableInterval0.contains((ReadableInstant) dateTime0);
      mutableInterval0.setEndMillis(38898367008L);
      mutableInterval0.setEnd(dateTime0);
      mutableInterval0.isAfter((-858L));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-195L), (-195L));
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      mutableInterval0.toString();
      Interval interval0 = mutableInterval0.toInterval();
      interval0.isAfterNow();
      interval0.toMutableInterval();
      mutableInterval1.isBeforeNow();
      mutableInterval0.contains((-195L));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Interval interval0 = new Interval(3600L, 3600L);
      Duration duration0 = interval0.toDuration();
      Interval interval1 = interval0.withDurationBeforeEnd(duration0);
      interval1.isEqual(interval0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.contains((ReadableInterval) interval1);
      interval1.withStartMillis(0L);
      DateTime dateTime0 = interval1.getEnd();
      Interval interval2 = interval0.withEnd(dateTime0);
      interval1.isEqual(interval2);
      interval2.overlap(interval0);
      mutableInterval0.clone();
      interval2.isAfter((ReadableInterval) interval1);
      mutableInterval0.setInterval(0L, 157L);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null, (Chronology) null);
      Period period0 = mutableInterval0.toPeriod();
      mutableInterval0.setPeriodBeforeEnd(period0);
      mutableInterval0.isAfter((ReadableInstant) null);
      mutableInterval0.toInterval();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      Interval interval0 = mutableInterval1.toInterval();
      Period period0 = interval0.toPeriod();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = new Interval(period0, dateTime0);
      interval1.contains(0L);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      interval0.toString();
      interval0.toDuration();
      Interval interval1 = interval0.toInterval();
      interval1.hashCode();
      // Undeclared exception!
      try { 
        interval1.withStartMillis(486L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Interval interval0 = new Interval((-1386L), (-1L));
      interval0.isAfterNow();
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = new Interval(duration0, dateTime0);
      Interval interval2 = interval0.withEnd(dateTime0);
      interval2.toMutableInterval();
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval1);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.containsNow();
      interval0.isAfter((-1386L));
      Period period0 = interval1.toPeriod();
      interval1.withPeriodAfterStart(period0);
      interval1.toDuration();
      Interval interval3 = interval2.withStartMillis((-1386L));
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      interval2.isAfter((-2289L));
      mutableInterval0.toDuration();
      DateTime dateTime1 = interval2.getStart();
      interval1.isBefore((ReadableInstant) dateTime1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.isAfterNow();
      mutableInterval0.setPeriodBeforeEnd(period0);
      interval3.contains((ReadableInterval) mutableInterval0);
      interval2.withEndMillis(1961L);
      interval1.toDurationMillis();
      interval2.isBeforeNow();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Interval interval0 = mutableInterval0.toInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      ReadableInstant readableInstant0 = null;
      interval0.isAfter((ReadableInstant) null);
      mutableInterval0.isEqual(interval0);
      // Undeclared exception!
      try { 
        interval0.withStart((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater the start
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Interval interval0 = new Interval(1392409281320L, 1392409281320L);
      DateTime dateTime0 = interval0.getStart();
      Duration duration0 = interval0.toDuration();
      Interval interval1 = new Interval(dateTime0, duration0);
      interval0.isBefore((ReadableInstant) null);
      Period period0 = interval1.toPeriod((PeriodType) null);
      Interval interval2 = new Interval((ReadableInstant) null, period0);
      DateTime dateTime1 = interval1.getStart();
      Interval interval3 = new Interval(1392409281320L, 1392409281320L);
      MutableInterval mutableInterval0 = new MutableInterval(dateTime1, period0);
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      interval0.contains(1392409281320L);
      interval2.withStart(dateTime0);
      interval2.isAfter(1392409281320L);
      mutableInterval0.copy();
      interval2.contains((ReadableInterval) interval0);
      Duration duration1 = interval3.toDuration();
      interval3.abuts(mutableInterval0);
      interval3.withDurationAfterStart(duration1);
      interval2.isAfter((ReadableInterval) interval1);
      interval0.withPeriodAfterStart((ReadablePeriod) null);
      interval3.withPeriodAfterStart((ReadablePeriod) null);
      mutableInterval0.setStartMillis(5357L);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Interval interval0 = new Interval(914L, 914L);
      Interval interval1 = interval0.withDurationBeforeEnd((ReadableDuration) null);
      DateTime dateTime0 = interval1.getEnd();
      interval1.isBefore((ReadableInterval) interval0);
      Interval interval2 = new Interval((ReadableDuration) null, dateTime0);
      MutableInterval mutableInterval0 = new MutableInterval(interval2);
      interval2.overlap(interval1);
      interval0.isBefore((ReadableInterval) null);
      interval2.contains(0L);
      interval1.toString();
      mutableInterval0.isBefore((ReadableInterval) interval1);
      Period period0 = interval2.toPeriod();
      mutableInterval0.setPeriodAfterStart(period0);
      Interval.parseWithOffset("1969-12-31T21:00:00.914-03:00/1969-12-31T21:00:00.914-03:00");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Interval interval0 = new Interval((-1395L), (-1L));
      interval0.isAfterNow();
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = interval0.getStart();
      Interval interval1 = interval0.withEnd(dateTime0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval0);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.overlaps(mutableInterval0);
      interval0.containsNow();
      interval0.isAfter(2461L);
      Period period0 = interval0.toPeriod();
      interval0.withPeriodAfterStart(period0);
      interval0.toDuration();
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      Interval interval2 = interval0.withPeriodBeforeEnd(period0);
      interval2.isAfter((-1L));
      mutableInterval0.getStart();
      interval1.isAfter((-2289L));
      mutableInterval0.toDuration();
      DateTime dateTime1 = interval1.getStart();
      interval0.isBefore((ReadableInstant) dateTime1);
      mutableInterval0.setInterval((ReadableInterval) interval0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.isAfterNow();
      mutableInterval0.setPeriodBeforeEnd(period0);
      interval0.contains((ReadableInterval) mutableInterval0);
      interval0.toDurationMillis();
      interval1.isBeforeNow();
      interval1.overlaps(interval2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Interval interval0 = new Interval((-1386L), (-1L));
      interval0.isAfterNow();
      Duration duration0 = interval0.toDuration();
      DateTime dateTime0 = interval0.getEnd();
      Interval interval1 = new Interval(duration0, dateTime0);
      Interval interval2 = interval0.withEnd(dateTime0);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      interval0.isAfter((ReadableInterval) mutableInterval0);
      interval0.equals(interval1);
      mutableInterval0.contains((ReadableInstant) dateTime0);
      interval0.containsNow();
      interval0.isAfter(2461L);
      Period period0 = interval1.toPeriod();
      interval1.withPeriodAfterStart(period0);
      interval1.toDuration();
      Interval interval3 = interval1.toInterval();
      mutableInterval0.setInterval((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      interval2.isAfter((-2289L));
      Duration duration1 = mutableInterval0.toDuration();
      DateTime dateTime1 = interval2.getStart();
      interval1.isBefore((ReadableInstant) dateTime1);
      mutableInterval0.setInterval((ReadableInterval) interval1);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.setDurationBeforeEnd((ReadableDuration) duration0);
      mutableInterval0.isAfterNow();
      mutableInterval0.setPeriodBeforeEnd(period0);
      interval3.contains((ReadableInterval) mutableInterval0);
      Interval interval4 = interval2.withEndMillis(1961L);
      interval1.toDurationMillis();
      interval2.isBeforeNow();
      mutableInterval0.setEndMillis(190L);
      interval2.withDurationBeforeEnd(duration1);
      interval0.equals(interval4);
  }
}
