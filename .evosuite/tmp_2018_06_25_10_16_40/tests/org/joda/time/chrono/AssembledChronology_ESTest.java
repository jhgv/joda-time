/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:25:10 GMT 2018
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.Instant;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicDayOfYearDateTimeField;
import org.joda.time.chrono.BasicFixedMonthChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.PreciseDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AssembledChronology_ESTest extends AssembledChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      islamicChronology0.withZone(dateTimeZone0);
      islamicChronology0.getAverageMillisPerYear();
      JulianChronology.adjustYearForSet(1);
      islamicChronology0.year();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      zonedChronology0.equals((Object) null);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance();
      lenientChronology0.getDateTimeMillis(996, 1, (-2029), 1, (-3075), 1, 1);
      try { 
        buddhistChronology1.getDateTimeMillis(65535, 6, 1, (-398), 65535, 6, 1518);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -398 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      buddhistChronology0.getDateTimeMillis(1, 1, 1, 1);
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      int int0 = 2123;
      // Undeclared exception!
      try { 
        CopticChronology.getInstance(dateTimeZone0, 2123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 2123
         //
         verifyException("org.joda.time.chrono.CopticChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      DateTimeField dateTimeField0 = zonedChronology0.dayOfMonth();
      assembledChronology_Fields0.clockhourOfDay = dateTimeField0;
      zonedChronology0.assemble(assembledChronology_Fields0);
      DateTimeZone dateTimeZone1 = ethiopicChronology0.getZone();
      int int0 = (-582);
      // Undeclared exception!
      try { 
        GregorianChronology.getInstance(dateTimeZone1, (-582));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -582
         //
         verifyException("org.joda.time.chrono.GregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      Chronology chronology0 = strictChronology0.withZone((DateTimeZone) null);
      strictChronology0.toString();
      strictChronology0.toString();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null, 1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      buddhistChronology0.withUTC();
      ethiopicChronology0.getMinYear();
      GJChronology.getInstance((DateTimeZone) null);
      long long0 = BasicFixedMonthChronology.MILLIS_PER_MONTH;
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      copticChronology0.assemble(assembledChronology_Fields0);
      chronology0.weeks();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      islamicChronology0.getYearMonthDayMillis((-1781), (-1781), 1);
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_15_BASED);
      islamicChronology1.getMonthOfYear((-1781));
      IslamicChronology.getInstance((DateTimeZone) null);
      islamicChronology0.equals("n<Y:~");
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      gJChronology0.julianToGregorianByYear((-1872L));
      gJChronology0.add(0L, (long) (-1781), 1);
      GJChronology.getInstance();
      gJChronology0.gregorianToJulianByYear(1561L);
      gJChronology0.toString();
      islamicChronology1.millisOfSecond();
      islamicChronology1.getParam();
      GJChronology gJChronology1 = GJChronology.getInstance();
      gJChronology1.add(0L, 1118L, 5);
      gJChronology1.gregorianToJulianByYear(0L);
      gJChronology1.weekyears();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeZone dateTimeZone0 = iSOChronology0.getZone();
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone1);
      DateTimeZone dateTimeZone2 = zonedChronology0.getZone();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone2);
      islamicChronology0.hours();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      gregorianChronology0.isLeapDay(2395);
      gregorianChronology0.getDaysInMonthMax(0L);
      gregorianChronology0.dayOfWeek();
      gregorianChronology0.calculateFirstDayOfYearMillis(5);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      ISOChronology.getInstance();
      iSOChronology0.days();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(iSOChronology0);
      lenientChronology0.getDateTimeMillis(4580, 60, 4580, 4580);
      lenientChronology0.withUTC();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      islamicChronology0.getDayOfYear(1, 1);
      islamicChronology0.isLeapYear((-4254));
      islamicChronology0.days();
      islamicChronology0.minutes();
      copticChronology0.months();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      JulianChronology julianChronology0 = new JulianChronology(gregorianChronology0, "", 1);
      julianChronology0.getAverageMillisPerYear();
      islamicChronology0.calculateFirstDayOfYearMillis(1);
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 1);
      copticChronology0.getDayOfMonth(5815L, (-4254));
      gJChronology0.assemble((AssembledChronology.Fields) null);
      Instant instant1 = gJChronology0.getGregorianCutover();
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant1);
      gJChronology1.toString();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      ethiopicChronology0.calculateFirstDayOfYearMillis(1397);
      ethiopicChronology0.getMaxYear();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      strictChronology0.getBase();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      ethiopicChronology0.getMonthOfYear(863L);
      buddhistChronology0.equals(ethiopicChronology0);
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      int int0 = 795;
      int int1 = 1;
      iSOChronology0.withZone((DateTimeZone) null);
      try { 
        iSOChronology0.getDateTimeMillis(1, 1963, (-4239), 1, 0, 1, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1963 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      try { 
        buddhistChronology0.getDateTimeMillis(1, 1, 1, 25734375, 1, 25734375, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 25734375 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = iSOChronology0.getZone();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      iSOChronology0.toString();
      CopticChronology copticChronology0 = new CopticChronology(buddhistChronology0, buddhistChronology0, 1);
      iSOChronology0.withZone(dateTimeZone0);
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      DateTimeField dateTimeField0 = assembledChronology_Fields0.dayOfWeek;
      assembledChronology_Fields0.clockhourOfHalfday = null;
      CopticChronology.getInstance(dateTimeZone0, 1);
      iSOChronology0.assemble(assembledChronology_Fields0);
      EthiopicChronology ethiopicChronology0 = new EthiopicChronology(copticChronology0, buddhistChronology0, 1);
      ISOChronology iSOChronology1 = ISOChronology.getInstance(dateTimeZone0);
      copticChronology0.getApproxMillisAtEpochDividedByTwo();
      iSOChronology1.centuries();
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      gJChronology0.getGregorianCutover();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      julianChronology0.getMaxYear();
      gJChronology0.assemble(assembledChronology_Fields0);
      IslamicChronology.getInstanceUTC();
      iSOChronology0.secondOfDay();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(ethiopicChronology0);
      DateTimeZone dateTimeZone0 = strictChronology0.getZone();
      Chronology chronology0 = strictChronology0.withZone(dateTimeZone0);
      ethiopicChronology0.add((-3802L), 42474480000L, 0);
      ethiopicChronology0.clockhourOfDay();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone0);
      zonedChronology0.withZone(dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      buddhistChronology0.add((-4119L), 0L, 0);
      buddhistChronology0.getDateTimeMillis(0L, 0, 19, 19, 0);
      buddhistChronology0.years();
      try { 
        buddhistChronology0.getDateTimeMillis(0L, 19, 2395, 2395, 2395);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2395 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      long long0 = gregorianChronology0.calculateFirstDayOfYearMillis(6);
      assertEquals((-61977830400000L), long0);
      
      long long1 = gregorianChronology0.getYearMonthMillis((-1066), 6);
      assertFalse(long1 == long0);
      assertEquals((-95793840000000L), long1);
      
      DurationField durationField0 = gregorianChronology0.weekyears();
      assertEquals("weekyears", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertNotNull(durationField0);
      
      DateTimeField dateTimeField0 = gregorianChronology0.year();
      assertTrue(dateTimeField0.isSupported());
      assertEquals("year", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      Chronology chronology0 = gregorianChronology0.withUTC();
      assertNotSame(gregorianChronology0, chronology0);
      assertNotSame(chronology0, gregorianChronology0);
      assertNotNull(chronology0);
      assertFalse(chronology0.equals((Object)gregorianChronology0));
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(gJChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(julianChronology0);
      assertNotNull(lenientChronology0);
      
      DateTimeZone dateTimeZone0 = julianChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(lenientChronology0, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      DateTimeField dateTimeField0 = zonedChronology0.hourOfHalfday();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("hourOfHalfday", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Chronology chronology0 = iSOChronology0.withZone(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotSame(iSOChronology0, chronology0);
      assertNotSame(chronology0, iSOChronology0);
      assertNotNull(chronology0);
      assertFalse(chronology0.equals((Object)iSOChronology0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = BuddhistChronology.BE;
      assertEquals(1, int0);
      
      int int1 = islamicChronology0.getWeekyear(858L);
      assertFalse(int1 == int0);
      assertEquals(1389, int1);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = julianChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      JulianChronology julianChronology1 = JulianChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertSame(julianChronology0, julianChronology1);
      assertSame(julianChronology1, julianChronology0);
      assertNotNull(julianChronology1);
      
      long long0 = islamicChronology0.getAverageMillisPerYear();
      assertEquals(30617280288L, long0);
      assertEquals(1, IslamicChronology.AH);
      
      DurationField durationField0 = julianChronology0.eras();
      assertTrue(durationField0.isPrecise());
      assertEquals(0L, durationField0.getUnitMillis());
      assertEquals("eras", durationField0.getName());
      assertFalse(durationField0.isSupported());
      assertSame(julianChronology0, julianChronology1);
      assertNotNull(durationField0);
      
      int int2 = julianChronology0.getDayOfMonth(0L);
      assertSame(julianChronology0, julianChronology1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(19, int2);
      
      boolean boolean0 = julianChronology0.isLeapYear(913);
      assertSame(julianChronology0, julianChronology1);
      assertFalse(boolean0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertSame(julianChronology0, julianChronology1);
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertSame(julianChronology0, julianChronology1);
      assertNotNull(iSOChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(gregorianChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertSame(julianChronology0, julianChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotNull(zonedChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      zonedChronology0.assemble(assembledChronology_Fields0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertSame(julianChronology0, julianChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      
      long long1 = gregorianChronology0.getYearMillis(1389);
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertSame(dateTimeZone1, dateTimeZone0);
      assertFalse(long1 == long0);
      assertEquals((-18334512000000L), long1);
      
      Chronology chronology0 = gregorianChronology0.withZone(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertSame(julianChronology0, julianChronology1);
      assertSame(chronology0, gregorianChronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(gregorianChronology0, chronology0);
      assertNotNull(chronology0);
      
      Chronology chronology1 = gregorianChronology0.withZone(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertSame(julianChronology0, julianChronology1);
      assertSame(chronology1, chronology0);
      assertSame(chronology1, gregorianChronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(gregorianChronology0, chronology0);
      assertSame(gregorianChronology0, chronology1);
      assertNotNull(chronology1);
      
      DurationField durationField1 = gregorianChronology0.months();
      assertEquals("months", durationField1.getName());
      assertTrue(durationField1.isSupported());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(gregorianChronology0, chronology0);
      assertSame(gregorianChronology0, chronology1);
      assertNotNull(durationField1);
      
      boolean boolean1 = julianChronology0.isLeapYear(1);
      assertSame(julianChronology0, julianChronology1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      DateTimeField dateTimeField0 = gJChronology0.yearOfEra();
      assertTrue(dateTimeField0.isSupported());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      // Undeclared exception!
      try { 
        EthiopicChronology.getInstance(dateTimeZone1, 1389);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1389
         //
         verifyException("org.joda.time.chrono.EthiopicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(gJChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      int int0 = ethiopicChronology0.getDayOfYear(5);
      assertEquals(113, int0);
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = gJChronology0.gregorianToJulianByWeekyear((-3609L));
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals(1209596391L, long0);
      assertEquals(1, EthiopicChronology.EE);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (long) 1, 5);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(1, EthiopicChronology.EE);
      
      Chronology chronology0 = gJChronology0.withUTC();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotSame(gJChronology0, chronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(chronology0, gJChronology1);
      assertNotSame(chronology0, gJChronology0);
      assertNotNull(chronology0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(chronology0.equals((Object)gJChronology1));
      assertFalse(chronology0.equals((Object)gJChronology0));
      assertEquals(1, EthiopicChronology.EE);
      
      DurationField durationField0 = gJChronology0.seconds();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertTrue(durationField0.isSupported());
      assertEquals("seconds", durationField0.getName());
      assertNotSame(gJChronology0, chronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotNull(durationField0);
      assertFalse(gJChronology0.equals((Object)chronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertEquals(1, EthiopicChronology.EE);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withZone((DateTimeZone) null);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      long long1 = julianChronology0.add(1L, 0L, 5);
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      long long2 = julianChronology0.getAverageMillisPerYearDividedByTwo();
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(15778800000L, long2);
      
      boolean boolean0 = gJChronology0.equals("");
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotSame(gJChronology0, chronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertFalse(gJChronology0.equals((Object)chronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(boolean0);
      assertEquals(1, EthiopicChronology.EE);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)julianChronology0.minuteOfDay();
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance();
      assertSame(islamicChronology2, islamicChronology0);
      assertSame(islamicChronology2, islamicChronology1);
      assertNotNull(islamicChronology2);
      assertEquals(1, IslamicChronology.AH);
      
      int int1 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotSame(gJChronology0, chronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertFalse(int1 == int0);
      assertFalse(gJChronology0.equals((Object)chronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertEquals(4, int1);
      assertEquals(1, EthiopicChronology.EE);
      
      int int2 = julianChronology0.getMinYear();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-292269054), int2);
      
      boolean boolean1 = islamicChronology2.isLeapYear(1);
      assertSame(islamicChronology2, islamicChronology0);
      assertSame(islamicChronology2, islamicChronology1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      assertNotNull(gregorianChronology0);
      
      DateTimeField dateTimeField0 = gregorianChronology0.hourOfDay();
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      JulianChronology julianChronology1 = JulianChronology.getInstance((DateTimeZone) null);
      assertNotSame(julianChronology1, julianChronology0);
      assertNotNull(julianChronology1);
      assertFalse(julianChronology1.equals((Object)julianChronology0));
      
      int int0 = julianChronology0.getDaysInMonthMaxForSet(71L, 1064);
      assertNotSame(julianChronology0, julianChronology1);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertEquals(31, int0);
      
      DividedDateTimeField dividedDateTimeField0 = (DividedDateTimeField)julianChronology0.centuryOfEra();
      assertTrue(dividedDateTimeField0.isSupported());
      assertEquals(100, dividedDateTimeField0.getDivisor());
      assertEquals(1, dividedDateTimeField0.getMinimumValue());
      assertEquals(2922730, dividedDateTimeField0.getMaximumValue());
      assertEquals("centuryOfEra", dividedDateTimeField0.getName());
      assertNotSame(julianChronology0, julianChronology1);
      assertNotNull(dividedDateTimeField0);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      Chronology chronology0 = julianChronology0.getBase();
      assertNotSame(julianChronology0, julianChronology1);
      assertNull(chronology0);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      
      ReadableDateTime readableDateTime0 = null;
      LimitChronology limitChronology0 = LimitChronology.getInstance(julianChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      assertNotSame(julianChronology0, julianChronology1);
      assertNotNull(limitChronology0);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      
      // Undeclared exception!
      try { 
        julianChronology0.getDaysInYearMonth(1, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("org.joda.time.chrono.BasicGJChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = (BasicDayOfYearDateTimeField)iSOChronology0.dayOfYear();
      assertEquals(1, basicDayOfYearDateTimeField0.getMinimumValue());
      assertTrue(basicDayOfYearDateTimeField0.isSupported());
      assertFalse(basicDayOfYearDateTimeField0.isLenient());
      assertEquals(86400000L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertEquals(366, basicDayOfYearDateTimeField0.getMaximumValue());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertNotNull(basicDayOfYearDateTimeField0);
      
      // Undeclared exception!
      try { 
        GJChronology.getInstance((DateTimeZone) null, (-1L), 1461);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1461
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      assertNotNull(lenientChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = lenientChronology0.getDateTimeMillis((-640L), (-1), (-1), 543, (-1));
      assertEquals((-78717001L), long0);
      assertEquals(1, EthiopicChronology.EE);
      
      int int0 = ethiopicChronology0.getDayOfYear(6000L);
      assertEquals(113, int0);
      assertEquals(1, EthiopicChronology.EE);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      long long1 = ethiopicChronology0.getFirstWeekOfYearMillis(113);
      assertFalse(long1 == long0);
      assertEquals((-58359830400000L), long1);
      assertEquals(1, EthiopicChronology.EE);
      
      assembledChronology_Fields0.copyFieldsFrom(lenientChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)assembledChronology_Fields0.hourOfDay;
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("hourOfDay", lenientDateTimeField0.getName());
      assertNotNull(lenientDateTimeField0);
      
      assembledChronology_Fields0.minuteOfHour = (DateTimeField) lenientDateTimeField0;
      assertTrue(lenientDateTimeField0.isLenient());
      assertEquals("hourOfDay", lenientDateTimeField0.getName());
      
      lenientChronology0.assemble(assembledChronology_Fields0);
      assertEquals(1, EthiopicChronology.EE);
      
      Chronology chronology0 = lenientChronology0.withUTC();
      assertNotSame(lenientChronology0, chronology0);
      assertNotSame(chronology0, lenientChronology0);
      assertNotNull(chronology0);
      assertFalse(chronology0.equals((Object)lenientChronology0));
      assertEquals(1, EthiopicChronology.EE);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int1 = 0;
      int int2 = ethiopicChronology0.getDayOfMonth(6000L, 113);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(10, int2);
      assertEquals(1, EthiopicChronology.EE);
      
      long long2 = gJChronology0.add((ReadablePeriod) null, (-1688L), 0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((-1688L), long2);
      
      int int3 = 0;
      int int4 = 0;
      try { 
        gJChronology0.getDateTimeMillis(1, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      long long0 = (-21L);
      long long1 = gJChronology0.julianToGregorianByYear(1321L);
      assertFalse(long1 == long0);
      assertEquals((-1123198679L), long1);
      
      long long2 = gJChronology0.julianToGregorianByYear((-21L));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((-1123200021L), long2);
      
      long long3 = gJChronology0.julianToGregorianByYear((-4623L));
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertEquals((-1123204623L), long3);
      
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withUTC();
      assertSame(gJChronology0, gJChronology1);
      assertSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      long long4 = gJChronology1.julianToGregorianByWeekyear((-1568L));
      assertSame(gJChronology0, gJChronology1);
      assertSame(gJChronology1, gJChronology0);
      assertFalse(long4 == long3);
      assertFalse(long4 == long2);
      assertFalse(long4 == long0);
      assertFalse(long4 == long1);
      assertEquals((-1209601568L), long4);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)islamicChronology0.minuteOfHour();
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfHour", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeField dateTimeField0 = gJChronology0.monthOfYear();
      assertSame(gJChronology0, gJChronology1);
      assertNotNull(dateTimeField0);
      
      try { 
        gJChronology0.getDateTimeMillis(0, 4553, 1, 0, 455, (-1991), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 455 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = 6;
      int int1 = islamicChronology0.getMonthOfYear(1, 6);
      assertSame(islamicChronology0, islamicChronology1);
      assertFalse(int1 == int0);
      assertEquals(16623, int1);
      assertEquals(1, IslamicChronology.AH);
      
      int int2 = islamicChronology0.getDayOfMonth(1, 1, 1);
      assertSame(islamicChronology0, islamicChronology1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(492149, int2);
      assertEquals(1, IslamicChronology.AH);
      
      IslamicChronology islamicChronology2 = (IslamicChronology)islamicChronology0.withUTC();
      assertNotSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertNotSame(islamicChronology2, islamicChronology0);
      assertNotNull(islamicChronology2);
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      int int3 = islamicChronology1.getDaysInMonthMax(0L);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology1, islamicChronology2);
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(29, int3);
      assertEquals(1, IslamicChronology.AH);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)islamicChronology0.millis();
      assertTrue(zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertNotSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology1);
      assertNotNull(zonedChronology_ZonedDurationField0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = islamicChronology1.getYearMillis(16623);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology1, islamicChronology2);
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertEquals(466398864000000L, long0);
      assertEquals(1, IslamicChronology.AH);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = (ZonedChronology.ZonedDurationField)gJChronology0.weekyears();
      assertTrue(zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("weekyears", zonedChronology_ZonedDurationField1.getName());
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotNull(zonedChronology_ZonedDurationField1);
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology2, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertNotSame(islamicChronology2, islamicChronology0);
      assertNotNull(zonedChronology0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      String string0 = zonedChronology0.toString();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertNotSame(islamicChronology2, islamicChronology0);
      assertNotNull(string0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertEquals("ZonedChronology[IslamicChronology[UTC], America/Recife]", string0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.dayOfYear();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfYear", zonedChronology_ZonedDateTimeField0.getName());
      assertNotSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology2, islamicChronology1);
      assertNotSame(islamicChronology2, islamicChronology0);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertFalse(islamicChronology2.equals((Object)islamicChronology1));
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      int int4 = islamicChronology1.getWeekyear(6);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology1, islamicChronology2);
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(1389, int4);
      assertEquals(1, IslamicChronology.AH);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = (ZonedChronology.ZonedDateTimeField)islamicChronology0.dayOfMonth();
      assertEquals("dayOfMonth", zonedChronology_ZonedDateTimeField1.getName());
      assertTrue(zonedChronology_ZonedDateTimeField1.isSupported());
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology1);
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertEquals(1, IslamicChronology.AH);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField2 = (ZonedChronology.ZonedDurationField)islamicChronology0.millis();
      assertTrue(zonedChronology_ZonedDurationField2.isSupported());
      assertEquals("millis", zonedChronology_ZonedDurationField2.getName());
      assertNotSame(zonedChronology_ZonedDurationField2, zonedChronology_ZonedDurationField1);
      assertSame(zonedChronology_ZonedDurationField2, zonedChronology_ZonedDurationField0);
      assertNotSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology1);
      assertNotNull(zonedChronology_ZonedDurationField2);
      assertFalse(zonedChronology_ZonedDurationField2.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(islamicChronology0.equals((Object)islamicChronology2));
      assertEquals(1, IslamicChronology.AH);
      
      int int5 = 0;
      int int6 = islamicChronology1.getDayOfYear(1389, 0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(islamicChronology1, islamicChronology2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertTrue(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertFalse(islamicChronology1.equals((Object)islamicChronology2));
      assertEquals(492149, int6);
      assertEquals(1, IslamicChronology.AH);
      
      int int7 = (-2956);
      int int8 = 1;
      // Undeclared exception!
      try { 
        islamicChronology1.get((ReadablePeriod) null, 3623L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      int int0 = ethiopicChronology0.getDayOfYear((-1528L));
      assertEquals(112, int0);
      assertEquals(1, EthiopicChronology.EE);
      
      int int1 = ethiopicChronology0.getDaysInMonthMaxForSet(519L, (-2));
      assertFalse(int1 == int0);
      assertEquals(30, int1);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.millisOfDay();
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology0.LEAP_YEAR_16_BASED);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      boolean boolean0 = islamicChronology0.isLeapDay((-1L));
      assertSame(islamicChronology0, islamicChronology1);
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      
      boolean boolean1 = islamicChronology1.equals(islamicChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = islamicChronology0.getWeekyear((-1L));
      assertSame(islamicChronology0, islamicChronology1);
      assertEquals(1389, int0);
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = islamicChronology0.getAverageMillisPerMonth();
      assertSame(islamicChronology0, islamicChronology1);
      assertEquals(2551440384L, long0);
      assertEquals(1, IslamicChronology.AH);
      
      IslamicChronology islamicChronology2 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology2, islamicChronology0);
      assertSame(islamicChronology2, islamicChronology1);
      assertNotNull(islamicChronology2);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeField dateTimeField0 = islamicChronology1.millisOfSecond();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("millisOfSecond", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology2);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotNull(dateTimeField0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeField dateTimeField1 = islamicChronology1.secondOfDay();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("secondOfDay", dateTimeField1.getName());
      assertTrue(dateTimeField1.isSupported());
      assertSame(islamicChronology0, islamicChronology2);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology2);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotSame(dateTimeField1, dateTimeField0);
      assertNotNull(dateTimeField1);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      JulianChronology julianChronology0 = new JulianChronology(buddhistChronology0, buddhistChronology0, 1);
      assertNotNull(julianChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = julianChronology0.calculateFirstDayOfYearMillis(1);
      assertEquals((-62135769600000L), long0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = julianChronology0.centuryOfEra();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      long long1 = gregorianChronology0.getAverageMillisPerYearDividedByTwo();
      assertFalse(long1 == long0);
      assertEquals(15778476000L, long1);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      int int0 = ethiopicChronology0.getMaxYear();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(292272984, int0);
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = JulianChronology.adjustYearForSet(1);
      assertEquals(1, int0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      assertNotNull(lenientChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeField dateTimeField0 = lenientChronology0.clockhourOfHalfday();
      assertTrue(dateTimeField0.isLenient());
      assertEquals("clockhourOfHalfday", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateTimeZone dateTimeZone0 = iSOChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      DurationField durationField0 = iSOChronology0.halfdays();
      assertEquals("halfdays", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertNotNull(durationField0);
      
      boolean boolean0 = ZonedChronology.useTimeArithmetic(durationField0);
      assertEquals("halfdays", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertFalse(boolean0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      int int0 = gregorianChronology0.getMinYear();
      assertEquals((-292275054), int0);
      
      DateTimeField dateTimeField0 = gregorianChronology0.era();
      assertTrue(dateTimeField0.isSupported());
      assertFalse(dateTimeField0.isLenient());
      assertEquals(1, dateTimeField0.getMaximumValue());
      assertEquals("era", dateTimeField0.getName());
      assertEquals(0, dateTimeField0.getMinimumValue());
      assertNotNull(dateTimeField0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(gJChronology0);
      
      try { 
        gJChronology0.getDateTimeMillis((-292275054), (-292275054), (-292275054), 0, (-2726), 0, (-292275054));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2726 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = islamicChronology0.getYearDifference(1561L, 1561L);
      assertEquals(0L, long0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeField dateTimeField0 = islamicChronology0.weekyearOfCentury();
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(gregorianChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(gJChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(chronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone1 = islamicChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals(1, IslamicChronology.AH);
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertSame(gJChronology1, chronology0);
      assertSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      
      Instant instant0 = gJChronology1.getGregorianCutover();
      assertEquals((-12219292800000L), instant0.getMillis());
      assertSame(gJChronology1, chronology0);
      assertSame(gJChronology1, gJChronology0);
      assertNotNull(instant0);
      
      int int0 = 1419;
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone1, (ReadableInstant) instant0, 1419);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1419
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      long long0 = gJChronology0.julianToGregorianByYear(103L);
      assertEquals((-1123199897L), long0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 4);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertSame(gJChronology0, gJChronology1);
      assertSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      
      Chronology chronology0 = gJChronology1.withUTC();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertSame(gJChronology0, chronology0);
      assertSame(gJChronology0, gJChronology1);
      assertSame(gJChronology1, chronology0);
      assertSame(gJChronology1, gJChronology0);
      assertSame(chronology0, gJChronology0);
      assertSame(chronology0, gJChronology1);
      assertNotNull(chronology0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      EthiopicChronology ethiopicChronology1 = EthiopicChronology.getInstance(dateTimeZone0, 1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(gJChronology0, chronology0);
      assertSame(gJChronology0, gJChronology1);
      assertNotSame(ethiopicChronology1, ethiopicChronology0);
      assertNotNull(ethiopicChronology1);
      assertFalse(ethiopicChronology1.equals((Object)ethiopicChronology0));
      assertEquals(1, EthiopicChronology.EE);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      long long1 = gregorianChronology0.getAverageMillisPerYearDividedByTwo();
      assertFalse(long1 == long0);
      assertEquals(15778476000L, long1);
      
      DateTimeField dateTimeField0 = gJChronology0.weekOfWeekyear();
      assertSame(gJChronology0, chronology0);
      assertSame(gJChronology0, gJChronology1);
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      int int0 = ethiopicChronology0.getDayOfYear((-1229L));
      assertEquals(112, int0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals(1, EthiopicChronology.EE);
      
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone1, (ReadableInstant) instant0, 1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeZone dateTimeZone2 = gJChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("America/Recife", dateTimeZone2.toString());
      assertEquals("America/Recife", dateTimeZone2.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertNotNull(dateTimeZone2);
      assertEquals(1, EthiopicChronology.EE);
      
      EthiopicChronology ethiopicChronology1 = EthiopicChronology.getInstance(dateTimeZone2);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("America/Recife", dateTimeZone2.toString());
      assertEquals("America/Recife", dateTimeZone2.getID());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotNull(ethiopicChronology1);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = ethiopicChronology1.getYearMonthDayMillis(1, 782, (-4281));
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("America/Recife", dateTimeZone2.toString());
      assertEquals("America/Recife", dateTimeZone2.getID());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertEquals((-60239721600000L), long0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      
      boolean boolean0 = ethiopicChronology1.isLeapDay(1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("America/Recife", dateTimeZone2.toString());
      assertEquals("America/Recife", dateTimeZone2.getID());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertFalse(boolean0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      
      DurationField durationField0 = ethiopicChronology1.millis();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("America/Recife", dateTimeZone2.toString());
      assertEquals("America/Recife", dateTimeZone2.getID());
      assertEquals("millis", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotNull(durationField0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeZone dateTimeZone3 = ethiopicChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone3.toString());
      assertEquals("America/Recife", dateTimeZone3.getID());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(dateTimeZone3, dateTimeZone2);
      assertSame(dateTimeZone3, dateTimeZone0);
      assertSame(dateTimeZone3, dateTimeZone1);
      assertNotNull(dateTimeZone3);
      assertEquals(1, EthiopicChronology.EE);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone3);
      assertEquals("America/Recife", dateTimeZone3.toString());
      assertEquals("America/Recife", dateTimeZone3.getID());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(dateTimeZone3, dateTimeZone2);
      assertSame(dateTimeZone3, dateTimeZone0);
      assertSame(dateTimeZone3, dateTimeZone1);
      assertNotNull(gregorianChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      int int1 = gregorianChronology0.getMonthOfYear(1059L);
      assertEquals("America/Recife", dateTimeZone3.toString());
      assertEquals("America/Recife", dateTimeZone3.getID());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(dateTimeZone3, dateTimeZone2);
      assertSame(dateTimeZone3, dateTimeZone0);
      assertSame(dateTimeZone3, dateTimeZone1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, EthiopicChronology.EE);
      
      long long1 = gregorianChronology0.getAverageMillisPerYear();
      assertEquals("America/Recife", dateTimeZone3.toString());
      assertEquals("America/Recife", dateTimeZone3.getID());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(dateTimeZone3, dateTimeZone2);
      assertSame(dateTimeZone3, dateTimeZone0);
      assertSame(dateTimeZone3, dateTimeZone1);
      assertFalse(long1 == long0);
      assertEquals(31556952000L, long1);
      assertEquals(1, EthiopicChronology.EE);
      
      LimitChronology limitChronology0 = LimitChronology.getInstance(zonedChronology0, (ReadableDateTime) null, (ReadableDateTime) null);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone3);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertNotNull(limitChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      String string0 = limitChronology0.toString();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone3);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertNotNull(string0);
      assertEquals("LimitChronology[ZonedChronology[EthiopicChronology[UTC], America/Recife], NoLimit, NoLimit]", string0);
      assertEquals(1, EthiopicChronology.EE);
      
      int int2 = ethiopicChronology0.getMinYear();
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-292269337), int2);
      assertEquals(1, EthiopicChronology.EE);
      
      DurationField durationField1 = zonedChronology0.years();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertTrue(durationField1.isSupported());
      assertEquals("years", durationField1.getName());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone3);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertNotSame(durationField1, durationField0);
      assertNotNull(durationField1);
      assertFalse(durationField1.equals((Object)durationField0));
      assertEquals(1, EthiopicChronology.EE);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      DateTimeField dateTimeField0 = assembledChronology_Fields0.yearOfCentury;
      assertNull(dateTimeField0);
      
      assembledChronology_Fields0.minuteOfDay = null;
      assembledChronology_Fields0.eras = durationField1;
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertTrue(durationField1.isSupported());
      assertEquals("years", durationField1.getName());
      
      limitChronology0.assemble(assembledChronology_Fields0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone3);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeField dateTimeField1 = ethiopicChronology0.dayOfWeek();
      assertTrue(dateTimeField1.isSupported());
      assertEquals("dayOfWeek", dateTimeField1.getName());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotNull(dateTimeField1);
      assertEquals(1, EthiopicChronology.EE);
      
      EthiopicChronology ethiopicChronology2 = (EthiopicChronology)ethiopicChronology1.withUTC();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("America/Recife", dateTimeZone2.toString());
      assertEquals("America/Recife", dateTimeZone2.getID());
      assertSame(ethiopicChronology0, ethiopicChronology1);
      assertNotSame(ethiopicChronology0, ethiopicChronology2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone3);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone3);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone3);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertSame(ethiopicChronology1, ethiopicChronology0);
      assertNotSame(ethiopicChronology1, ethiopicChronology2);
      assertNotSame(ethiopicChronology2, ethiopicChronology0);
      assertNotSame(ethiopicChronology2, ethiopicChronology1);
      assertNotNull(ethiopicChronology2);
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology0));
      assertFalse(ethiopicChronology2.equals((Object)ethiopicChronology1));
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, EthiopicChronology.EE);
      
      // Undeclared exception!
      try { 
        CopticChronology.getInstance(dateTimeZone0, (-292269337));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -292269337
         //
         verifyException("org.joda.time.chrono.CopticChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      long long0 = copticChronology0.setYear(2478L, 0);
      assertEquals((-53206070397522L), long0);
      assertEquals(1, CopticChronology.AM);
      
      int int0 = copticChronology0.getMonthOfYear(0L, 1600);
      assertEquals(1051, int0);
      assertEquals(1, CopticChronology.AM);
      
      DateTimeField dateTimeField0 = copticChronology0.dayOfMonth();
      assertNotNull(dateTimeField0);
      assertEquals(1, CopticChronology.AM);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      int int1 = 0;
      try { 
        copticChronology0.getDateTimeMillis(0, 0, 1600, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,13]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(julianChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = ethiopicChronology0.getYearMonthMillis((-567), (-567));
      assertEquals((-81291081600000L), long0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertNotNull(dateTimeZone1);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(julianChronology0, dateTimeZone1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertNotNull(zonedChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeZone dateTimeZone2 = zonedChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone2.toString());
      assertEquals("America/Recife", dateTimeZone2.getID());
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertNotNull(dateTimeZone2);
      assertEquals(1, EthiopicChronology.EE);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone2, 1549L, 1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone2.toString());
      assertEquals("America/Recife", dateTimeZone2.getID());
      assertNotSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertNotSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(1, EthiopicChronology.EE);
      
      DurationField durationField0 = gJChronology1.seconds();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone2.toString());
      assertEquals("America/Recife", dateTimeZone2.getID());
      assertEquals("seconds", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertNotSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertNotSame(gJChronology1, gJChronology0);
      assertNotNull(durationField0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeField dateTimeField0 = zonedChronology0.minuteOfDay();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("minuteOfDay", dateTimeField0.getName());
      assertNotSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertNotNull(dateTimeField0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertEquals(1, EthiopicChronology.EE);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      assembledChronology_Fields0.copyFieldsFrom(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = islamicChronology0.getYearMonthMillis(10800000, 10800000);
      assertEquals(358151109321600000L, long0);
      assertEquals(1, IslamicChronology.AH);
      
      long long1 = islamicChronology0.calculateFirstDayOfYearMillis(4190);
      assertFalse(long1 == long0);
      assertEquals(85734201600000L, long1);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = islamicChronology0.getDayOfMonth(0L);
      assertEquals(22, int0);
      assertEquals(1, IslamicChronology.AH);
      
      long long2 = islamicChronology0.getYearMonthMillis(22, (-201));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((-42393456000000L), long2);
      assertEquals(1, IslamicChronology.AH);
      
      DurationField durationField0 = islamicChronology0.centuries();
      assertNotNull(durationField0);
      assertEquals(1, IslamicChronology.AH);
      
      long long3 = islamicChronology0.getAverageMillisPerYear();
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertEquals(30617280288L, long3);
      assertEquals(1, IslamicChronology.AH);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      int int1 = gregorianChronology0.getWeeksInYear(22);
      assertFalse(int1 == int0);
      assertEquals(52, int1);
      
      boolean boolean0 = gregorianChronology0.isLeapYear(22);
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      GregorianChronology gregorianChronology1 = GregorianChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertSame(gregorianChronology0, gregorianChronology1);
      assertSame(gregorianChronology1, gregorianChronology0);
      assertNotNull(gregorianChronology1);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      // Undeclared exception!
      try { 
        GregorianChronology.getInstance(dateTimeZone0, 10800000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 10800000
         //
         verifyException("org.joda.time.chrono.GregorianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = julianChronology0.getDaysInMonthMaxForSet((-7200000L), 0);
      assertEquals(31, int0);
      
      Chronology chronology0 = julianChronology0.withZone((DateTimeZone) null);
      assertNotSame(julianChronology0, chronology0);
      assertNotSame(chronology0, julianChronology0);
      assertNotNull(chronology0);
      assertFalse(chronology0.equals((Object)julianChronology0));
      
      DateTimeField dateTimeField0 = julianChronology0.clockhourOfDay();
      assertEquals(1, dateTimeField0.getMinimumValue());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertNotSame(julianChronology0, chronology0);
      assertNotNull(dateTimeField0);
      assertFalse(julianChronology0.equals((Object)chronology0));
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      int int1 = islamicChronology0.getMonthOfYear((-910L), 0);
      assertFalse(int1 == int0);
      assertEquals(16683, int1);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      Object object0 = islamicChronology0.getParam();
      assertNull(object0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null, 1);
      assertNotNull(julianChronology0);
      
      // Undeclared exception!
      try { 
        ZonedChronology.getInstance(islamicChronology0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DateTimeZone must not be null
         //
         verifyException("org.joda.time.chrono.ZonedChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      int int0 = ethiopicChronology0.getDaysInMonthMaxForSet(519L, (-2));
      assertEquals(30, int0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.millisOfDay();
      assertTrue(dateTimeField0.isSupported());
      assertEquals("millisOfDay", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.eras();
      assertEquals(0L, durationField0.getUnitMillis());
      assertFalse(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertEquals("eras", durationField0.getName());
      assertNotNull(durationField0);
      assertEquals(1, BuddhistChronology.BE);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      buddhistChronology0.assemble(assembledChronology_Fields0);
      assertEquals(1, BuddhistChronology.BE);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (long) 1, 1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withZone(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = islamicChronology0.getAverageMillisPerYear();
      assertSame(islamicChronology0, islamicChronology1);
      assertEquals(30617280288L, long0);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = JulianChronology.adjustYearForSet(1);
      assertEquals(1, int0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)islamicChronology0.year();
      assertEquals("year", zonedChronology_ZonedDateTimeField0.getName());
      assertTrue(zonedChronology_ZonedDateTimeField0.isSupported());
      assertSame(islamicChronology0, islamicChronology1);
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      assertEquals(1, IslamicChronology.AH);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertSame(islamicChronology0, islamicChronology1);
      assertNotNull(zonedChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, BuddhistChronology.BE);
      
      boolean boolean0 = zonedChronology0.equals((Object) null);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertSame(islamicChronology0, islamicChronology1);
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, BuddhistChronology.BE);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      assertSame(islamicChronology0, islamicChronology1);
      assertNotNull(lenientChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance();
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotNull(buddhistChronology1);
      assertEquals(1, BuddhistChronology.BE);
      
      assembledChronology_Fields0.days = null;
      DurationField durationField0 = buddhistChronology1.seconds();
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotNull(durationField0);
      assertEquals(1, BuddhistChronology.BE);
      
      assembledChronology_Fields0.eras = durationField0;
      lenientChronology0.assemble(assembledChronology_Fields0);
      assertSame(islamicChronology0, islamicChronology1);
      assertEquals(1, IslamicChronology.AH);
      
      try { 
        lenientChronology0.getDateTimeMillis(1, 1, 1, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology1 = (BuddhistChronology)buddhistChronology0.withZone(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotSame(buddhistChronology0, buddhistChronology1);
      assertNotSame(buddhistChronology1, buddhistChronology0);
      assertNotNull(buddhistChronology1);
      assertFalse(buddhistChronology1.equals((Object)buddhistChronology0));
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, BuddhistChronology.BE);
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)gregorianChronology0.halfdays();
      assertTrue(preciseDurationField0.isSupported());
      assertEquals(43200000L, preciseDurationField0.getUnitMillis());
      assertTrue(preciseDurationField0.isPrecise());
      assertEquals("halfdays", preciseDurationField0.getName());
      assertNotNull(preciseDurationField0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = islamicChronology0.getMonthOfYear(1, 1534);
      assertEquals((-1731), int0);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      try { 
        buddhistChronology0.getDateTimeMillis((-40), 2000, 0, 2000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2000 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      PreciseDateTimeField preciseDateTimeField0 = (PreciseDateTimeField)julianChronology0.secondOfMinute();
      assertTrue(preciseDateTimeField0.isSupported());
      assertFalse(preciseDateTimeField0.isLenient());
      assertEquals(0, preciseDateTimeField0.getMinimumValue());
      assertEquals(1000L, preciseDateTimeField0.getUnitMillis());
      assertEquals("secondOfMinute", preciseDateTimeField0.getName());
      assertEquals(59, preciseDateTimeField0.getMaximumValue());
      assertEquals(60, preciseDateTimeField0.getRange());
      assertNotNull(preciseDateTimeField0);
      
      DateTimeZone dateTimeZone0 = julianChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      boolean boolean0 = islamicChronology0.equals(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = islamicChronology0.getYear(0L);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1389, int0);
      assertEquals(1, IslamicChronology.AH);
      
      JulianChronology julianChronology1 = JulianChronology.getInstanceUTC();
      assertSame(julianChronology1, julianChronology0);
      assertNotNull(julianChronology1);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertSame(julianChronology0, julianChronology1);
      assertNotNull(zonedChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = islamicChronology0.calculateFirstDayOfYearMillis(0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertSame(julianChronology0, julianChronology1);
      assertEquals((-42521587200000L), long0);
      assertEquals(1, IslamicChronology.AH);
      
      boolean boolean1 = zonedChronology0.equals("DFZe>[qOtX");
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertSame(julianChronology0, julianChronology1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, IslamicChronology.AH);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = islamicChronology0.getYearDifference(1561L, 1561L);
      assertEquals(0L, long0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeField dateTimeField0 = islamicChronology0.weekyearOfCentury();
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone0 = islamicChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(gregorianChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(gJChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      Chronology chronology0 = gJChronology0.withZone(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertSame(gJChronology0, chronology0);
      assertSame(chronology0, gJChronology0);
      assertNotNull(chronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone1 = islamicChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals(1, IslamicChronology.AH);
      
      GJChronology gJChronology1 = GJChronology.getInstance();
      assertSame(gJChronology1, chronology0);
      assertSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      
      Instant instant0 = gJChronology1.getGregorianCutover();
      assertEquals((-12219292800000L), instant0.getMillis());
      assertSame(gJChronology1, chronology0);
      assertSame(gJChronology1, gJChronology0);
      assertNotNull(instant0);
      
      int int0 = 1419;
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone1, (ReadableInstant) instant0, 1419);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 1419
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.millis();
      assertNotNull(durationField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(iSOChronology0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals(1, BuddhistChronology.BE);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      String string0 = gJChronology0.toString();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(string0);
      assertEquals("GJChronology[America/Recife]", string0);
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = gJChronology0.julianToGregorianByWeekyear(2693L);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertEquals((-1209597307L), long0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField1 = buddhistChronology0.minuteOfHour();
      assertNotSame(dateTimeField1, dateTimeField0);
      assertNotNull(dateTimeField1);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertEquals(1, BuddhistChronology.BE);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0, 1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotNull(julianChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(copticChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, CopticChronology.AM);
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone(dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(copticChronology0, copticChronology1);
      assertSame(copticChronology1, copticChronology0);
      assertNotNull(copticChronology1);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      assembledChronology_Fields0.copyFieldsFrom(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeZone dateTimeZone0 = ethiopicChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      assertEquals(1, EthiopicChronology.EE);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals(1, EthiopicChronology.EE);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeZone dateTimeZone2 = gJChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone2.getID());
      assertEquals("America/Recife", dateTimeZone2.toString());
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertNotNull(dateTimeZone2);
      assertEquals(1, EthiopicChronology.EE);
      
      ZonedChronology zonedChronology1 = ZonedChronology.getInstance(ethiopicChronology0, dateTimeZone2);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone2.getID());
      assertEquals("America/Recife", dateTimeZone2.toString());
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(zonedChronology0, zonedChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertNotSame(zonedChronology1, zonedChronology0);
      assertNotNull(zonedChronology1);
      assertTrue(zonedChronology1.equals((Object)zonedChronology0));
      assertEquals(1, EthiopicChronology.EE);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone1, islamicChronology_LeapYearPatternType0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(zonedChronology0, zonedChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertNotNull(islamicChronology0);
      assertTrue(zonedChronology0.equals((Object)zonedChronology1));
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, IslamicChronology.AH);
      
      boolean boolean0 = islamicChronology0.equals(gJChronology0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(zonedChronology0, zonedChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertTrue(zonedChronology0.equals((Object)zonedChronology1));
      assertFalse(boolean0);
      assertEquals(1, EthiopicChronology.EE);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertNotNull(lenientChronology0);
      assertEquals(1, CopticChronology.AM);
      
      String string0 = lenientChronology0.toString();
      assertNotNull(string0);
      assertEquals("LenientChronology[CopticChronology[America/Recife]]", string0);
      assertEquals(1, CopticChronology.AM);
      
      DateTimeField dateTimeField0 = lenientChronology0.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeField0.getName());
      assertTrue(dateTimeField0.isLenient());
      assertNotNull(dateTimeField0);
      assertEquals(1, CopticChronology.AM);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      Chronology chronology0 = lenientChronology0.withZone(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotSame(lenientChronology0, chronology0);
      assertNotSame(chronology0, lenientChronology0);
      assertNotNull(chronology0);
      assertFalse(chronology0.equals((Object)lenientChronology0));
      assertEquals(1, CopticChronology.AM);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = islamicChronology0.getDaysInMonthMax();
      assertEquals(30, int0);
      assertEquals(1, IslamicChronology.AH);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      try { 
        iSOChronology0.getDateTimeMillis(0, (-2854), 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2854 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      int int0 = copticChronology0.getDaysInYear(28181250);
      assertEquals(365, int0);
      assertEquals(1, CopticChronology.AM);
      
      int int1 = copticChronology0.getWeeksInYear(28181250);
      assertFalse(int1 == int0);
      assertEquals(53, int1);
      assertEquals(1, CopticChronology.AM);
      
      DateTimeField dateTimeField0 = copticChronology0.millisOfSecond();
      assertNotNull(dateTimeField0);
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      int int0 = copticChronology0.getDayOfMonth(2617L, (-1931));
      assertEquals(22, int0);
      assertEquals(1, CopticChronology.AM);
      
      DurationField durationField0 = copticChronology0.hours();
      assertNotNull(durationField0);
      assertEquals(1, CopticChronology.AM);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      GregorianChronology gregorianChronology1 = GregorianChronology.getInstance();
      assertSame(gregorianChronology1, gregorianChronology0);
      assertNotNull(gregorianChronology1);
      
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertSame(gregorianChronology0, gregorianChronology1);
      assertNotNull(dateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology1, dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertSame(gregorianChronology0, gregorianChronology1);
      assertSame(gregorianChronology1, gregorianChronology0);
      assertNotNull(zonedChronology0);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertSame(gregorianChronology0, gregorianChronology1);
      assertSame(gregorianChronology1, gregorianChronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      
      Chronology chronology0 = gregorianChronology0.withZone(dateTimeZone1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone1.getID());
      assertEquals("America/Recife", dateTimeZone1.toString());
      assertSame(gregorianChronology0, gregorianChronology1);
      assertSame(gregorianChronology0, chronology0);
      assertSame(gregorianChronology1, gregorianChronology0);
      assertSame(gregorianChronology1, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(chronology0, gregorianChronology0);
      assertSame(chronology0, gregorianChronology1);
      assertNotNull(chronology0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      int int1 = islamicChronology0.getDaysInMonthMax();
      assertFalse(int1 == int0);
      assertEquals(30, int1);
      assertEquals(1, IslamicChronology.AH);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      assertNotNull(lenientChronology0);
      assertEquals(1, CopticChronology.AM);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      lenientChronology0.assemble(assembledChronology_Fields0);
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      DateTimeZone dateTimeZone0 = gregorianChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0, 6);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = ethiopicChronology0.getFirstWeekOfYearMillis(6);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals((-61736428800000L), long0);
      assertEquals(1, EthiopicChronology.EE);
      
      boolean boolean0 = ethiopicChronology0.isLeapDay(6);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertFalse(boolean0);
      assertEquals(1, EthiopicChronology.EE);
      
      int int0 = gregorianChronology0.getMonthOfYear(1, 1);
      assertEquals(12, int0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      assertNotNull(lenientChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      lenientChronology0.assemble(assembledChronology_Fields0);
      int int1 = 0;
      long long1 = lenientChronology0.getDateTimeMillis((-129L), 1900, 0, 0, 0);
      assertFalse(long1 == long0);
      assertEquals(6764400000L, long1);
      
      Chronology chronology0 = lenientChronology0.withUTC();
      assertNotSame(lenientChronology0, chronology0);
      assertNotSame(chronology0, lenientChronology0);
      assertNotNull(chronology0);
      assertFalse(chronology0.equals((Object)lenientChronology0));
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      boolean boolean1 = julianChronology0.isLeapYear(6);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      EthiopicChronology ethiopicChronology1 = EthiopicChronology.getInstanceUTC();
      assertNotSame(ethiopicChronology1, ethiopicChronology0);
      assertNotNull(ethiopicChronology1);
      assertFalse(ethiopicChronology1.equals((Object)ethiopicChronology0));
      assertEquals(1, EthiopicChronology.EE);
      
      // Undeclared exception!
      try { 
        EthiopicChronology.getInstance(dateTimeZone0, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 32
         //
         verifyException("org.joda.time.chrono.EthiopicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      DateTimeZone dateTimeZone0 = iSOChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      assertSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      
      Chronology chronology0 = iSOChronology0.withZone(dateTimeZone1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertSame(iSOChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(chronology0, iSOChronology0);
      assertNotNull(chronology0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(chronology0, iSOChronology0, islamicChronology_LeapYearPatternType0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      islamicChronology0.assemble((AssembledChronology.Fields) null);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertSame(iSOChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(chronology0, iSOChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeZone dateTimeZone2 = gJChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone2.toString());
      assertEquals("UTC", dateTimeZone2.getID());
      assertSame(iSOChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertNotNull(dateTimeZone2);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone2);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone2.toString());
      assertEquals("UTC", dateTimeZone2.getID());
      assertSame(iSOChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertNotNull(gregorianChronology0);
      
      boolean boolean0 = gregorianChronology0.isLeapYear(1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone2.toString());
      assertEquals("UTC", dateTimeZone2.getID());
      assertSame(iSOChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertFalse(boolean0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone2);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone2.toString());
      assertEquals("UTC", dateTimeZone2.getID());
      assertSame(iSOChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(islamicChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertSame(iSOChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(chronology0, iSOChronology0);
      assertNotNull(strictChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      String string0 = strictChronology0.toString();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertSame(iSOChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(chronology0, iSOChronology0);
      assertNotNull(string0);
      assertEquals("StrictChronology[IslamicChronology[UTC]]", string0);
      assertEquals(1, IslamicChronology.AH);
      
      GregorianChronology gregorianChronology1 = GregorianChronology.getInstance(dateTimeZone1);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertSame(gregorianChronology1, gregorianChronology0);
      assertSame(iSOChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(gregorianChronology1);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gregorianChronology1, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertSame(gregorianChronology1, gregorianChronology0);
      assertSame(iSOChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(zonedChronology0);
      
      Chronology chronology1 = zonedChronology0.withUTC();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertSame(gregorianChronology1, chronology1);
      assertSame(gregorianChronology1, gregorianChronology0);
      assertSame(iSOChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(chronology1, gregorianChronology1);
      assertSame(chronology1, gregorianChronology0);
      assertSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(chronology1);
      
      DateTimeField dateTimeField0 = islamicChronology0.monthOfYear();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(12, dateTimeField0.getMaximumValue());
      assertEquals("monthOfYear", dateTimeField0.getName());
      assertEquals(1, dateTimeField0.getMinimumValue());
      assertFalse(dateTimeField0.isLenient());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertSame(iSOChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(chronology0, iSOChronology0);
      assertNotNull(dateTimeField0);
      assertEquals(1, IslamicChronology.AH);
      
      GregorianChronology gregorianChronology2 = GregorianChronology.getInstance();
      assertNotSame(gregorianChronology2, gregorianChronology1);
      assertNotSame(gregorianChronology2, chronology1);
      assertNotSame(gregorianChronology2, gregorianChronology0);
      assertNotNull(gregorianChronology2);
      assertFalse(gregorianChronology2.equals((Object)gregorianChronology1));
      assertFalse(gregorianChronology2.equals((Object)chronology1));
      assertFalse(gregorianChronology2.equals((Object)gregorianChronology0));
      
      DurationField durationField0 = gregorianChronology0.weeks();
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertTrue(durationField0.isPrecise());
      assertEquals("weeks", durationField0.getName());
      assertTrue(durationField0.isSupported());
      assertEquals(604800000L, durationField0.getUnitMillis());
      assertEquals("UTC", dateTimeZone2.toString());
      assertEquals("UTC", dateTimeZone2.getID());
      assertSame(iSOChronology0, chronology0);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertSame(gregorianChronology0, chronology1);
      assertSame(gregorianChronology0, gregorianChronology1);
      assertNotSame(gregorianChronology0, gregorianChronology2);
      assertNotNull(durationField0);
      assertFalse(gregorianChronology0.equals((Object)gregorianChronology2));
      
      String string1 = gJChronology1.toString();
      assertSame(gJChronology1, gJChronology0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("GJChronology[UTC]", string1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals(1, BuddhistChronology.BE);
      
      ZonedChronology zonedChronology1 = ZonedChronology.getInstance(buddhistChronology0, dateTimeZone1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(zonedChronology0, zonedChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotSame(zonedChronology1, zonedChronology0);
      assertNotNull(zonedChronology1);
      assertTrue(zonedChronology1.equals((Object)zonedChronology0));
      assertEquals(1, BuddhistChronology.BE);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone1, (ReadableInstant) null, 1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(zonedChronology0, zonedChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(gJChronology0);
      assertTrue(zonedChronology0.equals((Object)zonedChronology1));
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone2 = gJChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone2.getID());
      assertEquals("UTC", dateTimeZone2.toString());
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(zonedChronology0, zonedChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertNotNull(dateTimeZone2);
      assertTrue(zonedChronology0.equals((Object)zonedChronology1));
      assertEquals(1, BuddhistChronology.BE);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone2);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone2.getID());
      assertEquals("UTC", dateTimeZone2.toString());
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(zonedChronology0, zonedChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertNotSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertNotSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      assertTrue(zonedChronology0.equals((Object)zonedChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(1, BuddhistChronology.BE);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(zonedChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(zonedChronology0, zonedChronology1);
      assertNotNull(lenientChronology0);
      assertTrue(zonedChronology0.equals((Object)zonedChronology1));
      assertEquals(1, BuddhistChronology.BE);
      
      String string0 = lenientChronology0.toString();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(zonedChronology0, zonedChronology1);
      assertNotNull(string0);
      assertTrue(zonedChronology0.equals((Object)zonedChronology1));
      assertEquals("LenientChronology[ZonedChronology[BuddhistChronology[UTC], UTC]]", string0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeField dateTimeField1 = buddhistChronology0.era();
      assertNotSame(dateTimeField1, dateTimeField0);
      assertNotNull(dateTimeField1);
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = gJChronology1.weeks();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone2.getID());
      assertEquals("UTC", dateTimeZone2.toString());
      assertEquals("weeks", durationField0.getName());
      assertEquals(604800000L, durationField0.getUnitMillis());
      assertTrue(durationField0.isSupported());
      assertTrue(durationField0.isPrecise());
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(zonedChronology0, zonedChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertNotSame(gJChronology0, gJChronology1);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertNotSame(gJChronology1, gJChronology0);
      assertNotNull(durationField0);
      assertTrue(zonedChronology0.equals((Object)zonedChronology1));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(1, BuddhistChronology.BE);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(zonedChronology1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(zonedChronology0, zonedChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertNotSame(zonedChronology1, zonedChronology0);
      assertNotNull(strictChronology0);
      assertTrue(zonedChronology0.equals((Object)zonedChronology1));
      assertTrue(zonedChronology1.equals((Object)zonedChronology0));
      assertEquals(1, BuddhistChronology.BE);
      
      String string1 = strictChronology0.toString();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(zonedChronology0, zonedChronology1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertNotSame(zonedChronology1, zonedChronology0);
      assertNotNull(string1);
      assertTrue(zonedChronology0.equals((Object)zonedChronology1));
      assertTrue(zonedChronology1.equals((Object)zonedChronology0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("StrictChronology[ZonedChronology[BuddhistChronology[UTC], UTC]]", string1);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(islamicChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = islamicChronology0.getDayOfYear(1, 1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals(492149, int0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      
      boolean boolean0 = islamicChronology0.isLeapYear((-4254));
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertFalse(boolean0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      
      DurationField durationField0 = islamicChronology0.days();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertTrue(durationField0.isSupported());
      assertEquals("days", durationField0.getName());
      assertNotNull(durationField0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      
      DurationField durationField1 = islamicChronology0.minutes();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertTrue(durationField1.isSupported());
      assertEquals("minutes", durationField1.getName());
      assertNotSame(durationField1, durationField0);
      assertNotNull(durationField1);
      assertFalse(durationField1.equals((Object)durationField0));
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      
      DurationField durationField2 = copticChronology0.months();
      assertTrue(durationField2.isSupported());
      assertEquals("months", durationField2.getName());
      assertNotSame(durationField2, durationField0);
      assertNotSame(durationField2, durationField1);
      assertNotNull(durationField2);
      assertFalse(durationField2.equals((Object)durationField0));
      assertFalse(durationField2.equals((Object)durationField1));
      assertEquals(1, CopticChronology.AM);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      JulianChronology julianChronology0 = new JulianChronology(gregorianChronology0, "", 1);
      assertNotNull(julianChronology0);
      
      long long0 = julianChronology0.getAverageMillisPerYear();
      assertEquals(31557600000L, long0);
      
      long long1 = islamicChronology0.calculateFirstDayOfYearMillis(1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertFalse(long1 == long0);
      assertEquals((-42521587200000L), long1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, IslamicChronology.AH);
      
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0, 1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(gJChronology0);
      assertEquals(1, CopticChronology.AM);
      
      gJChronology0.assemble((AssembledChronology.Fields) null);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(1, CopticChronology.AM);
      
      Instant instant1 = gJChronology0.getGregorianCutover();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292800000L), instant1.getMillis());
      assertSame(instant0, instant1);
      assertSame(instant1, instant0);
      assertNotNull(instant1);
      assertEquals(1, CopticChronology.AM);
      
      GJChronology gJChronology1 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant1);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292800000L), instant1.getMillis());
      assertNotSame(gJChronology1, gJChronology0);
      assertSame(instant0, instant1);
      assertNotSame(gJChronology0, gJChronology1);
      assertSame(instant1, instant0);
      assertNotNull(gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertEquals(1, CopticChronology.AM);
      
      String string0 = gJChronology1.toString();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219292800000L), instant1.getMillis());
      assertNotSame(gJChronology1, gJChronology0);
      assertSame(instant0, instant1);
      assertNotSame(gJChronology0, gJChronology1);
      assertSame(instant1, instant0);
      assertNotNull(string0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertEquals("GJChronology[America/Recife]", string0);
      assertEquals(1, CopticChronology.AM);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(ethiopicChronology0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, EthiopicChronology.EE);
      
      long long2 = ethiopicChronology0.calculateFirstDayOfYearMillis(1397);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals((-17839699200000L), long2);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, EthiopicChronology.EE);
      
      int int1 = ethiopicChronology0.getMaxYear();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertFalse(int1 == int0);
      assertEquals(292272984, int1);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      DurationField durationField0 = buddhistChronology0.months();
      assertNotNull(durationField0);
      assertEquals(1, BuddhistChronology.BE);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      DateTimeZone dateTimeZone0 = julianChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_HABASH_AL_HASIB;
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = islamicChronology0.getYearDifference((-1546L), 0L);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals((-1L), long0);
      assertEquals(1, IslamicChronology.AH);
      
      JulianChronology julianChronology1 = new JulianChronology(islamicChronology0, julianChronology0, 6);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotNull(julianChronology1);
      assertFalse(julianChronology1.equals((Object)julianChronology0));
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = julianChronology0.getMonthOfYear(1309L);
      assertNotSame(julianChronology0, julianChronology1);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertEquals(12, int0);
      
      boolean boolean0 = julianChronology1.isLeapYear((-3366));
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology1, julianChronology0);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology1.equals((Object)julianChronology0));
      assertFalse(boolean0);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeField dateTimeField0 = julianChronology0.weekyear();
      assertTrue(dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      assertNotSame(julianChronology0, julianChronology1);
      assertNotNull(dateTimeField0);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      
      long long1 = julianChronology1.calculateFirstDayOfYearMillis(12);
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(julianChronology1, julianChronology0);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(julianChronology1.equals((Object)julianChronology0));
      assertFalse(long1 == long0);
      assertEquals((-61788700800000L), long1);
      assertEquals(1, IslamicChronology.AH);
      
      DateTimeField dateTimeField1 = julianChronology0.secondOfDay();
      assertEquals("secondOfDay", dateTimeField1.getName());
      assertTrue(dateTimeField1.isSupported());
      assertNotSame(julianChronology0, julianChronology1);
      assertNotSame(dateTimeField1, dateTimeField0);
      assertNotNull(dateTimeField1);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(dateTimeField1.equals((Object)dateTimeField0));
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      int int1 = islamicChronology0.getMaxYear();
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertNotSame(julianChronology0, julianChronology1);
      assertFalse(julianChronology0.equals((Object)julianChronology1));
      assertFalse(int1 == int0);
      assertEquals(292271022, int1);
      assertEquals(1, IslamicChronology.AH);
      
      int int2 = 2005;
      try { 
        islamicChronology0.getDateTimeMillis((-3087), 2014, (-59), 12, 2005, 2005, (-3087));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2005 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateTimeZone dateTimeZone0 = iSOChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.year();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertTrue(dateTimeField0.isSupported());
      assertEquals("year", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      assertEquals(1, EthiopicChronology.EE);
      
      int int0 = (-18);
      // Undeclared exception!
      try { 
        GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null, (-18));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -18
         //
         verifyException("org.joda.time.chrono.JulianChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      DateTimeField dateTimeField0 = julianChronology0.halfdayOfDay();
      assertNotNull(dateTimeField0);
      
      DateTimeZone dateTimeZone0 = julianChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      boolean boolean0 = julianChronology0.isLeapDay((-1L));
      assertFalse(boolean0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(gregorianChronology0);
      
      int int0 = 0;
      try { 
        gregorianChronology0.getDateTimeMillis((-1L), 0, 0, 1765, 1765);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1765 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = 1L;
      int int0 = 1;
      try { 
        islamicChronology0.getDateTimeMillis((long) 1, 2006, 0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2006 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      assertEquals(1, CopticChronology.AM);
      
      int int0 = copticChronology0.getDaysInYear(871);
      assertEquals(366, int0);
      assertEquals(1, CopticChronology.AM);
      
      DurationField durationField0 = copticChronology0.seconds();
      assertNotNull(durationField0);
      assertEquals(1, CopticChronology.AM);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = JulianChronology.adjustYearForSet(1);
      assertEquals(1, int0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      assertNotNull(lenientChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeField dateTimeField0 = lenientChronology0.clockhourOfHalfday();
      assertTrue(dateTimeField0.isLenient());
      assertEquals("clockhourOfHalfday", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      assertNotNull(lenientChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      long long0 = lenientChronology0.getDateTimeMillis((long) 1, 1, 1, 543, 1);
      assertEquals((-71396999L), long0);
      assertEquals(1, EthiopicChronology.EE);
      
      int int0 = ethiopicChronology0.getDayOfYear(1);
      assertEquals(113, int0);
      assertEquals(1, EthiopicChronology.EE);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      assembledChronology_Fields0.copyFieldsFrom(lenientChronology0);
      assertEquals(1, EthiopicChronology.EE);
      
      lenientChronology0.assemble(assembledChronology_Fields0);
      assertEquals(1, EthiopicChronology.EE);
      
      Chronology chronology0 = lenientChronology0.withUTC();
      assertNotSame(lenientChronology0, chronology0);
      assertNotSame(chronology0, lenientChronology0);
      assertNotNull(chronology0);
      assertFalse(chronology0.equals((Object)lenientChronology0));
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = JulianChronology.adjustYearForSet(1);
      assertEquals(1, int0);
      
      DateTimeField dateTimeField0 = islamicChronology0.year();
      assertEquals("year", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      assertEquals(1, IslamicChronology.AH);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance(islamicChronology0);
      assertNotNull(lenientChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      BuddhistChronology buddhistChronology1 = BuddhistChronology.getInstance();
      assertSame(buddhistChronology1, buddhistChronology0);
      assertNotNull(buddhistChronology1);
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = buddhistChronology0.getDateTimeMillis(1, 6, 1, 6, 1, 6, 0);
      assertSame(buddhistChronology0, buddhistChronology1);
      assertEquals((-79258491558000L), long0);
      assertEquals(1, BuddhistChronology.BE);
      
      assembledChronology_Fields0.days = null;
      DurationField durationField0 = buddhistChronology0.seconds();
      assertSame(buddhistChronology0, buddhistChronology1);
      assertNotNull(durationField0);
      assertEquals(1, BuddhistChronology.BE);
      
      assembledChronology_Fields0.eras = durationField0;
      lenientChronology0.assemble(assembledChronology_Fields0);
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      assertEquals(1, IslamicChronology.AH);
      
      long long0 = islamicChronology0.getDateTimeMillis((long) 1, 1, 0, 1, 1);
      assertEquals((-71998999L), long0);
      assertEquals(1, IslamicChronology.AH);
      
      int int0 = CopticChronology.AM;
      assertEquals(1, int0);
      
      int int1 = islamicChronology0.getYear(0);
      assertFalse(int1 == int0);
      assertEquals(1389, int1);
      assertEquals(1, IslamicChronology.AH);
      
      EthiopicChronology ethiopicChronology0 = new EthiopicChronology(islamicChronology0, islamicChronology0, 1);
      assertNotNull(ethiopicChronology0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeField0.getName());
      assertTrue(dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, EthiopicChronology.EE);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      
      long long0 = buddhistChronology0.getDateTimeMillis(1, 1, 1, 1);
      assertEquals((-79271559623999L), long0);
      assertEquals(1, BuddhistChronology.BE);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("America/Recife", dateTimeZone0.toString());
      assertEquals("America/Recife", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      
      int int0 = 2123;
      // Undeclared exception!
      try { 
        CopticChronology.getInstance(dateTimeZone0, 2123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 2123
         //
         verifyException("org.joda.time.chrono.CopticChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      strictChronology0.toString();
      EthiopicChronology.getInstance((DateTimeZone) null, 1);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      buddhistChronology0.withUTC();
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      try { 
        gJChronology0.getDateTimeMillis(1, 1, (-2859), (-648));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -648 for millisOfDay must be in the range [0,86399999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      long long0 = 15778476000L;
      int int0 = 1275;
      islamicChronology0.getMonthOfYear(15778476000L, 1275);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTimeZone dateTimeZone0 = iSOChronology0.getZone();
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(islamicChronology0, dateTimeZone0);
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      GJChronology.getInstance(dateTimeZone1);
      long long1 = 0L;
      int int1 = 0;
      int int2 = 1181;
      try { 
        iSOChronology0.getDateTimeMillis(0, 1275, 1181, 1275, 0, 1831, 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1275 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }
}
