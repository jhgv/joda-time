/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:49:15 GMT 2018
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Months;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadablePartial;
import org.joda.time.chrono.BasicSingleEraDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.field.UnsupportedDurationField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicSingleEraDateTimeField_ESTest extends BasicSingleEraDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("izTXY#dXk");
      basicSingleEraDateTimeField0.remainder((-2582L));
      basicSingleEraDateTimeField0.set((-691L), "1", (Locale) null);
      long long0 = 1110L;
      // Undeclared exception!
      try { 
        basicSingleEraDateTimeField0.setExtended(9223372036854773226L, 1957);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1957 for era must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("PeriodFormat.days.regex");
      basicSingleEraDateTimeField0.roundHalfFloor(86400001L);
      basicSingleEraDateTimeField0.getAsText((-992L));
      basicSingleEraDateTimeField0.set((-93L), "PeriodFormat.days.regex");
      basicSingleEraDateTimeField0.get((-9223372036854775808L));
      basicSingleEraDateTimeField0.getMinimumValue();
      basicSingleEraDateTimeField0.roundHalfFloor(86400001L);
      basicSingleEraDateTimeField0.set((-93L), 1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("RM+vxX+e09");
      basicSingleEraDateTimeField0.getMinimumValue();
      basicSingleEraDateTimeField0.getDurationField();
      basicSingleEraDateTimeField0.roundHalfCeiling(1);
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 44;
      intArray0[2] = 1;
      intArray0[3] = 44;
      intArray0[4] = 1;
      intArray0[5] = 44;
      intArray0[6] = 44;
      basicSingleEraDateTimeField0.add((ReadablePartial) null, 44, intArray0, 0);
      basicSingleEraDateTimeField0.getMaximumValue();
      basicSingleEraDateTimeField0.getDurationField();
      Locale locale0 = Locale.ENGLISH;
      basicSingleEraDateTimeField0.getMaximumTextLength(locale0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("WXBDWe");
      basicSingleEraDateTimeField0.set((-573L), "WXBDWe");
      basicSingleEraDateTimeField0.isLenient();
      basicSingleEraDateTimeField0.getMaximumValue((ReadablePartial) null);
      basicSingleEraDateTimeField0.set((-573L), "1");
      basicSingleEraDateTimeField0.roundHalfCeiling(30962844000000L);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField((String) null);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale locale1 = Locale.KOREAN;
      locale0.getDisplayName(locale1);
      // Undeclared exception!
      try { 
        basicSingleEraDateTimeField0.getMaximumTextLength(locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicSingleEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField((String) null);
      basicSingleEraDateTimeField0.roundHalfEven(2352L);
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.withMillisOfDay(1638);
      int[] intArray0 = new int[4];
      intArray0[0] = 1638;
      intArray0[1] = 1638;
      intArray0[2] = 1638;
      intArray0[3] = 1638;
      basicSingleEraDateTimeField0.getMinimumValue((ReadablePartial) localTime1, intArray0);
      basicSingleEraDateTimeField0.roundHalfFloor(2352L);
      basicSingleEraDateTimeField0.roundCeiling((-7200000L));
      basicSingleEraDateTimeField0.roundFloor(10L);
      basicSingleEraDateTimeField0.getRangeDurationField();
      Locale locale0 = Locale.ITALY;
      basicSingleEraDateTimeField0.getAsText(1, locale0);
      basicSingleEraDateTimeField0.roundHalfEven(1227L);
      basicSingleEraDateTimeField0.roundHalfCeiling(2352L);
      basicSingleEraDateTimeField0.roundFloor((-7200000L));
      basicSingleEraDateTimeField0.roundHalfCeiling(850L);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("");
      Locale locale0 = Locale.CANADA_FRENCH;
      basicSingleEraDateTimeField0.getAsText(0, locale0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField((String) null);
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        basicSingleEraDateTimeField0.set((-1282L), "1", locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("$![sfEib!%owK7");
      Locale locale0 = new Locale("$![sfEib!%owK7", "$![sfEib!%owK7");
      Locale locale1 = Locale.US;
      locale0.getDisplayVariant(locale1);
      basicSingleEraDateTimeField0.set((-647L), "$![sfEib!%owK7", locale0);
      basicSingleEraDateTimeField0.getRangeDurationField();
      // Undeclared exception!
      try { 
        basicSingleEraDateTimeField0.set((-2054L), "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for era is not supported
         //
         verifyException("org.joda.time.chrono.BasicSingleEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("&Dk2`:BU&Nn9p");
      basicSingleEraDateTimeField0.isLenient();
      Locale locale0 = Locale.US;
      basicSingleEraDateTimeField0.getAsText((-203), locale0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField(",,um:iwi}");
      basicSingleEraDateTimeField0.get((-1047L));
      basicSingleEraDateTimeField0.set(89L, 1);
      basicSingleEraDateTimeField0.getDurationField();
      long long0 = (-486L);
      int int0 = (-810);
      int int1 = (-759);
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(1, (-810), (-810), (-810), 1, (-810), (-759));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -810 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("u)\"8pS~qe7b#r");
      basicSingleEraDateTimeField0.getMinimumValue();
      basicSingleEraDateTimeField0.set(0L, "u)\"8pS~qe7b#r", (Locale) null);
      basicSingleEraDateTimeField0.getDurationField();
      basicSingleEraDateTimeField0.getMinimumValue();
      basicSingleEraDateTimeField0.roundHalfCeiling((-1178L));
      basicSingleEraDateTimeField0.set(0L, 1);
      basicSingleEraDateTimeField0.roundHalfFloor(0L);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("");
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime(501L, (Chronology) gregorianChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusDays((-1191));
      Locale locale0 = Locale.GERMAN;
      basicSingleEraDateTimeField0.getAsShortText((ReadablePartial) localDateTime1, locale0);
      Locale locale1 = Locale.GERMANY;
      basicSingleEraDateTimeField0.getMaximumTextLength(locale1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("Ks5+RIRg3ErN{");
      Locale locale0 = Locale.KOREA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale1 = Locale.CHINA;
      basicSingleEraDateTimeField0.getMaximumValue(7730941132800000L);
      locale0.getDisplayVariant(locale1);
      Locale.lookup(linkedList0, (Collection<Locale>) null);
      basicSingleEraDateTimeField0.set(7730941132800000L, "Ks5+RIRg3ErN{", locale0);
      basicSingleEraDateTimeField0.roundHalfEven(0L);
      basicSingleEraDateTimeField0.getRangeDurationField();
      basicSingleEraDateTimeField0.roundFloor((-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("EAT");
      basicSingleEraDateTimeField0.getMinimumValue(250L);
      basicSingleEraDateTimeField0.getDurationField();
      basicSingleEraDateTimeField0.get(250L);
      basicSingleEraDateTimeField0.roundCeiling(1);
      basicSingleEraDateTimeField0.getDurationField();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("");
      basicSingleEraDateTimeField0.roundFloor((-9223372036854775808L));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "*Re";
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("*Re");
      long long0 = 15552000000L;
      String string1 = "";
      Locale locale0 = Locale.UK;
      basicSingleEraDateTimeField0.toString();
      Locale locale1 = Locale.JAPANESE;
      locale0.getDisplayName(locale1);
      Locale locale2 = Locale.UK;
      locale2.getUnicodeLocaleAttributes();
      locale0.getDisplayScript(locale2);
      // Undeclared exception!
      try { 
        basicSingleEraDateTimeField0.set(15552000000L, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for era is not supported
         //
         verifyException("org.joda.time.chrono.BasicSingleEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = null;
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField((String) null);
      long long0 = (-9223372036854775808L);
      basicSingleEraDateTimeField0.getAsText((-9223372036854775808L));
      // Undeclared exception!
      try { 
        basicSingleEraDateTimeField0.set((-9223372036854775808L), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for era must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("1");
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        basicSingleEraDateTimeField0.set((-2804L), "org.joda.time.LocalTime", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"org.joda.time.LocalTime\" for era is not supported
         //
         verifyException("org.joda.time.chrono.BasicSingleEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField((String) null);
      basicSingleEraDateTimeField0.isLenient();
      basicSingleEraDateTimeField0.roundHalfFloor((-2242L));
      basicSingleEraDateTimeField0.roundCeiling(59000L);
      basicSingleEraDateTimeField0.getMaximumValue();
      basicSingleEraDateTimeField0.roundHalfFloor(9223372036854775798L);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("AT!)PThz`}n(");
      // Undeclared exception!
      try { 
        basicSingleEraDateTimeField0.addWrapField(9223372036854775807L, (-296));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("!5/`OuU9a].Q#`$");
      basicSingleEraDateTimeField0.getMinimumValue();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("1");
      Locale locale0 = Locale.FRENCH;
      locale0.getDisplayCountry();
      basicSingleEraDateTimeField0.getAsText(2006, locale0);
      basicSingleEraDateTimeField0.getRangeDurationField();
      // Undeclared exception!
      try { 
        basicSingleEraDateTimeField0.set((long) 2006, 2006);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2006 for era must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("csak3");
      basicSingleEraDateTimeField0.getDurationField();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("%!Nt!a1k|Nlh2");
      basicSingleEraDateTimeField0.roundHalfEven(134L);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("38%DJi");
      basicSingleEraDateTimeField0.roundHalfCeiling((-1194L));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("");
      Locale locale0 = Locale.CHINESE;
      basicSingleEraDateTimeField0.set(0L, "", locale0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("");
      basicSingleEraDateTimeField0.get(395L);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("nU~7<:b/#");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nU~7<:b/#");
      basicSingleEraDateTimeField0.roundHalfCeiling(0L);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("WXBDWe");
      basicSingleEraDateTimeField0.set((-573L), "WXBDWe");
      basicSingleEraDateTimeField0.isLenient();
      basicSingleEraDateTimeField0.getMaximumValue((ReadablePartial) null);
      // Undeclared exception!
      try { 
        basicSingleEraDateTimeField0.set((-573L), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for era is not supported
         //
         verifyException("org.joda.time.chrono.BasicSingleEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("PeriodFormat.days.regex");
      basicSingleEraDateTimeField0.roundHalfFloor(86400001L);
      basicSingleEraDateTimeField0.getAsText((-992L));
      basicSingleEraDateTimeField0.set((-93L), "PeriodFormat.days.regex");
      basicSingleEraDateTimeField0.get(86400001L);
      basicSingleEraDateTimeField0.getMinimumValue();
      basicSingleEraDateTimeField0.roundHalfFloor(86400001L);
      basicSingleEraDateTimeField0.getDurationField();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("PeriodFormat.days.regex");
      basicSingleEraDateTimeField0.roundHalfEven(86400001L);
      basicSingleEraDateTimeField0.getAsText((-992L));
      basicSingleEraDateTimeField0.set((-93L), "PeriodFormat.days.regex");
      basicSingleEraDateTimeField0.get((-9223372036854775808L));
      basicSingleEraDateTimeField0.getMinimumValue();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("");
      basicSingleEraDateTimeField0.getAsShortText(0L);
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.US;
      locale0.getDisplayLanguage(locale1);
      locale1.getUnicodeLocaleKeys();
      basicSingleEraDateTimeField0.getMaximumTextLength(locale0);
      basicSingleEraDateTimeField0.getRangeDurationField();
      locale0.getDisplayVariant();
      basicSingleEraDateTimeField0.set((long) 0, "", locale0);
      basicSingleEraDateTimeField0.getAsText(2515, locale1);
      Integer integer0 = new Integer(0);
      basicSingleEraDateTimeField0.getMaximumValue();
      // Undeclared exception!
      try { 
        basicSingleEraDateTimeField0.set((long) 1, "?a", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"?a\" for era is not supported
         //
         verifyException("org.joda.time.chrono.BasicSingleEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("EAT");
      basicSingleEraDateTimeField0.getMinimumValue(250L);
      basicSingleEraDateTimeField0.getDurationField();
      basicSingleEraDateTimeField0.get(250L);
      Months months0 = Months.ELEVEN;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      UnsupportedDurationField.getInstance(durationFieldType0);
      basicSingleEraDateTimeField0.roundCeiling(1);
      basicSingleEraDateTimeField0.getDurationField();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("<XY");
      long long0 = 1L;
      // Undeclared exception!
      try { 
        basicSingleEraDateTimeField0.set(4794L, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for era must be in the range [1,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BasicSingleEraDateTimeField basicSingleEraDateTimeField0 = new BasicSingleEraDateTimeField("+\")yIg529Y=.J}c4x5");
      basicSingleEraDateTimeField0.toString();
      basicSingleEraDateTimeField0.getMinimumValue((-1579L));
      basicSingleEraDateTimeField0.roundFloor(0L);
      basicSingleEraDateTimeField0.getMaximumValue();
      basicSingleEraDateTimeField0.getDurationField();
      basicSingleEraDateTimeField0.getMinimumValue();
  }
}
