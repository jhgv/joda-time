/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 25 13:24:57 GMT 2018
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.DurationFieldType;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePeriod;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodType_ESTest extends PeriodType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = periodType0.getFieldType(0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("minutes", durationFieldType1.toString());
      assertEquals("minutes", durationFieldType1.getName());
      assertNotNull(durationFieldType1);
      assertSame(durationFieldType1, durationFieldType0);
      
      durationFieldTypeArray0[1] = durationFieldType1;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [minutes]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = periodType0.getFieldType(4);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1733;
      intArray0[1] = 4;
      intArray0[2] = (-1);
      intArray0[3] = (-1267);
      PeriodType periodType0 = new PeriodType((String) null, (DurationFieldType[]) null, intArray0);
      assertNull(periodType0.getName());
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {1733, 4, (-1), (-1267)}, intArray0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        periodType0.withHoursRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      int int0 = 0;
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = periodType0.getFieldType(0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("months", durationFieldType1.toString());
      assertEquals("months", durationFieldType1.getName());
      assertNotNull(durationFieldType1);
      assertSame(durationFieldType1, durationFieldType0);
      
      PeriodType periodType1 = PeriodType.time();
      assertEquals("Time", periodType1.getName());
      assertEquals(4, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = periodType1.withWeeksRemoved();
      assertEquals("Time", periodType1.getName());
      assertEquals(4, periodType1.size());
      assertEquals(4, periodType2.size());
      assertEquals("Time", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType1, periodType0);
      assertSame(periodType1, periodType2);
      assertNotSame(periodType2, periodType0);
      assertSame(periodType2, periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType0));
      
      durationFieldTypeArray0[1] = durationFieldType1;
      PeriodType periodType3 = PeriodType.years();
      assertEquals("Years", periodType3.getName());
      assertEquals(1, periodType3.size());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [months]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = PeriodType.months();
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = periodType0.getFieldType(0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals("months", durationFieldType1.toString());
      assertEquals("months", durationFieldType1.getName());
      assertNotNull(durationFieldType1);
      assertSame(durationFieldType1, durationFieldType0);
      
      durationFieldTypeArray0[1] = durationFieldType1;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [months]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.millis();
      assertEquals(1, periodType1.size());
      assertEquals("Millis", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType.HOUR_INDEX = 20;
      PeriodType.MINUTE_INDEX = 0;
      PeriodType periodType2 = PeriodType.yearDay();
      assertEquals(2, periodType2.size());
      assertEquals("YearDay", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = PeriodType.yearDayTime();
      assertEquals("YearDayTime", periodType3.getName());
      assertEquals(6, periodType3.size());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      
      PeriodType periodType4 = PeriodType.months();
      assertEquals("Months", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      
      PeriodType periodType5 = PeriodType.time();
      assertEquals("Time", periodType5.getName());
      assertEquals(4, periodType5.size());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType2);
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType2));
      
      PeriodType periodType6 = PeriodType.weeks();
      assertEquals(1, periodType6.size());
      assertEquals("Weeks", periodType6.getName());
      assertNotNull(periodType6);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType5);
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType5));
      
      PeriodType periodType7 = PeriodType.seconds();
      assertEquals(1, periodType7.size());
      assertEquals("Seconds", periodType7.getName());
      assertNotNull(periodType7);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType0);
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType0));
      
      PeriodType periodType8 = PeriodType.months();
      assertEquals(1, periodType8.size());
      assertEquals("Months", periodType8.getName());
      assertNotNull(periodType8);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType2);
      assertSame(periodType8, periodType4);
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType2));
      
      int int0 = periodType1.getIndexedField((ReadablePeriod) null, 0);
      assertEquals(1, periodType1.size());
      assertEquals("Millis", periodType1.getName());
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType8);
      assertNotSame(periodType1, periodType4);
      assertEquals(0, int0);
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType8));
      assertFalse(periodType1.equals((Object)periodType4));
      
      PeriodType periodType9 = PeriodType.days();
      assertEquals(1, periodType9.size());
      assertEquals("Days", periodType9.getName());
      assertNotNull(periodType9);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType4);
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType4));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 20;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      boolean boolean0 = periodType4.addIndexedField((ReadablePeriod) null, 0, intArray0, 0);
      assertEquals("Months", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertNotSame(periodType4, periodType7);
      assertNotSame(periodType4, periodType6);
      assertSame(periodType4, periodType8);
      assertNotSame(periodType4, periodType5);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType9);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertArrayEquals(new int[] {0, 0, 20, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(boolean0);
      assertFalse(periodType4.equals((Object)periodType7));
      assertFalse(periodType4.equals((Object)periodType6));
      assertFalse(periodType4.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType9));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      
      PeriodType periodType10 = PeriodType.standard();
      assertEquals(8, periodType10.size());
      assertEquals("Standard", periodType10.getName());
      assertNotNull(periodType10);
      assertNotSame(periodType10, periodType8);
      assertNotSame(periodType10, periodType6);
      assertNotSame(periodType10, periodType9);
      assertNotSame(periodType10, periodType4);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType0);
      assertNotSame(periodType10, periodType3);
      assertNotSame(periodType10, periodType5);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType1);
      assertFalse(periodType10.equals((Object)periodType8));
      assertFalse(periodType10.equals((Object)periodType6));
      assertFalse(periodType10.equals((Object)periodType9));
      assertFalse(periodType10.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType3));
      assertFalse(periodType10.equals((Object)periodType5));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(0, periodType1.size());
      assertEquals("SecondsNoSeconds", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = PeriodType.weeks();
      assertEquals("Weeks", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = periodType0.withHoursRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType3.size());
      assertEquals("Seconds", periodType3.getName());
      assertNotNull(periodType3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertSame(periodType3, periodType0);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      
      PeriodType periodType4 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType4.getName());
      assertEquals(7, periodType4.size());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertNotNull(periodType0);
      
      int int0 = 5;
      PeriodType periodType1 = PeriodType.yearWeekDay();
      assertEquals("YearWeekDay", periodType1.getName());
      assertEquals(3, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      DurationFieldType durationFieldType0 = periodType0.getFieldType(5);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      assertNotSame(periodType0, periodType1);
      assertFalse(periodType0.equals((Object)periodType1));
      
      int int1 = periodType0.indexOf(durationFieldType0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertNotSame(periodType0, periodType1);
      assertEquals(5, int1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertTrue(int1 == int0);
      
      PeriodType periodType2 = PeriodType.months();
      assertEquals(1, periodType2.size());
      assertEquals("Months", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = PeriodType.days();
      assertEquals(1, periodType3.size());
      assertEquals("Days", periodType3.getName());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      
      PeriodType periodType4 = PeriodType.dayTime();
      assertEquals("DayTime", periodType4.getName());
      assertEquals(5, periodType4.size());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType0);
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType0));
      
      PeriodType periodType5 = periodType0.withYearsRemoved();
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals(5, periodType5.size());
      assertEquals("YearDayTimeNoYears", periodType5.getName());
      assertNotNull(periodType5);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType1));
      assertTrue(periodType5.equals((Object)periodType4));
      
      PeriodType periodType6 = PeriodType.seconds();
      assertEquals("Seconds", periodType6.getName());
      assertEquals(1, periodType6.size());
      assertNotNull(periodType6);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType2);
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType2));
      
      PeriodType periodType7 = PeriodType.millis();
      assertEquals("Millis", periodType7.getName());
      assertEquals(1, periodType7.size());
      assertNotNull(periodType7);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType5);
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType5));
      
      PeriodType periodType8 = PeriodType.seconds();
      assertEquals("Seconds", periodType8.getName());
      assertEquals(1, periodType8.size());
      assertNotNull(periodType8);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType5);
      assertSame(periodType8, periodType6);
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType5));
      
      PeriodType periodType9 = periodType1.withSecondsRemoved();
      assertEquals("YearWeekDay", periodType1.getName());
      assertEquals(3, periodType1.size());
      assertEquals(3, periodType9.size());
      assertEquals("YearWeekDay", periodType9.getName());
      assertNotNull(periodType9);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType8);
      assertNotSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType0);
      assertSame(periodType1, periodType9);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType7);
      assertSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType3);
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType8));
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType3));
      
      PeriodType.HOUR_INDEX = 5;
      PeriodType.MINUTE_INDEX = (-3614);
      PeriodType periodType10 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType10.size());
      assertEquals("YearMonthDayTime", periodType10.getName());
      assertNotNull(periodType10);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType0);
      assertNotSame(periodType10, periodType9);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType5);
      assertNotSame(periodType10, periodType1);
      assertNotSame(periodType10, periodType6);
      assertNotSame(periodType10, periodType3);
      assertNotSame(periodType10, periodType4);
      assertNotSame(periodType10, periodType8);
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType9));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType5));
      assertFalse(periodType10.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType6));
      assertFalse(periodType10.equals((Object)periodType3));
      assertFalse(periodType10.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType8));
      
      String string0 = periodType0.toString();
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertNotNull(string0);
      assertNotSame(periodType0, periodType10);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType9);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType8);
      assertEquals("PeriodType[YearDayTime]", string0);
      assertFalse(periodType0.equals((Object)periodType10));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType9));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType8));
      
      int int2 = periodType4.hashCode();
      assertEquals("DayTime", periodType4.getName());
      assertEquals(5, periodType4.size());
      assertNotSame(periodType4, periodType6);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType9);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType8);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType7);
      assertNotSame(periodType4, periodType10);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType5);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(periodType4.equals((Object)periodType6));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType9));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType8));
      assertTrue(periodType4.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType7));
      assertFalse(periodType4.equals((Object)periodType10));
      assertFalse(periodType4.equals((Object)periodType0));
      
      PeriodType periodType11 = PeriodType.yearDay();
      assertEquals("YearDay", periodType11.getName());
      assertEquals(2, periodType11.size());
      assertNotNull(periodType11);
      assertNotSame(periodType11, periodType3);
      assertNotSame(periodType11, periodType4);
      assertNotSame(periodType11, periodType8);
      assertNotSame(periodType11, periodType1);
      assertNotSame(periodType11, periodType6);
      assertNotSame(periodType11, periodType5);
      assertNotSame(periodType11, periodType9);
      assertNotSame(periodType11, periodType7);
      assertNotSame(periodType11, periodType10);
      assertNotSame(periodType11, periodType0);
      assertNotSame(periodType11, periodType2);
      assertFalse(periodType11.equals((Object)periodType3));
      assertFalse(periodType11.equals((Object)periodType4));
      assertFalse(periodType11.equals((Object)periodType8));
      assertFalse(periodType11.equals((Object)periodType1));
      assertFalse(periodType11.equals((Object)periodType6));
      assertFalse(periodType11.equals((Object)periodType5));
      assertFalse(periodType11.equals((Object)periodType9));
      assertFalse(periodType11.equals((Object)periodType7));
      assertFalse(periodType11.equals((Object)periodType10));
      assertFalse(periodType11.equals((Object)periodType0));
      assertFalse(periodType11.equals((Object)periodType2));
      
      PeriodType.MINUTE_INDEX = (-111);
      PeriodType periodType12 = PeriodType.time();
      assertEquals(4, periodType12.size());
      assertEquals("Time", periodType12.getName());
      assertNotNull(periodType12);
      assertNotSame(periodType12, periodType4);
      assertNotSame(periodType12, periodType8);
      assertNotSame(periodType12, periodType1);
      assertNotSame(periodType12, periodType3);
      assertNotSame(periodType12, periodType5);
      assertNotSame(periodType12, periodType6);
      assertNotSame(periodType12, periodType2);
      assertNotSame(periodType12, periodType9);
      assertNotSame(periodType12, periodType7);
      assertNotSame(periodType12, periodType10);
      assertNotSame(periodType12, periodType0);
      assertNotSame(periodType12, periodType11);
      assertFalse(periodType12.equals((Object)periodType4));
      assertFalse(periodType12.equals((Object)periodType8));
      assertFalse(periodType12.equals((Object)periodType1));
      assertFalse(periodType12.equals((Object)periodType3));
      assertFalse(periodType12.equals((Object)periodType5));
      assertFalse(periodType12.equals((Object)periodType6));
      assertFalse(periodType12.equals((Object)periodType2));
      assertFalse(periodType12.equals((Object)periodType9));
      assertFalse(periodType12.equals((Object)periodType7));
      assertFalse(periodType12.equals((Object)periodType10));
      assertFalse(periodType12.equals((Object)periodType0));
      assertFalse(periodType12.equals((Object)periodType11));
      
      PeriodType periodType13 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType13.getName());
      assertEquals(7, periodType13.size());
      assertNotNull(periodType13);
      assertNotSame(periodType13, periodType3);
      assertNotSame(periodType13, periodType1);
      assertNotSame(periodType13, periodType6);
      assertNotSame(periodType13, periodType5);
      assertNotSame(periodType13, periodType11);
      assertNotSame(periodType13, periodType12);
      assertNotSame(periodType13, periodType9);
      assertNotSame(periodType13, periodType4);
      assertNotSame(periodType13, periodType8);
      assertSame(periodType13, periodType10);
      assertNotSame(periodType13, periodType2);
      assertNotSame(periodType13, periodType7);
      assertNotSame(periodType13, periodType0);
      assertFalse(periodType13.equals((Object)periodType3));
      assertFalse(periodType13.equals((Object)periodType4));
      assertFalse(periodType13.equals((Object)periodType8));
      assertFalse(periodType13.equals((Object)periodType1));
      assertFalse(periodType13.equals((Object)periodType6));
      assertFalse(periodType13.equals((Object)periodType5));
      assertFalse(periodType13.equals((Object)periodType11));
      assertFalse(periodType13.equals((Object)periodType12));
      assertFalse(periodType13.equals((Object)periodType2));
      assertFalse(periodType13.equals((Object)periodType9));
      assertFalse(periodType13.equals((Object)periodType7));
      assertFalse(periodType13.equals((Object)periodType0));
      
      // Undeclared exception!
      try { 
        periodType1.getFieldType(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertEquals(0, periodType1.size());
      assertEquals("YearsNoYears", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      int int0 = periodType0.getIndexedField((ReadablePeriod) null, 2);
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotSame(periodType0, periodType1);
      assertEquals(0, int0);
      assertFalse(periodType0.equals((Object)periodType1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = periodType0.getFieldType(0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals("weeks", durationFieldType1.toString());
      assertEquals("weeks", durationFieldType1.getName());
      assertNotNull(durationFieldType1);
      assertSame(durationFieldType1, durationFieldType0);
      
      durationFieldTypeArray0[1] = durationFieldType1;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [weeks]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = PeriodType.time();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(periodType0);
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = periodType0.getFieldType(0);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals("hours", durationFieldType1.getName());
      assertEquals("hours", durationFieldType1.toString());
      assertNotNull(durationFieldType1);
      assertSame(durationFieldType1, durationFieldType0);
      
      durationFieldTypeArray0[1] = durationFieldType1;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [hours]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.days();
      assertEquals("Days", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = PeriodType.standard();
      assertEquals(8, periodType2.size());
      assertEquals("Standard", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = PeriodType.months();
      assertEquals(1, periodType3.size());
      assertEquals("Months", periodType3.getName());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      
      PeriodType periodType4 = PeriodType.standard();
      assertEquals(8, periodType4.size());
      assertEquals("Standard", periodType4.getName());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType3);
      assertSame(periodType4, periodType0);
      assertSame(periodType4, periodType2);
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType3));
      
      PeriodType.YEAR_INDEX = (-3517);
      PeriodType periodType5 = PeriodType.dayTime();
      assertEquals("DayTime", periodType5.getName());
      assertEquals(5, periodType5.size());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType2);
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType2));
      
      PeriodType periodType6 = PeriodType.minutes();
      assertEquals("Minutes", periodType6.getName());
      assertEquals(1, periodType6.size());
      assertNotNull(periodType6);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType1);
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType1));
      
      PeriodType.DAY_INDEX = (-3517);
      PeriodType periodType7 = periodType1.withSecondsRemoved();
      assertEquals("Days", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Days", periodType7.getName());
      assertEquals(1, periodType7.size());
      assertNotNull(periodType7);
      assertNotSame(periodType1, periodType6);
      assertSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType0);
      assertSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType6);
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType6));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-3517);
      intArray0[1] = (-3517);
      intArray0[2] = 0;
      intArray0[3] = (-3517);
      intArray0[4] = (-3517);
      intArray0[5] = (-3517);
      intArray0[6] = (-3517);
      intArray0[7] = (-3517);
      intArray0[8] = 0;
      boolean boolean0 = periodType2.addIndexedField((ReadablePeriod) null, 0, intArray0, (-3517));
      assertEquals(8, periodType2.size());
      assertEquals("Standard", periodType2.getName());
      assertNotSame(periodType2, periodType7);
      assertNotSame(periodType2, periodType1);
      assertSame(periodType2, periodType4);
      assertNotSame(periodType2, periodType5);
      assertNotSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType6);
      assertSame(periodType2, periodType0);
      assertArrayEquals(new int[] {(-7034), (-3517), 0, (-3517), (-3517), (-3517), (-3517), (-3517), 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(boolean0);
      assertFalse(periodType2.equals((Object)periodType7));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType5));
      assertFalse(periodType2.equals((Object)periodType3));
      assertFalse(periodType2.equals((Object)periodType6));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals("MinutesNoMinutes", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      int int0 = PeriodType.MINUTE_INDEX;
      assertEquals(5, int0);
      
      PeriodType periodType2 = periodType0.withHoursRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals("Minutes", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType0, periodType2);
      assertSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType1));
      
      ReadablePeriod readablePeriod0 = null;
      int[] intArray0 = new int[0];
      PeriodType periodType3 = PeriodType.dayTime();
      assertEquals(5, periodType3.size());
      assertEquals("DayTime", periodType3.getName());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        periodType0.setIndexedField((ReadablePeriod) null, 5, intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      PeriodType periodType2 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType2.size());
      assertEquals("YearWeekDayTime", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = periodType2.withMillisRemoved();
      assertEquals(7, periodType2.size());
      assertEquals("YearWeekDayTime", periodType2.getName());
      assertEquals("YearWeekDayTimeNoMillis", periodType3.getName());
      assertEquals(6, periodType3.size());
      assertNotNull(periodType3);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      
      PeriodType periodType4 = periodType0.withHoursRemoved();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("HoursNoHours", periodType4.getName());
      assertEquals(0, periodType4.size());
      assertNotNull(periodType4);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType4);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType3);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType3));
      
      PeriodType.MINUTE_INDEX = (-3152);
      PeriodType periodType5 = periodType0.withSecondsRemoved();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType5.getName());
      assertEquals(1, periodType5.size());
      assertNotNull(periodType5);
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType4);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType3);
      assertSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType2);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType2));
      
      PeriodType periodType6 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType6.getName());
      assertEquals(7, periodType6.size());
      assertNotNull(periodType6);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType1);
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType1));
      
      PeriodType periodType7 = periodType4.withMonthsRemoved();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("HoursNoHours", periodType4.getName());
      assertEquals(0, periodType4.size());
      assertEquals("HoursNoHours", periodType7.getName());
      assertEquals(0, periodType7.size());
      assertNotNull(periodType7);
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType6);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType4, periodType7);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType5);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType6);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType1);
      assertSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType6);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType6));
      
      PeriodType periodType8 = PeriodType.millis();
      assertEquals(1, periodType8.size());
      assertEquals("Millis", periodType8.getName());
      assertNotNull(periodType8);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType5);
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType5));
      
      PeriodType periodType9 = periodType8.withHoursRemoved();
      assertEquals(1, periodType8.size());
      assertEquals("Millis", periodType8.getName());
      assertEquals("Millis", periodType9.getName());
      assertEquals(1, periodType9.size());
      assertNotNull(periodType9);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType3);
      assertSame(periodType8, periodType9);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType7);
      assertSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType3);
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType3));
      
      PeriodType periodType10 = PeriodType.yearDayTime();
      assertEquals(6, periodType10.size());
      assertEquals("YearDayTime", periodType10.getName());
      assertNotNull(periodType10);
      assertNotSame(periodType10, periodType1);
      assertNotSame(periodType10, periodType3);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType4);
      assertNotSame(periodType10, periodType6);
      assertNotSame(periodType10, periodType8);
      assertNotSame(periodType10, periodType0);
      assertNotSame(periodType10, periodType5);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType9);
      assertFalse(periodType10.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType3));
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType6));
      assertFalse(periodType10.equals((Object)periodType8));
      assertFalse(periodType10.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType5));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType9));
      
      boolean boolean0 = periodType9.equals("YearDay");
      assertEquals(1, periodType8.size());
      assertEquals("Millis", periodType8.getName());
      assertEquals("Millis", periodType9.getName());
      assertEquals(1, periodType9.size());
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType3);
      assertSame(periodType8, periodType9);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType10);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType10);
      assertSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType3);
      assertFalse(boolean0);
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType10));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType10));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType3));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      PeriodType periodType2 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType2.size());
      assertEquals("YearMonthDayTime", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = PeriodType.days();
      assertEquals("Days", periodType3.getName());
      assertEquals(1, periodType3.size());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      
      String string0 = periodType3.toString();
      assertEquals("Days", periodType3.getName());
      assertEquals(1, periodType3.size());
      assertNotNull(string0);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertEquals("PeriodType[Days]", string0);
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      
      PeriodType periodType4 = periodType3.withDaysRemoved();
      assertEquals("Days", periodType3.getName());
      assertEquals(1, periodType3.size());
      assertEquals(0, periodType4.size());
      assertEquals("DaysNoDays", periodType4.getName());
      assertNotNull(periodType4);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType4);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType3);
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType3));
      
      PeriodType periodType5 = PeriodType.yearMonthDay();
      assertEquals(3, periodType5.size());
      assertEquals("YearMonthDay", periodType5.getName());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType2);
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType2));
      
      periodType0.hashCode();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType4);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType4));
      
      PeriodType periodType6 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType6.getName());
      assertEquals(7, periodType6.size());
      assertNotNull(periodType6);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType4);
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType4));
      
      PeriodType periodType7 = PeriodType.yearMonthDay();
      assertEquals(3, periodType7.size());
      assertEquals("YearMonthDay", periodType7.getName());
      assertNotNull(periodType7);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType0);
      assertSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType3);
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType3));
      
      PeriodType periodType8 = PeriodType.time();
      assertEquals("Time", periodType8.getName());
      assertEquals(4, periodType8.size());
      assertNotNull(periodType8);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType0);
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType0));
      
      String string1 = periodType3.toString();
      assertEquals("Days", periodType3.getName());
      assertEquals(1, periodType3.size());
      assertNotNull(string1);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType6);
      assertNotSame(periodType3, periodType7);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType4);
      assertNotSame(periodType3, periodType8);
      assertNotSame(periodType3, periodType5);
      assertEquals("PeriodType[Days]", string1);
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType6));
      assertFalse(periodType3.equals((Object)periodType7));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType4));
      assertFalse(periodType3.equals((Object)periodType8));
      assertFalse(periodType3.equals((Object)periodType5));
      assertTrue(string1.equals((Object)string0));
      
      PeriodType periodType9 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType9.getName());
      assertEquals(7, periodType9.size());
      assertNotNull(periodType9);
      assertNotSame(periodType9, periodType4);
      assertSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType0);
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType0));
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      // Undeclared exception!
      try { 
        periodType5.getFieldType(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.weeks();
      assertEquals(1, periodType1.size());
      assertEquals("Weeks", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = PeriodType.hours();
      assertEquals(1, periodType2.size());
      assertEquals("Hours", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = PeriodType.yearDayTime();
      assertEquals(6, periodType3.size());
      assertEquals("YearDayTime", periodType3.getName());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      
      PeriodType periodType4 = periodType0.withWeeksRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals("Seconds", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertNotNull(periodType4);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType2);
      assertSame(periodType4, periodType0);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType2));
      
      PeriodType.WEEK_INDEX = (-752);
      PeriodType periodType5 = PeriodType.minutes();
      assertEquals("Minutes", periodType5.getName());
      assertEquals(1, periodType5.size());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType2);
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType2));
      
      PeriodType periodType6 = periodType4.withDaysRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals("Seconds", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertEquals("Seconds", periodType6.getName());
      assertEquals(1, periodType6.size());
      assertNotNull(periodType6);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType5);
      assertSame(periodType0, periodType6);
      assertNotSame(periodType4, periodType1);
      assertSame(periodType4, periodType6);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType5);
      assertNotSame(periodType4, periodType2);
      assertSame(periodType4, periodType0);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType5);
      assertSame(periodType6, periodType0);
      assertSame(periodType6, periodType4);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType5));
      
      PeriodType periodType7 = periodType4.withDaysRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals("Seconds", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertEquals(1, periodType7.size());
      assertEquals("Seconds", periodType7.getName());
      assertNotNull(periodType7);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType5);
      assertSame(periodType0, periodType6);
      assertNotSame(periodType4, periodType1);
      assertSame(periodType4, periodType6);
      assertSame(periodType4, periodType7);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType5);
      assertNotSame(periodType4, periodType2);
      assertSame(periodType4, periodType0);
      assertNotSame(periodType7, periodType2);
      assertSame(periodType7, periodType0);
      assertSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType5);
      assertSame(periodType7, periodType6);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType5));
      
      PeriodType periodType8 = PeriodType.yearWeekDay();
      assertEquals(3, periodType8.size());
      assertEquals("YearWeekDay", periodType8.getName());
      assertNotNull(periodType8);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType3);
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType3));
      
      PeriodType periodType9 = PeriodType.yearDayTime();
      assertEquals(6, periodType9.size());
      assertEquals("YearDayTime", periodType9.getName());
      assertNotNull(periodType9);
      assertNotSame(periodType9, periodType4);
      assertSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType1);
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType1));
      
      PeriodType periodType10 = PeriodType.yearWeekDay();
      assertEquals("YearWeekDay", periodType10.getName());
      assertEquals(3, periodType10.size());
      assertNotNull(periodType10);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType5);
      assertNotSame(periodType10, periodType0);
      assertNotSame(periodType10, periodType3);
      assertNotSame(periodType10, periodType4);
      assertNotSame(periodType10, periodType9);
      assertSame(periodType10, periodType8);
      assertNotSame(periodType10, periodType1);
      assertNotSame(periodType10, periodType6);
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType5));
      assertFalse(periodType10.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType3));
      assertFalse(periodType10.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType9));
      assertFalse(periodType10.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType6));
      
      PeriodType periodType11 = PeriodType.yearWeekDay();
      assertEquals(3, periodType11.size());
      assertEquals("YearWeekDay", periodType11.getName());
      assertNotNull(periodType11);
      assertNotSame(periodType11, periodType4);
      assertNotSame(periodType11, periodType3);
      assertNotSame(periodType11, periodType2);
      assertSame(periodType11, periodType10);
      assertNotSame(periodType11, periodType6);
      assertNotSame(periodType11, periodType0);
      assertNotSame(periodType11, periodType5);
      assertNotSame(periodType11, periodType9);
      assertSame(periodType11, periodType8);
      assertNotSame(periodType11, periodType7);
      assertNotSame(periodType11, periodType1);
      assertFalse(periodType11.equals((Object)periodType4));
      assertFalse(periodType11.equals((Object)periodType3));
      assertFalse(periodType11.equals((Object)periodType2));
      assertFalse(periodType11.equals((Object)periodType6));
      assertFalse(periodType11.equals((Object)periodType0));
      assertFalse(periodType11.equals((Object)periodType5));
      assertFalse(periodType11.equals((Object)periodType9));
      assertFalse(periodType11.equals((Object)periodType7));
      assertFalse(periodType11.equals((Object)periodType1));
      
      int int0 = (-48);
      PeriodType.SECOND_INDEX = (-48);
      PeriodType periodType12 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType12.getName());
      assertEquals(7, periodType12.size());
      assertNotNull(periodType12);
      assertNotSame(periodType12, periodType5);
      assertNotSame(periodType12, periodType0);
      assertNotSame(periodType12, periodType10);
      assertNotSame(periodType12, periodType2);
      assertNotSame(periodType12, periodType4);
      assertNotSame(periodType12, periodType7);
      assertNotSame(periodType12, periodType9);
      assertNotSame(periodType12, periodType1);
      assertNotSame(periodType12, periodType3);
      assertNotSame(periodType12, periodType6);
      assertNotSame(periodType12, periodType8);
      assertNotSame(periodType12, periodType11);
      assertFalse(periodType12.equals((Object)periodType5));
      assertFalse(periodType12.equals((Object)periodType0));
      assertFalse(periodType12.equals((Object)periodType10));
      assertFalse(periodType12.equals((Object)periodType2));
      assertFalse(periodType12.equals((Object)periodType4));
      assertFalse(periodType12.equals((Object)periodType7));
      assertFalse(periodType12.equals((Object)periodType9));
      assertFalse(periodType12.equals((Object)periodType1));
      assertFalse(periodType12.equals((Object)periodType3));
      assertFalse(periodType12.equals((Object)periodType6));
      assertFalse(periodType12.equals((Object)periodType8));
      assertFalse(periodType12.equals((Object)periodType11));
      
      int int1 = periodType9.hashCode();
      assertEquals(6, periodType9.size());
      assertEquals("YearDayTime", periodType9.getName());
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType10);
      assertSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType11);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType12);
      assertNotSame(periodType9, periodType1);
      assertFalse(int1 == int0);
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType10));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType11));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType12));
      assertFalse(periodType9.equals((Object)periodType1));
      
      PeriodType periodType13 = periodType10.withMonthsRemoved();
      assertEquals(3, periodType13.size());
      assertEquals("YearWeekDay", periodType13.getName());
      assertEquals("YearWeekDay", periodType10.getName());
      assertEquals(3, periodType10.size());
      assertNotNull(periodType13);
      assertNotSame(periodType13, periodType2);
      assertNotSame(periodType13, periodType0);
      assertNotSame(periodType13, periodType7);
      assertNotSame(periodType13, periodType9);
      assertSame(periodType13, periodType8);
      assertNotSame(periodType13, periodType12);
      assertNotSame(periodType13, periodType1);
      assertSame(periodType13, periodType10);
      assertNotSame(periodType13, periodType3);
      assertNotSame(periodType13, periodType6);
      assertNotSame(periodType13, periodType5);
      assertNotSame(periodType13, periodType4);
      assertSame(periodType13, periodType11);
      assertSame(periodType10, periodType13);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType5);
      assertNotSame(periodType10, periodType4);
      assertSame(periodType10, periodType11);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType0);
      assertNotSame(periodType10, periodType3);
      assertNotSame(periodType10, periodType9);
      assertSame(periodType10, periodType8);
      assertNotSame(periodType10, periodType12);
      assertNotSame(periodType10, periodType1);
      assertNotSame(periodType10, periodType6);
      assertFalse(periodType13.equals((Object)periodType3));
      assertFalse(periodType13.equals((Object)periodType6));
      assertFalse(periodType13.equals((Object)periodType2));
      assertFalse(periodType13.equals((Object)periodType0));
      assertFalse(periodType13.equals((Object)periodType5));
      assertFalse(periodType13.equals((Object)periodType4));
      assertFalse(periodType13.equals((Object)periodType7));
      assertFalse(periodType13.equals((Object)periodType9));
      assertFalse(periodType13.equals((Object)periodType12));
      assertFalse(periodType13.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType5));
      assertFalse(periodType10.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType3));
      assertFalse(periodType10.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType9));
      assertFalse(periodType10.equals((Object)periodType12));
      assertFalse(periodType10.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType6));
      
      int int2 = periodType3.hashCode();
      assertEquals(6, periodType3.size());
      assertEquals("YearDayTime", periodType3.getName());
      assertSame(periodType3, periodType9);
      assertNotSame(periodType3, periodType5);
      assertNotSame(periodType3, periodType12);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType4);
      assertNotSame(periodType3, periodType11);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType10);
      assertNotSame(periodType3, periodType8);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType6);
      assertNotSame(periodType3, periodType7);
      assertNotSame(periodType3, periodType13);
      assertFalse(int2 == int0);
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType10));
      assertFalse(periodType3.equals((Object)periodType5));
      assertFalse(periodType3.equals((Object)periodType12));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType4));
      assertFalse(periodType3.equals((Object)periodType8));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType6));
      assertFalse(periodType3.equals((Object)periodType7));
      assertFalse(periodType3.equals((Object)periodType13));
      assertFalse(periodType3.equals((Object)periodType11));
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      int int3 = (-67);
      // Undeclared exception!
      try { 
        periodType2.getFieldType((-67));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -67
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearMonthDay();
      assertEquals("YearMonthDay", periodType1.getName());
      assertEquals(3, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = PeriodType.yearMonthDay();
      assertEquals(3, periodType2.size());
      assertEquals("YearMonthDay", periodType2.getName());
      assertNotNull(periodType2);
      assertSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = periodType1.withSecondsRemoved();
      assertEquals("YearMonthDay", periodType1.getName());
      assertEquals(3, periodType1.size());
      assertEquals(3, periodType3.size());
      assertEquals("YearMonthDay", periodType3.getName());
      assertNotNull(periodType3);
      assertSame(periodType1, periodType2);
      assertSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType0);
      assertSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertSame(periodType3, periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType0));
      
      PeriodType periodType4 = periodType0.withYearsRemoved();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTimeNoYears", periodType4.getName());
      assertEquals(6, periodType4.size());
      assertNotNull(periodType4);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType1));
      
      PeriodType periodType5 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType5.size());
      assertEquals("YearMonthDayTime", periodType5.getName());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType4);
      assertSame(periodType5, periodType0);
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType4));
      
      PeriodType periodType6 = PeriodType.days();
      assertEquals(1, periodType6.size());
      assertEquals("Days", periodType6.getName());
      assertNotNull(periodType6);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType4);
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType4));
      
      PeriodType periodType7 = PeriodType.seconds();
      assertEquals("Seconds", periodType7.getName());
      assertEquals(1, periodType7.size());
      assertNotNull(periodType7);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType0);
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType0));
      
      PeriodType.WEEK_INDEX = 14;
      PeriodType.DAY_INDEX = 1440;
      PeriodType periodType8 = periodType0.withDaysRemoved();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTimeNoDays", periodType8.getName());
      assertEquals(6, periodType8.size());
      assertNotNull(periodType8);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType8);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType7);
      assertSame(periodType0, periodType5);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType7);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType7));
      
      PeriodType periodType9 = PeriodType.yearDay();
      assertEquals("YearDay", periodType9.getName());
      assertEquals(2, periodType9.size());
      assertNotNull(periodType9);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType1);
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType1));
      
      PeriodType periodType10 = PeriodType.standard();
      assertEquals(8, periodType10.size());
      assertEquals("Standard", periodType10.getName());
      assertNotNull(periodType10);
      assertNotSame(periodType10, periodType4);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType0);
      assertNotSame(periodType10, periodType9);
      assertNotSame(periodType10, periodType1);
      assertNotSame(periodType10, periodType8);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType5);
      assertNotSame(periodType10, periodType6);
      assertNotSame(periodType10, periodType3);
      assertFalse(periodType10.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType9));
      assertFalse(periodType10.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType8));
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType5));
      assertFalse(periodType10.equals((Object)periodType6));
      assertFalse(periodType10.equals((Object)periodType3));
      
      PeriodType periodType11 = PeriodType.years();
      assertEquals("Years", periodType11.getName());
      assertEquals(1, periodType11.size());
      assertNotNull(periodType11);
      assertNotSame(periodType11, periodType1);
      assertNotSame(periodType11, periodType3);
      assertNotSame(periodType11, periodType6);
      assertNotSame(periodType11, periodType4);
      assertNotSame(periodType11, periodType7);
      assertNotSame(periodType11, periodType9);
      assertNotSame(periodType11, periodType10);
      assertNotSame(periodType11, periodType2);
      assertNotSame(periodType11, periodType5);
      assertNotSame(periodType11, periodType0);
      assertNotSame(periodType11, periodType8);
      assertFalse(periodType11.equals((Object)periodType1));
      assertFalse(periodType11.equals((Object)periodType3));
      assertFalse(periodType11.equals((Object)periodType6));
      assertFalse(periodType11.equals((Object)periodType4));
      assertFalse(periodType11.equals((Object)periodType7));
      assertFalse(periodType11.equals((Object)periodType9));
      assertFalse(periodType11.equals((Object)periodType10));
      assertFalse(periodType11.equals((Object)periodType2));
      assertFalse(periodType11.equals((Object)periodType5));
      assertFalse(periodType11.equals((Object)periodType0));
      assertFalse(periodType11.equals((Object)periodType8));
      
      PeriodType periodType12 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType12.getName());
      assertEquals(7, periodType12.size());
      assertNotNull(periodType12);
      assertNotSame(periodType12, periodType10);
      assertNotSame(periodType12, periodType5);
      assertNotSame(periodType12, periodType2);
      assertNotSame(periodType12, periodType9);
      assertNotSame(periodType12, periodType0);
      assertNotSame(periodType12, periodType6);
      assertNotSame(periodType12, periodType1);
      assertNotSame(periodType12, periodType3);
      assertNotSame(periodType12, periodType7);
      assertNotSame(periodType12, periodType11);
      assertNotSame(periodType12, periodType4);
      assertNotSame(periodType12, periodType8);
      assertFalse(periodType12.equals((Object)periodType10));
      assertFalse(periodType12.equals((Object)periodType5));
      assertFalse(periodType12.equals((Object)periodType2));
      assertFalse(periodType12.equals((Object)periodType9));
      assertFalse(periodType12.equals((Object)periodType0));
      assertFalse(periodType12.equals((Object)periodType6));
      assertFalse(periodType12.equals((Object)periodType1));
      assertFalse(periodType12.equals((Object)periodType3));
      assertFalse(periodType12.equals((Object)periodType7));
      assertFalse(periodType12.equals((Object)periodType11));
      assertFalse(periodType12.equals((Object)periodType4));
      assertFalse(periodType12.equals((Object)periodType8));
      
      PeriodType periodType13 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType13.size());
      assertEquals("YearMonthDayTime", periodType13.getName());
      assertNotNull(periodType13);
      assertNotSame(periodType13, periodType3);
      assertSame(periodType13, periodType0);
      assertSame(periodType13, periodType5);
      assertNotSame(periodType13, periodType1);
      assertNotSame(periodType13, periodType4);
      assertNotSame(periodType13, periodType10);
      assertNotSame(periodType13, periodType6);
      assertNotSame(periodType13, periodType7);
      assertNotSame(periodType13, periodType11);
      assertNotSame(periodType13, periodType8);
      assertNotSame(periodType13, periodType2);
      assertNotSame(periodType13, periodType9);
      assertNotSame(periodType13, periodType12);
      assertFalse(periodType13.equals((Object)periodType6));
      assertFalse(periodType13.equals((Object)periodType3));
      assertFalse(periodType13.equals((Object)periodType1));
      assertFalse(periodType13.equals((Object)periodType4));
      assertFalse(periodType13.equals((Object)periodType8));
      assertFalse(periodType13.equals((Object)periodType7));
      assertFalse(periodType13.equals((Object)periodType11));
      assertFalse(periodType13.equals((Object)periodType10));
      assertFalse(periodType13.equals((Object)periodType2));
      assertFalse(periodType13.equals((Object)periodType9));
      assertFalse(periodType13.equals((Object)periodType12));
      
      PeriodType periodType14 = periodType13.withSecondsRemoved();
      assertEquals(6, periodType14.size());
      assertEquals("YearMonthDayTimeNoSeconds", periodType14.getName());
      assertEquals(7, periodType13.size());
      assertEquals("YearMonthDayTime", periodType13.getName());
      assertNotNull(periodType14);
      assertNotSame(periodType14, periodType7);
      assertNotSame(periodType14, periodType11);
      assertNotSame(periodType14, periodType6);
      assertNotSame(periodType14, periodType0);
      assertNotSame(periodType14, periodType9);
      assertNotSame(periodType14, periodType4);
      assertNotSame(periodType14, periodType1);
      assertNotSame(periodType14, periodType3);
      assertNotSame(periodType14, periodType10);
      assertNotSame(periodType14, periodType12);
      assertNotSame(periodType14, periodType13);
      assertNotSame(periodType14, periodType2);
      assertNotSame(periodType14, periodType5);
      assertNotSame(periodType14, periodType8);
      assertNotSame(periodType13, periodType3);
      assertSame(periodType13, periodType0);
      assertSame(periodType13, periodType5);
      assertNotSame(periodType13, periodType1);
      assertNotSame(periodType13, periodType4);
      assertNotSame(periodType13, periodType10);
      assertNotSame(periodType13, periodType6);
      assertNotSame(periodType13, periodType14);
      assertNotSame(periodType13, periodType7);
      assertNotSame(periodType13, periodType11);
      assertNotSame(periodType13, periodType8);
      assertNotSame(periodType13, periodType2);
      assertNotSame(periodType13, periodType9);
      assertNotSame(periodType13, periodType12);
      assertFalse(periodType14.equals((Object)periodType7));
      assertFalse(periodType14.equals((Object)periodType11));
      assertFalse(periodType14.equals((Object)periodType6));
      assertFalse(periodType14.equals((Object)periodType0));
      assertFalse(periodType14.equals((Object)periodType9));
      assertFalse(periodType14.equals((Object)periodType4));
      assertFalse(periodType14.equals((Object)periodType1));
      assertFalse(periodType14.equals((Object)periodType3));
      assertFalse(periodType14.equals((Object)periodType10));
      assertFalse(periodType14.equals((Object)periodType12));
      assertFalse(periodType14.equals((Object)periodType13));
      assertFalse(periodType14.equals((Object)periodType2));
      assertFalse(periodType14.equals((Object)periodType5));
      assertFalse(periodType14.equals((Object)periodType8));
      assertFalse(periodType13.equals((Object)periodType6));
      assertFalse(periodType13.equals((Object)periodType3));
      assertFalse(periodType13.equals((Object)periodType1));
      assertFalse(periodType13.equals((Object)periodType4));
      assertFalse(periodType13.equals((Object)periodType8));
      assertFalse(periodType13.equals((Object)periodType7));
      assertFalse(periodType13.equals((Object)periodType11));
      assertFalse(periodType13.equals((Object)periodType10));
      assertFalse(periodType13.equals((Object)periodType2));
      assertFalse(periodType13.equals((Object)periodType9));
      assertFalse(periodType13.equals((Object)periodType12));
      
      PeriodType periodType15 = PeriodType.minutes();
      assertEquals(1, periodType15.size());
      assertEquals("Minutes", periodType15.getName());
      assertNotNull(periodType15);
      assertNotSame(periodType15, periodType2);
      assertNotSame(periodType15, periodType10);
      assertNotSame(periodType15, periodType9);
      assertNotSame(periodType15, periodType12);
      assertNotSame(periodType15, periodType8);
      assertNotSame(periodType15, periodType14);
      assertNotSame(periodType15, periodType13);
      assertNotSame(periodType15, periodType5);
      assertNotSame(periodType15, periodType6);
      assertNotSame(periodType15, periodType0);
      assertNotSame(periodType15, periodType3);
      assertNotSame(periodType15, periodType11);
      assertNotSame(periodType15, periodType4);
      assertNotSame(periodType15, periodType7);
      assertNotSame(periodType15, periodType1);
      assertFalse(periodType15.equals((Object)periodType2));
      assertFalse(periodType15.equals((Object)periodType10));
      assertFalse(periodType15.equals((Object)periodType9));
      assertFalse(periodType15.equals((Object)periodType12));
      assertFalse(periodType15.equals((Object)periodType8));
      assertFalse(periodType15.equals((Object)periodType14));
      assertFalse(periodType15.equals((Object)periodType13));
      assertFalse(periodType15.equals((Object)periodType5));
      assertFalse(periodType15.equals((Object)periodType6));
      assertFalse(periodType15.equals((Object)periodType0));
      assertFalse(periodType15.equals((Object)periodType3));
      assertFalse(periodType15.equals((Object)periodType11));
      assertFalse(periodType15.equals((Object)periodType4));
      assertFalse(periodType15.equals((Object)periodType7));
      assertFalse(periodType15.equals((Object)periodType1));
      
      PeriodType periodType16 = periodType9.withMonthsRemoved();
      assertEquals(2, periodType16.size());
      assertEquals("YearDay", periodType16.getName());
      assertEquals("YearDay", periodType9.getName());
      assertEquals(2, periodType9.size());
      assertNotNull(periodType16);
      assertNotSame(periodType16, periodType10);
      assertNotSame(periodType16, periodType2);
      assertNotSame(periodType16, periodType14);
      assertNotSame(periodType16, periodType6);
      assertNotSame(periodType16, periodType15);
      assertNotSame(periodType16, periodType8);
      assertNotSame(periodType16, periodType13);
      assertNotSame(periodType16, periodType5);
      assertNotSame(periodType16, periodType0);
      assertNotSame(periodType16, periodType11);
      assertNotSame(periodType16, periodType7);
      assertNotSame(periodType16, periodType1);
      assertNotSame(periodType16, periodType3);
      assertNotSame(periodType16, periodType12);
      assertNotSame(periodType16, periodType4);
      assertSame(periodType16, periodType9);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType13);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType12);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType15);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType14);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType10);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType11);
      assertNotSame(periodType9, periodType4);
      assertSame(periodType9, periodType16);
      assertNotSame(periodType9, periodType1);
      assertFalse(periodType16.equals((Object)periodType10));
      assertFalse(periodType16.equals((Object)periodType2));
      assertFalse(periodType16.equals((Object)periodType14));
      assertFalse(periodType16.equals((Object)periodType6));
      assertFalse(periodType16.equals((Object)periodType15));
      assertFalse(periodType16.equals((Object)periodType8));
      assertFalse(periodType16.equals((Object)periodType13));
      assertFalse(periodType16.equals((Object)periodType5));
      assertFalse(periodType16.equals((Object)periodType0));
      assertFalse(periodType16.equals((Object)periodType11));
      assertFalse(periodType16.equals((Object)periodType7));
      assertFalse(periodType16.equals((Object)periodType1));
      assertFalse(periodType16.equals((Object)periodType3));
      assertFalse(periodType16.equals((Object)periodType12));
      assertFalse(periodType16.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType13));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType12));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType15));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType14));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType10));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType11));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType1));
      
      PeriodType periodType17 = periodType5.withSecondsRemoved();
      assertEquals("YearMonthDayTimeNoSeconds", periodType17.getName());
      assertEquals(6, periodType17.size());
      assertEquals(7, periodType5.size());
      assertEquals("YearMonthDayTime", periodType5.getName());
      assertNotNull(periodType17);
      assertNotSame(periodType17, periodType10);
      assertNotSame(periodType17, periodType2);
      assertNotSame(periodType17, periodType14);
      assertNotSame(periodType17, periodType15);
      assertNotSame(periodType17, periodType13);
      assertNotSame(periodType17, periodType6);
      assertNotSame(periodType17, periodType5);
      assertNotSame(periodType17, periodType0);
      assertNotSame(periodType17, periodType8);
      assertNotSame(periodType17, periodType7);
      assertNotSame(periodType17, periodType11);
      assertNotSame(periodType17, periodType4);
      assertNotSame(periodType17, periodType1);
      assertNotSame(periodType17, periodType9);
      assertNotSame(periodType17, periodType12);
      assertNotSame(periodType17, periodType16);
      assertNotSame(periodType17, periodType3);
      assertNotSame(periodType5, periodType6);
      assertNotSame(periodType5, periodType14);
      assertNotSame(periodType5, periodType7);
      assertNotSame(periodType5, periodType11);
      assertNotSame(periodType5, periodType9);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType10);
      assertNotSame(periodType5, periodType17);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType3);
      assertSame(periodType5, periodType13);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType12);
      assertNotSame(periodType5, periodType16);
      assertNotSame(periodType5, periodType8);
      assertSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType15);
      assertFalse(periodType17.equals((Object)periodType10));
      assertFalse(periodType17.equals((Object)periodType2));
      assertFalse(periodType17.equals((Object)periodType15));
      assertFalse(periodType17.equals((Object)periodType13));
      assertFalse(periodType17.equals((Object)periodType6));
      assertFalse(periodType17.equals((Object)periodType5));
      assertTrue(periodType17.equals((Object)periodType14));
      assertFalse(periodType17.equals((Object)periodType0));
      assertFalse(periodType17.equals((Object)periodType8));
      assertFalse(periodType17.equals((Object)periodType7));
      assertFalse(periodType17.equals((Object)periodType11));
      assertFalse(periodType17.equals((Object)periodType4));
      assertFalse(periodType17.equals((Object)periodType1));
      assertFalse(periodType17.equals((Object)periodType9));
      assertFalse(periodType17.equals((Object)periodType12));
      assertFalse(periodType17.equals((Object)periodType16));
      assertFalse(periodType17.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType6));
      assertFalse(periodType5.equals((Object)periodType14));
      assertFalse(periodType5.equals((Object)periodType7));
      assertFalse(periodType5.equals((Object)periodType11));
      assertFalse(periodType5.equals((Object)periodType9));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType10));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType12));
      assertFalse(periodType5.equals((Object)periodType16));
      assertFalse(periodType5.equals((Object)periodType8));
      assertFalse(periodType5.equals((Object)periodType15));
      
      PeriodType periodType18 = PeriodType.months();
      assertEquals(1, periodType18.size());
      assertEquals("Months", periodType18.getName());
      assertNotNull(periodType18);
      assertNotSame(periodType18, periodType10);
      assertNotSame(periodType18, periodType17);
      assertNotSame(periodType18, periodType2);
      assertNotSame(periodType18, periodType1);
      assertNotSame(periodType18, periodType12);
      assertNotSame(periodType18, periodType9);
      assertNotSame(periodType18, periodType16);
      assertNotSame(periodType18, periodType3);
      assertNotSame(periodType18, periodType5);
      assertNotSame(periodType18, periodType0);
      assertNotSame(periodType18, periodType8);
      assertNotSame(periodType18, periodType7);
      assertNotSame(periodType18, periodType11);
      assertNotSame(periodType18, periodType4);
      assertNotSame(periodType18, periodType14);
      assertNotSame(periodType18, periodType15);
      assertNotSame(periodType18, periodType13);
      assertNotSame(periodType18, periodType6);
      assertFalse(periodType18.equals((Object)periodType10));
      assertFalse(periodType18.equals((Object)periodType17));
      assertFalse(periodType18.equals((Object)periodType2));
      assertFalse(periodType18.equals((Object)periodType1));
      assertFalse(periodType18.equals((Object)periodType12));
      assertFalse(periodType18.equals((Object)periodType9));
      assertFalse(periodType18.equals((Object)periodType16));
      assertFalse(periodType18.equals((Object)periodType3));
      assertFalse(periodType18.equals((Object)periodType5));
      assertFalse(periodType18.equals((Object)periodType0));
      assertFalse(periodType18.equals((Object)periodType8));
      assertFalse(periodType18.equals((Object)periodType7));
      assertFalse(periodType18.equals((Object)periodType11));
      assertFalse(periodType18.equals((Object)periodType4));
      assertFalse(periodType18.equals((Object)periodType14));
      assertFalse(periodType18.equals((Object)periodType15));
      assertFalse(periodType18.equals((Object)periodType13));
      assertFalse(periodType18.equals((Object)periodType6));
      
      PeriodType periodType19 = PeriodType.minutes();
      assertEquals(1, periodType19.size());
      assertEquals("Minutes", periodType19.getName());
      assertNotNull(periodType19);
      assertNotSame(periodType19, periodType1);
      assertNotSame(periodType19, periodType3);
      assertNotSame(periodType19, periodType16);
      assertNotSame(periodType19, periodType0);
      assertNotSame(periodType19, periodType12);
      assertNotSame(periodType19, periodType5);
      assertNotSame(periodType19, periodType18);
      assertNotSame(periodType19, periodType13);
      assertNotSame(periodType19, periodType8);
      assertSame(periodType19, periodType15);
      assertNotSame(periodType19, periodType14);
      assertNotSame(periodType19, periodType2);
      assertNotSame(periodType19, periodType6);
      assertNotSame(periodType19, periodType9);
      assertNotSame(periodType19, periodType10);
      assertNotSame(periodType19, periodType17);
      assertNotSame(periodType19, periodType7);
      assertNotSame(periodType19, periodType11);
      assertNotSame(periodType19, periodType4);
      assertFalse(periodType19.equals((Object)periodType1));
      assertFalse(periodType19.equals((Object)periodType3));
      assertFalse(periodType19.equals((Object)periodType16));
      assertFalse(periodType19.equals((Object)periodType0));
      assertFalse(periodType19.equals((Object)periodType12));
      assertFalse(periodType19.equals((Object)periodType5));
      assertFalse(periodType19.equals((Object)periodType18));
      assertFalse(periodType19.equals((Object)periodType13));
      assertFalse(periodType19.equals((Object)periodType8));
      assertFalse(periodType19.equals((Object)periodType14));
      assertFalse(periodType19.equals((Object)periodType2));
      assertFalse(periodType19.equals((Object)periodType6));
      assertFalse(periodType19.equals((Object)periodType9));
      assertFalse(periodType19.equals((Object)periodType10));
      assertFalse(periodType19.equals((Object)periodType17));
      assertFalse(periodType19.equals((Object)periodType7));
      assertFalse(periodType19.equals((Object)periodType11));
      assertFalse(periodType19.equals((Object)periodType4));
      
      DurationFieldType durationFieldType0 = periodType4.getFieldType(3);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTimeNoYears", periodType4.getName());
      assertEquals(6, periodType4.size());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      assertNotSame(periodType0, periodType9);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType10);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType11);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType19);
      assertNotSame(periodType0, periodType12);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType16);
      assertNotSame(periodType0, periodType18);
      assertNotSame(periodType0, periodType17);
      assertNotSame(periodType0, periodType8);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType15);
      assertSame(periodType0, periodType13);
      assertNotSame(periodType0, periodType14);
      assertSame(periodType0, periodType5);
      assertNotSame(periodType4, periodType12);
      assertNotSame(periodType4, periodType17);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType16);
      assertNotSame(periodType4, periodType18);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType15);
      assertNotSame(periodType4, periodType13);
      assertNotSame(periodType4, periodType9);
      assertNotSame(periodType4, periodType14);
      assertNotSame(periodType4, periodType6);
      assertNotSame(periodType4, periodType8);
      assertNotSame(periodType4, periodType5);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType19);
      assertNotSame(periodType4, periodType10);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType7);
      assertNotSame(periodType4, periodType11);
      assertFalse(periodType0.equals((Object)periodType9));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType10));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType11));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType19));
      assertFalse(periodType0.equals((Object)periodType12));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType16));
      assertFalse(periodType0.equals((Object)periodType18));
      assertFalse(periodType0.equals((Object)periodType17));
      assertFalse(periodType0.equals((Object)periodType8));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType15));
      assertFalse(periodType0.equals((Object)periodType14));
      assertFalse(periodType4.equals((Object)periodType12));
      assertFalse(periodType4.equals((Object)periodType17));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType16));
      assertFalse(periodType4.equals((Object)periodType18));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType15));
      assertFalse(periodType4.equals((Object)periodType13));
      assertFalse(periodType4.equals((Object)periodType9));
      assertFalse(periodType4.equals((Object)periodType14));
      assertFalse(periodType4.equals((Object)periodType6));
      assertFalse(periodType4.equals((Object)periodType8));
      assertFalse(periodType4.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType19));
      assertFalse(periodType4.equals((Object)periodType10));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType7));
      assertFalse(periodType4.equals((Object)periodType11));
      
      int int0 = periodType9.indexOf(durationFieldType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTimeNoYears", periodType4.getName());
      assertEquals(6, periodType4.size());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("YearDay", periodType9.getName());
      assertEquals(2, periodType9.size());
      assertNotSame(periodType0, periodType9);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType10);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType11);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType19);
      assertNotSame(periodType0, periodType12);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType16);
      assertNotSame(periodType0, periodType18);
      assertNotSame(periodType0, periodType17);
      assertNotSame(periodType0, periodType8);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType15);
      assertSame(periodType0, periodType13);
      assertNotSame(periodType0, periodType14);
      assertSame(periodType0, periodType5);
      assertNotSame(periodType4, periodType12);
      assertNotSame(periodType4, periodType17);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType16);
      assertNotSame(periodType4, periodType18);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType15);
      assertNotSame(periodType4, periodType13);
      assertNotSame(periodType4, periodType9);
      assertNotSame(periodType4, periodType14);
      assertNotSame(periodType4, periodType6);
      assertNotSame(periodType4, periodType8);
      assertNotSame(periodType4, periodType5);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType19);
      assertNotSame(periodType4, periodType10);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType7);
      assertNotSame(periodType4, periodType11);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType13);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType19);
      assertNotSame(periodType9, periodType12);
      assertNotSame(periodType9, periodType18);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType15);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType14);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType17);
      assertNotSame(periodType9, periodType10);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType11);
      assertNotSame(periodType9, periodType4);
      assertSame(periodType9, periodType16);
      assertNotSame(periodType9, periodType1);
      assertEquals((-1), int0);
      assertFalse(periodType0.equals((Object)periodType9));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType10));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType11));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType19));
      assertFalse(periodType0.equals((Object)periodType12));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType16));
      assertFalse(periodType0.equals((Object)periodType18));
      assertFalse(periodType0.equals((Object)periodType17));
      assertFalse(periodType0.equals((Object)periodType8));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType15));
      assertFalse(periodType0.equals((Object)periodType14));
      assertFalse(periodType4.equals((Object)periodType12));
      assertFalse(periodType4.equals((Object)periodType17));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType16));
      assertFalse(periodType4.equals((Object)periodType18));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType15));
      assertFalse(periodType4.equals((Object)periodType13));
      assertFalse(periodType4.equals((Object)periodType9));
      assertFalse(periodType4.equals((Object)periodType14));
      assertFalse(periodType4.equals((Object)periodType6));
      assertFalse(periodType4.equals((Object)periodType8));
      assertFalse(periodType4.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType19));
      assertFalse(periodType4.equals((Object)periodType10));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType7));
      assertFalse(periodType4.equals((Object)periodType11));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType13));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType19));
      assertFalse(periodType9.equals((Object)periodType12));
      assertFalse(periodType9.equals((Object)periodType18));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType15));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType14));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType17));
      assertFalse(periodType9.equals((Object)periodType10));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType11));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Weeks", periodType1.getName());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      PeriodType.MONTH_INDEX = (-1787);
      PeriodType.MILLI_INDEX = (-1787);
      int int0 = periodType0.size();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertSame(periodType0, periodType1);
      assertEquals(1, int0);
      
      PeriodType periodType2 = PeriodType.days();
      assertEquals(1, periodType2.size());
      assertEquals("Days", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = PeriodType.dayTime();
      assertEquals("DayTime", periodType3.getName());
      assertEquals(5, periodType3.size());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      
      PeriodType periodType4 = PeriodType.yearDay();
      assertEquals(2, periodType4.size());
      assertEquals("YearDay", periodType4.getName());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      
      PeriodType periodType5 = periodType0.withHoursRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType5.size());
      assertEquals("Weeks", periodType5.getName());
      assertNotNull(periodType5);
      assertSame(periodType0, periodType1);
      assertSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType4);
      assertSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType3);
      assertSame(periodType5, periodType0);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType3));
      
      PeriodType periodType6 = PeriodType.weeks();
      assertEquals(1, periodType6.size());
      assertEquals("Weeks", periodType6.getName());
      assertNotNull(periodType6);
      assertSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType2);
      assertSame(periodType6, periodType5);
      assertSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType3);
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType3));
      
      PeriodType periodType7 = periodType0.withWeeksRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals("WeeksNoWeeks", periodType7.getName());
      assertEquals(0, periodType7.size());
      assertNotNull(periodType7);
      assertNotSame(periodType0, periodType7);
      assertSame(periodType0, periodType1);
      assertSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType4);
      assertSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType2);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType2));
      
      int int1 = periodType6.getIndexedField((ReadablePeriod) null, 1);
      assertEquals(1, periodType6.size());
      assertEquals("Weeks", periodType6.getName());
      assertNotSame(periodType6, periodType7);
      assertSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType2);
      assertSame(periodType6, periodType5);
      assertSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType3);
      assertEquals(0, int1);
      assertFalse(periodType6.equals((Object)periodType7));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(int1 == int0);
      
      PeriodType periodType8 = PeriodType.yearDayTime();
      assertEquals("YearDayTime", periodType8.getName());
      assertEquals(6, periodType8.size());
      assertNotNull(periodType8);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType7);
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType7));
      
      PeriodType periodType9 = periodType3.withSecondsRemoved();
      assertEquals("DayTime", periodType3.getName());
      assertEquals(5, periodType3.size());
      assertEquals(4, periodType9.size());
      assertEquals("DayTimeNoSeconds", periodType9.getName());
      assertNotNull(periodType9);
      assertNotSame(periodType3, periodType6);
      assertNotSame(periodType3, periodType4);
      assertNotSame(periodType3, periodType5);
      assertNotSame(periodType3, periodType7);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType9);
      assertNotSame(periodType3, periodType8);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType1);
      assertFalse(periodType3.equals((Object)periodType6));
      assertFalse(periodType3.equals((Object)periodType4));
      assertFalse(periodType3.equals((Object)periodType5));
      assertFalse(periodType3.equals((Object)periodType7));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType8));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType1));
      
      // Undeclared exception!
      try { 
        periodType2.getFieldType(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = PeriodType.millis();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, periodType1.size());
      assertEquals("MillisNoMillis", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      periodType1.hashCode();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, periodType1.size());
      assertEquals("MillisNoMillis", periodType1.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = periodType0.withDaysRemoved();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType2, periodType1);
      assertSame(periodType2, periodType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = PeriodType.seconds();
      assertEquals("Seconds", periodType3.getName());
      assertEquals(1, periodType3.size());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      
      PeriodType periodType4 = PeriodType.hours();
      assertEquals("Hours", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType2);
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType2));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Days", periodType1.getName());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      PeriodType periodType2 = periodType1.withMillisRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Days", periodType1.getName());
      assertEquals(1, periodType2.size());
      assertEquals("Days", periodType2.getName());
      assertNotNull(periodType2);
      assertSame(periodType0, periodType2);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertSame(periodType1, periodType2);
      assertSame(periodType2, periodType0);
      assertSame(periodType2, periodType1);
      
      PeriodType.YEAR_INDEX = 6;
      PeriodType periodType3 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType3.size());
      assertEquals("YearMonthDayTime", periodType3.getName());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      
      PeriodType periodType4 = periodType3.withMillisRemoved();
      assertEquals(7, periodType3.size());
      assertEquals("YearMonthDayTime", periodType3.getName());
      assertEquals(6, periodType4.size());
      assertEquals("YearMonthDayTimeNoMillis", periodType4.getName());
      assertNotNull(periodType4);
      assertNotSame(periodType3, periodType4);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType3);
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType3));
      
      PeriodType.MONTH_INDEX = 2;
      PeriodType periodType5 = periodType3.withMonthsRemoved();
      assertEquals(7, periodType3.size());
      assertEquals("YearMonthDayTime", periodType3.getName());
      assertEquals(6, periodType5.size());
      assertEquals("YearMonthDayTimeNoMonths", periodType5.getName());
      assertNotNull(periodType5);
      assertNotSame(periodType3, periodType4);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType5);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType2);
      assertFalse(periodType3.equals((Object)periodType4));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType2));
      
      boolean boolean0 = periodType1.equals(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Days", periodType1.getName());
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType2);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType5);
      assertSame(periodType1, periodType0);
      assertSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType5);
      assertTrue(boolean0);
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType5));
      
      PeriodType periodType6 = periodType3.withMinutesRemoved();
      assertEquals(7, periodType3.size());
      assertEquals("YearMonthDayTime", periodType3.getName());
      assertEquals("YearMonthDayTimeNoMinutes", periodType6.getName());
      assertEquals(6, periodType6.size());
      assertNotNull(periodType6);
      assertNotSame(periodType3, periodType4);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType5);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType6);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType3);
      assertFalse(periodType3.equals((Object)periodType4));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType5));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType3));
      
      PeriodType periodType7 = PeriodType.minutes();
      assertEquals(1, periodType7.size());
      assertEquals("Minutes", periodType7.getName());
      assertNotNull(periodType7);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType6);
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType6));
      
      PeriodType periodType8 = PeriodType.years();
      assertEquals(1, periodType8.size());
      assertEquals("Years", periodType8.getName());
      assertNotNull(periodType8);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType6);
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType6));
      
      PeriodType periodType9 = PeriodType.dayTime();
      assertEquals(5, periodType9.size());
      assertEquals("DayTime", periodType9.getName());
      assertNotNull(periodType9);
      assertNotSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType4);
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType4));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals("MinutesNoMinutes", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      int int0 = PeriodType.MINUTE_INDEX;
      assertEquals(5, int0);
      
      ReadablePeriod readablePeriod0 = null;
      int[] intArray0 = new int[0];
      PeriodType periodType2 = PeriodType.days();
      assertEquals("Days", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = PeriodType.dayTime();
      assertEquals("DayTime", periodType3.getName());
      assertEquals(5, periodType3.size());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      
      PeriodType periodType4 = periodType1.withMillisRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals("MinutesNoMinutes", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertEquals(0, periodType4.size());
      assertEquals("MinutesNoMinutes", periodType4.getName());
      assertNotNull(periodType4);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType0);
      assertSame(periodType4, periodType1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType0));
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        periodType0.setIndexedField((ReadablePeriod) null, 5, intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType.MONTH_INDEX = 0;
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, periodType1.size());
      assertEquals("Hours", periodType1.getName());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      PeriodType.MINUTE_INDEX = 0;
      PeriodType.MONTH_INDEX = 0;
      PeriodType periodType2 = periodType0.withHoursRemoved();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, periodType2.size());
      assertEquals("HoursNoHours", periodType2.getName());
      assertNotNull(periodType2);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = periodType0.withMinutesRemoved();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType3.getName());
      assertEquals(1, periodType3.size());
      assertNotNull(periodType3);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType3, periodType2);
      assertSame(periodType3, periodType0);
      assertSame(periodType3, periodType1);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType2));
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearWeekDay();
      assertEquals(3, periodType1.size());
      assertEquals("YearWeekDay", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = PeriodType.dayTime();
      assertEquals("DayTime", periodType2.getName());
      assertEquals(5, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = PeriodType.yearDayTime();
      assertEquals(6, periodType3.size());
      assertEquals("YearDayTime", periodType3.getName());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      
      PeriodType periodType4 = PeriodType.months();
      assertEquals("Months", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType2);
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType2));
      
      PeriodType periodType5 = periodType2.withYearsRemoved();
      assertEquals("DayTime", periodType2.getName());
      assertEquals(5, periodType2.size());
      assertEquals("DayTime", periodType5.getName());
      assertEquals(5, periodType5.size());
      assertNotNull(periodType5);
      assertNotSame(periodType2, periodType4);
      assertSame(periodType2, periodType5);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType0);
      assertSame(periodType5, periodType2);
      assertFalse(periodType2.equals((Object)periodType4));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType3));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType0));
      
      PeriodType periodType6 = periodType5.withSecondsRemoved();
      assertEquals("DayTime", periodType2.getName());
      assertEquals(5, periodType2.size());
      assertEquals("DayTime", periodType5.getName());
      assertEquals(5, periodType5.size());
      assertEquals("DayTimeNoSeconds", periodType6.getName());
      assertEquals(4, periodType6.size());
      assertNotNull(periodType6);
      assertNotSame(periodType2, periodType4);
      assertNotSame(periodType2, periodType6);
      assertSame(periodType2, periodType5);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType6);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType0);
      assertSame(periodType5, periodType2);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType0);
      assertFalse(periodType2.equals((Object)periodType4));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType3));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType0));
      
      PeriodType periodType7 = periodType1.withMinutesRemoved();
      assertEquals(3, periodType1.size());
      assertEquals("YearWeekDay", periodType1.getName());
      assertEquals(3, periodType7.size());
      assertEquals("YearWeekDay", periodType7.getName());
      assertNotNull(periodType7);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType6);
      assertSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType6);
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType6));
      
      PeriodType periodType8 = PeriodType.standard();
      assertEquals("Standard", periodType8.getName());
      assertEquals(8, periodType8.size());
      assertNotNull(periodType8);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType7);
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType7));
      
      PeriodType periodType9 = PeriodType.days();
      assertEquals(1, periodType9.size());
      assertEquals("Days", periodType9.getName());
      assertNotNull(periodType9);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType6);
      assertSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType5);
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType5));
      
      PeriodType periodType10 = periodType8.withSecondsRemoved();
      assertEquals("Standard", periodType8.getName());
      assertEquals(8, periodType8.size());
      assertEquals(7, periodType10.size());
      assertEquals("StandardNoSeconds", periodType10.getName());
      assertNotNull(periodType10);
      assertNotSame(periodType8, periodType10);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType9);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType10, periodType1);
      assertNotSame(periodType10, periodType0);
      assertNotSame(periodType10, periodType3);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType5);
      assertNotSame(periodType10, periodType6);
      assertNotSame(periodType10, periodType4);
      assertNotSame(periodType10, periodType8);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType9);
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType9));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType3));
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType5));
      assertFalse(periodType10.equals((Object)periodType6));
      assertFalse(periodType10.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType8));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType9));
      
      PeriodType.MINUTE_INDEX = (-2009);
      PeriodType periodType11 = PeriodType.time();
      assertEquals(4, periodType11.size());
      assertEquals("Time", periodType11.getName());
      assertNotNull(periodType11);
      assertNotSame(periodType11, periodType2);
      assertNotSame(periodType11, periodType8);
      assertNotSame(periodType11, periodType9);
      assertNotSame(periodType11, periodType3);
      assertNotSame(periodType11, periodType4);
      assertNotSame(periodType11, periodType7);
      assertNotSame(periodType11, periodType6);
      assertNotSame(periodType11, periodType1);
      assertNotSame(periodType11, periodType10);
      assertNotSame(periodType11, periodType5);
      assertNotSame(periodType11, periodType0);
      assertFalse(periodType11.equals((Object)periodType2));
      assertFalse(periodType11.equals((Object)periodType8));
      assertFalse(periodType11.equals((Object)periodType9));
      assertFalse(periodType11.equals((Object)periodType3));
      assertFalse(periodType11.equals((Object)periodType4));
      assertFalse(periodType11.equals((Object)periodType7));
      assertFalse(periodType11.equals((Object)periodType6));
      assertFalse(periodType11.equals((Object)periodType1));
      assertFalse(periodType11.equals((Object)periodType10));
      assertFalse(periodType11.equals((Object)periodType5));
      assertFalse(periodType11.equals((Object)periodType0));
      
      PeriodType periodType12 = periodType8.withYearsRemoved();
      assertEquals("Standard", periodType8.getName());
      assertEquals(8, periodType8.size());
      assertEquals(7, periodType12.size());
      assertEquals("StandardNoYears", periodType12.getName());
      assertNotNull(periodType12);
      assertNotSame(periodType8, periodType10);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType9);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType12);
      assertNotSame(periodType8, periodType11);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType12, periodType2);
      assertNotSame(periodType12, periodType8);
      assertNotSame(periodType12, periodType6);
      assertNotSame(periodType12, periodType9);
      assertNotSame(periodType12, periodType5);
      assertNotSame(periodType12, periodType10);
      assertNotSame(periodType12, periodType1);
      assertNotSame(periodType12, periodType11);
      assertNotSame(periodType12, periodType0);
      assertNotSame(periodType12, periodType7);
      assertNotSame(periodType12, periodType4);
      assertNotSame(periodType12, periodType3);
      assertFalse(periodType8.equals((Object)periodType10));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType9));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType11));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType12.equals((Object)periodType2));
      assertFalse(periodType12.equals((Object)periodType8));
      assertFalse(periodType12.equals((Object)periodType6));
      assertFalse(periodType12.equals((Object)periodType9));
      assertFalse(periodType12.equals((Object)periodType5));
      assertFalse(periodType12.equals((Object)periodType10));
      assertFalse(periodType12.equals((Object)periodType1));
      assertFalse(periodType12.equals((Object)periodType11));
      assertFalse(periodType12.equals((Object)periodType0));
      assertFalse(periodType12.equals((Object)periodType7));
      assertFalse(periodType12.equals((Object)periodType4));
      assertFalse(periodType12.equals((Object)periodType3));
      
      boolean boolean0 = periodType1.equals(periodType7);
      assertEquals(3, periodType1.size());
      assertEquals("YearWeekDay", periodType1.getName());
      assertEquals(3, periodType7.size());
      assertEquals("YearWeekDay", periodType7.getName());
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType11);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType12);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType9);
      assertNotSame(periodType1, periodType8);
      assertNotSame(periodType1, periodType0);
      assertSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType10);
      assertSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType8);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType12);
      assertNotSame(periodType7, periodType11);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType9);
      assertNotSame(periodType7, periodType10);
      assertNotSame(periodType7, periodType6);
      assertTrue(boolean0);
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType11));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType12));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType9));
      assertFalse(periodType1.equals((Object)periodType8));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType10));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType8));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType12));
      assertFalse(periodType7.equals((Object)periodType11));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType9));
      assertFalse(periodType7.equals((Object)periodType10));
      assertFalse(periodType7.equals((Object)periodType6));
      
      // Undeclared exception!
      try { 
        periodType8.getFieldType((-2009));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2009
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[1] = 756;
      intArray0[2] = 987;
      intArray0[3] = 49;
      intArray0[4] = (-2481);
      intArray0[5] = 2749;
      intArray0[6] = (-5);
      intArray0[7] = 15;
      intArray0[8] = (-2741);
      PeriodType periodType0 = new PeriodType((String) null, durationFieldTypeArray0, intArray0);
      assertNull(periodType0.getName());
      assertEquals(0, periodType0.size());
      assertNotNull(periodType0);
      assertArrayEquals(new int[] {3, 756, 987, 49, (-2481), 2749, (-5), 15, (-2741)}, intArray0);
      assertEquals(0, durationFieldTypeArray0.length);
      assertEquals(9, intArray0.length);
      
      // Undeclared exception!
      try { 
        periodType0.withWeeksRemoved();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.days();
      assertEquals("Days", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = PeriodType.yearDay();
      assertEquals(2, periodType2.size());
      assertEquals("YearDay", periodType2.getName());
      assertNotNull(periodType2);
      assertSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType.SECOND_INDEX = 1;
      PeriodType periodType3 = periodType0.withHoursRemoved();
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertEquals("YearDay", periodType3.getName());
      assertEquals(2, periodType3.size());
      assertNotNull(periodType3);
      assertSame(periodType0, periodType2);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType3, periodType1);
      assertSame(periodType3, periodType2);
      assertSame(periodType3, periodType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType1));
      
      PeriodType periodType4 = periodType1.withDaysRemoved();
      assertEquals("Days", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals("DaysNoDays", periodType4.getName());
      assertEquals(0, periodType4.size());
      assertNotNull(periodType4);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType2);
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType2));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearDayTime();
      assertEquals(6, periodType1.size());
      assertEquals("YearDayTime", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = periodType1.withMillisRemoved();
      assertEquals(6, periodType1.size());
      assertEquals("YearDayTime", periodType1.getName());
      assertEquals(5, periodType2.size());
      assertEquals("YearDayTimeNoMillis", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = PeriodType.days();
      assertEquals(1, periodType3.size());
      assertEquals("Days", periodType3.getName());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      
      PeriodType periodType4 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType4.getName());
      assertEquals(7, periodType4.size());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType2);
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType2));
      
      PeriodType periodType5 = PeriodType.yearWeekDay();
      assertEquals("YearWeekDay", periodType5.getName());
      assertEquals(3, periodType5.size());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType2);
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType2));
      
      PeriodType.YEAR_INDEX = 1290;
      PeriodType periodType6 = PeriodType.minutes();
      assertEquals(1, periodType6.size());
      assertEquals("Minutes", periodType6.getName());
      assertNotNull(periodType6);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType1);
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType1));
      
      PeriodType periodType7 = PeriodType.hours();
      assertEquals(1, periodType7.size());
      assertEquals("Hours", periodType7.getName());
      assertNotNull(periodType7);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType1);
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType1));
      
      PeriodType periodType8 = PeriodType.yearMonthDay();
      assertEquals(3, periodType8.size());
      assertEquals("YearMonthDay", periodType8.getName());
      assertNotNull(periodType8);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType1);
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType1));
      
      DurationFieldType durationFieldType0 = periodType1.getFieldType(0);
      assertEquals(6, periodType1.size());
      assertEquals("YearDayTime", periodType1.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType8);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType4);
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType8));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType4));
      
      PeriodType periodType9 = PeriodType.weeks();
      assertEquals("Weeks", periodType9.getName());
      assertEquals(1, periodType9.size());
      assertNotNull(periodType9);
      assertNotSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType7);
      assertSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType8);
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType8));
      
      PeriodType.MINUTE_INDEX = 0;
      periodType7.hashCode();
      assertEquals(1, periodType7.size());
      assertEquals("Hours", periodType7.getName());
      assertNotSame(periodType7, periodType8);
      assertNotSame(periodType7, periodType9);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType1);
      assertFalse(periodType7.equals((Object)periodType8));
      assertFalse(periodType7.equals((Object)periodType9));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType1));
      
      PeriodType periodType10 = periodType4.withDaysRemoved();
      assertEquals("YearWeekDayTime", periodType4.getName());
      assertEquals(7, periodType4.size());
      assertEquals("YearWeekDayTimeNoDays", periodType10.getName());
      assertEquals(6, periodType10.size());
      assertNotNull(periodType10);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType9);
      assertNotSame(periodType4, periodType6);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType7);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType8);
      assertNotSame(periodType4, periodType5);
      assertNotSame(periodType4, periodType10);
      assertNotSame(periodType10, periodType1);
      assertNotSame(periodType10, periodType0);
      assertNotSame(periodType10, periodType3);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType6);
      assertNotSame(periodType10, periodType9);
      assertNotSame(periodType10, periodType4);
      assertNotSame(periodType10, periodType5);
      assertNotSame(periodType10, periodType8);
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType9));
      assertFalse(periodType4.equals((Object)periodType6));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType7));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType8));
      assertFalse(periodType4.equals((Object)periodType5));
      assertFalse(periodType10.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType3));
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType6));
      assertFalse(periodType10.equals((Object)periodType9));
      assertFalse(periodType10.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType5));
      assertFalse(periodType10.equals((Object)periodType8));
      
      int int0 = periodType7.indexOf(durationFieldType0);
      assertEquals(6, periodType1.size());
      assertEquals("YearDayTime", periodType1.getName());
      assertEquals(1, periodType7.size());
      assertEquals("Hours", periodType7.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType8);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType10);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType9);
      assertNotSame(periodType7, periodType8);
      assertNotSame(periodType7, periodType9);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType10);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType1);
      assertEquals((-1), int0);
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType8));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType10));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType9));
      assertFalse(periodType7.equals((Object)periodType8));
      assertFalse(periodType7.equals((Object)periodType9));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType10));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType1));
      
      PeriodType periodType11 = PeriodType.seconds();
      assertEquals("Seconds", periodType11.getName());
      assertEquals(1, periodType11.size());
      assertNotNull(periodType11);
      assertNotSame(periodType11, periodType7);
      assertNotSame(periodType11, periodType5);
      assertNotSame(periodType11, periodType8);
      assertNotSame(periodType11, periodType2);
      assertNotSame(periodType11, periodType0);
      assertNotSame(periodType11, periodType3);
      assertNotSame(periodType11, periodType10);
      assertNotSame(periodType11, periodType4);
      assertNotSame(periodType11, periodType6);
      assertNotSame(periodType11, periodType9);
      assertNotSame(periodType11, periodType1);
      assertFalse(periodType11.equals((Object)periodType7));
      assertFalse(periodType11.equals((Object)periodType5));
      assertFalse(periodType11.equals((Object)periodType8));
      assertFalse(periodType11.equals((Object)periodType2));
      assertFalse(periodType11.equals((Object)periodType0));
      assertFalse(periodType11.equals((Object)periodType3));
      assertFalse(periodType11.equals((Object)periodType10));
      assertFalse(periodType11.equals((Object)periodType4));
      assertFalse(periodType11.equals((Object)periodType6));
      assertFalse(periodType11.equals((Object)periodType9));
      assertFalse(periodType11.equals((Object)periodType1));
      
      PeriodType periodType12 = periodType4.withHoursRemoved();
      assertEquals("YearWeekDayTimeNoHours", periodType12.getName());
      assertEquals(6, periodType12.size());
      assertEquals("YearWeekDayTime", periodType4.getName());
      assertEquals(7, periodType4.size());
      assertNotNull(periodType12);
      assertNotSame(periodType12, periodType8);
      assertNotSame(periodType12, periodType10);
      assertNotSame(periodType12, periodType6);
      assertNotSame(periodType12, periodType4);
      assertNotSame(periodType12, periodType9);
      assertNotSame(periodType12, periodType1);
      assertNotSame(periodType12, periodType5);
      assertNotSame(periodType12, periodType7);
      assertNotSame(periodType12, periodType0);
      assertNotSame(periodType12, periodType3);
      assertNotSame(periodType12, periodType11);
      assertNotSame(periodType12, periodType2);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType12);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType9);
      assertNotSame(periodType4, periodType6);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType11);
      assertNotSame(periodType4, periodType7);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType8);
      assertNotSame(periodType4, periodType5);
      assertNotSame(periodType4, periodType10);
      assertFalse(periodType12.equals((Object)periodType8));
      assertFalse(periodType12.equals((Object)periodType10));
      assertFalse(periodType12.equals((Object)periodType6));
      assertFalse(periodType12.equals((Object)periodType4));
      assertFalse(periodType12.equals((Object)periodType9));
      assertFalse(periodType12.equals((Object)periodType1));
      assertFalse(periodType12.equals((Object)periodType5));
      assertFalse(periodType12.equals((Object)periodType7));
      assertFalse(periodType12.equals((Object)periodType0));
      assertFalse(periodType12.equals((Object)periodType3));
      assertFalse(periodType12.equals((Object)periodType11));
      assertFalse(periodType12.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType9));
      assertFalse(periodType4.equals((Object)periodType11));
      assertFalse(periodType4.equals((Object)periodType6));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType7));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType8));
      assertFalse(periodType4.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType10));
      
      PeriodType periodType13 = PeriodType.yearDay();
      assertEquals("YearDay", periodType13.getName());
      assertEquals(2, periodType13.size());
      assertNotNull(periodType13);
      assertNotSame(periodType13, periodType10);
      assertNotSame(periodType13, periodType1);
      assertNotSame(periodType13, periodType0);
      assertNotSame(periodType13, periodType3);
      assertNotSame(periodType13, periodType8);
      assertNotSame(periodType13, periodType2);
      assertNotSame(periodType13, periodType4);
      assertNotSame(periodType13, periodType9);
      assertNotSame(periodType13, periodType6);
      assertNotSame(periodType13, periodType12);
      assertNotSame(periodType13, periodType7);
      assertNotSame(periodType13, periodType5);
      assertNotSame(periodType13, periodType11);
      assertFalse(periodType13.equals((Object)periodType10));
      assertFalse(periodType13.equals((Object)periodType1));
      assertFalse(periodType13.equals((Object)periodType0));
      assertFalse(periodType13.equals((Object)periodType3));
      assertFalse(periodType13.equals((Object)periodType8));
      assertFalse(periodType13.equals((Object)periodType2));
      assertFalse(periodType13.equals((Object)periodType4));
      assertFalse(periodType13.equals((Object)periodType9));
      assertFalse(periodType13.equals((Object)periodType6));
      assertFalse(periodType13.equals((Object)periodType12));
      assertFalse(periodType13.equals((Object)periodType7));
      assertFalse(periodType13.equals((Object)periodType5));
      assertFalse(periodType13.equals((Object)periodType11));
      
      int int1 = periodType9.indexOf(durationFieldType0);
      assertEquals(6, periodType1.size());
      assertEquals("YearDayTime", periodType1.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("Weeks", periodType9.getName());
      assertEquals(1, periodType9.size());
      assertNotSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType10);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType9);
      assertNotSame(periodType1, periodType12);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType11);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType13);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType8);
      assertNotSame(periodType9, periodType12);
      assertNotSame(periodType9, periodType13);
      assertNotSame(periodType9, periodType11);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType10);
      assertNotSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType7);
      assertSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType8);
      assertEquals((-1), int1);
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType10));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType9));
      assertFalse(periodType1.equals((Object)periodType12));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType11));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType13));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType8));
      assertTrue(int1 == int0);
      assertFalse(periodType9.equals((Object)periodType12));
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType13));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType11));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType10));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = PeriodType.months();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = periodType0.getFieldType(0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("months", durationFieldType1.getName());
      assertEquals("months", durationFieldType1.toString());
      assertNotNull(durationFieldType1);
      assertSame(durationFieldType1, durationFieldType0);
      
      durationFieldTypeArray0[1] = durationFieldType1;
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      PeriodType periodType1 = new PeriodType("", durationFieldTypeArray0, intArray0);
      assertEquals(2, periodType1.size());
      assertEquals("", periodType1.getName());
      assertNotNull(periodType1);
      assertArrayEquals(new int[] {2, 0, 0, 0}, intArray0);
      assertEquals(2, durationFieldTypeArray0.length);
      assertEquals(4, intArray0.length);
      assertFalse(periodType1.equals((Object)periodType0));
      
      // Undeclared exception!
      try { 
        periodType1.withMonthsRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertNotNull(periodType0);
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      int int0 = 0;
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = periodType0.getFieldType(0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals("years", durationFieldType1.toString());
      assertEquals("years", durationFieldType1.getName());
      assertNotNull(durationFieldType1);
      assertSame(durationFieldType1, durationFieldType0);
      
      PeriodType periodType1 = PeriodType.time();
      assertEquals(4, periodType1.size());
      assertEquals("Time", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      durationFieldTypeArray0[1] = durationFieldType1;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [years]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType1.size());
      assertEquals("Time", periodType1.getName());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      PeriodType periodType2 = periodType1.withSecondsRemoved();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType1.size());
      assertEquals("Time", periodType1.getName());
      assertEquals(3, periodType2.size());
      assertEquals("TimeNoSeconds", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType2);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = PeriodType.time();
      assertEquals("Time", periodType3.getName());
      assertEquals(4, periodType3.size());
      assertNotNull(periodType3);
      assertSame(periodType3, periodType1);
      assertSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertFalse(periodType3.equals((Object)periodType2));
      
      PeriodType periodType4 = periodType1.withMillisRemoved();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType1.size());
      assertEquals("Time", periodType1.getName());
      assertEquals("TimeNoMillis", periodType4.getName());
      assertEquals(3, periodType4.size());
      assertNotNull(periodType4);
      assertSame(periodType0, periodType3);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType1, periodType4);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertSame(periodType1, periodType3);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType0);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType0));
      
      PeriodType periodType5 = PeriodType.yearDayTime();
      assertEquals("YearDayTime", periodType5.getName());
      assertEquals(6, periodType5.size());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType1);
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType1));
      
      PeriodType periodType6 = periodType4.withYearsRemoved();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType1.size());
      assertEquals("Time", periodType1.getName());
      assertEquals("TimeNoMillis", periodType4.getName());
      assertEquals(3, periodType4.size());
      assertEquals("TimeNoMillis", periodType6.getName());
      assertEquals(3, periodType6.size());
      assertNotNull(periodType6);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType6);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType2);
      assertSame(periodType1, periodType0);
      assertSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType4, periodType3);
      assertSame(periodType4, periodType6);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType5);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType2);
      assertSame(periodType6, periodType4);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType2));
      
      PeriodType periodType7 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType7.size());
      assertEquals("YearWeekDayTime", periodType7.getName());
      assertNotNull(periodType7);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType0);
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType0));
      
      PeriodType periodType8 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType8.getName());
      assertEquals(7, periodType8.size());
      assertNotNull(periodType8);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType5);
      assertSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType3);
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType3));
      
      PeriodType periodType9 = periodType0.withWeeksRemoved();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals("Time", periodType9.getName());
      assertEquals(4, periodType9.size());
      assertNotNull(periodType9);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType8);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType6);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType9);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType9, periodType7);
      assertSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType6);
      assertSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType5);
      assertSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType8);
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType8));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType8));
      
      PeriodType periodType10 = periodType9.withHoursRemoved();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals("Time", periodType9.getName());
      assertEquals(4, periodType9.size());
      assertEquals("TimeNoHours", periodType10.getName());
      assertEquals(3, periodType10.size());
      assertNotNull(periodType10);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType8);
      assertNotSame(periodType0, periodType10);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType6);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType9);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType9, periodType7);
      assertSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType10);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType6);
      assertSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType5);
      assertSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType10, periodType1);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType9);
      assertNotSame(periodType10, periodType3);
      assertNotSame(periodType10, periodType0);
      assertNotSame(periodType10, periodType4);
      assertNotSame(periodType10, periodType6);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType5);
      assertNotSame(periodType10, periodType8);
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType8));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType10.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType9));
      assertFalse(periodType10.equals((Object)periodType3));
      assertFalse(periodType10.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType6));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType5));
      assertFalse(periodType10.equals((Object)periodType8));
      
      PeriodType periodType11 = periodType9.withHoursRemoved();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals("Time", periodType9.getName());
      assertEquals(4, periodType9.size());
      assertEquals(3, periodType11.size());
      assertEquals("TimeNoHours", periodType11.getName());
      assertNotNull(periodType11);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType8);
      assertNotSame(periodType0, periodType10);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType6);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType9);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType11);
      assertNotSame(periodType9, periodType7);
      assertSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType10);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType11);
      assertSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType5);
      assertSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType11, periodType0);
      assertNotSame(periodType11, periodType10);
      assertNotSame(periodType11, periodType4);
      assertNotSame(periodType11, periodType2);
      assertNotSame(periodType11, periodType6);
      assertNotSame(periodType11, periodType3);
      assertNotSame(periodType11, periodType1);
      assertNotSame(periodType11, periodType9);
      assertNotSame(periodType11, periodType7);
      assertNotSame(periodType11, periodType5);
      assertNotSame(periodType11, periodType8);
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType8));
      assertFalse(periodType0.equals((Object)periodType10));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType10));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType11.equals((Object)periodType0));
      assertFalse(periodType11.equals((Object)periodType4));
      assertFalse(periodType11.equals((Object)periodType2));
      assertFalse(periodType11.equals((Object)periodType6));
      assertFalse(periodType11.equals((Object)periodType3));
      assertFalse(periodType11.equals((Object)periodType1));
      assertFalse(periodType11.equals((Object)periodType9));
      assertFalse(periodType11.equals((Object)periodType7));
      assertFalse(periodType11.equals((Object)periodType5));
      assertFalse(periodType11.equals((Object)periodType8));
      assertTrue(periodType11.equals((Object)periodType10));
      
      PeriodType periodType12 = PeriodType.millis();
      assertEquals("Millis", periodType12.getName());
      assertEquals(1, periodType12.size());
      assertNotNull(periodType12);
      assertNotSame(periodType12, periodType0);
      assertNotSame(periodType12, periodType4);
      assertNotSame(periodType12, periodType10);
      assertNotSame(periodType12, periodType5);
      assertNotSame(periodType12, periodType3);
      assertNotSame(periodType12, periodType9);
      assertNotSame(periodType12, periodType7);
      assertNotSame(periodType12, periodType11);
      assertNotSame(periodType12, periodType1);
      assertNotSame(periodType12, periodType8);
      assertNotSame(periodType12, periodType2);
      assertNotSame(periodType12, periodType6);
      assertFalse(periodType12.equals((Object)periodType0));
      assertFalse(periodType12.equals((Object)periodType4));
      assertFalse(periodType12.equals((Object)periodType10));
      assertFalse(periodType12.equals((Object)periodType5));
      assertFalse(periodType12.equals((Object)periodType3));
      assertFalse(periodType12.equals((Object)periodType9));
      assertFalse(periodType12.equals((Object)periodType7));
      assertFalse(periodType12.equals((Object)periodType11));
      assertFalse(periodType12.equals((Object)periodType1));
      assertFalse(periodType12.equals((Object)periodType8));
      assertFalse(periodType12.equals((Object)periodType2));
      assertFalse(periodType12.equals((Object)periodType6));
      
      PeriodType periodType13 = PeriodType.yearDayTime();
      assertEquals(6, periodType13.size());
      assertEquals("YearDayTime", periodType13.getName());
      assertNotNull(periodType13);
      assertNotSame(periodType13, periodType3);
      assertNotSame(periodType13, periodType2);
      assertNotSame(periodType13, periodType9);
      assertNotSame(periodType13, periodType7);
      assertNotSame(periodType13, periodType12);
      assertNotSame(periodType13, periodType1);
      assertNotSame(periodType13, periodType8);
      assertNotSame(periodType13, periodType10);
      assertNotSame(periodType13, periodType6);
      assertNotSame(periodType13, periodType4);
      assertNotSame(periodType13, periodType0);
      assertSame(periodType13, periodType5);
      assertNotSame(periodType13, periodType11);
      assertFalse(periodType13.equals((Object)periodType7));
      assertFalse(periodType13.equals((Object)periodType3));
      assertFalse(periodType13.equals((Object)periodType12));
      assertFalse(periodType13.equals((Object)periodType1));
      assertFalse(periodType13.equals((Object)periodType8));
      assertFalse(periodType13.equals((Object)periodType10));
      assertFalse(periodType13.equals((Object)periodType6));
      assertFalse(periodType13.equals((Object)periodType2));
      assertFalse(periodType13.equals((Object)periodType4));
      assertFalse(periodType13.equals((Object)periodType0));
      assertFalse(periodType13.equals((Object)periodType11));
      assertFalse(periodType13.equals((Object)periodType9));
      
      PeriodType periodType14 = PeriodType.seconds();
      assertEquals(1, periodType14.size());
      assertEquals("Seconds", periodType14.getName());
      assertNotNull(periodType14);
      assertNotSame(periodType14, periodType0);
      assertNotSame(periodType14, periodType4);
      assertNotSame(periodType14, periodType3);
      assertNotSame(periodType14, periodType6);
      assertNotSame(periodType14, periodType12);
      assertNotSame(periodType14, periodType1);
      assertNotSame(periodType14, periodType11);
      assertNotSame(periodType14, periodType5);
      assertNotSame(periodType14, periodType10);
      assertNotSame(periodType14, periodType13);
      assertNotSame(periodType14, periodType2);
      assertNotSame(periodType14, periodType9);
      assertNotSame(periodType14, periodType8);
      assertNotSame(periodType14, periodType7);
      assertFalse(periodType14.equals((Object)periodType0));
      assertFalse(periodType14.equals((Object)periodType4));
      assertFalse(periodType14.equals((Object)periodType3));
      assertFalse(periodType14.equals((Object)periodType6));
      assertFalse(periodType14.equals((Object)periodType12));
      assertFalse(periodType14.equals((Object)periodType1));
      assertFalse(periodType14.equals((Object)periodType11));
      assertFalse(periodType14.equals((Object)periodType5));
      assertFalse(periodType14.equals((Object)periodType10));
      assertFalse(periodType14.equals((Object)periodType13));
      assertFalse(periodType14.equals((Object)periodType2));
      assertFalse(periodType14.equals((Object)periodType9));
      assertFalse(periodType14.equals((Object)periodType8));
      assertFalse(periodType14.equals((Object)periodType7));
      
      PeriodType periodType15 = periodType0.withMillisRemoved();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals(3, periodType15.size());
      assertEquals("TimeNoMillis", periodType15.getName());
      assertNotNull(periodType15);
      assertSame(periodType0, periodType3);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType13);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType15);
      assertNotSame(periodType0, periodType11);
      assertNotSame(periodType0, periodType14);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType8);
      assertNotSame(periodType0, periodType10);
      assertNotSame(periodType0, periodType12);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType9);
      assertNotSame(periodType15, periodType0);
      assertNotSame(periodType15, periodType4);
      assertNotSame(periodType15, periodType5);
      assertNotSame(periodType15, periodType8);
      assertNotSame(periodType15, periodType11);
      assertNotSame(periodType15, periodType3);
      assertNotSame(periodType15, periodType6);
      assertNotSame(periodType15, periodType10);
      assertNotSame(periodType15, periodType13);
      assertNotSame(periodType15, periodType14);
      assertNotSame(periodType15, periodType9);
      assertNotSame(periodType15, periodType7);
      assertNotSame(periodType15, periodType12);
      assertNotSame(periodType15, periodType1);
      assertNotSame(periodType15, periodType2);
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType8));
      assertFalse(periodType0.equals((Object)periodType10));
      assertFalse(periodType0.equals((Object)periodType12));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType13));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType11));
      assertFalse(periodType0.equals((Object)periodType14));
      assertFalse(periodType15.equals((Object)periodType0));
      assertTrue(periodType15.equals((Object)periodType6));
      assertFalse(periodType15.equals((Object)periodType5));
      assertFalse(periodType15.equals((Object)periodType8));
      assertFalse(periodType15.equals((Object)periodType11));
      assertFalse(periodType15.equals((Object)periodType3));
      assertTrue(periodType15.equals((Object)periodType4));
      assertFalse(periodType15.equals((Object)periodType10));
      assertFalse(periodType15.equals((Object)periodType13));
      assertFalse(periodType15.equals((Object)periodType14));
      assertFalse(periodType15.equals((Object)periodType9));
      assertFalse(periodType15.equals((Object)periodType7));
      assertFalse(periodType15.equals((Object)periodType12));
      assertFalse(periodType15.equals((Object)periodType1));
      assertFalse(periodType15.equals((Object)periodType2));
      
      PeriodType periodType16 = PeriodType.millis();
      assertEquals(1, periodType16.size());
      assertEquals("Millis", periodType16.getName());
      assertNotNull(periodType16);
      assertNotSame(periodType16, periodType0);
      assertNotSame(periodType16, periodType15);
      assertNotSame(periodType16, periodType4);
      assertNotSame(periodType16, periodType6);
      assertNotSame(periodType16, periodType1);
      assertNotSame(periodType16, periodType3);
      assertNotSame(periodType16, periodType5);
      assertNotSame(periodType16, periodType11);
      assertSame(periodType16, periodType12);
      assertNotSame(periodType16, periodType14);
      assertNotSame(periodType16, periodType13);
      assertNotSame(periodType16, periodType2);
      assertNotSame(periodType16, periodType10);
      assertNotSame(periodType16, periodType9);
      assertNotSame(periodType16, periodType7);
      assertNotSame(periodType16, periodType8);
      assertFalse(periodType16.equals((Object)periodType0));
      assertFalse(periodType16.equals((Object)periodType15));
      assertFalse(periodType16.equals((Object)periodType4));
      assertFalse(periodType16.equals((Object)periodType6));
      assertFalse(periodType16.equals((Object)periodType1));
      assertFalse(periodType16.equals((Object)periodType3));
      assertFalse(periodType16.equals((Object)periodType5));
      assertFalse(periodType16.equals((Object)periodType11));
      assertFalse(periodType16.equals((Object)periodType14));
      assertFalse(periodType16.equals((Object)periodType13));
      assertFalse(periodType16.equals((Object)periodType2));
      assertFalse(periodType16.equals((Object)periodType10));
      assertFalse(periodType16.equals((Object)periodType9));
      assertFalse(periodType16.equals((Object)periodType7));
      assertFalse(periodType16.equals((Object)periodType8));
      
      int int0 = periodType16.size();
      assertEquals(1, periodType16.size());
      assertEquals("Millis", periodType16.getName());
      assertNotSame(periodType16, periodType0);
      assertNotSame(periodType16, periodType15);
      assertNotSame(periodType16, periodType4);
      assertNotSame(periodType16, periodType6);
      assertNotSame(periodType16, periodType1);
      assertNotSame(periodType16, periodType3);
      assertNotSame(periodType16, periodType5);
      assertNotSame(periodType16, periodType11);
      assertSame(periodType16, periodType12);
      assertNotSame(periodType16, periodType14);
      assertNotSame(periodType16, periodType13);
      assertNotSame(periodType16, periodType2);
      assertNotSame(periodType16, periodType10);
      assertNotSame(periodType16, periodType9);
      assertNotSame(periodType16, periodType7);
      assertNotSame(periodType16, periodType8);
      assertEquals(1, int0);
      assertFalse(periodType16.equals((Object)periodType0));
      assertFalse(periodType16.equals((Object)periodType15));
      assertFalse(periodType16.equals((Object)periodType4));
      assertFalse(periodType16.equals((Object)periodType6));
      assertFalse(periodType16.equals((Object)periodType1));
      assertFalse(periodType16.equals((Object)periodType3));
      assertFalse(periodType16.equals((Object)periodType5));
      assertFalse(periodType16.equals((Object)periodType11));
      assertFalse(periodType16.equals((Object)periodType14));
      assertFalse(periodType16.equals((Object)periodType13));
      assertFalse(periodType16.equals((Object)periodType2));
      assertFalse(periodType16.equals((Object)periodType10));
      assertFalse(periodType16.equals((Object)periodType9));
      assertFalse(periodType16.equals((Object)periodType7));
      assertFalse(periodType16.equals((Object)periodType8));
      
      PeriodType periodType17 = PeriodType.time();
      assertEquals("Time", periodType17.getName());
      assertEquals(4, periodType17.size());
      assertNotNull(periodType17);
      assertNotSame(periodType17, periodType6);
      assertNotSame(periodType17, periodType11);
      assertNotSame(periodType17, periodType15);
      assertNotSame(periodType17, periodType4);
      assertNotSame(periodType17, periodType8);
      assertNotSame(periodType17, periodType5);
      assertSame(periodType17, periodType1);
      assertSame(periodType17, periodType0);
      assertNotSame(periodType17, periodType16);
      assertSame(periodType17, periodType3);
      assertNotSame(periodType17, periodType13);
      assertNotSame(periodType17, periodType14);
      assertNotSame(periodType17, periodType7);
      assertNotSame(periodType17, periodType12);
      assertNotSame(periodType17, periodType10);
      assertSame(periodType17, periodType9);
      assertNotSame(periodType17, periodType2);
      assertFalse(periodType17.equals((Object)periodType6));
      assertFalse(periodType17.equals((Object)periodType11));
      assertFalse(periodType17.equals((Object)periodType15));
      assertFalse(periodType17.equals((Object)periodType4));
      assertFalse(periodType17.equals((Object)periodType8));
      assertFalse(periodType17.equals((Object)periodType5));
      assertFalse(periodType17.equals((Object)periodType16));
      assertFalse(periodType17.equals((Object)periodType13));
      assertFalse(periodType17.equals((Object)periodType14));
      assertFalse(periodType17.equals((Object)periodType7));
      assertFalse(periodType17.equals((Object)periodType12));
      assertFalse(periodType17.equals((Object)periodType10));
      assertFalse(periodType17.equals((Object)periodType2));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      DurationFieldType durationFieldType0 = periodType1.getFieldType(0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      int int0 = periodType1.indexOf(durationFieldType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertEquals(0, int0);
      
      PeriodType periodType2 = PeriodType.yearDayTime();
      assertEquals("YearDayTime", periodType2.getName());
      assertEquals(6, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = PeriodType.time();
      assertEquals(4, periodType3.size());
      assertEquals("Time", periodType3.getName());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      
      boolean boolean0 = periodType0.equals(";|,I%");
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotSame(periodType0, periodType3);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertFalse(boolean0);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(4, periodType1.size());
      assertEquals("DayTimeNoMinutes", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = periodType1.withMillisRemoved();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(4, periodType1.size());
      assertEquals("DayTimeNoMinutes", periodType1.getName());
      assertEquals("DayTimeNoMinutesNoMillis", periodType2.getName());
      assertEquals(3, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = periodType1.withMonthsRemoved();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(4, periodType1.size());
      assertEquals("DayTimeNoMinutes", periodType1.getName());
      assertEquals("DayTimeNoMinutes", periodType3.getName());
      assertEquals(4, periodType3.size());
      assertNotNull(periodType3);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType1, periodType2);
      assertSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType3, periodType0);
      assertSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      
      PeriodType periodType4 = PeriodType.minutes();
      assertEquals(1, periodType4.size());
      assertEquals("Minutes", periodType4.getName());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType0);
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType0));
      
      DurationFieldType durationFieldType0 = periodType1.getFieldType(0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(4, periodType1.size());
      assertEquals("DayTimeNoMinutes", periodType1.getName());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType1, periodType2);
      assertSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType4);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType4));
      
      boolean boolean0 = periodType2.isSupported(durationFieldType0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(4, periodType1.size());
      assertEquals("DayTimeNoMinutes", periodType1.getName());
      assertEquals("DayTimeNoMinutesNoMillis", periodType2.getName());
      assertEquals(3, periodType2.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType1, periodType2);
      assertSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType4);
      assertNotSame(periodType2, periodType1);
      assertTrue(boolean0);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType2.equals((Object)periodType3));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType4));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType5 = PeriodType.yearWeekDay();
      assertEquals(3, periodType5.size());
      assertEquals("YearWeekDay", periodType5.getName());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType4);
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType4));
      
      PeriodType.MILLI_INDEX = 0;
      PeriodType periodType6 = PeriodType.years();
      assertEquals(1, periodType6.size());
      assertEquals("Years", periodType6.getName());
      assertNotNull(periodType6);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType2);
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType2));
      
      PeriodType periodType7 = PeriodType.seconds();
      assertEquals("Seconds", periodType7.getName());
      assertEquals(1, periodType7.size());
      assertNotNull(periodType7);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType2);
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType2));
      
      PeriodType periodType8 = PeriodType.weeks();
      assertEquals("Weeks", periodType8.getName());
      assertEquals(1, periodType8.size());
      assertNotNull(periodType8);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType2);
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType2));
      
      String string0 = periodType7.toString();
      assertEquals("Seconds", periodType7.getName());
      assertEquals(1, periodType7.size());
      assertNotNull(string0);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType8);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType2);
      assertEquals("PeriodType[Seconds]", string0);
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType8));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType2));
      
      PeriodType periodType9 = PeriodType.yearDayTime();
      assertEquals("YearDayTime", periodType9.getName());
      assertEquals(6, periodType9.size());
      assertNotNull(periodType9);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType0);
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType0));
      
      PeriodType periodType10 = PeriodType.weeks();
      assertEquals(1, periodType10.size());
      assertEquals("Weeks", periodType10.getName());
      assertNotNull(periodType10);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType1);
      assertNotSame(periodType10, periodType3);
      assertNotSame(periodType10, periodType5);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType9);
      assertNotSame(periodType10, periodType0);
      assertNotSame(periodType10, periodType4);
      assertSame(periodType10, periodType8);
      assertNotSame(periodType10, periodType6);
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType3));
      assertFalse(periodType10.equals((Object)periodType5));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType9));
      assertFalse(periodType10.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType6));
      
      PeriodType periodType11 = periodType1.withDaysRemoved();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(4, periodType1.size());
      assertEquals("DayTimeNoMinutes", periodType1.getName());
      assertEquals("DayTimeNoMinutesNoDays", periodType11.getName());
      assertEquals(3, periodType11.size());
      assertNotNull(periodType11);
      assertNotSame(periodType0, periodType11);
      assertNotSame(periodType0, periodType10);
      assertNotSame(periodType0, periodType9);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType8);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType1, periodType11);
      assertNotSame(periodType1, periodType10);
      assertNotSame(periodType1, periodType2);
      assertSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType9);
      assertNotSame(periodType1, periodType8);
      assertNotSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType11, periodType2);
      assertNotSame(periodType11, periodType10);
      assertNotSame(periodType11, periodType3);
      assertNotSame(periodType11, periodType5);
      assertNotSame(periodType11, periodType0);
      assertNotSame(periodType11, periodType6);
      assertNotSame(periodType11, periodType4);
      assertNotSame(periodType11, periodType8);
      assertNotSame(periodType11, periodType7);
      assertNotSame(periodType11, periodType1);
      assertNotSame(periodType11, periodType9);
      assertFalse(periodType0.equals((Object)periodType10));
      assertFalse(periodType0.equals((Object)periodType9));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType8));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType10));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType9));
      assertFalse(periodType1.equals((Object)periodType8));
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType11.equals((Object)periodType2));
      assertFalse(periodType11.equals((Object)periodType10));
      assertFalse(periodType11.equals((Object)periodType3));
      assertFalse(periodType11.equals((Object)periodType5));
      assertFalse(periodType11.equals((Object)periodType0));
      assertFalse(periodType11.equals((Object)periodType6));
      assertFalse(periodType11.equals((Object)periodType4));
      assertFalse(periodType11.equals((Object)periodType8));
      assertFalse(periodType11.equals((Object)periodType7));
      assertFalse(periodType11.equals((Object)periodType1));
      assertFalse(periodType11.equals((Object)periodType9));
      
      PeriodType periodType12 = PeriodType.yearDay();
      assertEquals(2, periodType12.size());
      assertEquals("YearDay", periodType12.getName());
      assertNotNull(periodType12);
      assertNotSame(periodType12, periodType3);
      assertNotSame(periodType12, periodType5);
      assertNotSame(periodType12, periodType2);
      assertNotSame(periodType12, periodType8);
      assertNotSame(periodType12, periodType10);
      assertNotSame(periodType12, periodType1);
      assertNotSame(periodType12, periodType9);
      assertNotSame(periodType12, periodType0);
      assertNotSame(periodType12, periodType11);
      assertNotSame(periodType12, periodType4);
      assertNotSame(periodType12, periodType7);
      assertNotSame(periodType12, periodType6);
      assertFalse(periodType12.equals((Object)periodType3));
      assertFalse(periodType12.equals((Object)periodType5));
      assertFalse(periodType12.equals((Object)periodType2));
      assertFalse(periodType12.equals((Object)periodType8));
      assertFalse(periodType12.equals((Object)periodType10));
      assertFalse(periodType12.equals((Object)periodType1));
      assertFalse(periodType12.equals((Object)periodType9));
      assertFalse(periodType12.equals((Object)periodType0));
      assertFalse(periodType12.equals((Object)periodType11));
      assertFalse(periodType12.equals((Object)periodType4));
      assertFalse(periodType12.equals((Object)periodType7));
      assertFalse(periodType12.equals((Object)periodType6));
      
      DurationFieldType durationFieldType1 = periodType5.getFieldType(0);
      assertEquals("years", durationFieldType1.getName());
      assertEquals("years", durationFieldType1.toString());
      assertEquals(3, periodType5.size());
      assertEquals("YearWeekDay", periodType5.getName());
      assertNotNull(durationFieldType1);
      assertNotSame(durationFieldType1, durationFieldType0);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType11);
      assertNotSame(periodType5, periodType9);
      assertNotSame(periodType5, periodType10);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType12);
      assertNotSame(periodType5, periodType6);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType8);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType7);
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType11));
      assertFalse(periodType5.equals((Object)periodType9));
      assertFalse(periodType5.equals((Object)periodType10));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType12));
      assertFalse(periodType5.equals((Object)periodType6));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType8));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType7));
      
      boolean boolean1 = periodType2.isSupported(durationFieldType1);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals("years", durationFieldType1.getName());
      assertEquals("years", durationFieldType1.toString());
      assertEquals(4, periodType1.size());
      assertEquals("DayTimeNoMinutes", periodType1.getName());
      assertEquals("DayTimeNoMinutesNoMillis", periodType2.getName());
      assertEquals(3, periodType2.size());
      assertEquals(3, periodType5.size());
      assertEquals("YearWeekDay", periodType5.getName());
      assertNotSame(periodType0, periodType11);
      assertNotSame(periodType0, periodType12);
      assertNotSame(periodType0, periodType10);
      assertNotSame(periodType0, periodType9);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType8);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType2);
      assertNotSame(durationFieldType1, durationFieldType0);
      assertNotSame(periodType1, periodType11);
      assertNotSame(periodType1, periodType12);
      assertNotSame(periodType1, periodType10);
      assertNotSame(periodType1, periodType2);
      assertSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType9);
      assertNotSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType8);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType2, periodType12);
      assertNotSame(periodType2, periodType11);
      assertNotSame(periodType2, periodType9);
      assertNotSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType5);
      assertNotSame(periodType2, periodType6);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType4);
      assertNotSame(periodType2, periodType8);
      assertNotSame(periodType2, periodType7);
      assertNotSame(periodType2, periodType10);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType11);
      assertNotSame(periodType5, periodType9);
      assertNotSame(periodType5, periodType10);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType12);
      assertNotSame(periodType5, periodType6);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType8);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType7);
      assertFalse(boolean1);
      assertFalse(periodType0.equals((Object)periodType11));
      assertFalse(periodType0.equals((Object)periodType12));
      assertFalse(periodType0.equals((Object)periodType10));
      assertFalse(periodType0.equals((Object)periodType9));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType8));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      assertFalse(periodType1.equals((Object)periodType11));
      assertFalse(periodType1.equals((Object)periodType12));
      assertFalse(periodType1.equals((Object)periodType10));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType9));
      assertFalse(periodType1.equals((Object)periodType8));
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(boolean1 == boolean0);
      assertFalse(periodType2.equals((Object)periodType12));
      assertFalse(periodType2.equals((Object)periodType11));
      assertFalse(periodType2.equals((Object)periodType9));
      assertFalse(periodType2.equals((Object)periodType3));
      assertFalse(periodType2.equals((Object)periodType5));
      assertFalse(periodType2.equals((Object)periodType6));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType4));
      assertFalse(periodType2.equals((Object)periodType8));
      assertFalse(periodType2.equals((Object)periodType7));
      assertFalse(periodType2.equals((Object)periodType10));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType11));
      assertFalse(periodType5.equals((Object)periodType9));
      assertFalse(periodType5.equals((Object)periodType10));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType12));
      assertFalse(periodType5.equals((Object)periodType6));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType8));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType7));
      
      PeriodType periodType13 = PeriodType.days();
      assertEquals(1, periodType13.size());
      assertEquals("Days", periodType13.getName());
      assertNotNull(periodType13);
      assertNotSame(periodType13, periodType0);
      assertNotSame(periodType13, periodType4);
      assertNotSame(periodType13, periodType7);
      assertNotSame(periodType13, periodType12);
      assertNotSame(periodType13, periodType11);
      assertNotSame(periodType13, periodType9);
      assertNotSame(periodType13, periodType10);
      assertNotSame(periodType13, periodType1);
      assertNotSame(periodType13, periodType3);
      assertNotSame(periodType13, periodType5);
      assertNotSame(periodType13, periodType2);
      assertNotSame(periodType13, periodType6);
      assertNotSame(periodType13, periodType8);
      assertFalse(periodType13.equals((Object)periodType0));
      assertFalse(periodType13.equals((Object)periodType4));
      assertFalse(periodType13.equals((Object)periodType7));
      assertFalse(periodType13.equals((Object)periodType12));
      assertFalse(periodType13.equals((Object)periodType11));
      assertFalse(periodType13.equals((Object)periodType9));
      assertFalse(periodType13.equals((Object)periodType10));
      assertFalse(periodType13.equals((Object)periodType1));
      assertFalse(periodType13.equals((Object)periodType3));
      assertFalse(periodType13.equals((Object)periodType5));
      assertFalse(periodType13.equals((Object)periodType2));
      assertFalse(periodType13.equals((Object)periodType6));
      assertFalse(periodType13.equals((Object)periodType8));
      
      PeriodType periodType14 = PeriodType.days();
      assertNotSame(periodType14, periodType8);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      PeriodType periodType0 = PeriodType.days();
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = periodType0.getFieldType(0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("days", durationFieldType1.toString());
      assertEquals("days", durationFieldType1.getName());
      assertNotNull(durationFieldType1);
      assertSame(durationFieldType1, durationFieldType0);
      
      durationFieldTypeArray0[1] = durationFieldType1;
      DurationFieldType durationFieldType2 = periodType0.getFieldType(0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("days", durationFieldType2.getName());
      assertEquals("days", durationFieldType2.toString());
      assertNotNull(durationFieldType2);
      assertSame(durationFieldType2, durationFieldType1);
      assertSame(durationFieldType2, durationFieldType0);
      
      durationFieldTypeArray0[2] = durationFieldType2;
      DurationFieldType durationFieldType3 = periodType0.getFieldType(0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("days", durationFieldType3.toString());
      assertEquals("days", durationFieldType3.getName());
      assertNotNull(durationFieldType3);
      assertSame(durationFieldType3, durationFieldType1);
      assertSame(durationFieldType3, durationFieldType0);
      assertSame(durationFieldType3, durationFieldType2);
      
      durationFieldTypeArray0[3] = durationFieldType3;
      DurationFieldType durationFieldType4 = periodType0.getFieldType(0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("days", durationFieldType4.toString());
      assertEquals("days", durationFieldType4.getName());
      assertNotNull(durationFieldType4);
      assertSame(durationFieldType4, durationFieldType1);
      assertSame(durationFieldType4, durationFieldType0);
      assertSame(durationFieldType4, durationFieldType2);
      assertSame(durationFieldType4, durationFieldType3);
      
      durationFieldTypeArray0[4] = durationFieldType4;
      DurationFieldType durationFieldType5 = periodType0.getFieldType(0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("days", durationFieldType5.toString());
      assertEquals("days", durationFieldType5.getName());
      assertNotNull(durationFieldType5);
      assertSame(durationFieldType5, durationFieldType1);
      assertSame(durationFieldType5, durationFieldType4);
      assertSame(durationFieldType5, durationFieldType3);
      assertSame(durationFieldType5, durationFieldType0);
      assertSame(durationFieldType5, durationFieldType2);
      
      durationFieldTypeArray0[5] = durationFieldType5;
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, periodType1.size());
      assertEquals("Days", periodType1.getName());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      DurationFieldType durationFieldType6 = periodType1.getFieldType(0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, periodType1.size());
      assertEquals("Days", periodType1.getName());
      assertEquals("days", durationFieldType6.toString());
      assertEquals("days", durationFieldType6.getName());
      assertNotNull(durationFieldType6);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      assertSame(durationFieldType6, durationFieldType1);
      assertSame(durationFieldType6, durationFieldType4);
      assertSame(durationFieldType6, durationFieldType3);
      assertSame(durationFieldType6, durationFieldType0);
      assertSame(durationFieldType6, durationFieldType2);
      assertSame(durationFieldType6, durationFieldType5);
      
      durationFieldTypeArray0[6] = durationFieldType6;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [days, days, days, days, days, days]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.millis();
      assertEquals(1, periodType1.size());
      assertEquals("Millis", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType.HOUR_INDEX = 20;
      PeriodType.MINUTE_INDEX = 0;
      PeriodType periodType2 = PeriodType.yearDay();
      assertEquals("YearDay", periodType2.getName());
      assertEquals(2, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = PeriodType.yearDayTime();
      assertEquals("YearDayTime", periodType3.getName());
      assertEquals(6, periodType3.size());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      
      PeriodType periodType4 = PeriodType.months();
      assertEquals(1, periodType4.size());
      assertEquals("Months", periodType4.getName());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType0);
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType0));
      
      PeriodType periodType5 = PeriodType.time();
      assertEquals("Time", periodType5.getName());
      assertEquals(4, periodType5.size());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType1);
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType1));
      
      PeriodType periodType6 = PeriodType.weeks();
      assertEquals("Weeks", periodType6.getName());
      assertEquals(1, periodType6.size());
      assertNotNull(periodType6);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType2);
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType2));
      
      PeriodType periodType7 = PeriodType.months();
      assertEquals(1, periodType7.size());
      assertEquals("Months", periodType7.getName());
      assertNotNull(periodType7);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType6);
      assertSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType1);
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType1));
      
      PeriodType periodType8 = periodType0.withSecondsRemoved();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals("YearWeekDayTimeNoSeconds", periodType8.getName());
      assertEquals(6, periodType8.size());
      assertNotNull(periodType8);
      assertNotSame(periodType0, periodType8);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType4);
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType4));
      
      int int0 = periodType1.getIndexedField((ReadablePeriod) null, 0);
      assertEquals(1, periodType1.size());
      assertEquals("Millis", periodType1.getName());
      assertNotSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType8);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType4);
      assertEquals(0, int0);
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType8));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType4));
      
      PeriodType periodType9 = PeriodType.days();
      assertEquals(1, periodType9.size());
      assertEquals("Days", periodType9.getName());
      assertNotNull(periodType9);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType1);
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType1));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      int int0 = periodType0.size();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, int0);
      
      PeriodType periodType1 = PeriodType.hours();
      assertEquals(1, periodType1.size());
      assertEquals("Hours", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = PeriodType.dayTime();
      assertEquals("DayTime", periodType2.getName());
      assertEquals(5, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = PeriodType.yearDay();
      assertEquals("YearDay", periodType3.getName());
      assertEquals(2, periodType3.size());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      
      PeriodType periodType4 = periodType1.withMinutesRemoved();
      assertEquals(1, periodType1.size());
      assertEquals("Hours", periodType1.getName());
      assertEquals("Hours", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertNotNull(periodType4);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertSame(periodType1, periodType4);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType2);
      assertSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType3);
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType3));
      
      String string0 = periodType4.toString();
      assertEquals(1, periodType1.size());
      assertEquals("Hours", periodType1.getName());
      assertEquals("Hours", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertNotNull(string0);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertSame(periodType1, periodType4);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType2);
      assertSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType3);
      assertEquals("PeriodType[Hours]", string0);
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType3));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType.DAY_INDEX = (-716);
      DurationFieldType durationFieldType0 = periodType0.getFieldType(3);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertEquals(4, periodType1.size());
      assertEquals("Time", periodType1.getName());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      PeriodType periodType2 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType2.getName());
      assertEquals(7, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = periodType1.withMinutesRemoved();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertEquals(4, periodType1.size());
      assertEquals("Time", periodType1.getName());
      assertEquals("TimeNoMinutes", periodType3.getName());
      assertEquals(3, periodType3.size());
      assertNotNull(periodType3);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType2);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      
      PeriodType periodType4 = periodType1.withMillisRemoved();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertEquals(4, periodType1.size());
      assertEquals("Time", periodType1.getName());
      assertEquals("TimeNoMillis", periodType4.getName());
      assertEquals(3, periodType4.size());
      assertNotNull(periodType4);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType2);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType2);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType2));
      
      PeriodType.MILLI_INDEX = (-950);
      PeriodType periodType5 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType5.getName());
      assertEquals(7, periodType5.size());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType3);
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType3));
      
      PeriodType periodType6 = PeriodType.millis();
      assertEquals("Millis", periodType6.getName());
      assertEquals(1, periodType6.size());
      assertNotNull(periodType6);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType0);
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType0));
      
      PeriodType periodType7 = periodType6.withSecondsRemoved();
      assertEquals("Millis", periodType6.getName());
      assertEquals(1, periodType6.size());
      assertEquals("Millis", periodType7.getName());
      assertEquals(1, periodType7.size());
      assertNotNull(periodType7);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType3);
      assertSame(periodType6, periodType7);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType2);
      assertSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType1);
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType1));
      
      PeriodType periodType8 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType8.size());
      assertEquals("YearMonthDayTime", periodType8.getName());
      assertNotNull(periodType8);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType5);
      assertSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType0);
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType0));
      
      PeriodType periodType9 = PeriodType.weeks();
      assertEquals(1, periodType9.size());
      assertEquals("Weeks", periodType9.getName());
      assertNotNull(periodType9);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType0);
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType0));
      
      periodType0.hashCode();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotSame(periodType0, periodType8);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType9);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType1);
      assertFalse(periodType0.equals((Object)periodType8));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType9));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType2));
      
      PeriodType periodType10 = PeriodType.minutes();
      assertEquals("Minutes", periodType10.getName());
      assertEquals(1, periodType10.size());
      assertNotNull(periodType10);
      assertNotSame(periodType10, periodType5);
      assertNotSame(periodType10, periodType8);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType4);
      assertNotSame(periodType10, periodType9);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType3);
      assertNotSame(periodType10, periodType1);
      assertNotSame(periodType10, periodType6);
      assertNotSame(periodType10, periodType0);
      assertFalse(periodType10.equals((Object)periodType5));
      assertFalse(periodType10.equals((Object)periodType8));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType9));
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType3));
      assertFalse(periodType10.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType6));
      assertFalse(periodType10.equals((Object)periodType0));
      
      PeriodType periodType11 = PeriodType.minutes();
      assertEquals("Minutes", periodType11.getName());
      assertEquals(1, periodType11.size());
      assertNotNull(periodType11);
      assertNotSame(periodType11, periodType7);
      assertNotSame(periodType11, periodType8);
      assertNotSame(periodType11, periodType1);
      assertNotSame(periodType11, periodType5);
      assertNotSame(periodType11, periodType2);
      assertNotSame(periodType11, periodType9);
      assertNotSame(periodType11, periodType3);
      assertSame(periodType11, periodType10);
      assertNotSame(periodType11, periodType4);
      assertNotSame(periodType11, periodType0);
      assertNotSame(periodType11, periodType6);
      assertFalse(periodType11.equals((Object)periodType7));
      assertFalse(periodType11.equals((Object)periodType8));
      assertFalse(periodType11.equals((Object)periodType1));
      assertFalse(periodType11.equals((Object)periodType5));
      assertFalse(periodType11.equals((Object)periodType2));
      assertFalse(periodType11.equals((Object)periodType9));
      assertFalse(periodType11.equals((Object)periodType3));
      assertFalse(periodType11.equals((Object)periodType4));
      assertFalse(periodType11.equals((Object)periodType0));
      assertFalse(periodType11.equals((Object)periodType6));
      
      PeriodType periodType12 = periodType9.withMillisRemoved();
      assertEquals("Weeks", periodType12.getName());
      assertEquals(1, periodType12.size());
      assertEquals(1, periodType9.size());
      assertEquals("Weeks", periodType9.getName());
      assertNotNull(periodType12);
      assertNotSame(periodType12, periodType4);
      assertNotSame(periodType12, periodType7);
      assertNotSame(periodType12, periodType3);
      assertNotSame(periodType12, periodType11);
      assertNotSame(periodType12, periodType1);
      assertNotSame(periodType12, periodType2);
      assertNotSame(periodType12, periodType8);
      assertSame(periodType12, periodType9);
      assertNotSame(periodType12, periodType5);
      assertNotSame(periodType12, periodType10);
      assertNotSame(periodType12, periodType6);
      assertNotSame(periodType12, periodType0);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType11);
      assertNotSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType10);
      assertNotSame(periodType9, periodType5);
      assertSame(periodType9, periodType12);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType0);
      assertFalse(periodType12.equals((Object)periodType4));
      assertFalse(periodType12.equals((Object)periodType7));
      assertFalse(periodType12.equals((Object)periodType3));
      assertFalse(periodType12.equals((Object)periodType11));
      assertFalse(periodType12.equals((Object)periodType1));
      assertFalse(periodType12.equals((Object)periodType2));
      assertFalse(periodType12.equals((Object)periodType8));
      assertFalse(periodType12.equals((Object)periodType5));
      assertFalse(periodType12.equals((Object)periodType10));
      assertFalse(periodType12.equals((Object)periodType6));
      assertFalse(periodType12.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType11));
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType10));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType0));
      
      PeriodType periodType13 = periodType1.withMonthsRemoved();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertEquals(4, periodType13.size());
      assertEquals("Time", periodType13.getName());
      assertEquals(4, periodType1.size());
      assertEquals("Time", periodType1.getName());
      assertNotNull(periodType13);
      assertNotSame(periodType0, periodType8);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType9);
      assertNotSame(periodType0, periodType12);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType11);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType10);
      assertSame(periodType0, periodType13);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType13, periodType11);
      assertSame(periodType13, periodType0);
      assertNotSame(periodType13, periodType7);
      assertNotSame(periodType13, periodType4);
      assertNotSame(periodType13, periodType10);
      assertNotSame(periodType13, periodType12);
      assertNotSame(periodType13, periodType3);
      assertNotSame(periodType13, periodType8);
      assertNotSame(periodType13, periodType2);
      assertNotSame(periodType13, periodType6);
      assertNotSame(periodType13, periodType9);
      assertNotSame(periodType13, periodType5);
      assertSame(periodType13, periodType1);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType8);
      assertNotSame(periodType1, periodType10);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType11);
      assertNotSame(periodType1, periodType12);
      assertSame(periodType1, periodType13);
      assertNotSame(periodType1, periodType9);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType2);
      assertFalse(periodType0.equals((Object)periodType8));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType11));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType10));
      assertFalse(periodType0.equals((Object)periodType9));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType12));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType13.equals((Object)periodType11));
      assertFalse(periodType13.equals((Object)periodType8));
      assertFalse(periodType13.equals((Object)periodType2));
      assertFalse(periodType13.equals((Object)periodType3));
      assertFalse(periodType13.equals((Object)periodType7));
      assertFalse(periodType13.equals((Object)periodType6));
      assertFalse(periodType13.equals((Object)periodType4));
      assertFalse(periodType13.equals((Object)periodType9));
      assertFalse(periodType13.equals((Object)periodType5));
      assertFalse(periodType13.equals((Object)periodType10));
      assertFalse(periodType13.equals((Object)periodType12));
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType8));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType11));
      assertFalse(periodType1.equals((Object)periodType12));
      assertFalse(periodType1.equals((Object)periodType10));
      assertFalse(periodType1.equals((Object)periodType9));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      
      PeriodType periodType14 = PeriodType.yearDayTime();
      assertEquals("YearDayTime", periodType14.getName());
      assertEquals(6, periodType14.size());
      assertNotNull(periodType14);
      assertNotSame(periodType14, periodType5);
      assertNotSame(periodType14, periodType2);
      assertNotSame(periodType14, periodType12);
      assertNotSame(periodType14, periodType7);
      assertNotSame(periodType14, periodType1);
      assertNotSame(periodType14, periodType8);
      assertNotSame(periodType14, periodType9);
      assertNotSame(periodType14, periodType4);
      assertNotSame(periodType14, periodType11);
      assertNotSame(periodType14, periodType13);
      assertNotSame(periodType14, periodType0);
      assertNotSame(periodType14, periodType6);
      assertNotSame(periodType14, periodType10);
      assertNotSame(periodType14, periodType3);
      assertFalse(periodType14.equals((Object)periodType5));
      assertFalse(periodType14.equals((Object)periodType2));
      assertFalse(periodType14.equals((Object)periodType12));
      assertFalse(periodType14.equals((Object)periodType7));
      assertFalse(periodType14.equals((Object)periodType1));
      assertFalse(periodType14.equals((Object)periodType8));
      assertFalse(periodType14.equals((Object)periodType9));
      assertFalse(periodType14.equals((Object)periodType4));
      assertFalse(periodType14.equals((Object)periodType11));
      assertFalse(periodType14.equals((Object)periodType13));
      assertFalse(periodType14.equals((Object)periodType0));
      assertFalse(periodType14.equals((Object)periodType6));
      assertFalse(periodType14.equals((Object)periodType10));
      assertFalse(periodType14.equals((Object)periodType3));
      
      String string0 = periodType14.toString();
      assertEquals("YearDayTime", periodType14.getName());
      assertEquals(6, periodType14.size());
      assertNotNull(string0);
      assertNotSame(periodType14, periodType5);
      assertNotSame(periodType14, periodType2);
      assertNotSame(periodType14, periodType12);
      assertNotSame(periodType14, periodType7);
      assertNotSame(periodType14, periodType1);
      assertNotSame(periodType14, periodType8);
      assertNotSame(periodType14, periodType9);
      assertNotSame(periodType14, periodType4);
      assertNotSame(periodType14, periodType11);
      assertNotSame(periodType14, periodType13);
      assertNotSame(periodType14, periodType0);
      assertNotSame(periodType14, periodType6);
      assertNotSame(periodType14, periodType10);
      assertNotSame(periodType14, periodType3);
      assertEquals("PeriodType[YearDayTime]", string0);
      assertFalse(periodType14.equals((Object)periodType5));
      assertFalse(periodType14.equals((Object)periodType2));
      assertFalse(periodType14.equals((Object)periodType12));
      assertFalse(periodType14.equals((Object)periodType7));
      assertFalse(periodType14.equals((Object)periodType1));
      assertFalse(periodType14.equals((Object)periodType8));
      assertFalse(periodType14.equals((Object)periodType9));
      assertFalse(periodType14.equals((Object)periodType4));
      assertFalse(periodType14.equals((Object)periodType11));
      assertFalse(periodType14.equals((Object)periodType13));
      assertFalse(periodType14.equals((Object)periodType0));
      assertFalse(periodType14.equals((Object)periodType6));
      assertFalse(periodType14.equals((Object)periodType10));
      assertFalse(periodType14.equals((Object)periodType3));
      
      int int0 = periodType13.size();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertEquals(4, periodType13.size());
      assertEquals("Time", periodType13.getName());
      assertEquals(4, periodType1.size());
      assertEquals("Time", periodType1.getName());
      assertNotSame(periodType0, periodType8);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType9);
      assertNotSame(periodType0, periodType12);
      assertNotSame(periodType0, periodType14);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType11);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType10);
      assertSame(periodType0, periodType13);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType13, periodType11);
      assertSame(periodType13, periodType0);
      assertNotSame(periodType13, periodType7);
      assertNotSame(periodType13, periodType4);
      assertNotSame(periodType13, periodType10);
      assertNotSame(periodType13, periodType12);
      assertNotSame(periodType13, periodType14);
      assertNotSame(periodType13, periodType3);
      assertNotSame(periodType13, periodType8);
      assertNotSame(periodType13, periodType2);
      assertNotSame(periodType13, periodType6);
      assertNotSame(periodType13, periodType9);
      assertNotSame(periodType13, periodType5);
      assertSame(periodType13, periodType1);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType8);
      assertNotSame(periodType1, periodType10);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType14);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType11);
      assertNotSame(periodType1, periodType12);
      assertSame(periodType1, periodType13);
      assertNotSame(periodType1, periodType9);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType2);
      assertEquals(4, int0);
      assertFalse(periodType0.equals((Object)periodType8));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType11));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType10));
      assertFalse(periodType0.equals((Object)periodType9));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType12));
      assertFalse(periodType0.equals((Object)periodType14));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType13.equals((Object)periodType11));
      assertFalse(periodType13.equals((Object)periodType3));
      assertFalse(periodType13.equals((Object)periodType8));
      assertFalse(periodType13.equals((Object)periodType2));
      assertFalse(periodType13.equals((Object)periodType7));
      assertFalse(periodType13.equals((Object)periodType6));
      assertFalse(periodType13.equals((Object)periodType4));
      assertFalse(periodType13.equals((Object)periodType9));
      assertFalse(periodType13.equals((Object)periodType5));
      assertFalse(periodType13.equals((Object)periodType10));
      assertFalse(periodType13.equals((Object)periodType12));
      assertFalse(periodType13.equals((Object)periodType14));
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType8));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType11));
      assertFalse(periodType1.equals((Object)periodType12));
      assertFalse(periodType1.equals((Object)periodType10));
      assertFalse(periodType1.equals((Object)periodType9));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType14));
      assertFalse(periodType1.equals((Object)periodType3));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearDayTime();
      assertEquals("YearDayTime", periodType1.getName());
      assertEquals(6, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = periodType0.withSecondsRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType2.size());
      assertEquals("Millis", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType0, periodType2);
      assertSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = PeriodType.dayTime();
      assertEquals("DayTime", periodType3.getName());
      assertEquals(5, periodType3.size());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType1);
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      
      PeriodType periodType4 = periodType3.withYearsRemoved();
      assertEquals("DayTime", periodType3.getName());
      assertEquals(5, periodType3.size());
      assertEquals("DayTime", periodType4.getName());
      assertEquals(5, periodType4.size());
      assertNotNull(periodType4);
      assertSame(periodType3, periodType4);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType1);
      assertSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType1);
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType1));
      
      PeriodType periodType5 = PeriodType.yearMonthDay();
      assertEquals("YearMonthDay", periodType5.getName());
      assertEquals(3, periodType5.size());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType4);
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType4));
      
      PeriodType periodType6 = PeriodType.months();
      assertEquals("Months", periodType6.getName());
      assertEquals(1, periodType6.size());
      assertNotNull(periodType6);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType1);
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType1));
      
      PeriodType periodType7 = PeriodType.days();
      assertEquals("Days", periodType7.getName());
      assertEquals(1, periodType7.size());
      assertNotNull(periodType7);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType0);
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType0));
      
      PeriodType periodType8 = PeriodType.yearMonthDay();
      assertEquals(3, periodType8.size());
      assertEquals("YearMonthDay", periodType8.getName());
      assertNotNull(periodType8);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType2);
      assertSame(periodType8, periodType5);
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType2));
      
      PeriodType periodType9 = PeriodType.time();
      assertEquals(4, periodType9.size());
      assertEquals("Time", periodType9.getName());
      assertNotNull(periodType9);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType6);
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType6));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.standard();
      assertEquals(8, periodType1.size());
      assertEquals("Standard", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      boolean boolean0 = periodType0.equals(periodType1);
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertEquals(8, periodType1.size());
      assertEquals("Standard", periodType1.getName());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(boolean0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      
      String string0 = periodType0.getName();
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertNotNull(string0);
      assertNotSame(periodType0, periodType1);
      assertEquals("YearDay", string0);
      assertFalse(periodType0.equals((Object)periodType1));
      
      PeriodType periodType2 = PeriodType.yearDayTime();
      assertEquals("YearDayTime", periodType2.getName());
      assertEquals(6, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = PeriodType.millis();
      assertEquals("Millis", periodType3.getName());
      assertEquals(1, periodType3.size());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      int int0 = (-10);
      // Undeclared exception!
      try { 
        periodType1.getFieldType((-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -10
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearDay();
      assertEquals("YearDay", periodType1.getName());
      assertEquals(2, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = PeriodType.standard();
      assertEquals("Standard", periodType2.getName());
      assertEquals(8, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = periodType2.withMonthsRemoved();
      assertEquals("Standard", periodType2.getName());
      assertEquals(8, periodType2.size());
      assertEquals(7, periodType3.size());
      assertEquals("StandardNoMonths", periodType3.getName());
      assertNotNull(periodType3);
      assertNotSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType1);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      
      PeriodType periodType4 = PeriodType.seconds();
      assertEquals(1, periodType4.size());
      assertEquals("Seconds", periodType4.getName());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType0);
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType0));
      
      PeriodType periodType5 = PeriodType.weeks();
      assertEquals(1, periodType5.size());
      assertEquals("Weeks", periodType5.getName());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType3);
      assertSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType2);
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType2));
      
      // Undeclared exception!
      try { 
        PeriodType.forFields((DurationFieldType[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.years();
      assertEquals(1, periodType1.size());
      assertEquals("Years", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      intArray0[4] = 7;
      intArray0[5] = 7;
      intArray0[6] = 7;
      intArray0[7] = 7;
      intArray0[8] = 7;
      // Undeclared exception!
      try { 
        periodType1.setIndexedField((ReadablePeriod) null, 7, intArray0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = PeriodType.millis();
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(periodType0);
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = periodType0.getFieldType(0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertEquals("millis", durationFieldType1.toString());
      assertEquals("millis", durationFieldType1.getName());
      assertNotNull(durationFieldType1);
      assertSame(durationFieldType1, durationFieldType0);
      
      durationFieldTypeArray0[1] = durationFieldType1;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [millis]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeriodType.HOUR_INDEX = (-3497);
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType.MONTH_INDEX = 0;
      PeriodType periodType1 = PeriodType.days();
      assertEquals(1, periodType1.size());
      assertEquals("Days", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = periodType1.withMinutesRemoved();
      assertEquals(1, periodType1.size());
      assertEquals("Days", periodType1.getName());
      assertEquals("Days", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType1, periodType0);
      assertSame(periodType1, periodType2);
      assertNotSame(periodType2, periodType0);
      assertSame(periodType2, periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = PeriodType.weeks();
      assertEquals(1, periodType3.size());
      assertEquals("Weeks", periodType3.getName());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType1);
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      
      PeriodType periodType4 = PeriodType.millis();
      assertEquals("Millis", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType.HOUR_INDEX = (-1162);
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("MinutesNoMinutes", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      int int0 = periodType1.size();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("MinutesNoMinutes", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals(0, int0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      
      ReadablePeriod readablePeriod0 = null;
      int[] intArray0 = new int[0];
      PeriodType periodType2 = PeriodType.days();
      assertEquals("Days", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = PeriodType.dayTime();
      assertEquals("DayTime", periodType3.getName());
      assertEquals(5, periodType3.size());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      
      PeriodType periodType4 = periodType1.withMillisRemoved();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("MinutesNoMinutes", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertEquals(0, periodType4.size());
      assertEquals("MinutesNoMinutes", periodType4.getName());
      assertNotNull(periodType4);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType3);
      assertSame(periodType1, periodType4);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType2);
      assertSame(periodType4, periodType1);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType2));
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        periodType0.setIndexedField((ReadablePeriod) null, 0, intArray0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType.MONTH_INDEX = (-5774);
      PeriodType periodType1 = PeriodType.yearDay();
      assertEquals("YearDay", periodType1.getName());
      assertEquals(2, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = PeriodType.seconds();
      assertEquals(1, periodType2.size());
      assertEquals("Seconds", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = PeriodType.millis();
      assertEquals(1, periodType3.size());
      assertEquals("Millis", periodType3.getName());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 284;
      intArray0[1] = (-5774);
      // Undeclared exception!
      try { 
        periodType0.setIndexedField((ReadablePeriod) null, 284, intArray0, (-5774));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 284
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.standard();
      assertEquals("Standard", periodType1.getName());
      assertEquals(8, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType.YEAR_INDEX = (-574);
      PeriodType.MINUTE_INDEX = 0;
      PeriodType periodType2 = periodType0.withWeeksRemoved();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(7, periodType2.size());
      assertEquals("YearMonthDayTime", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType2, periodType1);
      assertSame(periodType2, periodType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = PeriodType.months();
      assertEquals("Months", periodType3.getName());
      assertEquals(1, periodType3.size());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      
      PeriodType periodType4 = PeriodType.days();
      assertEquals(1, periodType4.size());
      assertEquals("Days", periodType4.getName());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType2);
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType2));
      
      PeriodType periodType5 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType5.getName());
      assertEquals(7, periodType5.size());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType1);
      assertSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType3);
      assertSame(periodType5, periodType2);
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType3));
      
      // Undeclared exception!
      try { 
        periodType5.getIndexedField((ReadablePeriod) null, (-1857));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1857
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withWeeksRemoved();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(5, periodType1.size());
      assertEquals("DayTime", periodType1.getName());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      PeriodType periodType2 = PeriodType.years();
      assertEquals(1, periodType2.size());
      assertEquals("Years", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType.YEAR_INDEX = 0;
      PeriodType.DAY_INDEX = (-4131);
      PeriodType periodType3 = periodType0.withYearsRemoved();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(5, periodType3.size());
      assertEquals("DayTime", periodType3.getName());
      assertNotNull(periodType3);
      assertSame(periodType0, periodType3);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertSame(periodType3, periodType0);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType2));
      
      PeriodType periodType4 = PeriodType.hours();
      assertEquals(1, periodType4.size());
      assertEquals("Hours", periodType4.getName());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType1);
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType1));
      
      PeriodType periodType5 = PeriodType.days();
      assertEquals(1, periodType5.size());
      assertEquals("Days", periodType5.getName());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType2);
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType2));
      
      PeriodType periodType6 = PeriodType.months();
      assertEquals("Months", periodType6.getName());
      assertEquals(1, periodType6.size());
      assertNotNull(periodType6);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType0);
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType0));
      
      PeriodType periodType7 = PeriodType.yearDayTime();
      assertEquals(6, periodType7.size());
      assertEquals("YearDayTime", periodType7.getName());
      assertNotNull(periodType7);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType5);
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType5));
      
      String string0 = periodType3.getName();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(5, periodType3.size());
      assertEquals("DayTime", periodType3.getName());
      assertNotNull(string0);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType4);
      assertSame(periodType0, periodType3);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType3, periodType5);
      assertNotSame(periodType3, periodType4);
      assertSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType7);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType6);
      assertSame(periodType3, periodType0);
      assertEquals("DayTime", string0);
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType3.equals((Object)periodType5));
      assertFalse(periodType3.equals((Object)periodType4));
      assertFalse(periodType3.equals((Object)periodType7));
      assertFalse(periodType3.equals((Object)periodType6));
      assertFalse(periodType3.equals((Object)periodType2));
      
      PeriodType periodType8 = PeriodType.standard();
      assertEquals(8, periodType8.size());
      assertEquals("Standard", periodType8.getName());
      assertNotNull(periodType8);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType5);
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType5));
      
      PeriodType.HOUR_INDEX = 1063;
      PeriodType periodType9 = PeriodType.years();
      assertEquals("Years", periodType9.getName());
      assertEquals(1, periodType9.size());
      assertNotNull(periodType9);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType0);
      assertSame(periodType9, periodType2);
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType0));
      
      PeriodType periodType10 = periodType9.withYearsRemoved();
      assertEquals("Years", periodType9.getName());
      assertEquals(1, periodType9.size());
      assertEquals(0, periodType10.size());
      assertEquals("YearsNoYears", periodType10.getName());
      assertNotNull(periodType10);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType10);
      assertSame(periodType9, periodType2);
      assertNotSame(periodType10, periodType8);
      assertNotSame(periodType10, periodType0);
      assertNotSame(periodType10, periodType3);
      assertNotSame(periodType10, periodType6);
      assertNotSame(periodType10, periodType9);
      assertNotSame(periodType10, periodType1);
      assertNotSame(periodType10, periodType4);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType5);
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType8));
      assertFalse(periodType10.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType3));
      assertFalse(periodType10.equals((Object)periodType6));
      assertFalse(periodType10.equals((Object)periodType9));
      assertFalse(periodType10.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType5));
      
      String string1 = periodType3.getName();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(5, periodType3.size());
      assertEquals("DayTime", periodType3.getName());
      assertNotNull(string1);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType0, periodType8);
      assertSame(periodType0, periodType3);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType10);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType9);
      assertNotSame(periodType0, periodType7);
      assertNotSame(periodType3, periodType9);
      assertNotSame(periodType3, periodType10);
      assertNotSame(periodType3, periodType5);
      assertNotSame(periodType3, periodType4);
      assertNotSame(periodType3, periodType8);
      assertSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType7);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType6);
      assertSame(periodType3, periodType0);
      assertEquals("DayTime", string1);
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType8));
      assertFalse(periodType0.equals((Object)periodType10));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType9));
      assertFalse(periodType0.equals((Object)periodType7));
      assertFalse(periodType3.equals((Object)periodType9));
      assertFalse(periodType3.equals((Object)periodType10));
      assertFalse(periodType3.equals((Object)periodType5));
      assertFalse(periodType3.equals((Object)periodType4));
      assertFalse(periodType3.equals((Object)periodType8));
      assertFalse(periodType3.equals((Object)periodType7));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType6));
      
      PeriodType periodType11 = PeriodType.days();
      assertEquals(1, periodType11.size());
      assertEquals("Days", periodType11.getName());
      assertNotNull(periodType11);
      assertNotSame(periodType11, periodType9);
      assertNotSame(periodType11, periodType10);
      assertNotSame(periodType11, periodType8);
      assertNotSame(periodType11, periodType0);
      assertNotSame(periodType11, periodType4);
      assertNotSame(periodType11, periodType1);
      assertNotSame(periodType11, periodType7);
      assertNotSame(periodType11, periodType2);
      assertNotSame(periodType11, periodType3);
      assertNotSame(periodType11, periodType6);
      assertSame(periodType11, periodType5);
      assertFalse(periodType11.equals((Object)periodType9));
      assertFalse(periodType11.equals((Object)periodType10));
      assertFalse(periodType11.equals((Object)periodType8));
      assertFalse(periodType11.equals((Object)periodType0));
      assertFalse(periodType11.equals((Object)periodType4));
      assertFalse(periodType11.equals((Object)periodType1));
      assertFalse(periodType11.equals((Object)periodType7));
      assertFalse(periodType11.equals((Object)periodType2));
      assertFalse(periodType11.equals((Object)periodType3));
      assertFalse(periodType11.equals((Object)periodType6));
      
      PeriodType periodType12 = PeriodType.hours();
      assertEquals(1, periodType12.size());
      assertEquals("Hours", periodType12.getName());
      assertNotNull(periodType12);
      assertNotSame(periodType12, periodType6);
      assertNotSame(periodType12, periodType11);
      assertSame(periodType12, periodType4);
      assertNotSame(periodType12, periodType2);
      assertNotSame(periodType12, periodType8);
      assertNotSame(periodType12, periodType1);
      assertNotSame(periodType12, periodType5);
      assertNotSame(periodType12, periodType7);
      assertNotSame(periodType12, periodType3);
      assertNotSame(periodType12, periodType10);
      assertNotSame(periodType12, periodType9);
      assertNotSame(periodType12, periodType0);
      assertFalse(periodType12.equals((Object)periodType6));
      assertFalse(periodType12.equals((Object)periodType11));
      assertFalse(periodType12.equals((Object)periodType2));
      assertFalse(periodType12.equals((Object)periodType8));
      assertFalse(periodType12.equals((Object)periodType5));
      assertFalse(periodType12.equals((Object)periodType1));
      assertFalse(periodType12.equals((Object)periodType7));
      assertFalse(periodType12.equals((Object)periodType3));
      assertFalse(periodType12.equals((Object)periodType10));
      assertFalse(periodType12.equals((Object)periodType9));
      assertFalse(periodType12.equals((Object)periodType0));
      
      PeriodType periodType13 = PeriodType.yearMonthDay();
      assertEquals("YearMonthDay", periodType13.getName());
      assertEquals(3, periodType13.size());
      assertNotNull(periodType13);
      assertNotSame(periodType13, periodType5);
      assertNotSame(periodType13, periodType3);
      assertNotSame(periodType13, periodType9);
      assertNotSame(periodType13, periodType11);
      assertNotSame(periodType13, periodType8);
      assertNotSame(periodType13, periodType12);
      assertNotSame(periodType13, periodType1);
      assertNotSame(periodType13, periodType7);
      assertNotSame(periodType13, periodType10);
      assertNotSame(periodType13, periodType0);
      assertNotSame(periodType13, periodType4);
      assertNotSame(periodType13, periodType6);
      assertNotSame(periodType13, periodType2);
      assertFalse(periodType13.equals((Object)periodType5));
      assertFalse(periodType13.equals((Object)periodType3));
      assertFalse(periodType13.equals((Object)periodType9));
      assertFalse(periodType13.equals((Object)periodType11));
      assertFalse(periodType13.equals((Object)periodType8));
      assertFalse(periodType13.equals((Object)periodType12));
      assertFalse(periodType13.equals((Object)periodType1));
      assertFalse(periodType13.equals((Object)periodType7));
      assertFalse(periodType13.equals((Object)periodType10));
      assertFalse(periodType13.equals((Object)periodType0));
      assertFalse(periodType13.equals((Object)periodType4));
      assertFalse(periodType13.equals((Object)periodType6));
      assertFalse(periodType13.equals((Object)periodType2));
      
      // Undeclared exception!
      try { 
        periodType7.getFieldType(2249);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2249
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(6, periodType1.size());
      assertEquals("YearMonthDayTimeNoHours", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      assertNotSame(periodType0, periodType1);
      assertFalse(periodType0.equals((Object)periodType1));
      
      int int0 = periodType1.indexOf(durationFieldType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(6, periodType1.size());
      assertEquals("YearMonthDayTimeNoHours", periodType1.getName());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertEquals(0, int0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType.YEAR_INDEX = 0;
      PeriodType.HOUR_INDEX = 1775;
      PeriodType periodType1 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType1.size());
      assertEquals("YearWeekDayTime", periodType1.getName());
      assertNotNull(periodType1);
      assertSame(periodType1, periodType0);
      
      PeriodType periodType2 = PeriodType.yearWeekDay();
      assertEquals("YearWeekDay", periodType2.getName());
      assertEquals(3, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType3.getName());
      assertEquals(7, periodType3.size());
      assertNotNull(periodType3);
      assertSame(periodType3, periodType0);
      assertSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertFalse(periodType3.equals((Object)periodType2));
      
      String string0 = periodType2.getName();
      assertEquals("YearWeekDay", periodType2.getName());
      assertEquals(3, periodType2.size());
      assertNotNull(string0);
      assertNotSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertEquals("YearWeekDay", string0);
      assertFalse(periodType2.equals((Object)periodType3));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType4 = PeriodType.years();
      assertEquals("Years", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType1);
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType1));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.seconds();
      assertEquals(1, periodType1.size());
      assertEquals("Seconds", periodType1.getName());
      assertNotNull(periodType1);
      assertSame(periodType1, periodType0);
      
      PeriodType periodType2 = periodType0.withWeeksRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType2.size());
      assertEquals("Seconds", periodType2.getName());
      assertNotNull(periodType2);
      assertSame(periodType0, periodType1);
      assertSame(periodType0, periodType2);
      assertSame(periodType2, periodType0);
      assertSame(periodType2, periodType1);
      
      PeriodType periodType3 = periodType0.withSecondsRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals("SecondsNoSeconds", periodType3.getName());
      assertEquals(0, periodType3.size());
      assertNotNull(periodType3);
      assertSame(periodType0, periodType1);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      
      PeriodType periodType4 = PeriodType.hours();
      assertEquals("Hours", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType3);
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType3));
      
      PeriodType periodType5 = PeriodType.days();
      assertEquals(1, periodType5.size());
      assertEquals("Days", periodType5.getName());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType3);
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType3));
      
      PeriodType.SECOND_INDEX = (-3043);
      PeriodType periodType6 = PeriodType.weeks();
      assertEquals(1, periodType6.size());
      assertEquals("Weeks", periodType6.getName());
      assertNotNull(periodType6);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType0);
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType0));
      
      String string0 = periodType0.toString();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(string0);
      assertNotSame(periodType0, periodType4);
      assertSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType6);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType3);
      assertEquals("PeriodType[Seconds]", string0);
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType3));
      
      PeriodType periodType7 = PeriodType.years();
      assertEquals("Years", periodType7.getName());
      assertEquals(1, periodType7.size());
      assertNotNull(periodType7);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType3);
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType3));
      
      PeriodType periodType8 = PeriodType.hours();
      assertEquals("Hours", periodType8.getName());
      assertEquals(1, periodType8.size());
      assertNotNull(periodType8);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType7);
      assertSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType3);
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType3));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertEquals("DayTime", periodType1.getName());
      assertEquals(5, periodType1.size());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      DurationFieldType durationFieldType0 = periodType1.getFieldType(0);
      assertEquals(5, periodType0.size());
      assertEquals("DayTime", periodType0.getName());
      assertEquals("DayTime", periodType1.getName());
      assertEquals(5, periodType1.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType2 = PeriodType.yearMonthDay();
      assertEquals("YearMonthDay", periodType2.getName());
      assertEquals(3, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      DurationFieldType durationFieldType1 = periodType2.getFieldType(0);
      assertEquals("YearMonthDay", periodType2.getName());
      assertEquals(3, periodType2.size());
      assertEquals("years", durationFieldType1.toString());
      assertEquals("years", durationFieldType1.getName());
      assertNotNull(durationFieldType1);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertNotSame(durationFieldType1, durationFieldType0);
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      
      durationFieldTypeArray0[1] = durationFieldType1;
      PeriodType periodType3 = new PeriodType("DsE", durationFieldTypeArray0, (int[]) null);
      assertEquals(2, periodType3.size());
      assertEquals("DsE", periodType3.getName());
      assertNotNull(periodType3);
      assertEquals(2, durationFieldTypeArray0.length);
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.yearWeekDay();
      assertEquals("YearWeekDay", periodType1.getName());
      assertEquals(3, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType2.size());
      assertEquals("YearMonthDayTime", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType.MONTH_INDEX = 0;
      PeriodType periodType3 = periodType2.withYearsRemoved();
      assertEquals(7, periodType2.size());
      assertEquals("YearMonthDayTime", periodType2.getName());
      assertEquals("YearMonthDayTimeNoYears", periodType3.getName());
      assertEquals(6, periodType3.size());
      assertNotNull(periodType3);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType3);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      
      PeriodType periodType4 = PeriodType.dayTime();
      assertEquals(5, periodType4.size());
      assertEquals("DayTime", periodType4.getName());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType2);
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType2));
      
      PeriodType periodType5 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType5.getName());
      assertEquals(7, periodType5.size());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType3);
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType3));
      
      PeriodType periodType6 = PeriodType.dayTime();
      assertEquals(5, periodType6.size());
      assertEquals("DayTime", periodType6.getName());
      assertNotNull(periodType6);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType5);
      assertSame(periodType6, periodType4);
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType5));
      
      PeriodType periodType7 = PeriodType.time();
      assertEquals("Time", periodType7.getName());
      assertEquals(4, periodType7.size());
      assertNotNull(periodType7);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType6);
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType6));
      
      PeriodType periodType8 = periodType7.withMillisRemoved();
      assertEquals("Time", periodType7.getName());
      assertEquals(4, periodType7.size());
      assertEquals(3, periodType8.size());
      assertEquals("TimeNoMillis", periodType8.getName());
      assertNotNull(periodType8);
      assertNotSame(periodType7, periodType4);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType8);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType2);
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType2));
      
      PeriodType periodType9 = periodType1.withHoursRemoved();
      assertEquals("YearWeekDay", periodType1.getName());
      assertEquals(3, periodType1.size());
      assertEquals(3, periodType9.size());
      assertEquals("YearWeekDay", periodType9.getName());
      assertNotNull(periodType9);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType8);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType5);
      assertSame(periodType1, periodType9);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType6);
      assertSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType3);
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType8));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType3));
      
      PeriodType periodType10 = periodType6.withHoursRemoved();
      assertEquals(5, periodType6.size());
      assertEquals("DayTime", periodType6.getName());
      assertEquals(4, periodType10.size());
      assertEquals("DayTimeNoHours", periodType10.getName());
      assertNotNull(periodType10);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType9);
      assertNotSame(periodType6, periodType8);
      assertNotSame(periodType6, periodType10);
      assertSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType7);
      assertNotSame(periodType10, periodType9);
      assertNotSame(periodType10, periodType1);
      assertNotSame(periodType10, periodType2);
      assertNotSame(periodType10, periodType4);
      assertNotSame(periodType10, periodType0);
      assertNotSame(periodType10, periodType7);
      assertNotSame(periodType10, periodType3);
      assertNotSame(periodType10, periodType5);
      assertNotSame(periodType10, periodType6);
      assertNotSame(periodType10, periodType8);
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType9));
      assertFalse(periodType6.equals((Object)periodType8));
      assertFalse(periodType6.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType9));
      assertFalse(periodType10.equals((Object)periodType1));
      assertFalse(periodType10.equals((Object)periodType2));
      assertFalse(periodType10.equals((Object)periodType4));
      assertFalse(periodType10.equals((Object)periodType0));
      assertFalse(periodType10.equals((Object)periodType7));
      assertFalse(periodType10.equals((Object)periodType3));
      assertFalse(periodType10.equals((Object)periodType5));
      assertFalse(periodType10.equals((Object)periodType6));
      assertFalse(periodType10.equals((Object)periodType8));
      
      PeriodType periodType11 = periodType1.withMonthsRemoved();
      assertEquals("YearWeekDay", periodType1.getName());
      assertEquals(3, periodType1.size());
      assertEquals("YearWeekDay", periodType11.getName());
      assertEquals(3, periodType11.size());
      assertNotNull(periodType11);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType10);
      assertNotSame(periodType1, periodType8);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType6);
      assertSame(periodType1, periodType11);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType5);
      assertSame(periodType1, periodType9);
      assertNotSame(periodType11, periodType2);
      assertSame(periodType11, periodType9);
      assertNotSame(periodType11, periodType5);
      assertNotSame(periodType11, periodType4);
      assertNotSame(periodType11, periodType6);
      assertNotSame(periodType11, periodType0);
      assertNotSame(periodType11, periodType3);
      assertSame(periodType11, periodType1);
      assertNotSame(periodType11, periodType8);
      assertNotSame(periodType11, periodType10);
      assertNotSame(periodType11, periodType7);
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType10));
      assertFalse(periodType1.equals((Object)periodType8));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType11.equals((Object)periodType2));
      assertFalse(periodType11.equals((Object)periodType5));
      assertFalse(periodType11.equals((Object)periodType4));
      assertFalse(periodType11.equals((Object)periodType6));
      assertFalse(periodType11.equals((Object)periodType0));
      assertFalse(periodType11.equals((Object)periodType3));
      assertFalse(periodType11.equals((Object)periodType8));
      assertFalse(periodType11.equals((Object)periodType10));
      assertFalse(periodType11.equals((Object)periodType7));
      
      PeriodType periodType12 = periodType5.withSecondsRemoved();
      assertEquals("YearWeekDayTime", periodType5.getName());
      assertEquals(7, periodType5.size());
      assertEquals(6, periodType12.size());
      assertEquals("YearWeekDayTimeNoSeconds", periodType12.getName());
      assertNotNull(periodType12);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType9);
      assertNotSame(periodType5, periodType10);
      assertNotSame(periodType5, periodType11);
      assertNotSame(periodType5, periodType12);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType7);
      assertNotSame(periodType5, periodType6);
      assertNotSame(periodType5, periodType8);
      assertNotSame(periodType12, periodType6);
      assertNotSame(periodType12, periodType5);
      assertNotSame(periodType12, periodType7);
      assertNotSame(periodType12, periodType3);
      assertNotSame(periodType12, periodType4);
      assertNotSame(periodType12, periodType0);
      assertNotSame(periodType12, periodType11);
      assertNotSame(periodType12, periodType10);
      assertNotSame(periodType12, periodType2);
      assertNotSame(periodType12, periodType1);
      assertNotSame(periodType12, periodType8);
      assertNotSame(periodType12, periodType9);
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType9));
      assertFalse(periodType5.equals((Object)periodType10));
      assertFalse(periodType5.equals((Object)periodType11));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType7));
      assertFalse(periodType5.equals((Object)periodType6));
      assertFalse(periodType5.equals((Object)periodType8));
      assertFalse(periodType12.equals((Object)periodType6));
      assertFalse(periodType12.equals((Object)periodType5));
      assertFalse(periodType12.equals((Object)periodType7));
      assertFalse(periodType12.equals((Object)periodType3));
      assertFalse(periodType12.equals((Object)periodType4));
      assertFalse(periodType12.equals((Object)periodType0));
      assertFalse(periodType12.equals((Object)periodType11));
      assertFalse(periodType12.equals((Object)periodType10));
      assertFalse(periodType12.equals((Object)periodType2));
      assertFalse(periodType12.equals((Object)periodType1));
      assertFalse(periodType12.equals((Object)periodType8));
      assertFalse(periodType12.equals((Object)periodType9));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withWeeksRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Months", periodType1.getName());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        periodType0.addIndexedField((ReadablePeriod) null, 0, intArray0, 75);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals("DaysNoDays", periodType1.getName());
      assertEquals(0, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = periodType0.withYearsRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType2.size());
      assertEquals("Days", periodType2.getName());
      assertNotNull(periodType2);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType2, periodType1);
      assertSame(periodType2, periodType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = periodType0.withMonthsRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType3.size());
      assertEquals("Days", periodType3.getName());
      assertNotNull(periodType3);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType3, periodType1);
      assertSame(periodType3, periodType2);
      assertSame(periodType3, periodType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType1));
      
      PeriodType periodType4 = PeriodType.yearDayTime();
      assertEquals("YearDayTime", periodType4.getName());
      assertEquals(6, periodType4.size());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType0);
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType0));
      
      PeriodType periodType5 = periodType3.withDaysRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType3.size());
      assertEquals("Days", periodType3.getName());
      assertEquals("DaysNoDays", periodType5.getName());
      assertEquals(0, periodType5.size());
      assertNotNull(periodType5);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType5);
      assertSame(periodType3, periodType2);
      assertSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType4);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType4));
      assertTrue(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType4));
      
      PeriodType periodType6 = periodType5.withMillisRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType3.size());
      assertEquals("Days", periodType3.getName());
      assertEquals("DaysNoDays", periodType5.getName());
      assertEquals(0, periodType5.size());
      assertEquals("DaysNoDays", periodType6.getName());
      assertEquals(0, periodType6.size());
      assertNotNull(periodType6);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType5);
      assertNotSame(periodType0, periodType4);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType6);
      assertNotSame(periodType3, periodType5);
      assertSame(periodType3, periodType2);
      assertSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType4);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType1);
      assertSame(periodType5, periodType6);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType1);
      assertSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType2);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType5));
      assertFalse(periodType3.equals((Object)periodType4));
      assertTrue(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType3));
      assertTrue(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType2));
      
      PeriodType.YEAR_INDEX = (-1525);
      PeriodType periodType7 = periodType0.withHoursRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals("Days", periodType7.getName());
      assertEquals(1, periodType7.size());
      assertNotNull(periodType7);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType6);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType5);
      assertSame(periodType0, periodType7);
      assertNotSame(periodType0, periodType4);
      assertSame(periodType7, periodType3);
      assertSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType4);
      assertSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType5);
      assertFalse(periodType0.equals((Object)periodType6));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType5));
      assertFalse(periodType0.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType4));
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType6));
      
      PeriodType periodType8 = PeriodType.hours();
      assertEquals(1, periodType8.size());
      assertEquals("Hours", periodType8.getName());
      assertNotNull(periodType8);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType0);
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType0));
      
      PeriodType periodType9 = PeriodType.dayTime();
      assertEquals(5, periodType9.size());
      assertEquals("DayTime", periodType9.getName());
      assertNotNull(periodType9);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType4);
      assertNotSame(periodType9, periodType2);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType6);
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType4));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType1));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType6));
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        periodType2.addIndexedField((ReadablePeriod) null, 0, intArray0, 7);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      String string0 = periodType0.toString();
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(string0);
      assertEquals("PeriodType[Years]", string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-478);
      // Undeclared exception!
      try { 
        periodType0.addIndexedField((ReadablePeriod) null, 14, intArray0, (-662));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      DurationFieldType durationFieldType0 = periodType1.getFieldType(0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertEquals("Millis", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.dayTime();
      assertEquals("DayTime", periodType1.getName());
      assertEquals(5, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      periodType0.hashCode();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotSame(periodType0, periodType1);
      assertFalse(periodType0.equals((Object)periodType1));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.hours();
      assertEquals(1, periodType1.size());
      assertEquals("Hours", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      periodType0.hashCode();
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotSame(periodType0, periodType1);
      assertFalse(periodType0.equals((Object)periodType1));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Minutes", periodType1.getName());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      PeriodType periodType2 = periodType1.withDaysRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Minutes", periodType1.getName());
      assertEquals("Minutes", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertNotNull(periodType2);
      assertSame(periodType0, periodType1);
      assertSame(periodType0, periodType2);
      assertSame(periodType1, periodType2);
      assertSame(periodType1, periodType0);
      assertSame(periodType2, periodType0);
      assertSame(periodType2, periodType1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals("Weeks", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withWeeksRemoved();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals("StandardNoWeeks", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType.MONTH_INDEX = (-2467);
      PeriodType.MINUTE_INDEX = 6;
      PeriodType periodType2 = PeriodType.days();
      assertEquals("Days", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = periodType2.withHoursRemoved();
      assertEquals("Days", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertEquals(1, periodType3.size());
      assertEquals("Days", periodType3.getName());
      assertNotNull(periodType3);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertSame(periodType2, periodType3);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertSame(periodType3, periodType2);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      
      PeriodType periodType4 = periodType2.withSecondsRemoved();
      assertEquals("Days", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertEquals(1, periodType4.size());
      assertEquals("Days", periodType4.getName());
      assertNotNull(periodType4);
      assertNotSame(periodType2, periodType1);
      assertSame(periodType2, periodType4);
      assertNotSame(periodType2, periodType0);
      assertSame(periodType2, periodType3);
      assertNotSame(periodType4, periodType1);
      assertSame(periodType4, periodType2);
      assertSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType0));
      
      String string0 = periodType0.toString();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(string0);
      assertNotSame(periodType0, periodType3);
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType0, periodType4);
      assertEquals("PeriodType[Standard]", string0);
      assertFalse(periodType0.equals((Object)periodType3));
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType0.equals((Object)periodType4));
      
      PeriodType periodType5 = PeriodType.months();
      assertEquals(1, periodType5.size());
      assertEquals("Months", periodType5.getName());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType1);
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType1));
      
      // Undeclared exception!
      try { 
        periodType2.getFieldType(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(2, periodType1.size());
      assertEquals("YearWeekDayNoYears", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType2.size());
      assertEquals("YearWeekDayTime", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      boolean boolean0 = periodType0.equals(periodType1);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(2, periodType1.size());
      assertEquals("YearWeekDayNoYears", periodType1.getName());
      assertNotSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertFalse(boolean0);
      assertFalse(periodType0.equals((Object)periodType2));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.time();
      assertEquals("Time", periodType1.getName());
      assertEquals(4, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = periodType0.withSecondsRemoved();
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertEquals(2, periodType2.size());
      assertEquals("YearDay", periodType2.getName());
      assertNotNull(periodType2);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType1));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals("Months", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withWeeksRemoved();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
      assertSame(periodType0, periodType1);
      assertSame(periodType1, periodType0);
      
      PeriodType periodType2 = PeriodType.dayTime();
      assertEquals("DayTime", periodType2.getName());
      assertEquals(5, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      String string0 = periodType0.toString();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(string0);
      assertNotSame(periodType0, periodType2);
      assertSame(periodType0, periodType1);
      assertEquals("PeriodType[Seconds]", string0);
      assertFalse(periodType0.equals((Object)periodType2));
      
      PeriodType periodType3 = PeriodType.yearDay();
      assertEquals(2, periodType3.size());
      assertEquals("YearDay", periodType3.getName());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.days();
      assertEquals("Days", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType.DAY_INDEX = 0;
      PeriodType periodType2 = PeriodType.time();
      assertEquals(4, periodType2.size());
      assertEquals("Time", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals("StandardNoMillis", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertNotNull(periodType0);
      
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      int int0 = 0;
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType1 = PeriodType.time();
      assertEquals("Time", periodType1.getName());
      assertEquals(4, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      durationFieldTypeArray0[1] = durationFieldType0;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [years]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.millis();
      assertEquals(1, periodType1.size());
      assertEquals("Millis", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType.HOUR_INDEX = 20;
      PeriodType.MINUTE_INDEX = 0;
      PeriodType periodType2 = PeriodType.yearDay();
      assertEquals("YearDay", periodType2.getName());
      assertEquals(2, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = PeriodType.yearDayTime();
      assertEquals(6, periodType3.size());
      assertEquals("YearDayTime", periodType3.getName());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      
      PeriodType periodType4 = PeriodType.months();
      assertEquals(1, periodType4.size());
      assertEquals("Months", periodType4.getName());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType3);
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType3));
      
      PeriodType periodType5 = PeriodType.time();
      assertEquals(4, periodType5.size());
      assertEquals("Time", periodType5.getName());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType3);
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType2));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType3));
      
      PeriodType periodType6 = PeriodType.weeks();
      assertEquals("Weeks", periodType6.getName());
      assertEquals(1, periodType6.size());
      assertNotNull(periodType6);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType2);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType3);
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType2));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType3));
      
      PeriodType periodType7 = PeriodType.months();
      assertEquals("Months", periodType7.getName());
      assertEquals(1, periodType7.size());
      assertNotNull(periodType7);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType1);
      assertSame(periodType7, periodType4);
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType1));
      
      int int0 = periodType1.getIndexedField((ReadablePeriod) null, 0);
      assertEquals(1, periodType1.size());
      assertEquals("Millis", periodType1.getName());
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType5);
      assertEquals(0, int0);
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType5));
      
      PeriodType periodType8 = PeriodType.days();
      assertEquals(1, periodType8.size());
      assertEquals("Days", periodType8.getName());
      assertNotNull(periodType8);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType7);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType5);
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType7));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType5));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 20;
      intArray0[2] = 20;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 20;
      boolean boolean0 = periodType4.addIndexedField((ReadablePeriod) null, 20, intArray0, 0);
      assertEquals(1, periodType4.size());
      assertEquals("Months", periodType4.getName());
      assertNotSame(periodType4, periodType6);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType5);
      assertNotSame(periodType4, periodType0);
      assertSame(periodType4, periodType7);
      assertNotSame(periodType4, periodType8);
      assertNotSame(periodType4, periodType3);
      assertArrayEquals(new int[] {0, 20, 20, 0, 0, 0, 0, 0, 20}, intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(boolean0);
      assertFalse(periodType4.equals((Object)periodType6));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType5));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType8));
      assertFalse(periodType4.equals((Object)periodType3));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.days();
      assertEquals("Days", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = PeriodType.standard();
      assertEquals(8, periodType2.size());
      assertEquals("Standard", periodType2.getName());
      assertNotNull(periodType2);
      assertSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = PeriodType.months();
      assertEquals(1, periodType3.size());
      assertEquals("Months", periodType3.getName());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType0));
      
      PeriodType periodType4 = PeriodType.standard();
      assertEquals("Standard", periodType4.getName());
      assertEquals(8, periodType4.size());
      assertNotNull(periodType4);
      assertSame(periodType4, periodType2);
      assertSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      
      PeriodType.YEAR_INDEX = (-3517);
      PeriodType periodType5 = PeriodType.dayTime();
      assertEquals("DayTime", periodType5.getName());
      assertEquals(5, periodType5.size());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType4);
      assertNotSame(periodType5, periodType3);
      assertNotSame(periodType5, periodType1);
      assertNotSame(periodType5, periodType2);
      assertFalse(periodType5.equals((Object)periodType0));
      assertFalse(periodType5.equals((Object)periodType4));
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType2));
      
      PeriodType periodType6 = PeriodType.weeks();
      assertEquals("Weeks", periodType6.getName());
      assertEquals(1, periodType6.size());
      assertNotNull(periodType6);
      assertNotSame(periodType6, periodType1);
      assertNotSame(periodType6, periodType4);
      assertNotSame(periodType6, periodType0);
      assertNotSame(periodType6, periodType3);
      assertNotSame(periodType6, periodType5);
      assertNotSame(periodType6, periodType2);
      assertFalse(periodType6.equals((Object)periodType1));
      assertFalse(periodType6.equals((Object)periodType4));
      assertFalse(periodType6.equals((Object)periodType0));
      assertFalse(periodType6.equals((Object)periodType3));
      assertFalse(periodType6.equals((Object)periodType5));
      assertFalse(periodType6.equals((Object)periodType2));
      
      PeriodType periodType7 = PeriodType.minutes();
      assertEquals(1, periodType7.size());
      assertEquals("Minutes", periodType7.getName());
      assertNotNull(periodType7);
      assertNotSame(periodType7, periodType1);
      assertNotSame(periodType7, periodType3);
      assertNotSame(periodType7, periodType2);
      assertNotSame(periodType7, periodType5);
      assertNotSame(periodType7, periodType0);
      assertNotSame(periodType7, periodType6);
      assertNotSame(periodType7, periodType4);
      assertFalse(periodType7.equals((Object)periodType1));
      assertFalse(periodType7.equals((Object)periodType3));
      assertFalse(periodType7.equals((Object)periodType2));
      assertFalse(periodType7.equals((Object)periodType5));
      assertFalse(periodType7.equals((Object)periodType0));
      assertFalse(periodType7.equals((Object)periodType6));
      assertFalse(periodType7.equals((Object)periodType4));
      
      PeriodType periodType8 = PeriodType.millis();
      assertEquals("Millis", periodType8.getName());
      assertEquals(1, periodType8.size());
      assertNotNull(periodType8);
      assertNotSame(periodType8, periodType3);
      assertNotSame(periodType8, periodType1);
      assertNotSame(periodType8, periodType0);
      assertNotSame(periodType8, periodType4);
      assertNotSame(periodType8, periodType6);
      assertNotSame(periodType8, periodType5);
      assertNotSame(periodType8, periodType2);
      assertNotSame(periodType8, periodType7);
      assertFalse(periodType8.equals((Object)periodType3));
      assertFalse(periodType8.equals((Object)periodType1));
      assertFalse(periodType8.equals((Object)periodType0));
      assertFalse(periodType8.equals((Object)periodType4));
      assertFalse(periodType8.equals((Object)periodType6));
      assertFalse(periodType8.equals((Object)periodType5));
      assertFalse(periodType8.equals((Object)periodType2));
      assertFalse(periodType8.equals((Object)periodType7));
      
      PeriodType.DAY_INDEX = (-3517);
      PeriodType periodType9 = periodType1.withSecondsRemoved();
      assertEquals("Days", periodType1.getName());
      assertEquals(1, periodType1.size());
      assertEquals("Days", periodType9.getName());
      assertEquals(1, periodType9.size());
      assertNotNull(periodType9);
      assertNotSame(periodType1, periodType6);
      assertNotSame(periodType1, periodType7);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType5);
      assertNotSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType3);
      assertSame(periodType1, periodType9);
      assertNotSame(periodType1, periodType8);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType9, periodType8);
      assertNotSame(periodType9, periodType0);
      assertNotSame(periodType9, periodType7);
      assertNotSame(periodType9, periodType3);
      assertNotSame(periodType9, periodType5);
      assertNotSame(periodType9, periodType2);
      assertSame(periodType9, periodType1);
      assertNotSame(periodType9, periodType6);
      assertNotSame(periodType9, periodType4);
      assertFalse(periodType1.equals((Object)periodType6));
      assertFalse(periodType1.equals((Object)periodType7));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType5));
      assertFalse(periodType1.equals((Object)periodType4));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType1.equals((Object)periodType8));
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType8));
      assertFalse(periodType9.equals((Object)periodType0));
      assertFalse(periodType9.equals((Object)periodType7));
      assertFalse(periodType9.equals((Object)periodType3));
      assertFalse(periodType9.equals((Object)periodType5));
      assertFalse(periodType9.equals((Object)periodType2));
      assertFalse(periodType9.equals((Object)periodType6));
      assertFalse(periodType9.equals((Object)periodType4));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-3517);
      intArray0[1] = (-3517);
      intArray0[2] = 0;
      intArray0[3] = (-3517);
      intArray0[4] = (-3517);
      intArray0[5] = (-3517);
      intArray0[6] = (-3517);
      intArray0[7] = (-3517);
      intArray0[8] = 0;
      boolean boolean0 = periodType2.addIndexedField((ReadablePeriod) null, 0, intArray0, (-3517));
      assertEquals(8, periodType2.size());
      assertEquals("Standard", periodType2.getName());
      assertNotSame(periodType2, periodType9);
      assertNotSame(periodType2, periodType5);
      assertSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType7);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType8);
      assertSame(periodType2, periodType4);
      assertNotSame(periodType2, periodType3);
      assertNotSame(periodType2, periodType6);
      assertArrayEquals(new int[] {(-7034), (-3517), 0, (-3517), (-3517), (-3517), (-3517), (-3517), 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(boolean0);
      assertFalse(periodType2.equals((Object)periodType9));
      assertFalse(periodType2.equals((Object)periodType5));
      assertFalse(periodType2.equals((Object)periodType7));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType8));
      assertFalse(periodType2.equals((Object)periodType3));
      assertFalse(periodType2.equals((Object)periodType6));
      
      // Undeclared exception!
      try { 
        periodType9.addIndexedField((ReadablePeriod) null, 1, intArray0, (-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = PeriodType.millis();
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(periodType0);
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = periodType0.getFieldType(0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertEquals("millis", durationFieldType1.toString());
      assertEquals("millis", durationFieldType1.getName());
      assertNotNull(durationFieldType1);
      assertSame(durationFieldType1, durationFieldType0);
      
      durationFieldTypeArray0[1] = durationFieldType1;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [millis]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = PeriodType.millis();
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.hours();
      assertEquals(1, periodType1.size());
      assertEquals("Hours", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = PeriodType.minutes();
      assertEquals(1, periodType2.size());
      assertEquals("Minutes", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      
      PeriodType periodType3 = PeriodType.days();
      assertEquals("Days", periodType3.getName());
      assertEquals(1, periodType3.size());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[2];
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = periodType0.getFieldType(0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("seconds", durationFieldType1.toString());
      assertEquals("seconds", durationFieldType1.getName());
      assertNotNull(durationFieldType1);
      assertSame(durationFieldType1, durationFieldType0);
      
      durationFieldTypeArray0[1] = durationFieldType1;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [seconds]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.standard();
      assertEquals(8, periodType1.size());
      assertEquals("Standard", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType.MINUTE_INDEX = 0;
      PeriodType periodType2 = periodType0.withWeeksRemoved();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType2.getName());
      assertEquals(7, periodType2.size());
      assertNotNull(periodType2);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType2, periodType1);
      assertSame(periodType2, periodType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = PeriodType.months();
      assertEquals(1, periodType3.size());
      assertEquals("Months", periodType3.getName());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertFalse(periodType3.equals((Object)periodType1));
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      
      PeriodType periodType4 = PeriodType.days();
      assertEquals(1, periodType4.size());
      assertEquals("Days", periodType4.getName());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType0);
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType0));
      
      PeriodType periodType5 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType5.size());
      assertEquals("YearMonthDayTime", periodType5.getName());
      assertNotNull(periodType5);
      assertNotSame(periodType5, periodType3);
      assertSame(periodType5, periodType0);
      assertNotSame(periodType5, periodType1);
      assertSame(periodType5, periodType2);
      assertNotSame(periodType5, periodType4);
      assertFalse(periodType5.equals((Object)periodType3));
      assertFalse(periodType5.equals((Object)periodType1));
      assertFalse(periodType5.equals((Object)periodType4));
      
      // Undeclared exception!
      try { 
        periodType5.getIndexedField((ReadablePeriod) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.standard();
      assertEquals(8, periodType1.size());
      assertEquals("Standard", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = periodType1.withMonthsRemoved();
      assertEquals(8, periodType1.size());
      assertEquals("Standard", periodType1.getName());
      assertEquals(7, periodType2.size());
      assertEquals("StandardNoMonths", periodType2.getName());
      assertNotNull(periodType2);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType2, periodType0);
      assertNotSame(periodType2, periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType0));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType3.getName());
      assertEquals(7, periodType3.size());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType1);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType2);
      assertFalse(periodType3.equals((Object)periodType1));
      assertTrue(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      
      PeriodType periodType4 = PeriodType.weeks();
      assertEquals("Weeks", periodType4.getName());
      assertEquals(1, periodType4.size());
      assertNotNull(periodType4);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType3);
      assertNotSame(periodType4, periodType1);
      assertNotSame(periodType4, periodType0);
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType1));
      assertFalse(periodType4.equals((Object)periodType0));
      
      // Undeclared exception!
      try { 
        PeriodType.forFields((DurationFieldType[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.time();
      assertEquals(4, periodType1.size());
      assertEquals("Time", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[0] = 7;
      intArray0[3] = 7;
      intArray0[4] = 7;
      intArray0[5] = 7;
      intArray0[6] = 7;
      intArray0[7] = 7;
      intArray0[8] = 7;
      boolean boolean0 = periodType1.setIndexedField((ReadablePeriod) null, 7, intArray0, 0);
      assertEquals(4, periodType1.size());
      assertEquals("Time", periodType1.getName());
      assertNotSame(periodType1, periodType0);
      assertArrayEquals(new int[] {7, 7, 0, 0, 7, 7, 7, 7, 7}, intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(boolean0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      PeriodType periodType2 = periodType0.withMonthsRemoved();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType2.getName());
      assertEquals(1, periodType2.size());
      assertNotNull(periodType2);
      assertNotSame(periodType0, periodType1);
      assertSame(periodType0, periodType2);
      assertNotSame(periodType2, periodType1);
      assertSame(periodType2, periodType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType1));
      
      PeriodType periodType3 = PeriodType.years();
      assertEquals(1, periodType3.size());
      assertEquals("Years", periodType3.getName());
      assertNotNull(periodType3);
      assertNotSame(periodType3, periodType2);
      assertNotSame(periodType3, periodType0);
      assertNotSame(periodType3, periodType1);
      assertFalse(periodType3.equals((Object)periodType2));
      assertFalse(periodType3.equals((Object)periodType0));
      assertFalse(periodType3.equals((Object)periodType1));
      
      PeriodType periodType4 = periodType1.withMonthsRemoved();
      assertEquals(4, periodType1.size());
      assertEquals("Time", periodType1.getName());
      assertEquals("Time", periodType4.getName());
      assertEquals(4, periodType4.size());
      assertNotNull(periodType4);
      assertNotSame(periodType1, periodType2);
      assertSame(periodType1, periodType4);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType3);
      assertNotSame(periodType4, periodType0);
      assertNotSame(periodType4, periodType2);
      assertNotSame(periodType4, periodType3);
      assertSame(periodType4, periodType1);
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType1.equals((Object)periodType3));
      assertFalse(periodType4.equals((Object)periodType0));
      assertFalse(periodType4.equals((Object)periodType2));
      assertFalse(periodType4.equals((Object)periodType3));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      PeriodType periodType1 = PeriodType.months();
      assertEquals(1, periodType1.size());
      assertEquals("Months", periodType1.getName());
      assertNotNull(periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType1.equals((Object)periodType0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[0] = 7;
      intArray0[3] = 7;
      intArray0[5] = 7;
      intArray0[6] = 7;
      intArray0[7] = 7;
      intArray0[8] = 7;
      // Undeclared exception!
      try { 
        periodType1.setIndexedField((ReadablePeriod) null, 7, intArray0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }
}
